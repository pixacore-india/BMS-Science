function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;
        if (!u && a) return a(o, !0);
        if (i) return i(o, !0);
        throw new Error("Cannot find module '" + o + "'");
      }

      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function (e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, f, f.exports, e, t, n, r);
    }

    return n[o].exports;
  }

  var i = typeof require == "function" && require;

  for (var o = 0; o < r.length; o++) {
    s(r[o]);
  }

  return s;
}({
  1: [function (require, module, exports) {
    var LocationFilter = require("./filters/location");

    var UTILITY = require("./utility");

    var advancedSearch = function advancedSearch() {
      var $ = jQuery;
      var container = $(".advanceSearchCont");
      var oldValue = [];
      var addOtherField = container.find('.addOtherField');
      var selectedTypes = [];
      var customCount = container.find('.customSelect').length;
      var dateValue = '';
      var startDate = '';
      var endDate = '';
      var locationFilter;
      container.find('.customSelect').val('');
      container.find('.selector span').text('All Fields');
      container.find('.type-customSelect input').val('');
      container.on("change", ".customSelect", function (e) {
        addCustomSelectListener(e);
      });
      container.on("click", ".addField", function (e) {
        addField(e);
      });
      container.on("click", ".removeField", function (e) {
        if (!addOtherField.html()) {
          addOtherField.html("<a href=\"#\" class=\"addField\">Add another field</a>");
        }

        removeField(e);
      });
      var allFieldOptions = initAutoComplete("/wp-json/boldsci/v1/search/search_param/?s=");
      var searchConditionsOptions = initAutoComplete("/wp-json/boldsci/v1/search/search_param/?s=", "conditions");
      var searchInterventionsOptions = initAutoComplete("/wp-json/boldsci/v1/search/search_param/?s=", "interventions");

      var addField = function addField(e) {
        e.preventDefault();
        customCount = customCount + 1;
        var options = ['Condition', 'Other terms', 'Study types', 'Study results', 'Status recruitment', 'Expanded access', 'Age', 'Age group', 'Sex', 'Accepts healthy volunteers', 'Intervention/Treatment', 'Title/Acronym', 'Outcome measure', 'Sponsor/Collaborator', 'Sponsor (lead)', 'Study IDs', 'Location', 'Location terms', 'Phase', 'Funder type', 'Study documents', 'Date - Study start', 'Date - Primary completion', 'Date - First posted', 'Date - Last update posted'].sort();
        var createSelect = '<option>All Fields</option>';
        options.forEach(function (val) {
          var newOption = "<option>".concat(val, "</option>");
          createSelect = createSelect + newOption;
        });
        container.find('.customSelectDiv').append("<ul class=\"addField".concat(customCount, "\">\n                            <li class=\"col-md-6 col-xs-12\">\n                                <span class=\"andTxt\">AND</span>\n\t\t\t\t\t\t\t\t<select class=\"customSelect customSelect").concat(customCount, "\">\n\t\t\t\t\t\t\t\t   ").concat(createSelect, "\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class=\"col-md-6 col-xs-12 type-customSelect type-customSelect").concat(customCount, "\">\n\t\t\t\t\t\t\t\t<input type=\"text\" value=\"\" placeholder=\"\" class=\"textbox\">\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t <a class=\"closeBtn removeField removeField").concat(customCount, "\">X</a>\n\t\t\t\t\t\t\t</ul>")); //uniform to update the style of newly created element

        container.find(".customSelect".concat(customCount)).uniform();
        var newCustomSelect = container.find(".customSelect".concat(customCount))[0]; //dynamically disable options when creating new

        if (selectedTypes.length) {
          for (var option = 1; option < newCustomSelect.length; option++) {
            var disableCount = 0;

            if (selectedTypes.includes(newCustomSelect[option].value)) {
              disableCount++;
              newCustomSelect[option].disabled = true;

              if (disableCount === selectedTypes.length) {
                break;
              }
            }
          }
        }

        if (container.find('.customSelect').length === newCustomSelect.length) {
          addOtherField.html('');
        }
      };

      var removeField = function removeField(e) {
        var elementTarget = e.target;
        selectedTypes = selectedTypes.filter(function (filterData) {
          return filterData !== $(e.target.parentElement).find('li:first-child .selector span').text();
        });
        modifyOptions();
        $(elementTarget).off();
        $(elementTarget).parent().off();
        $(elementTarget).parent().remove();

        if (locationFilter) {
          locationFilter = null;
        }
      }; // function to listen custom selector and dynamically create fields accordingly


      var addCustomSelectListener = function addCustomSelectListener(e) {
        e.preventDefault();
        var target = e.target;
        var targetValue = target.value;
        var className = target.classList.item(1);
        selectedTypes = selectedTypes.filter(function (selectedType) {
          return selectedType !== oldValue[className];
        });
        selectedTypes.push(targetValue); //enables disable options

        modifyOptions();
        changeValueSwitch(target);
      };

      var changeValueSwitch = function changeValueSwitch(target) {
        var targetValue = target.value;
        var className = target.classList.item(1);
        var type = ".type-".concat(className);
        container.find(type).css('display', 'block');
        oldValue[className] = targetValue;
        var optionName = '';
        container.find(type).addClass('dynamic');

        switch (targetValue) {
          case 'All Fields':
            optionName = 's';
            break;

          case 'Condition':
            optionName = 'meta_conditions';
            break;

          case 'Other terms':
            optionName = 'meta_other_terms';
            break;

          case 'Intervention/Treatment':
            optionName = 'meta_intervention';
            break;

          case 'Title/Acronym':
            optionName = 'meta_title';
            break;

          case 'Outcome measure':
            optionName = 'meta_design_outcomes';
            break;

          case 'Sponsor/Collaborator':
            optionName = 'meta_sponsor_colla';
            break;

          case 'Sponsor (lead)':
            optionName = 'meta_sponsor_lead';
            break;

          case 'Location terms':
            optionName = 'meta_location';
            break;

          case 'Date - Study start':
            optionName = 'date_start_date';
            break;

          case 'Date - Primary completion':
            optionName = 'date_completion_date';
            break;

          case 'Date - First posted':
            optionName = 'date_study_first_posted_date';
            break;

          case 'Date - Last update posted':
            optionName = 'date_last_updated';
            break;

          case 'Study IDs':
            optionName = 'meta_nct_id';
            break;

          default:
            optionName = 's';
            break;
        }

        switch (targetValue) {
          case 'Other terms':
          case 'Title/Acronym':
          case 'Outcome measure':
          case 'Sponsor/Collaborator':
          case 'Sponsor (lead)':
          case 'City':
          case 'Location terms':
            container.find(type).html("<input type=\"text\" class=\"textbox\" name=".concat(optionName, ">\n\t\t\t\t\t\t\t\t\t\t\t<label name=").concat(optionName, "></label>"));
            $("".concat(type, " .textbox")).uniform();
            break;

          case 'Condition':
            container.find(type).html("<input type=\"text\" class=\"textbox search-terms search-terms-conditions\" list=\"condtion\" name=".concat(optionName, " autocomplete=\"off\">"));
            $("".concat(type, " .textbox")).uniform();
            $(".search-terms-conditions").easyAutocomplete(searchConditionsOptions);
            break;

          case 'Intervention/Treatment':
            container.find(type).html("<input type=\"text\" class=\"textbox search-terms search-terms-interventions\" list=\"intervention\" name=".concat(optionName, " autocomplete=\"off\">"));
            $("".concat(type, " .textbox")).uniform();
            $(".search-terms-interventions").easyAutocomplete(searchInterventionsOptions);
            break;

          case 'Study IDs':
            container.find(type).html("<input type=\"text\" class=\"textbox\" name=".concat(optionName, ">\n\t\t\t\t\t\t\t\t\t\t\t<label name=").concat(optionName, "></label>"));
            $("".concat(type, " .textbox")).uniform();
            break;

          case 'Age':
            container.find(type).html("<input type=\"number\" min=\"0\" class=\"textbox\" name=\"meta_patient_age\">\n                                            <label for=\"meta_patient_age\"></label>");
            $(".dynamic ".concat(type, " .textbox")).uniform();
            break;

          case 'All Fields':
            container.find(type).html("<input type=\"text\" class=\"textbox\" name=".concat(optionName, " >\n                                            <label name=").concat(optionName, "></label>"));
            $("#s").easyAutocomplete(allFieldOptions); // $(`.dynamic ${type} .textbox`).uniform();

            break;

          case 'Date - Study start':
          case 'Date - Primary completion':
          case 'Date - First posted':
          case 'Date - Last update posted':
            container.find(type).html("<div class=\"row\">\n                    <input id=".concat(optionName, " class=\"dateInputs\" type=\"hidden\" name=").concat(optionName, " value=\"\" />\n                    <div class=\"col-xs-5 padrht0\">\n                        <input type=\"text\" value=\"\"  placeholder=\"MM/DD/YYYY\" class=\"textbox startDatePicker\" id=\"datetimepicker1\">\n                    </div>\n                    <div class=\"col-xs-2\">\n                        <strong>to</strong>\n                    </div>\n                    <div class=\"col-xs-5 padlft0\">\n                        <input type=\"text\" value=\"\"  placeholder=\"MM/DD/YYYY\" class=\"textbox endDatePicker\" id=\"datetimepicker2\">\n                    </div>\n                </div>"));
            container.find('#datetimepicker1, #datetimepicker2').datetimepicker({
              debug: true,
              format: 'MM-DD-YYYY'
            });
            container.find("#datetimepicker1").on("dp.change", function (e) {
              container.find('#datetimepicker2').data("DateTimePicker").minDate(e.date);
            });
            container.find("#datetimepicker1").on("click", function () {
              container.find('#datetimepicker2').data("DateTimePicker").hide();
            });
            container.find("#datetimepicker2").on("click", function (e) {
              container.find('#datetimepicker1').data("DateTimePicker").hide();
            });
            container.find("#datetimepicker2").on("dp.change", function (e) {
              container.find('#datetimepicker1').data("DateTimePicker").maxDate(e.date);
            });
            container.find(".startDatePicker").on("dp.change", function (e) {
              var mydate = formatDate(e.date);
              startDate = mydate;
              dateValue = startDate + "," + endDate;
              $(e.target).parents("li").find(".dateInputs").val(dateValue);
            });
            container.find(".endDatePicker").on("dp.change", function (e) {
              var mydate = formatDate(e.date);
              endDate = mydate;
              dateValue = startDate + "," + endDate;
              $(e.target).parents("li").find(".dateInputs").val(dateValue);
            });
            break;

          case 'Study types':
            container.find(type).html("\n                               <span class=\"customSelectItem\"> <label><input type=\"checkbox\" value=\"all\" name=\"stype\" class=\"customCheck\"> All studies</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"stype\" value=\"interventional\" class=\"customCheck\"> Interventional studies</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"stype\" value=\"observational\"  class=\"customCheck\"> Observational studies</label>\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input name=\"stype\" value=\"observational-patient-registry\" type=\"checkbox\" class=\"customCheck\"> Patient registries</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"stype\" value=\"expanded-access\"  class=\"customCheck\"> Expanded access studies</label>\n\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"study_type\" />\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input name=\"atype\" type=\"checkbox\" value=\"individual-patients\" class=\"customCheck\"> Individual patients</label>\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input name=\"atype\" type=\"checkbox\" value=\"intermediate-size-population\" class=\"customCheck\"> Intermediate-size population</label>\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input name=\"atype\" type=\"checkbox\"  value=\"treatment-protocol\"  class=\"customCheck\"> Treatment IND/protocol</label>\n                                <input type=\"hidden\" name=\"access_type\" />\n                                <label for=\"meta_study_type\" class=\"error\"></label></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Study results':
            container.find(type).html("\n                                <span class=\"customSelectItem\"><label><input type=\"checkbox\" name=\"has_result_groups\" value=\"\" class=\"customCheck\"> All studies</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"has_result_groups\" value=\"yes\" class=\"customCheck\"> Studies with results</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"has_result_groups\" value=\"no\"  class=\"customCheck\"> Studies without results</label>                               \n\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"filter_has_result_groups\" />\n\t\t\t\t\t\t\t\t<label for=\"filter_has_result_groups\" class=\"error\"></label></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Status recruitment':
            container.find(type).html("\n                             <span class=\"customSelectItem\">\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"not-yet-recruiting\" name=\"status\">Not yet recruiting</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"customCheck\" value=\"recruiting\" name=\"status\"> Recruiting</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"customCheck\" value=\"enrolling-by-invitation\" name=\"status\"> Enrolling by invitation</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"customCheck\" value=\"active-not-recruiting\" name=\"status\"> Active, not recruiting</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" class=\"customCheck\" value=\"other\" name=\"status\"> Other</label>\n\t\t\t\t\t\t\t\t                                <input type=\"hidden\" name=\"filter_status\" />\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input type=\"checkbox\" class=\"customCheck\" value=\"suspended\" name=\"overall_status\"> Suspended </label>\n\t\t\t\t\t\t\t\t<label class=\"ml\"><input type=\"checkbox\" class=\"customCheck\" value=\"terminated\" name=\"overall_status\"> Terminated</label>\n                                <label class=\"ml\"><input type=\"checkbox\" class=\"customCheck\" value=\"completed\" name=\"overall_status\"> Completed</label>\n                                <label class=\"ml\"><input type=\"checkbox\" class=\"customCheck\" value=\"withdrawn\" name=\"overall_status\"> Withdrawn</label>\n                                <label class=\"ml\"><input type=\"checkbox\" class=\"customCheck\" value=\"unknown-status\" name=\"overall_status\"> Unknown status</label>\n                                \t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"meta_overall_status\" />\n                                <label for=\"filter_status\" class=\"error\"></label>\n                                </span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Expanded access':
            container.find(type).html("\n                <span class=\"customSelectItem\"> <label><input type=\"checkbox\" name=\"expanded_access\" value=\"yes\" class=\"customCheck\">Available</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"expanded_access\" value=\"no\" class=\"customCheck\"> No longer available</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"expanded_access\" value=\"temporarily\" class=\"customCheck\"> Temporarily not available</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"expanded_access\" value=\"approved\" class=\"customCheck\"> Approved for marketing</label>\n                                <input type=\"hidden\" name=\"meta_expanded_access\" />\n                                <label for=\"meta_expanded_access\" class=\"error\"></label></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Age group':
            container.find(type).html("\n                <span class=\"customSelectItem\"><label><input type=\"checkbox\" name=\"age\" value=\"birth-to-17-years\" class=\"customCheck\">Child (birth-17 years)</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"age\" value=\"18-to-64-years\" class=\"customCheck\"> Adult (18-64 years)</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"age\" value=\"64-years\" class=\"customCheck\"> Older adult (65+ years)</label>\n                                <input type=\"hidden\" name=\"filter_age\" />\n                                <label for=\"filter_age\" class=\"error\"></label></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Sex':
            container.find(type).html("\n                <span class=\"customSelectItem\"><label><input type=\"checkbox\" name=\"sex\" value=\"all\" class=\"customCheck\">All</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"sex\" value=\"female\" class=\"customCheck\"> Studies with female participants</label>\n\t\t\t\t\t\t\t\t<label><input type=\"checkbox\" name=\"sex\" value=\"male\" class=\"customCheck\"> Studies with male participants</label>\n                                <input type=\"hidden\" name=\"filter_sex\" />\n                                <label for=\"filter_sex\" class=\"error\"></label></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Accepts healthy volunteers':
            container.find(type).html("\n                <span class=\"customSelectItem\"><label><input type=\"checkbox\" class=\"customCheck\" value=\"accepts-healthy-volunteers\" name=\"filter_healthy_volunteers\">Healthy volunteers may participate in the study</label>\n                                 <label for=\"healthy_volunteers\" class=\"error\"></label>\n                                 <input type=\"hidden\" name=\"filter_healthy_volunteers\" />\n                                 </span>\n                                ");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Phase':
            container.find(type).html("\n                <span class=\"customSelectItem\"><label><input type=\"checkbox\" class=\"customCheck\" value=\"early-phase-1\" name=\"phase\">Early phase 1</label>\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"phase-1\" name=\"phase\">Phase 1</label>\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"phase-2\" name=\"phase\">Phase 2</label>\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"phase-3\" name=\"phase\">Phase 3</label>\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"phase-4\" name=\"phase\">Phase 4</label>\n                                <label><input type=\"checkbox\" class=\"customCheck\" value=\"n-a\" name=\"phase\">Not applicable</label>\n                                <input type=\"hidden\" name=\"filter_phase\" /></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Funder type':
            container.find(type).html("\n                <span class=\"customSelectItem\"><label><input type=\"checkbox\" name=\"agency_class\" value=\"nih\" class=\"customCheck\">NIH</label>\n                                <label><input type=\"checkbox\" name=\"agency_class\" value=\"u-s-fed\" class=\"customCheck\">Other U.S. federal agency</label>\n                                <label><input type=\"checkbox\" name=\"agency_class\" value=\"industry\" class=\"customCheck\">Industry</label>\n                                <label><input type=\"checkbox\" name=\"agency_class\" value=\"other\" class=\"customCheck\">All others (individuals, universities, organizations)</label>\n                                <input type=\"hidden\" name=\"filter_agency_class\" />\n                                </span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Study documents':
            container.find(type).html("\n                <span class=\"customSelectItem\">\n                                <label><input type=\"checkbox\" name=\"provided_documents\" value=\"protocol\" class=\"customCheck\">Study protocols</label>\n                                <label><input type=\"checkbox\" name=\"provided_documents\" value=\"sap\" class=\"customCheck\">Statistical analysis plans (SAPs)</label>\n                                <label><input type=\"checkbox\" name=\"provided_documents\" value=\"icf\" class=\"customCheck\">Informed consent forms (ICFs)</label>\n                                <input type=\"hidden\" name=\"meta_provided_documents\" /></span>");
            $(".dynamic .customCheck").uniform();
            container.find(type).removeClass('dynamic');
            break;

          case 'Location':
            var html = ""; //build country

            UTILITY.countryOptions.map(function (arr) {
              return {
                val: arr.val,
                value: arr.value
              };
            });
            var countrySelect = '<option value="">Country</option>';
            UTILITY.countryOptions.forEach(function (option) {
              var countryOption = "<option value=".concat(option.val, ">").concat(option.value, "</option>");
              countrySelect = countrySelect + countryOption;
            });
            html += "\n                <div class=\"optionalField\">\n                <select id=\"location-country\" name=\"filter_location\" class=\"customSelect country\">\n                    ".concat(countrySelect, "\n                </select>               \n                <label for=\"filter_location\" class=\"error\"></label></div>"); //build state

            UTILITY.stateOptions.sort(function (first, second) {
              return sortArray(first, second);
            });
            var stateSelect = '<option value="">State</option>';
            UTILITY.stateOptions.forEach(function (option) {
              var stateOption = "<option value=".concat(option.val, ">").concat(option.value, "</option>");
              stateSelect = stateSelect + stateOption;
            });
            html += "\n                <div class=\"optionalField\" style=\"display:none;\">\n                <select id=\"location-state\" name=\"filter_state\" class=\"customSelect state\" data-parent=\"filter_location\"> \n                ".concat(stateSelect, "\n                </select>\n                <label for=\"filter_state\" class=\"error\"></label></div>"); //build city

            html += "\n                <div class=\"optionalField\" style=\"display:none;\">\n                <select id=\"location-city\" name=\"bms_city\" class=\"customSelect city\" data-parent=\"filter_location,filter_state\" data-api-source=\"1\">\n                    <option value=\"\" selected=\"selected\">City</option>\n                </select>\n                <label for=\"filter_distance\" class=\"error\"></label></div>\n                <input type=\"hidden\" name=\"dis_location\" id=\"location-geo\" data-parent=\"bms_city\">\n                <input type=\"hidden\" name=\"bms_current_location\" value=\"1\" disabled id=\"bms_current_location\">"; //build radius

            html += "\n                <div class=\"optionalField\" style=\"display:none;\">\n                <select id=\"location-radius\" name=\"dis_radius\" class=\"customSelect distance toggle-disabled\" disabled data-parent=\"bms_city\">\n                    <option value=\"50mi\">50 miles</option>\n                    <option value=\"100mi\">100 miles</option>\n                    <option value=\"200mi\">200 miles</option>\n                    <option value=\"300mi\">300 miles</option>\n                </select>\n                <label for=\"filter_distance\" class=\"error\"></label></div>";
            container.find(type).addClass("location-advanced").html(html);
            $(".dynamic .customSelect").uniform();
            container.find(type).removeClass('dynamic');
            locationFilter = new LocationFilter({
              element: container.find(type),
              callee: "advanced-search"
            });
            break;

          case 'All Fields':
            container.find(type).html("<input type=\"text\" class=\"textbox\" name=\"input_text\">\n\t\t\t\t\t\t\t\t\t\t\t<label for=\"input_text\"></label>");
            break;

          default:
            $("#s").easyAutocomplete(allFieldOptions);
        }
      };

      function initAutoComplete(requestUrl) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var searchType = "";

        if (type) {
          searchType = "&type=".concat(type, "&_wpnonce=").concat(phpData.rest_nonce);
        }

        return {
          url: function url(phrase) {
            return requestUrl + phrase + searchType;
          },
          list: {
            match: {
              enabled: true
            },
            onClickEvent: function onClickEvent(e) {}
          },
          template: {
            type: "custom",
            method: function method(value, item) {
              return value;
            }
          },
          minCharNumber: 3,
          listLocation: "search_results",
          getValue: "name"
        };
      }

      var sortArray = function sortArray(first, second) {
        if (first.value < second.value) //sort string ascending
          {
            return -1;
          } else if (first.value > second.value) {
          return 1;
        } else {
          return 0; //default return value (no sorting)
        }
      };

      function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();
        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;
        return [year, month, day].join('-');
      } //enables disable options


      var modifyOptions = function modifyOptions() {
        container.find(".customSelect").each(function (idx, element) {
          // modifyOptions(element, className);
          for (var option = 1; option < element.length; option++) {
            element[option].disabled = selectedTypes.includes(element[option].value);
          }
        });
      };

      var filterValue = ''; // validation

      container.find("form").validate({
        onfocusout: false,
        onkeyup: false,
        onclick: false,
        submitHandler: function submitHandler(form) {
          $("[name='s']").val($("#s").val());
          var formJquery = container.find(form);
          formJquery.find('.type-customSelect input').each(function (idx, el) {
            if (el.type === 'checkbox' && el.checked) {
              filterValue = filterValue + el.value + ',';
              el.value = '';
            }

            if (el.type === 'hidden' && filterValue) {
              el.value = filterValue.substring(0, filterValue.length - 1);
              filterValue = '';
            }

            if (!el.value) {
              el.removeAttribute('name');
            }

            var location = container.find("#location-country").get(0);
            var locationGeo = document.getElementsByName('dis_location')[0];
            var bmsCurrentLocation = container.find('.advanceSearchForm #bms_current_location').get(0);

            if (location && location.value == "current-locations") {
              location.value = "";

              if (locationGeo.value) {
                $(bmsCurrentLocation).removeAttr("disabled");
              }
            }
          });
          form.submit();
        }
      });
    };

    module.exports = advancedSearch;
  }, {
    "./filters/location": 27,
    "./utility": 46
  }],
  2: [function (require, module, exports) {
    var UTILITY = require("./utility");

    var API = function API() {
      var $ = jQuery;
      var namespace = "/wp-json/boldsci/v1/";

      this.get = function (url) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        data._wpnonce = phpData.rest_nonce;
        return new Promise(function (resolve, reject) {
          var xhr = $.ajax({
            type: "GET",
            contentType: "application/json",
            url: url,
            data: data,
            dataType: "json"
          }, function (data) {}, "json");
          xhr.done(function (data) {
            resolve(data);
          });
          xhr.fail(function (err) {
            reject(err);
          });
        });
      };
      /**
       * @param {*} error
       * Geolocation error handling
       */


      this.showError = function (error) {
        switch (error.code) {
          case error.PERMISSION_DENIED:
            alert("You've denied the request for Geolocation.");
            break;

          case error.POSITION_UNAVAILABLE:
            alert("Location information is unavailable.");
            break;

          case error.TIMEOUT:
            alert("The request to get your location timed out.");
            break;

          case error.UNKNOWN_ERROR:
            alert("An unknown error occurred.");
        }
      };
      /* GET GeoLocation function not accept any argument
       * **
       * ** @return as String - lat and lon with seprated by comma
       * **
       * */


      this.get_geo = function (initialising) {
        var lat, lon; // if (navigator.geolocation) {

        return new Promise(function (resolve, reject) {
          reject("We are not fetching the location");
          /*navigator.geolocation.getCurrentPosition(
          	(position) => {
          		lat = position.coords.latitude.toFixed(5);
          		lon = position.coords.longitude.toFixed(5);
          			UTILITY.setCookie("bs_loc", "true", 365);
          		resolve({
          			lat: lat,
          			lon: lon,
          		});
          	},
          	(error) => {
          		UTILITY.setCookie("bs_loc", "false", 365);
          		console.log(initialising, error);
          		if (!initialising) {
          			this.showError(error);
          		}
          		reject(error);
          	}
          );*/
        }); // } else {
        // 	alert("Geolocation is not supported by this browser.");
        // }
      };

      this["delete"] = function (url) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        data._wpnonce = phpData.rest_nonce;
        return new Promise(function (resolve, reject) {
          var xhr = $.ajax({
            type: "DELETE",
            contentType: "application/json",
            url: namespace + url,
            data: JSON.stringify(data),
            dataType: "json"
          }, function (data) {}, "json");
          xhr.done(function (data) {
            resolve(data);
          });
          xhr.fail(function (err) {
            reject(err);
          });
        });
      };

      this.post = function (url, data) {
        // data._wpnonce = phpData.rest_nonce;
        var requestData = {
          type: "POST",
          url: data.isAdminAjax ? "".concat(url, "?_wpnonce=").concat(phpData.rest_nonce) : namespace + "".concat(url, "?_wpnonce=").concat(phpData.rest_nonce),
          data: data.isAdminAjax ? data : JSON.stringify(data)
        };

        if (!data.isAdminAjax) {
          requestData["contentType"] = "application/json";
          requestData["dataType"] = "json";
        }

        return new Promise(function (resolve, reject) {
          var xhr = $.ajax(requestData, function (data) {}, "json");

          if (!data.noLoader) {
            $(".preloader").show();
          }

          xhr.done(function (data) {
            resolve(data);
          });
          xhr.fail(function (err) {
            reject(err);
          });
        });
      };
    };

    module.exports = API;
  }, {
    "./utility": 46
  }],
  3: [function (require, module, exports) {
    var BMSAccordion = function BMSAccordion(obj) {
      var container = obj.container;
      var linkEl = obj.openLink;
      var accordionEl = obj.accordionComponent;
      var activeEl = obj.activeEl;
      var activeElName = activeEl.selector.replace('#', ''); // activeEl.addClass('active');

      activeEl.slideDown();
      container.find('[data-accordion=' + activeElName + ']').addClass('active');
      linkEl.on('click', function () {
        var activeEl = $(this).attr('data-accordion');

        if ($(this).hasClass('active')) {
          $(this).removeClass('active');
          $('#' + activeEl).slideUp(); // $('#'+activeEl).removeClass('active');
        } else {
          // linkEl.removeClass('active');
          // accordionEl.slideUp();
          // accordionEl.removeClass('active');
          $(this).addClass('active');
          $('#' + activeEl).slideDown(); // $('#'+activeEl).addClass('active');
          // console.log($('#'+activeEl).position().top)

          $('html, body').animate({
            scrollTop: $('#' + activeEl).offset().top - 140
          }, 'slow');
        }
      });
      container.find('.tarea-list').find('input[type="checkbox"]').on('change', function () {
        var selectCount = 0;
        container.find('.tarea-list').find('input[type="checkbox"]:checked').each(function () {
          selectCount = selectCount + 1;
        });

        if (selectCount > 0) {
          container.find('[data-accordion="theraupeticArea"]').text('THERAPEUTIC AREA (' + selectCount + ')');
        } else {
          container.find('[data-accordion="theraupeticArea"]').text('THERAPEUTIC AREA');
        }
      });
    };

    module.exports = BMSAccordion;
  }, {}],
  4: [function (require, module, exports) {
    require('bootstrap');

    var CelgeneAlliance = function CelgeneAlliance(obj) {
      var $ = jQuery;
      var container = $(".alliancePatners");
      var allianceContent = $(".contentAlliacne");
      var modal = $("#myModal");
      var headerText = modal.find(".allianceHeaderText");
      var allianceDesc = modal.find(".allianceDesc");
      var alliancePartnerListContainer = container.find(".alliancePartnerListContainer");
      var appliedFilter = [];
      container.on('click', '.filterBtn', function (e) {
        e.preventDefault();
        $(this).toggleClass("active");
        var filterName = $(this).attr('rel');

        if ($(this).hasClass('active')) {
          appliedFilter.push(filterName);
        } else {
          var index = appliedFilter.indexOf(filterName);

          if (index > -1) {
            appliedFilter.splice(index, 1);
          }
        }

        if (appliedFilter.length == 0) {
          alliancePartnerListContainer.find("a").css('opacity', 1);
          return false;
        }

        container.toggleClass(appliedFilter);
        alliancePartnerListContainer.find("a").css('opacity', 0.2);
        alliancePartnerListContainer.find("a").each(function () {
          dataTermList = $(this).attr("data-terms").split(", ");
          var activePartners = appliedFilter.filter(function (x) {
            return dataTermList.includes(x);
          });

          if (activePartners.length) {
            $(this).css('opacity', 1);
          }
        });
        e.stopPropagation();
      });
      container.on('click', '[data-toggle="modal"]', function (e) {
        if ($(this).css("opacity") < 1) {
          return false;
        }

        var modalImage = $(this).attr("data-logo");
        var arrayText = $(this).attr("data-therapeutic-areas");
        var therapauticAreaTxt = arrayText.toString();
        var collaborationOverviewTxt = $(this).attr("data-collaboration-overview");
        var moleculeTxt = $(this).attr("data-molecules");
        var natureOfCollaborationTxt = $(this).attr("data-nature");
        var collaborationtherapauticAreaTxt = $(this).attr("data-therapeutic");
        var regularDataText = $(this).attr("data-regular-content");
        var imageOne = $(this).attr("data-side-image-1");
        var imageTwo = $(this).attr("data-side-image-2");

        if (collaborationOverviewTxt == "") {
          modal.find(".collaborationOverviewLabel").hide();
        } else {
          modal.find(".collaborationOverviewLabel").show();
        }

        if (moleculeTxt == "") {
          modal.find(".molecules").hide();
        } else {
          modal.find(".molecules").show();
        }

        if (natureOfCollaborationTxt == "" && collaborationtherapauticAreaTxt == "") {
          $(".regularContentData").show();
          $(".noRegularContentData").hide();
        } else {
          $(".regularContentData").hide();
          $(".noRegularContentData").show();
          $(".noRegularContentData .nature").show();
          $(".noRegularContentData .collaboration").show();
        }

        if (natureOfCollaborationTxt == "") {
          $(".noRegularContentData .nature").hide();
        }

        if (collaborationtherapauticAreaTxt == "") {
          $(".noRegularContentData .collaboration").hide();
        }

        $("#myModal img.ImagePhonePopUp").attr("src", modalImage);
        $("#myModal .thumbImg img.imageOne").attr("src", imageOne);
        $("#myModal .thumbImg img.imageTwo").attr("src", imageTwo);
        var therapauticArea = therapauticAreaTxt;
        therapauticArea = therapauticArea.replace(/-/g, ' ');
        headerText.find(".therapeuticAreas").html(therapauticArea);
        headerText.find(".collaborationOverview").html(collaborationOverviewTxt);
        headerText.find(".molecules").html(moleculeTxt);
        allianceDesc.find(".natureOfCollaboration").html(natureOfCollaborationTxt);
        allianceDesc.find(".collaborationtherapauticArea").html(collaborationtherapauticAreaTxt);
        allianceDesc.find(".regularContentDataText").html(regularDataText);
      });
      allianceContent.find('.alliancePatners .rowCustom .allianceDropDown .clearAllText a').click(function () {
        $(this).parents('.checkbox').find('.filterBtn').removeClass('active');
        $('.alliancePatners').removeClass('preClinical clinical hematologic oncology tumor');
        $('.alliancePartnerListContainer a').removeClass('fadeOut').addClass('fadeIn');
        return false;
      });
      allianceContent.find('.allianceDropDown ul > li > a').click(function (e) {
        e.stopPropagation();

        if (!$(this).parent('li').find('ul').hasClass('open')) {
          $('.allianceDropDown ul > li > a').removeClass('active');
          $('.allianceDropDown li ul').removeClass('open').hide();
          $(this).parent('li').find('ul').addClass('open').show();
          $(this).addClass('active');
        } else {
          $('.allianceDropDown ul > li > a').removeClass('active');
          $(this).parent('li').find('ul').removeClass('open').hide();
        }
      });
    };

    module.exports = CelgeneAlliance;
  }, {
    "bootstrap": "s7b+G+"
  }],
  5: [function (require, module, exports) {
    require('bootstrap');

    var Celgenedashboard = function Celgenedashboard(obj) {
      // alert(1);
      var $ = jQuery;
      $('.celgeneSidebar nav ul li.dividerLink .labelLink').click(function () {
        $(this).toggleClass('active');
        $(this).parents('.dividerLink').find('> ul').slideToggle();
      });
      $('.celgeneSidebar nav ul li.borderLink .labelLink').click(function () {
        $(this).toggleClass('active');
        $(this).parents('.borderLink').find('ul').slideToggle();
      }); //

      var activePageTxt = $('.tax-specialty .celgeneSidebar .ulDropdown .options li .active').text();
      $('.tax-specialty .celgeneSidebar .ulDropdown .span_select').text(activePageTxt);
      var activePageTxt2 = $('.single-disease-area .celgeneSidebar .ulDropdown .options li .active').text();
      $('.single-disease-area .celgeneSidebar .ulDropdown .span_select').text(activePageTxt2);
      var activePageTxt3 = $('.post-type-archive-molecule .celgeneSidebar .ulDropdown .options li ul li .active').text();
      $('.post-type-archive-molecule .celgeneSidebar .ulDropdown .span_select').text(activePageTxt3);
      var activePageTxt4 = $('.single-molecule .celgeneSidebar .ulDropdown .options li ul li .active').text();
      $('.single-molecule .celgeneSidebar .ulDropdown .span_select').text(activePageTxt4);
      var activePageTxt5 = $('.single-pathways .celgeneSidebar .ulDropdown .options .dividerLink ul li .active').text();
      $('.single-pathways .celgeneSidebar .ulDropdown .span_select').text(activePageTxt5);
      var bmsActivePageTxt = $('.celgeneSidebar .ulDropdown .options li a.active').text();
      $('.celgeneSidebar .ulDropdown .span_select').text(bmsActivePageTxt); // function isDesktop() {
      //     return $(window).width() > 1199;
      // }
      // let filterPanel = $('.ulDropdown');
      // let sticky = filterPanel.offset().top - 60;
      // let stickyL = filterPanel.offset().left;
      // let stickyWidth = filterPanel.width();
      // $(window).on('resize', function(){
      // 	if(isDesktop()){
      // 	sticky = filterPanel.offset().top - 60;
      // 	stickyL = filterPanel.offset().left;
      // 	stickyWidth = filterPanel.width();
      // 	}else{
      // 		filterPanel.removeClass('sticky');
      //         filterPanel.removeAttr('style');
      // 	}
      // });
      // window.onscroll = function() {
      // 	if(isDesktop()){
      // 		leftpannelStiky();
      // 	}else{
      // 		filterPanel.removeClass('sticky');
      //         filterPanel.removeAttr('style');
      // 	}
      // }
      // function leftpannelStiky(){
      // 	if (window.pageYOffset > sticky) {
      // 		filterPanel.addClass('sticky');
      // 		filterPanel.css({left: stickyL, width:stickyWidth});
      // 	} else {
      //         filterPanel.removeClass('sticky');
      //         filterPanel.removeAttr('style');
      //     }
      // }

      var bottom = $('.search .content').offset() ? $('.search .content').offset().top - 100 : 0; //var bottom = $('.filterBySection').offset().top;

      var filterHt = $('.filterBySection').outerHeight();
      if (bottom != 0) $(window).scroll(function () {
        var winWidth = $(window).innerWidth;

        if ($(this).scrollTop() > bottom && winWidth > 768) {
          $('.topSectionBg').addClass('filterAdded');

          if ($(window).width() >= 767) {
            $('.search .content').css({
              'margin-top': filterHt
            });
          }
        } else {
          $('.topSectionBg').removeClass('filterAdded');
          $('.search .content').css({
            'margin-top': 0
          });
        }
      }); //

      $('.readMoreParent .readMoreLink').click(function () {
        $(this).toggleClass('active');
        $(this).parents('.readMoreParent').find('.readMoreChild').toggleClass('showAll');
        return false;
      });
      /*
      $(document).click(function () {
      	$(".filterSubOption").slideUp(function () {
                 $(".filterSubOption").slideUp();
      		$('.filterSubOption').removeClass('open');
      		$( ".filterOptionParent ul li" ).each(function(index) {
      			var html = $(this).find(".filterList").html();
      			if(html == ""){
      				$(this).find(".filterLink").removeClass("active");
      			}
      		});
              });
      });
      
      $('.filterSubOption').click(function (e) {
             e.stopPropagation();
         });
      */
    };

    module.exports = Celgenedashboard;
  }, {
    "bootstrap": "s7b+G+"
  }],
  6: [function (require, module, exports) {
    require("bootstrap");

    require("jqueryValidator");

    var API = require("../api");

    var celgeneLanding = function celgeneLanding() {
      //figure out a better way of doing this
      var $ = jQuery;
      var api = new API();
      var validator = $("#mslForm").validate({
        rules: {
          salutation: "required",
          country: "required",
          first_name: "required",
          last_name: "required",
          phone: {
            required: true,
            phoneUS: true
          },
          email: {
            required: true,
            email: true
          },
          address: "required",
          city: "required",
          region: "required",
          zipcode: {
            required: true,
            zipcodeUS: true
          },
          describe: "required",
          topic: {
            required: true,
            topicSpace: true
          }
        },
        messages: {
          salutation: "Required",
          country: "Required",
          first_name: "Required",
          last_name: "Required",
          phone: {
            required: "Required",
            phoneUS: "Enter valid number"
          },
          email: {
            required: "Required",
            email: "Please enter valid email"
          },
          address: "Required",
          city: "Required",
          region: "Required",
          zipcode: {
            required: "Required",
            zipcodeUS: "Enter valid zipcode"
          },
          describe: "Required",
          topic: {
            required: "Required",
            topicSpace: "Space not allow"
          }
        },
        submitHandler: function submitHandler(e) {
          var obj = {};
          $("#mslForm input, #mslForm select, #mslForm textarea").each(function (i, el) {
            if ($(this).val() != "") {
              obj[el.name] = $(this).val();
            }
          });
          api.post("msl/email-notification", obj).then(function (response) {
            $(".successMess").show();
            $("body").removeClass("overflow");
            $("header, .filterBySection, .content").removeClass("blurContent");
            $(".successToHideForm").hide();
            validator.resetForm();
          })["catch"](function (err) {// Error Message
          });
        }
      });
      jQuery.validator.addMethod("topicSpace", function (value, element) {
        if ($("#topic_inquiry").val()[0] === " ") {
          return false;
        } else {
          return true;
        }
      }, "Empty space not allow");
      jQuery.validator.addMethod("zipcodeUS", function (zipcode, element) {
        zipcode = zipcode.replace(/\s+/g, "");
        return this.optional(element) || zipcode.length === 5 && zipcode.match(/^[0-9]*$/);
      }, "<br />Please specify a valid zipcode");
      jQuery.validator.addMethod("phoneUS", function (phone_number, element) {
        phone_number = phone_number.replace(/\s+/g, "");
        return this.optional(element) || phone_number.match(/^\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})$/);
      }, "<br />Please specify a valid phone number");
      $(".celgeneMslForm .cancelStyle, .celgeneMslForm .okBtn").click(function () {
        validator.resetForm();
        $(".sectionPopup").hide();
        $("body").removeClass("overflow");
        $("header, .filterBySection, .content").removeClass("blurContent"); //$('.successMess').hide();
      });
    };

    module.exports = celgeneLanding;
  }, {
    "../api": 2,
    "bootstrap": "s7b+G+",
    "jqueryValidator": "5ZD6oW"
  }],
  7: [function (require, module, exports) {
    require('bootstrap');

    var _require = require('@lvchengbin/url'),
        URL = _require.URL,
        URLSearchParams = _require.URLSearchParams;

    var celgenePipeline = function celgenePipeline() {
      //figure out a better way of doing this
      var $ = jQuery;
      var container = $(".pipelineSection");
      var videoContainer = $("#myVideoModal");
      var videoTitle = videoContainer.find(".modal-header");
      var videoContent = videoContainer.find(".modal-body .videoPlaceholder");
      var dropDown = container.find(".selectPipe select");
      var dom = {
        window: $(window),
        document: $(document),
        body: $('body')
      };
      container.find('.PipeLineCard .front .flipIcon').click(function () {
        $(this).parents('.phoneBack').find('.card').addClass('flipped');
      });
      container.find('.PipeLineCard .back .flipIcon').click(function () {
        $(this).parents('.phoneBack').find('.card').removeClass('flipped');
      });
      container.find(".playIcon").on('click', '[data-toggle="modal"]', function (e) {
        var modalVideo = $(this).parents(".card").attr("data-video");
        var modalTitle = $(this).parents(".card").attr("data-video-title");
        videoTitle.html(modalTitle);
        videoContent.html(modalVideo);
      });

      if ($("body").hasClass("post-type-archive-molecule") || $("body").hasClass("single-trial")) {
        var addPdfLink = function addPdfLink(isClick) {
          var _OBJECT_URL;

          var request = new XMLHttpRequest();
          var downloadText = "";

          if (isClick && $("body").hasClass("post-type-archive-molecule")) {
            downloadText = "All <br> Pipeline Molecules";
          }

          request.addEventListener("readystatechange", function (e) {
            if (isClick && request.readyState == 2 && request.status == 200) {
              // Download is being started
              $("#downloading_pdf").html("`Downloading.. ${downloadText}");
            } else if (isClick && request.readyState == 3 && isClick) {
              // Download is under progress
              $("#downloading_pdf").html("Downloading... ".concat(downloadText));
            } else if (request.readyState == 4) {
              // Downloaing has finished
              if (isClick) {
                $("#downloading_pdf").html("Download ".concat(downloadText));
              }

              if (window.navigator.msSaveOrOpenBlob) {
                // IE11
                if (isClick) {
                  var url = window.location.pathname.split("/");
                  var filename = url[2].toUpperCase() + ".pdf";
                  window.navigator.msSaveOrOpenBlob(request.response, filename);
                }
              } else {
                _OBJECT_URL = window.URL.createObjectURL(request.response); // Set href as a local object URL

                document.querySelector("#download_pdf").setAttribute("href", _OBJECT_URL); // Recommended : Revoke the object URL after some time to free up resources
                // There is no way to find out whether user finished downloading

                setTimeout(function () {
                  window.URL.revokeObjectURL(_OBJECT_URL);
                }, 60 * 1000);
              }
            }
          });

          if (isClick) {
            request.addEventListener("progress", function (e) {
              var percent_complete = e.loaded / e.total * 100;
            });
          }

          request.open("get", document.querySelector("#download_pdf").getAttribute("data-href"));
          request.responseType = "blob";
          request.send();
        };

        window.addEventListener("DOMContentLoaded", function () {
          addPdfLink();
        }, false);
        document.querySelector("#download_pdf").addEventListener("click", function () {
          addPdfLink(true);
        });
      }

      container.find('.modal .close').click(function () {
        $('.videoPlaceholder iframe').attr("src", $(".videoPlaceholder iframe").attr("src"));
      });
      $('#myVideoModal').on('hidden.bs.modal', function () {
        $('.videoPlaceholder iframe').attr("src", $(".videoPlaceholder iframe").attr("src"));
      });
      dropDown.change(function () {
        var dropdownId = $(this).attr("id");
        var value = $(this).val();
        var href = window.location.href;

        if (value == "All disease areas" || value == "All pathways" || value == "All phases") {
          var url = new URL(window.location.href);
          var params = new URLSearchParams(url.search.slice(1));
          window.location = removeParams(dropdownId);
          return false;
        }

        if (window.location.href.indexOf("?") == -1) {
          window.location.href = href + "?" + dropdownId + "=" + value;
        } else {
          window.location.href = UpdateQueryString(window.location.href, dropdownId, value);
        }
      });

      function removeParams(sParam) {
        var url = window.location.href.split('?')[0] + '?';
        var sPageURL = decodeURIComponent(window.location.search.substring(1)),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
          sParameterName = sURLVariables[i].split('=');

          if (sParameterName[0] != sParam) {
            url = url + sParameterName[0] + '=' + sParameterName[1] + '&';
          }
        }

        return url.substring(0, url.length - 1);
      }

      function UpdateQueryString(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)", "i");

        if (uri.match(re)) {
          return uri.replace(re, '$1' + key + "=" + value + '$2');
        } else {
          var hash = '';

          if (uri.indexOf('#') !== -1) {
            hash = uri.replace(/.*#/, '#');
            uri = uri.replace(/#.*/, '');
          }

          var separator = uri.indexOf('?') !== -1 ? "&" : "?";
          return uri + separator + key + "=" + value + hash;
        }
      }
    };

    module.exports = celgenePipeline;
  }, {
    "@lvchengbin/url": 49,
    "bootstrap": "s7b+G+"
  }],
  8: [function (require, module, exports) {
    var UTILITY = require("./../../../utility");

    var DiseaseArea = function DiseaseArea(obj) {
      var container = obj.container;
      var views = false;
      var selectedTa = "";
      container.find(".back-link").click(function (e) {
        e.stopPropagation();
        container.hide();
        selectedTa = "";
        views.therapeuticArea.reset();
      });
      container.find(".therapeutic-area-filter input[type='checkbox']").on("ta-changed", function () {
        console.log("update DAs"); // if(!$(this).parents(".therapeuticAreaFilter").hasClass("deseasesAreasFilter")) {

        var isChecked = $(this).is(":checked");

        if (!selectedTa) {
          selectedTa = $(this).parents(".therapeuticAreaFilter").attr("data-ta");
        }

        console.log(selectedTa);
        views.therapeuticAreaFilter.setSkipValue(!isChecked, "".concat(selectedTa, ".update-container"));
        views.deseasesAreasFilter.setSkipValue(isChecked, "".concat(selectedTa, ".update-da-container"));
        views.deseasesAreasFilter.updateInputs(isChecked, "".concat(selectedTa, ".update-da-container")); // }
      });
      container.find(".disease-area-filter input[type='checkbox']").on("da-changed", function () {
        // if(!$(this).parents(".therapeuticAreaFilter").hasClass("trialFilter")) {
        if (!selectedTa) {
          selectedTa = $(this).parents(".deseasesAreasFilter").attr("data-ta");
        }

        var isSelectAll = views.deseasesAreasFilter.isSelectAll("".concat(selectedTa, ".update-da-container"));
        var name = $(this).attr("name");
        views.deseasesAreasFilter.setSkipValue(isSelectAll, "".concat(selectedTa, ".update-da-container"));
        views.therapeuticAreaFilter.setSkipValue(!isSelectAll, "".concat(selectedTa, ".update-container"));
        views.therapeuticAreaFilter.updateInputs(isSelectAll, "".concat(selectedTa, ".update-container"));
        setTimeout(function () {
          if (isSelectAll) {
            UTILITY.updateQueryString(location.href, name, "");
          }
        }, 2); // }
      });

      this.update = function (ta) {
        selectedTa = ta;
        container.attr("data-selectedTA", ta);
        container.show();
        container.find(".therapeuticArea").hide();
        container.find(".".concat(ta)).show(); // console.log(selectedTa);
      };

      this.show = function () {
        container.show();
      };

      this.hide = function () {
        container.hide();
      };

      this.setViews = function () {
        views = obj.getViews();
      };
    };

    module.exports = DiseaseArea;
  }, {
    "./../../../utility": 46
  }],
  9: [function (require, module, exports) {
    var TherapeuticArea = function TherapeuticArea(obj) {
      var container = obj.container;
      var views = false;
      var self = this;
      container.find("input[type='radio']").change(function () {
        self.hide();
        views.diseaseArea.update($(this).val());
      });

      this.hide = function () {
        container.hide();
      };

      this.show = function () {
        container.show();
      };

      this.reset = function () {
        container.find("input[type='radio']").prop('checked', false);
        this.show();
      };

      this.setViews = function () {
        views = obj.getViews();
      };
    };

    module.exports = TherapeuticArea;
  }, {}],
  10: [function (require, module, exports) {
    var Filter = require("./bms/filter");

    var ViewAll = require("./bms/view-all");

    var TherapeuticArea = require("./bms-science/filters/views/therapeuticArea");

    var DiseaseArea = require("./bms-science/filters/views/diseaseArea");

    var UTILITY = require("./utility");

    var BMSTrials = function BMSTrials(obj) {
      var container = obj.container;
      var output = container.find('.output');
      var views = {
        trialFilter: new Filter({
          container: container.find(".trialContainer"),
          filter: ".trialItem",
          type: "checkbox",
          inputContainer: container.find(".trialFilter"),
          relation: "AND",
          // childInputContainer: false,
          getViews: function getViews() {
            return views;
          }
        }),
        therapeuticAreaFilter: new Filter({
          container: container.find(".therapeuticAreasContainer"),
          filter: ".therapeuticAreasItem",
          type: "checkbox",
          inputContainer: container.find(".therapeuticAreaFilter"),
          relation: "OR",
          // childInputContainer: container.find(".trialFilter"),
          getViews: function getViews() {
            return views;
          }
        }),
        deseasesAreasFilter: new Filter({
          container: container.find(".cardContainer"),
          filter: ".card",
          type: "checkbox",
          inputContainer: container.find(".deseasesAreasFilter"),
          relation: "OR",
          // childInputContainer: container.find(".trialFilter"),
          getViews: function getViews() {
            return views;
          }
        }),
        therapeuticArea: new TherapeuticArea({
          container: container.find(".taFilterWrapper"),
          getViews: function getViews() {
            return views;
          }
        }),
        diseaseArea: new DiseaseArea({
          container: container.find(".daFilterWrapper"),
          getViews: function getViews() {
            return views;
          }
        }),
        viewAll: [],
        refreshFilters: function refreshFilters() {
          var _this = this;

          this.trialFilter.refresh();
          this.therapeuticAreaFilter.refresh();
          this.deseasesAreasFilter.refresh();
          setTimeout(function () {
            _this.trialFilter.refresh();

            _this.therapeuticAreaFilter.refresh();

            _this.deseasesAreasFilter.refresh(); // $('.phaseContainer').each(function(){
            //     $(this).find('.phaseItem').removeClass('no-brd-btm');
            //     $(this).find('.phaseItem:visible:last').addClass('no-brd-btm');
            // });

          }, 100);
          setTimeout(function () {
            var nctCount = [];
            var partners = []; // console.log(container.find('.cardContainer:visible').length);

            container.find('.cardContainer:visible .card:visible .phaseRow.selectedItem').each(function () {
              var nctids = $(this).data('nctids').split(','); // console.log(nctids);

              for (var n = 0; n < nctids.length; n++) {
                nctCount.push(nctids[n]);
              }

              if ($(this).attr('data-partner') != '') {
                partners.push($(this).attr('data-partner'));
              } // console.log(nctCount);

            });

            function getUnique(array) {
              var uniqueArray = [];

              for (var _i2 = 0; _i2 < array.length; _i2++) {
                if (uniqueArray.indexOf(array[_i2]) === -1) {
                  uniqueArray.push(array[_i2]);
                }
              }

              return uniqueArray;
            }

            var uniqueNames = getUnique(nctCount); // console.log(uniqueNames);

            var count = uniqueNames.length; // console.log('count bms-trial', count);

            if (count != 1) {
              $('.trial-count').text('Displaying ' + count + ' trials');
            } else {
              $('.trial-count').text('Displaying ' + count + ' trial');
            }

            $('.page-template-bms-pipeline-trial .pipeline-ref li').hide();
            $('.page-template-bms-pipeline-trial .pipeline-ref p').hide();

            if (partners.length > 0) {
              partners.map(function (value) {
                $('.page-template-bms-pipeline-trial .pipeline-ref li').each(function () {
                  if ($(this).hasClass(value)) {
                    $(this).show();
                    $('.page-template-bms-pipeline-trial .pipeline-ref p').show();
                  }
                });
              });
            }
          }, 1000);
        },
        setViewsInChildren: function setViewsInChildren() {
          this.trialFilter.setViews();
          this.therapeuticAreaFilter.setViews();
          this.deseasesAreasFilter.setViews();
          this.therapeuticArea.setViews();
          this.diseaseArea.setViews();
          this.viewAll.forEach(function (view) {
            view.setViews();
          });
        }
      };
      container.find(".cardContainer .card").each(function () {
        var da = $(this).attr("data-da");
        var ta = $(this).parents(".therapeuticAreasItem").attr("data-ta");
        views["viewAll"]["".concat(ta, "-").concat(da)] = new ViewAll({
          container: $(this),
          onViewAll: function onViewAll() {
            views.refreshFilters();
          },
          getViews: function getViews() {
            return views;
          }
        });
      });
      container.find('.nct-popup').on('click', function () {
        // console.log($(this).parent().parent().next('.hidden').find('.modal-content'))
        var dataShow = '.' + $(this).data('view');
        $(this).parent().parent().next('.hidden').find('.modal-content').find('li').addClass('hidden');
        $(this).parent().parent().next('.hidden').find('.modal-content').find("li".concat(dataShow)).removeClass('hidden');
        var content = $(this).parent().parent().next('.hidden').find('.modal-content').clone();
        $("#myVideoModal .modal-dialog").empty();
        var closeBtn = '<button type="button" class="close" data-dismiss="modal">&nbsp;</button>';
        $("#myVideoModal .modal-dialog").append(closeBtn);
        $("#myVideoModal .modal-dialog").append(content);
      });
      container.find("input[type='checkbox']").change(function () {
        var selctedTa = '';
        var triggerEvent = $(this).attr("data-triggerEvent");

        if (triggerEvent) {
          $(this).trigger(triggerEvent);
        }

        if (triggerEvent == 'ta-changed') {
          if ($(this).is(":not(:checked)")) {
            container.find('.clearThraupeticDiesese').removeClass('active');
          }
        }

        var filter = $(this).attr("name");
        var values = [];
        container.find("input[name='".concat(filter, "']:checked")).each(function () {
          selctedTa = $(this).parent().parent().parent().attr('data-ta');

          if (!$(this).hasClass("skipValue")) {
            values.push($(this).val());

            if ($(this).attr('name') != 'filter_phase' && $(this).attr('name') != 'filter_status') {
              if ($(this).attr('name') == 'filter_specialty') {
                $(this).parent().parent().find('.clearThraupeticDiesese').addClass('active');
              } else {
                $(this).parent().parent().parent().parent().find('.clearThraupeticDiesese').addClass('active');
              }
            }
          }
        });

        if (values.length == 0 && !$(this).hasClass("skipValue")) {
          container.find('.clearThraupeticDiesese').removeClass('active');
        }

        if (isMobilePortrait()) {
          return false;
        }

        console.log(filter);
        UTILITY.updateQueryString(location.href, filter, values.join(","));
        resetFilter();
        createFilterBtn();
      });
      container.find("input.trial-search-input").on('input', function () {
        var inVal = $(this).val();
        inVal = inVal.toLowerCase().replace(/\b[a-z]/g, function (letter) {
          return letter.toUpperCase();
        });

        if (inVal.length > 2) {
          if ($("#dieses li:contains(".concat(inVal, ")")).length) {
            // console.log($(`#dieses li:contains(${inVal})`).length)
            deseaseDisable();
            container.find('#dieses').slideDown();
            $("#dieses li:contains(".concat(inVal, ")")).show();
            $(this).addClass('focus');
            container.find('#dieses li.not-found').hide();
          } else {
            // container.find('#dieses').slideUp();
            // container.find('#dieses li').hide();
            container.find('#dieses').slideDown();
            container.find('#dieses li').hide();
            container.find('#dieses li.not-found').show();
            $(this).addClass('focus');
          }
        } else {
          container.find('#dieses').slideUp();
          container.find('#dieses li').hide();
          container.find('#dieses li.not-found').hide();
          $(this).removeClass('focus');
        }

        if (inVal.length > 0) {
          $('.pipeline-search').addClass('active');
        } else {
          $('.pipeline-search').removeClass('active');
        } // const selector = $(`#dieses [value="${value}"]`).data('selector');
        // container.find(`input[value='.${selector}']`).trigger('click');

      });
      container.find("input.trial-search-input").on('focus', function () {
        // alert(1);
        var inVal = $(this).val();
        inVal = inVal.toLowerCase().replace(/\b[a-z]/g, function (letter) {
          return letter.toUpperCase();
        });

        if (inVal.length > 2) {
          if ($("#dieses li:contains(".concat(inVal, ")")).length) {
            deseaseDisable();
            container.find('#dieses').slideDown();
            $("#dieses li:contains(".concat(inVal, ")")).show();
            $(this).addClass('focus');
          } else {
            container.find('#dieses').slideUp();
            container.find('#dieses li').hide();
            $(this).removeClass('focus');
          }
        } else {
          container.find('#dieses').slideUp();
          container.find('#dieses li').hide();
          $(this).removeClass('focus');
        }
      });
      $('.pipeline-search').on('click', function () {
        container.find("input.trial-search-input").val('');
        $(this).removeClass('active');
      });
      $(document).on('click', function (event) {
        if (!$(event.target).closest("input.trial-search-input").length && !$(event.target).closest("button.search-btn").length) {
          container.find('#dieses').slideUp();
          container.find('#dieses li').hide();
          container.find("input.trial-search-input").removeClass('focus');
        }
      });
      $('#topTheraupeticareaList li img, #topTheraupeticareaList li a, #topTheraupeticareaList li h3').on('click', function () {
        var selector = $(this).parents('li').data('target');
        var input = container.find("input[value='.".concat(selector, "']"));

        if (!input.is(":checked")) {
          if (input.attr("data-triggerEvent") && input.attr("data-triggerEvent") == "ta-changed") {
            container.find("input[name=\"desease\"]").filter("[value='".concat(selector, "']")).trigger("click");
          }

          container.find("input[value='.".concat(selector, "']")).trigger('click');
        }

        if (isMobile()) {
          location.reload();
        }
      });
      container.find('#dieses li').on('click', function () {
        if ($(this).hasClass('disabled')) {
          return false;
        }

        var selector = $(this).data('selector');
        var input = container.find("input[value='.".concat(selector, "']"));

        if (!input.is(":checked")) {
          if (input.attr("data-triggerEvent") && input.attr("data-triggerEvent") == "ta-changed") {
            container.find("input[name=\"desease\"]").filter("[value='".concat(selector, "']")).trigger("click");
          }

          container.find("input[value='.".concat(selector, "']")).trigger('click');
        }

        container.find("input.trial-search-input").val('');
        $('.pipeline-search').removeClass('active');
        container.find('#dieses').slideUp();
        container.find('#dieses li').hide();
        resetFilter();
        createFilterBtn();
      });

      function deseaseDisable() {
        $('.trials-section .filterPillsSelected a').each(function () {
          if (!$(this).hasClass('clearAllLink')) {
            var myVal = $(this).attr('value');
            myVal = myVal.replace('.', '');
            container.find('#dieses li').each(function () {
              if (($(this).attr('data-selector') == myVal || $(this).attr('data-parentselector') == myVal) && myVal != undefined) {
                $(this).addClass('disabled');
              } else {
                $(this).removeClass('disabled');
              }
            });
          }
        });
      }

      deseaseDisable();
      container.find(".closeFilter").on('click', function () {
        if (isDesktop()) {
          return false;
        }

        container.find(".cancelFilter").trigger('click');
      });
      container.find(".cancelFilter").on('click', function () {
        if (isDesktop()) {
          return false;
        }

        var selectedInputs = [];
        selectedInputs = selectedInputs.concat(views.trialFilter.getSelectedInputs()).concat(views.therapeuticAreaFilter.getSelectedInputs()).concat(views.deseasesAreasFilter.getSelectedInputs());

        if (selectedInputs.length) {
          for (var _i3 = 0; _i3 < selectedInputs.length; _i3++) {
            var value = selectedInputs[_i3];
            container.find("input[type='checkbox'][value='".concat(value, "']")).addClass("selected-inputs");
          }
        }

        container.find("input[type='radio']").not(".selected-inputs").prop("checked", false);
        container.find("input[type='checkbox']").not(".selected-inputs").prop("checked", false);
        setTimeout(function () {
          $(".selected-inputs").prop("checked", true).removeClass("selected-inputs");
        }, 2);
        views.therapeuticArea.show();
        views.diseaseArea.hide();
        container.find('.clearThraupeticDiesese').removeClass('active');
        var filters = ['filter_specialty', 'filter_celgene_da'];

        var _loop = function _loop(_i4) {
          var filter = filters[_i4];
          var values = [];
          container.find("input[name='".concat(filter, "']:checked")).each(function () {
            if (!$(this).hasClass("skipValue")) {
              values.push($(this).val());
            }
          });
          UTILITY.updateQueryString(location.href, filter, values.join(","));
        };

        for (var _i4 = 0; _i4 < filters.length; _i4++) {
          _loop(_i4);
        }

        resetSkipValue();
        resetFilter();
        createFilterBtn();
      });
      container.find(".applyFilter").click(function () {
        if (isDesktop()) {
          return false;
        }

        var deseasesAreasFiltervalues = [];
        var deseasesAreasFilter = '';
        var phaseFilterFiltervalues = [];
        var phaseFilterFilter = '';
        var statusFiltervalue = [];
        var statusFilter = '';
        var MydeseaseVal = '';
        container.find(".disease-area-filter input[type=checkbox]:checked").each(function () {
          var ckbxLngth = $(this).parents('.disease-area-filter').find('input[type=checkbox]').length;
          var ckbxckdLngth = $(this).parents('.disease-area-filter').find('input[type=checkbox]:checked').length;

          if (ckbxckdLngth < ckbxLngth) {
            deseasesAreasFilter = $(this).attr('name');
            deseasesAreasFiltervalues.push($(this).val());
          } else {
            deseasesAreasFilter = $(this).parents('.disease-area-filter').siblings('.therapeutic-area-filter').find('input[type=checkbox]:checked').attr('name'); // console.log(MydeseaseVal)

            if (MydeseaseVal != $(this).parents('.disease-area-filter').siblings('.therapeutic-area-filter').find('input[type=checkbox]:checked').val()) {
              MydeseaseVal = $(this).parents('.disease-area-filter').siblings('.therapeutic-area-filter').find('input[type=checkbox]:checked').val();
              deseasesAreasFiltervalues.push($(this).parents('.disease-area-filter').siblings('.therapeutic-area-filter').find('input[type=checkbox]:checked').val());
            }
          }
        });
        container.find(".phaseFilter input[type=checkbox]:checked").each(function () {
          phaseFilterFilter = $(this).attr('name');
          phaseFilterFiltervalues.push($(this).val());
        });
        container.find(".statusFilter input[type=checkbox]:checked").each(function () {
          statusFilter = $(this).attr('name');
          statusFiltervalue.push($(this).val());
        });
        UTILITY.updateQueryString(location.href, deseasesAreasFilter, deseasesAreasFiltervalues.join(","));
        UTILITY.updateQueryString(location.href, phaseFilterFilter, phaseFilterFiltervalues.join(","));
        UTILITY.updateQueryString(location.href, statusFilter, statusFiltervalue.join(","));
        container.find('.filterPills input:radio').prop("checked", false);
        $('.deseases').show();
        $('.diesesAreas').hide();
        $('.thearepeticAreas').hide();
        resetFilter();
        createFilterBtn();
      });
      container.find('.resetfilter').on('click', function () {
        output.html("");
        container.find('.filterPills input:radio').prop("checked", false);
        container.find('.filterPills input:checkbox').prop("checked", false);
        var urlParams = UTILITY.getParamsByPrefix("filter_");

        for (var name in urlParams) {
          UTILITY.updateQueryString(location.href, name, "");
        }

        resetSkipValue();
        resetFilter();
        createFilterBtn();
      });
      container.on("click", ".clearAllLink", function () {
        container.find('input:radio').prop("checked", false);
        container.find("input:checkbox").prop("checked", false);
        var urlParams = UTILITY.getParamsByPrefix("filter_");

        for (var name in urlParams) {
          UTILITY.updateQueryString(location.href, name, "");
        }

        $('.deseases').slideDown('slow');
        $('.thearepeticAreas').slideUp('slow');
        $('.deseases').find('input[type="radio"]').prop('checked', false);
        resetSkipValue();
        resetFilter();
        createFilterBtn();
      }); //clearThraupeticDiesese

      container.find('.clearThraupeticDiesese').on('click', function () {
        $(this).removeClass('active');
        $(this).parent().parent().parent().find('.deseasesAreasFilter input:checkbox').prop('checked', false); // container.find('input:radio').prop("checked", false);
        // container.find("input:checkbox").prop("checked", false);

        var filters = ['filter_specialty', 'filter_celgene_da'];

        var _loop2 = function _loop2(_i5) {
          var filter = filters[_i5];
          var values = [];
          container.find("input[name='".concat(filter, "']:checked")).each(function () {
            if (!$(this).hasClass("skipValue")) {
              values.push($(this).val());
            }
          });
          UTILITY.updateQueryString(location.href, filter, values.join(","));
        };

        for (var _i5 = 0; _i5 < filters.length; _i5++) {
          _loop2(_i5);
        }

        resetSkipValue($(this));
        resetFilter();
        createFilterBtn();
      });
      container.on("click", ".removeFilter", function () {
        $(this).remove();
        var removeItemArray = $(this).attr("value");
        container.find("input[value=\"".concat(removeItemArray, "\"]")).prop("checked", false);
        var name = container.find("input[value=\"".concat(removeItemArray, "\"]")).attr("name");
        container.find('#dieses').find(removeItemArray).removeClass('disabled');
        var slected = removeItemArray.replace('.', ''); // console.log(slected)

        $('.disease-area-filter[data-ta="' + slected + '"]').find('input[type="checkbox"]').prop('checked', false); // UTILITY.updateQueryString(location.href, name, "");

        var values = [];
        container.find("input[name='".concat(name, "']:checked")).each(function () {
          values.push($(this).val());
        });
        UTILITY.updateQueryString(location.href, name, values.join(","));
        resetFilter();

        if ($('.removeFilter').length < 1) {
          $('.clearAllLink').remove();
        }
      });
      $(window).resize(function () {
        if (isMobile()) {// return;
        }

        resetFilter();
      });

      function resetSkipValue(ele) {
        console.log(ele);

        if (ele != undefined) {
          ele.parent().parent().find('.disease-area-filter').find('.skipValue').removeClass("skipValue");
        } else {
          $(".skipValue").removeClass("skipValue");
        }
      }

      function resetFilter() {
        // resetViews();
        views.trialFilter.setFilters();
        views.therapeuticAreaFilter.setFilters();
        views.deseasesAreasFilter.setFilters();
        setTimeout(function () {
          refreshViews();
        }, 50);
      }

      function createFilterBtn() {
        output.html("");
        var selectedInputs = [];
        selectedInputs = selectedInputs.concat(views.trialFilter.getSelectedValues()).concat(views.therapeuticAreaFilter.getSelectedValues("update-container")).concat(views.deseasesAreasFilter.getSelectedValues("update-da-container"));
        selectedInputs = selectedInputs.filter(function (input, index, self) {
          return index === self.findIndex(function (t) {
            return t.attr("value") === input.attr("value");
          });
        });

        for (var _i6 = 0; _i6 < selectedInputs.length; _i6++) {
          var buttons = selectedInputs[_i6];
          buttons.appendTo(output);
        }

        if (selectedInputs.length) {
          var cancelBT = $("<div class=\"clearfix visible-sm visible-xs\"></div><a href=\"javascript:;\" class=\"clearAllLink\">Clear all</a>");
          cancelBT.appendTo(output);
          setTimeout(function () {
            var posTop = $('#trialList').position().top - $('header').height();
            $("html, body").animate({
              scrollTop: posTop
            }, "slow");
          }, 1500);
        }
      }

      function refreshViews() {
        var selectedTrials = views.trialFilter.getSelectedInputs();
        var selectedTA = views.therapeuticAreaFilter.getSelectedInputs();
        var selectedDA = views.deseasesAreasFilter.getSelectedInputs();

        if (selectedTA.length) {
          selectedTA.map(function (ta) {
            var values = ta.split(".");

            for (var _i7 = 1; _i7 < values.length; _i7++) {
              var value = "." + values[_i7];
              var taItem = container.find("".concat(value, ".therapeuticAreasItem"));

              if (taItem.attr("data-ta") == value.slice(1)) {
                taItem.find(".card").each(function () {
                  var da = $(this).attr("data-da");
                  selectedDA.push(".".concat(da));
                });
              }
            }
          });
        }

        var cardViews = views.viewAll;

        if (selectedDA.length) {
          cardViews = [];
          selectedDA.map(function (da) {
            var ta = container.find(".card".concat(da)).parents(".therapeuticAreasItem").attr("data-ta");
            cardViews["".concat(ta, "-").concat(da.slice(1))] = views.viewAll["".concat(ta, "-").concat(da.slice(1))];
          });
        }

        for (var da in cardViews) {
          if (!cardViews[da]) {
            continue;
          }

          cardViews[da].resetParent();
        }

        var isEmpty = true;
        var firstDAAvailable = '';
        var taKey = [];

        for (var _da in cardViews) {
          if (!cardViews[_da]) {
            continue;
          }

          var ta = _da.split("-")[0];

          taKey[ta] = _da;

          if (!firstDAAvailable) {
            firstDAAvailable = _da;
          }

          if (!cardViews[_da].update(selectedTrials, selectedDA)) {
            isEmpty = false; // if ($(".cardNoResult").hasClass('bms-trials-noResult-show')) {
            //     $(".trialContainerP").show();
            //     $(".cardNoResult").removeClass('bms-trials-noResult-show');
            // }
          }
        }

        for (var _ta in taKey) {
          cardViews[taKey[_ta]].toggleParent();
        }

        if (isEmpty) {
          if (views.viewAll[firstDAAvailable]) {
            views.viewAll[firstDAAvailable].showEmptyMessage();
          } else {
            ViewAll.showEmptyMessage();
          }
        } else {
          ViewAll.hideEmptyMessage();
        }

        views.refreshFilters();
      }

      function isIpad() {
        return $(window).width() > 768;
      }

      function isDesktop() {
        return $(window).width() > 991;
      }

      function isMobile() {
        return $(window).width() < 992;
      }

      function isMobilePortrait() {
        return $(window).width() < 768;
      }

      views.setViewsInChildren();

      if (Object.keys(UTILITY.getParamsByPrefix("filter_")).length) {
        resetFilter();
        createFilterBtn();
      } else {
        views.refreshFilters();
      }

      $(window).on('popstate load', function (event) {
        // if (Object.keys(UTILITY.getParamsByPrefix(("filter_"))).length) {
        resetFilter();
        createFilterBtn(); // } else {
        //     views.refreshFilters();
        // }
      });
      var filterPanel = container.find('.filter-area');
      var stickyMUP = 0;
      var scrollPos = 0;
      var filterTopHgt = filterPanel.find('.filter-top-content').height();
      var sticky = filterPanel.offset().top - 60 + filterTopHgt;
      var stickyL = filterPanel.offset().left;
      var fpHeight = filterPanel.height();
      var secTop = $('#trialList').offset().top - 60;
      var mobileState = sticky + fpHeight;
      var myst = 0;

      window.onscroll = function () {
        stickyFilter();

        if (isDesktop()) {
          stickyIconFunction();
        }

        if (isMobile()) {
          container.find(".therapeuticAreasContainer .deases-icon").removeClass("active");
          container.find(".therapeuticAreasContainer .deases-icon").removeAttr('style');
        }
      };

      if (isMobile()) {
        sticky = sticky + fpHeight;
        stickyMUP = sticky - fpHeight;
      }

      $(window).on('resize', function () {
        filterPanel.removeClass('sticky');
        filterPanel.removeAttr('style');
        $('#trialList').removeAttr('style');
        filterTopHgt = filterPanel.find('.filter-top-content').height();
        sticky = filterPanel.offset().top - 60 + filterTopHgt;
        stickyL = filterPanel.offset().left;
        fpHeight = filterPanel.height();
        secTop = $('#trialList').offset().top - 60;
        mobileState = sticky + fpHeight;

        if (isMobile()) {
          container.find(".therapeuticAreasContainer .deases-icon").removeClass("active");
          container.find(".therapeuticAreasContainer .deases-icon").removeAttr('style');
          sticky = sticky + fpHeight;
          stickyMUP = sticky - fpHeight;
        }

        stickyFilter();

        if (isDesktop()) {
          stickyIconFunction();
        }
      });
      $('.rc-title').on('click', function () {
        if ($(this).hasClass('active')) {
          $('.recruiting-icon-type').slideUp();
          $(this).removeClass('active');
          $(this).parents('.icons-representation').removeClass('active');
        } else {
          $('.recruiting-icon-type').slideDown(function () {
            sticky = filterPanel.offset().top - 60 + filterTopHgt;
          });
          $(this).addClass('active');
          $(this).parents('.icons-representation').addClass('active');
        }
      });

      function stickyFilter() {
        if (window.pageYOffset >= sticky) {
          filterPanel.addClass('sticky');
          $('#trialList').css({
            paddingTop: fpHeight
          });
          filterPanel.css({
            marginTop: -filterTopHgt
          });

          if (isIpad()) {
            filterPanel.css({
              left: stickyL
            });
          }

          if (isMobile()) {
            // filterPanel.css({marginTop: -(filterTopHgt+15)});
            $('.trials-section .filterPillsSelected').show();

            if (window.pageYOffset > scrollPos) {
              sticky = mobileState;
              scrollPos = window.pageYOffset; // $('.trials-section .filterPillsSelected').hide();

              filterPanel.hide();
            }

            if (window.pageYOffset < scrollPos) {
              sticky = secTop;
              scrollPos = window.pageYOffset; // $('.trials-section .filterPillsSelected').show();

              filterPanel.show();
            } // clearTimeout( $.data( this, "scrollCheck" ) );
            // $.data( this, "scrollCheck", setTimeout(function() {
            //     $('.trials-section .filterPillsSelected').show();
            // }, 250) );

          }
        } else {
          filterPanel.show();
          filterPanel.removeClass('sticky');
          filterPanel.removeAttr('style');
          $('#trialList').removeAttr('style');
        }

        if (isMobile) {
          if (window.pageYOffset <= stickyMUP) {
            filterPanel.show();
            filterPanel.removeClass('sticky');
            filterPanel.removeAttr('style');
            $('#trialList').removeAttr('style');
          }
        }
      } // let stickyIconL = container.find('.therapeuticAreasItem').offset().left+22.5;


      function stickyIconFunction() {
        var filterTopHgt = filterPanel.find('.filter-top-content').height();
        var filterPanelHeight = container.find('.trial-filter-panel').height() + $('header').height() - filterTopHgt + 10;
        container.find('.therapeuticAreasContainer > div').each(function () {
          $this = $(this);
          $elmTop = $this.offset().top;
          $elmChild = $this.children(".deases-icon");

          if ($(window).scrollTop() >= container.find('.therapeuticAreasContainer > div').first().offset().top - filterPanelHeight) {
            if ($(window).scrollTop() >= $elmTop - filterPanelHeight && $(window).scrollTop() < $elmTop - filterPanelHeight + ($this.innerHeight() - ($elmChild.height() + 40))) {
              container.find(".therapeuticAreasContainer .deases-icon").removeClass("active");
              $elmChild.addClass("active").css("cssText", "top:" + filterPanelHeight + "px");
            } else {
              if ($(window).scrollTop() + filterPanelHeight > $elmChild.next().offset().top) {
                $elmChild.removeClass("active").css("cssText", "top:initial; bottom: 40px;");
              } else if ($(window).scrollTop() + filterPanelHeight <= $elmChild.next().offset().top) {
                $elmChild.removeClass("active").css("cssText", "top:0px;");
              } // if($(window).scrollTop() > $elmChild.next().offset().top && ($(window).scrollTop() + filterPanelHeight) < ($elmChild.next().offset().top + $elmChild.next().outerHeight())) {
              //     $elmChild.removeClass("active").css("cssText", "top:initial; bottom: 40px;");
              // } else {
              //     $elmChild.removeClass("active").css("cssText", "top:0px;");
              // }
              // $elmChild.removeClass("active").css("cssText", "top:0px;");
              // if ($elmChild.hasClass('active')) {
              //     let posT = $(window).scrollTop() - $elmTop+filterPanelHeight
              //     $elmChild.removeClass("active").css("cssText", "top:" + posT + "px;");
              // }    

            }
          } else {
            $elmChild.removeClass("active").css("cssText", "top:0px;");
          }
        });
      }

      $('.col-md-1.deases-icon').removeClass('hidden');
    };

    module.exports = BMSTrials;
  }, {
    "./bms-science/filters/views/diseaseArea": 8,
    "./bms-science/filters/views/therapeuticArea": 9,
    "./bms/filter": 11,
    "./bms/view-all": 12,
    "./utility": 46
  }],
  11: [function (require, module, exports) {
    var UTILITY = require("./../utility");

    var Filter = function Filter(obj) {
      var container = obj.container,
          filter = obj.filter,
          type = obj.type,
          inputContainer = obj.inputContainer,
          relation = obj.relation;
      var self = this;
      var views = false;
      container.isotope({
        itemSelector: filter,
        filter: '*',
        resize: true,
        containerStyle: {
          position: 'relative'
        },
        layoutMode: 'fitRows'
      });
      var iso = container.data('isotope');
      /**
       * Refresh the isotope view on change
       */

      this.refresh = function () {
        container.isotope('layout');
      };
      /**
       * Updates the filters and then calls refresh
       * @param filterValue: New filter to be applied.
       */


      this.update = function () {
        var filterValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "*";

        if (filterValue == "*") {// resetSkipValue();
        }

        container.data('filterValue', filterValue);
        container.isotope({
          filter: filterValue
        }); // let count = iso.filteredItems.length;
        // if(count == 0){
        //     $(".trialContainerP").hide();
        //     $(".cardNoResult").addClass('bms-trials-noResult-show');
        // }else{
        //     $(".trialContainerP").show();
        //     $(".cardNoResult").removeClass('bms-trials-noResult-show');
        // }

        setTimeout(function () {
          self.refresh();
        }, 100);
        setTimeout(function () {
          var nctCount = [];
          container.find('.cardContainer:visible .card:visible .phaseRow.selectedItem').each(function () {
            var nctids = $(this).data('nctids').split(','); // console.log(nctids);

            for (var n = 0; n < nctids.length; n++) {
              nctCount.push(nctids[n]);
            } // console.log(nctCount);

          });

          function getUnique(array) {
            var uniqueArray = [];

            for (var _i8 = 0; _i8 < array.length; _i8++) {
              if (uniqueArray.indexOf(array[_i8]) === -1) {
                uniqueArray.push(array[_i8]);
              }
            }

            return uniqueArray;
          }

          container.parents(".trials-section").siblings(".pipeline-ref-section").removeClass('no-card');

          if (container.parents(".therapeuticAreasContainer").height() == 0) {
            container.parents(".trials-section").siblings(".pipeline-ref-section").addClass('no-card');
          } // let uniqueNames = getUnique(nctCount);
          // let count = uniqueNames.length;
          // console.log('count filter-js', count);
          // if(count != 1){
          //     $('.trial-count').text('Displaying '+count+' trials.');
          // }else{
          //     $('.trial-count').text('Displaying '+count+' trial.');
          // }

        }, 1000);
      };
      /**
       * Returns the array of selectors of filters that have been applied so far.
       * @returns {*[]|*}
       */


      this.getSelectedInputs = function () {
        var filterValue = container.data('filterValue');

        if (filterValue == '*' || filterValue == undefined) {
          return [];
        }

        return filterValue.split(", ");
      };
      /**
       * Returns the array of buttons (with text value to be shown in the pill)
       * @returns {[]}
       */


      this.getSelectedValues = function (filter) {
        var wrapper = getWrapper(filter);
        var selectedInputs = this.getSelectedInputs();
        $('#dieses li').removeClass('disabled');
        var selectedValues = [];
        var checker = [];

        for (var _i9 = 0; _i9 < selectedInputs.length; _i9++) {
          var value = selectedInputs[_i9];
          var values = value.split(".");

          for (var _i10 = 1; _i10 < values.length; _i10++) {
            value = ".".concat(values[_i10]); // console.log(value);

            var input = wrapper.find("input[value='".concat(value, "']")); // console.log(input);

            if (!input.length || input.hasClass("skipValue")) {
              continue;
            }

            var textValue = input.attr("data-name");
            var buttons = $("<a value=\"".concat(value, "\" class=\"removeFilter ").concat(value, " \">").concat(textValue, "</a>"));

            if (!checker.includes(value)) {
              selectedValues.push(buttons);
              checker.push(value);
              $('#dieses').find(value).addClass('disabled');
            }
          }
        }

        return selectedValues;
      };
      /**
       * Function to update the filter input from some external trigger
       * @param enable: true/false
       * @param filter: selector to target specific section
       */


      this.updateInputs = function (enable) {
        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var wrapper = getWrapper(filter);
        wrapper.find("input[type='".concat(type, "']")).prop("checked", enable); // console.log(wrapper);

        var filtersAdded = {};
        inputContainer.find("input[type='".concat(type, "']")).each(function () {
          var name = $(this).attr("name");

          if (!filtersAdded[name]) {
            filtersAdded[name] = [];
          }
        });
        inputContainer.find("input[type='".concat(type, "']:checked")).each(function () {
          var name = $(this).attr("name");
          var value = $(this).val();

          if (!$(this).hasClass("skipValue")) {
            filtersAdded[name].push(value);
          }
        }); // console.log(filtersAdded);

        for (filter in filtersAdded) {
          UTILITY.updateQueryString(location.href, filter, filtersAdded[filter].join(","));
        }
      };

      this.updateInput = function (input, enable) {
        inputContainer.find("input[value='".concat(input, "']")).prop("checked", enable);
      };
      /**
       * Function to set skipValue for certain input. This prevents returning in getSelectedValues
       * @param skipValue true/false
       * @param filter: selector to target specific section
       */


      this.setSkipValue = function (skipValue) {
        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var wrapper = getWrapper(filter); // console.log(skipValue);
        // console.log(wrapper.find(`input[type='${type}']`));

        if (skipValue) {
          wrapper.find("input[type='".concat(type, "']")).addClass("skipValue");
        } else {
          wrapper.find("input[type='".concat(type, "']")).removeClass("skipValue");
        }
      };
      /**
       * Function to determine if all the inputs are selected
       * @param filter: selector to target specific section
       * @returns {boolean}
       */


      this.isSelectAll = function (filter) {
        var wrapper = getWrapper(filter);
        var totalInputs = wrapper.find("input[type='".concat(type, "']"));
        var selectedInputs = wrapper.find("input[type='".concat(type, "']:checked"));
        return totalInputs.length == selectedInputs.length;
      };
      /**
       * returns the type of the filter input (checkbox/radio etc)
       * @returns {*}
       */


      this.getType = function () {
        return type;
      };

      this.setViews = function () {
        views = obj.getViews();
      };

      this.setFilters = function () {
        var inputs = [];
        inputContainer.each(function () {
          var filter = $(this).find("input[type='".concat(type, "']")).attr("name");

          if (filter && !inputs.includes(filter)) {
            inputs.push(filter);
          }
        });
        var value = [];

        for (var n in inputs) {
          var name = inputs[n];
          var values = UTILITY.getQueryString(location.href, name);

          if (values) {
            value.push(decodeURIComponent(values).split(","));
          }
        }

        var filterValue = "*";

        if (value.length == 1) {
          filterValue = value[0].join(", ");
        } else if (value.length > 1) {
          if (relation == "OR") {
            value = [].concat.apply([], value);
            filterValue = value.join(", ");
          } else if (relation == "AND") {
            filterValue = value.reduce(function (a, b) {
              return a.reduce(function (r, v) {
                return r.concat(b.map(function (w) {
                  return [].concat(v, w);
                }));
              }, []);
            });
            filterValue = filterValue.map(function (a) {
              return a.join('');
            }).join(", ");
          }
        }

        this.update(filterValue);
      };

      function resetSkipValue() {
        inputContainer.find("input[type='".concat(type, "']")).removeClass("skipValue");
      }

      function getWrapper(filter) {
        var wrapper = inputContainer;

        if (filter) {
          wrapper = inputContainer.filter(".".concat(filter));
        }

        return wrapper;
      }
    };

    module.exports = Filter;
  }, {
    "./../utility": 46
  }],
  12: [function (require, module, exports) {
    var ViewAll = function ViewAll(obj) {
      var container = obj.container,
          onViewAll = obj.onViewAll;
      var rows = container.find(".phaseContainer .phaseRow");
      var parentHidden = true;
      var self = this;
      var visibleCards = [];
      container.find(".viewDisplayBx .viewAllBut").on('click', function () {
        refreshCardView(true);

        if (!$(this).hasClass("active")) {
          $('html, body').animate({
            scrollTop: container.offset().top - 100 // Use the id of your destination on the page

          }, 200);
        }
      });

      this.update = function () {
        var selectedInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var selectedCards = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        container.find(".cardContent").show();
        container.find(".trialContainer").show();
        container.find(".cardNoResult").hide();
        rows.removeClass("selectedItem");

        if (selectedInputs.length) {
          var _loop3 = function _loop3(_i11) {
            var value = selectedInputs[_i11];
            rows.each(function (index) {
              $(this).parent().find(value).show();
              $(this).parent().find(value).addClass("selectedItem");
            });
          };

          for (var _i11 = 0; _i11 < selectedInputs.length; _i11++) {
            _loop3(_i11);
          }
        } else {
          rows.addClass("selectedItem");
        }

        visibleCards = selectedCards;
        return refreshCardView(false);
      };

      this.showEmptyMessage = function () {
        container.show();

        if (container.parents(".therapeuticAreasItem").length) {
          container.parents(".therapeuticAreasItem").data("hidden", 0);
          container.parents(".therapeuticAreasItem").show();
        }

        container.find(".cardContent").hide();
        container.find(".trialContainer").hide();
        container.find(".cardNoResult").show();
        onViewAll();
      };

      this.showNoResults = function () {
        if (container.parents(".therapeuticAreasItem").length && visibleCards.length) {
          container.addClass('bms-trials-noResult');
          container.find(".cardNoResult").show();
          container.find(".disease-header").hide();
          container.find(".viewDisplayBx").hide();
        } else {
          container.hide();
        }

        onViewAll();
      };

      this.hideNoResults = function () {
        if (container.parents(".therapeuticAreasItem").length && visibleCards.length) {
          container.removeClass('bms-trials-noResult');
          container.find(".cardNoResult").hide();
          container.find(".disease-header").show();
        } else {
          container.show();
        }

        onViewAll();
      };

      this.toggleParent = function () {
        if (container.parents(".therapeuticAreasItem").length) {
          var count = container.parents(".therapeuticAreasItem").data("hidden");
          var cards = container.parents(".therapeuticAreasItem").find(".card").length;

          if (cards == count) {
            container.parents(".therapeuticAreasItem").addClass("bms-trials-noResult-all");

            if (!visibleCards.length) {
              container.parents(".therapeuticAreasItem").hide();
            }
          }
        }

        onViewAll();
      };

      this.isParentHidden = function () {
        return parentHidden;
      };

      this.resetParent = function () {
        container.parents(".therapeuticAreasItem").data("hidden", 0);
        container.parents(".therapeuticAreasItem").data("checker", 0);
        container.parents(".therapeuticAreasItem").show();
        container.parents(".therapeuticAreasItem").removeClass("bms-trials-noResult-all");
        container.parents(".therapeuticAreasItem").show();
        container.show();
        visibleCards = [];
      };

      function refreshCardView() {
        var isClick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var isHidden = false;
        var selectedRows = rows.filter(".selectedItem");
        var ele = container.find(".viewDisplayBx .viewAllBut");
        var checker = container.parents(".therapeuticAreasItem").data("checker") ? Number(container.parents(".therapeuticAreasItem").data("checker")) : 0;
        container.parents(".therapeuticAreasItem").data("checker", checker + 1);
        container.show();
        container.find(".phaseContainer .phaseRow:not(.selectedItem)").hide();
        selectedRows.show();

        if (selectedRows.length == 0) {
          self.showNoResults();
          isHidden = true;
          parentHidden = true;
          var count = container.parents(".therapeuticAreasItem").data("hidden") ? Number(container.parents(".therapeuticAreasItem").data("hidden")) : 0;
          container.parents(".therapeuticAreasItem").data("hidden", count + 1);
        } else if (selectedRows.length <= 5) {
          container.find(".viewDisplayBx").hide();
          self.hideNoResults();
          parentHidden = false;
        } else {
          container.find(".viewDisplayBx").show();
          parentHidden = false;
        }

        var textEle = container.find(".displayTxt .phaseShow");
        var textTotal = container.find(".displayTxt .phaseTotal");
        var isActive = ele.hasClass("active");
        textEle.text(!isClick || isActive ? "5" : selectedRows.length);
        textTotal.text(selectedRows.length);
        ele.html(!isClick || isActive ? "Expand All" : "Collapse");
        ele.toggleClass("active", isClick && !isActive);

        if (!isClick || isActive) {
          selectedRows.filter(function (index) {
            return index > 4;
          }).hide();
        } else {
          selectedRows.show();

          if ($(window).width() < 768) {
            selectedRows.css({
              display: 'block'
            });
          }
        } // raise event for the parent


        if (isClick) {
          onViewAll();
        }

        return isHidden;
      }

      this.update();
    };

    ViewAll.showEmptyMessage = function () {
      $(".cardContent").hide();
      $(".trialContainer").hide();

      if ($(".trialContainerP").length) {
        $(".trialContainerP").hide();
        $(".cardNoResult").addClass('bms-trials-noResult-show');
      }
    };

    ViewAll.hideEmptyMessage = function () {
      $(".cardContent").show();
      $(".trialContainer").show();

      if ($(".trialContainerP").length) {
        $(".trialContainerP").show();
        $(".cardNoResult").removeClass('bms-trials-noResult-show');
      }
    };

    module.exports = ViewAll;
  }, {}],
  13: [function (require, module, exports) {
    var API = require("./api");

    var DonutChart = require("./donut-chart");

    function BSChart(obj) {
      if (!jQuery("canvas").length) {
        return false;
      }

      var api = new API();
      var self = this;
      var specialtyOff = false;
      var reset = false;
      var updateLegends = false;
      var is_parent_ta = $("[name='is_parent_ta']");
      var parent_ta = $("[name='parent_ta']");
      var userSpeciality = [];

      if (phpData.payload) {
        userSpeciality = phpData.payload.data.request.user_specialties;
      }

      var switchBxText = $('.switchBx .switchBxText');
      var views = {
        phase: new DonutChart({
          canvasId: 'phaseChart',
          legendsId: 'phaseLegend',
          form: 'js-phase-form',
          key: 'phases',
          inputName: 'phase[]',
          cutoutPercentage: 84,
          colorSet: [getColorSet('phaseChartColor1'), getColorSet('phaseChartColor2')],
          labels: ["Phase 1", "Phase 2", "Phase 3"],
          // labels: ["Early Phase 1","Phase 1", "Phase 2", "Phase 3"],
          handleResponse: function handleResponse(e) {
            _handleResponse(e);
          }
        }),
        status: new DonutChart({
          canvasId: 'statusChart',
          legendsId: 'statusLegend',
          form: 'js-status-form',
          key: 'statuses',
          inputName: 'status[]',
          cutoutPercentage: 88,
          colorSet: [getColorSet('statusChartColor1'), getColorSet('statusChartColor2')],
          // labels: ["Recruiting", "Not Yet Recruiting", "Active, Not Recruiting", "Enrolling by Invitation", "Completed", "Other"],
          // labels: ["Recruiting", "Not Yet Recruiting", "Active, Not Recruiting"],
          labels: ["Recruiting", "Not Yet Recruiting"],
          handleResponse: function handleResponse(e) {
            _handleResponse(e);
          }
        }),
        parent: "",
        setParent: function setParent(view) {
          this.unsetAll();
          this.parent = view;

          if (view) {
            this[view].setParent();
          }
        },
        unsetAll: function unsetAll() {
          this.phase.unsetParent();
          this.status.unsetParent();
        },
        update: function update(data) {
          // console.log(data)
          var parent = this.parent;

          if (!parent) {
            this.status.enableLegends(reset);
            this.phase.enableLegends(reset);
            this.phase.updateChart(data);
            this.status.updateChart(data); // if (updateLegends) {

            this.phase.updateLegends(data.data.filters[this.phase.getKey()]);
            this.status.updateLegends(data.data.filters[this.status.getKey()]);
            updateLegends = false; // }

            return;
          }

          var child = parent === "status" ? "phase" : "status";
          var responseData = data.data.filters[this[child].getKey()];

          if (this[parent].hasChanged()) {
            this[child].updateLegends(responseData);
          }

          this[parent].enableLegends();
          this.phase.updateChart(data);
          this.status.updateChart(data);
        }
      };
      $(".conditionBx .btn-toggle").click(function (e) {
        specialtyOff = $(e.target.parentElement).find('button.active').text() === 'OFF' ? 0 : 1;
        $(".youSpeciality").show();
        $(".allSpeciality").hide();

        if (specialtyOff) {
          $("#filter_conditions").val("");
          $(".youSpeciality").hide();
          $(".allSpeciality").show();
        }

        reset = true;

        _handleResponse(e);
      });
      var totalWrapper = document.getElementById('js-countNumber');

      this.init = function (data) {
        var setLegends = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (setLegends) {
          views.status.setLegends(data.data.filters.statuses);
          views.phase.setLegends(data.data.filters.phases);
        }

        this.processResponse(data);
      };

      this.update = function () {
        var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.incomingRequest = request;

        _handleResponse();
      };

      this.setUpdateLegends = function (bool) {
        updateLegends = bool;
      };
      /**
       * Handle AJAX response to Elastic Search.
       */


      function _handleResponse() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var target = e.target;

        if (target && !views.parent) {
          if ('status[]' === target.name || 'phase[]' === target.name) {
            views.setParent(target.name.slice(0, -2));
          }
        } // console.log(e);


        var requestData = {
          'phase': views.phase.getCheckedLegends(),
          'status': views.status.getCheckedLegends(),
          'parent': views.parent
        };

        if (0 < phpData.da.length) {
          requestData.da = phpData.da;
        } // change text of view trials text and specialities


        if (!specialtyOff) {
          switchBxText.text('View trials across all specialties');
          requestData.user_specialties = userSpeciality;
        } else {
          switchBxText.text('View trials across your selected specialties');
        }

        if (is_parent_ta.length) {
          requestData['is_parent_ta'] = is_parent_ta.val();
        }

        if (parent_ta.length) {
          requestData['parent_ta'] = parent_ta.val();
        }

        $.extend(requestData, self.incomingRequest);
        obj.getViews().form.trigger("updateFilters", {
          phases: views.phase.getCheckedLegendsSearchValue().join(","),
          statuses: views.status.getCheckedLegendsSearchValue().join(",")
        });
        api.get(phpData.searchApiUrl, requestData).then(function (data) {
          self.processResponse(data);
        }, self.errorHandler);
      }

      function number_format(number, decimals, dec_point, thousands_sep) {
        // Strip all characters but numerical ones.
        number = (number + '').replace(/[^0-9+\-Ee.]/g, '');

        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,
            dec = typeof dec_point === 'undefined' ? '.' : dec_point,
            s = '',
            toFixedFix = function toFixedFix(n, prec) {
          var k = Math.pow(10, prec);
          return '' + Math.round(n * k) / k;
        }; // Fix for IE parseFloat(0.55).toFixed(0) = 0;


        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');

        if (s[0].length > 3) {
          s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }

        if ((s[1] || '').length < prec) {
          s[1] = s[1] || '';
          s[1] += new Array(prec - s[1].length + 1).join('0');
        }

        return s.join(dec);
      }
      /**
       * Process errors.
       */


      this.errorHandler = function () {
        console.log('Ajax call was not successful.');
      };
      /**
       * Process AJAX response.
       */


      this.processResponse = function (data) {
        // Total count.
        totalWrapper.textContent = number_format(data.data.total, 0); // console.log(data.data.total)

        if (data.data.total == 1) {
          $('.chartText').text('trial');
        } else {
          $('.chartText').text('trials');
        }

        var statusActiveCheck = views.status.isLegendSelected();
        var phaseActiveCheck = views.phase.isLegendSelected();

        if ($("body").hasClass("logged-in") == true) {
          if (number_format(data.data.total, 0) <= 5) {
            $(".lessResultsText").css("display", "block");
          } else {
            $(".lessResultsText").css("display", "none");
          }
        }

        if (!statusActiveCheck && !phaseActiveCheck) {
          views.setParent("");
        } else if ('status' === views.parent && !statusActiveCheck) {
          // set phase to parent
          views.setParent("phase");
        } else if ('phase' === views.parent && !phaseActiveCheck) {
          // set status to parent
          views.setParent("status");
        }

        var celgene_input = document.getElementById('filter_celgene_da');

        if (celgene_input && data.data.request && data.data.request.celgene_da && 0 < data.data.request.celgene_da.length) {
          var all_da = data.data.request.celgene_da.map(function (da) {
            return ".".concat(da.replace('bms-pipeline-', ''));
          });
          celgene_input.value = all_da.join(',');
        }

        var user_specialties = document.getElementById('filter_conditions');

        if (user_specialties && data.data.request && data.data.request.user_specialties && 0 < data.data.request.user_specialties.length) {
          user_specialties.value = data.data.request.user_specialties.join(',');
        }

        views.update(data);
      };

      function getColorSet(set) {
        // For Status
        // const colorSet1 = ["#c37900", "#ba4422", "#501514", "#33d6f1", "#138967", "#097789"];
        // const colorSet2 = ["#9e6201", "#92361b", "#360e0e", "#2aaec4", "#0f6a50", "#075967"];
        var colorSet1 = ["#33d6f1", "#138967"];
        var colorSet2 = ["#4fbcd8", "#0f6b51"]; // For Phase
        // const colorSet3 = ["#f1c248", "#ec0479", "#f6882e", "#ef5333", "#eeee13", "#ff00c3"];
        // const colorSet4 = ["#cda53d", "#c90367", "#d17427", "#cb472b", "#cbcb10", "#d900a6"];

        var colorSet3 = ["#ffd186", "#ffac24", "#df5f39", "#501515"];
        var colorSet4 = ["#deb46e", "#d8911c", "#bb4e2d", "#310c0c"];

        switch (set) {
          case 'statusChartColor1':
            return colorSet1;

          case 'statusChartColor2':
            return colorSet2;

          case 'phaseChartColor1':
            return colorSet3;

          case 'phaseChartColor2':
            return colorSet4;

          default:
            return colorSet1;
        }
      }
    }

    module.exports = BSChart;
  }, {
    "./api": 2,
    "./donut-chart": 25
  }],
  14: [function (require, module, exports) {
    var VideoModal = function VideoModal() {
      var container = $(".modal-main-wrapper");
      container.find('.modal .close').click(function () {
        stopVideo($('.video-source'));
      });
      container.find('.modal').on('click', function () {
        stopVideo($('.video-source'));
      });
      container.find('.modal-content').on('click', function (e) {
        e.stopPropagation();
      });

      var stopVideo = function stopVideo(element) {
        var iframe = element.find('iframe');
        var video = element.find('video');
        iframe.each(function () {
          var iframeSrc = $(this).attr('src');
          $(this).attr('src', iframeSrc);
        });
        video.each(function () {
          videojs.getPlayer($(this).attr('id')).pause();
        });
      };
    };

    module.exports = VideoModal;
  }, {}],
  15: [function (require, module, exports) {
    require("bootstrap");

    require("bootstrapSlider");

    require("bxSlider");

    require("easyAutoComplete");

    var LocationFilter = require("./filters/location");

    var _require2 = require("@lvchengbin/url"),
        URL = _require2.URL,
        URLSearchParams = _require2.URLSearchParams;

    var API = require("./api");

    var UTILITY = require("./utility");

    var ClientOAuth2 = require("client-oauth2");

    var searchTermType = "all";

    var customJS = function customJS() {
      //figure out a better way of doing this
      var $ = jQuery;
      var api = new API(); // Global Header Scroll move to header js

      if ($(window).scrollTop() >= 28) {
        $("header").addClass("headerBg");
        $('header.sub-header').addClass('shrink');
      } else {
        $('header.sub-header').removeClass('shrink');
        $("header").removeClass("headerBg");
      }

      var headerSearch = new LocationFilter({
        element: $(".headerSearch"),
        callee: "header"
      });
      var searchFormHeader = $("#js-search-header");
      var bmsCurrentLocation = searchFormHeader.find("#bms_current_location");
      var locationGeo = searchFormHeader.find("#location-geo");
      searchFormHeader.on("submit", function () {
        //console.log(locationGeo.val());
        if (locationGeo.val()) {
          $(bmsCurrentLocation).removeAttr("disabled");
        }
      });
      $(window).scroll(function () {
        if ($(window).scrollTop() >= 28) {
          $('header.sub-header').addClass('shrink');
          $("header").addClass("headerBg");
          $(".goToTop").addClass("show");
        } else {
          $('header.sub-header').removeClass('shrink');
          $("header").removeClass("headerBg");
          $(".goToTop").removeClass("show");
        }
      }); //

      var fixedCls = "header";
      var oldSSB = $.fn.modal.Constructor.prototype.setScrollbar;

      $.fn.modal.Constructor.prototype.setScrollbar = function () {
        oldSSB.apply(this);
        if (this.bodyIsOverflowing && this.scrollbarWidth) $(fixedCls).css("padding-right", this.scrollbarWidth);
      };

      var oldRSB = $.fn.modal.Constructor.prototype.resetScrollbar;

      $.fn.modal.Constructor.prototype.resetScrollbar = function () {
        oldRSB.apply(this);
        $(fixedCls).css("padding-right", "");
      };

      $(".single-pathways .celgeneSidebar nav ul li.dividerLink .labelLink").addClass("active"); //@todo: check whether this is still relevant.

      $(".sortBarSection .switchBx .btn-toggle").click(function (e) {
        var specialtyOff = $(e.target.parentElement).find("button.active").text() === "OFF" ? 1 : 0;
        var userSpecialty = $(this).attr("data-user-specialty");

        if (specialtyOff) {
          UTILITY.updateQueryString(location.href, "filter_conditions", "");
        } else {
          UTILITY.updateQueryString(location.href, "filter_conditions", userSpecialty);
        }

        location.reload();
      });

      if ($(document).height() > $(window).height()) {
        $("body").addClass("verticalScroll");
      } else {
        $("body").removeClass("verticalScroll");
      }

      $(".locationListBx .showMoreLocation").click(function () {
        $(this).toggleClass("showList");
        $(this).find("strong").html($(this).text() == "Hide Study Locations" ? "Show Study Locations" : "Hide Study Locations");
        $(this).parents(".locationListBx").find(".showMoreLocationList").slideToggle();
        return false;
      });
      $(".locationDropItems").click(function () {
        $(this).toggleClass("active");
        $(this).parents(".inputTxt2").find(".filterSubOption").slideToggle();
        return false;
      });

      if (window.location.href.match("crohns-disease")) {
        $("body").addClass("crohns-disease");
      } // Global Link Function
      // Was Commented out on 7th October 2019 as suggested by Janice.


      $(document).on("click", "a", function (e) {
        if (!$(this).hasClass("btn-continue")) {
          var href = $(this).attr("href");

          if (href) {
            if (href.indexOf("http") == 0) {
              if (href.indexOf("bolderscience") < 0 && href.indexOf(location.hostname) < 0 && href.indexOf("celgene") < 0 && href.indexOf("bms") < 0 && href.indexOf("bmsscience") && href.indexOf("immunooncologyhcp") < 0) {
                e.preventDefault();
                $("#interstialPopup").modal("show");
                $("#interstialPopup .btn-continue").attr("href", href);
              }
            }
          }
        } else {
          $("#interstialPopup").modal("hide");
        }
      }); // Closing interstialPopup and interstialPopup2 after click on continue button

      $(".btn-continue").click(function () {
        $("#interstialPopup").modal("hide");
      }); //eGlobal Link Function end
      // end Global Header Scroll move to header js

      $(".filterBySection .clearSaveBox .redButtonForm").click(function () {
        $(".saveTrialPopup").removeClass("saveTrialClick").addClass("savedSearchClick");
      });
      $(".resultContainer .resultItemsContainer .resultTrial .redButtonStyle").click(function () {
        $(".saveTrialPopup").removeClass("savedSearchClick").addClass("saveTrialClick");
      });
      $(".backLinkBlue, .backLink").click(function (e) {
        e.preventDefault();
        location.assign(document.referrer || "http://" + window.location.hostname + "/?s=");
      });
      $(".masterlegends .mobileLegends .mobileDropdown").click(function () {
        if (!$(this).parents(".mobileLegends").find(".customDropdown").hasClass("open")) {
          $(".masterlegends .mobileLegends .mobileDropdown").removeClass("active");
          $(".customDropdown").removeClass("open").slideUp();
          $(this).parents(".mobileLegends").find(".customDropdown").addClass("open").slideDown();
          $(this).addClass("active");
        } else {
          $(".masterlegends .mobileLegends .mobileDropdown").removeClass("active");
          $(this).parents(".mobileLegends").find(".customDropdown").removeClass("open").slideUp();
        }

        return false;
      });
      $(".mobileLegends").on("click", "label", function (e) {
        if (!e.target.previousElementSibling.disabled) {
          if (!$(this).hasClass("addedFilter")) {
            $(this).html("".concat($(this).html(), "<span class=\"closeIcon\"></span>"));
            $(this).clone().appendTo(".activeFiltersPanel");
            $(this).addClass("addedFilter");
            $(this).removeClass('ga-select-filter');
          } else {
            $(this).removeClass("addedFilter");
            $(this).addClass('ga-select-filter');
            removeDom(".activeFiltersPanel label:contains(".concat(e.target.innerText, ")"), this);
            $(this).find(".closeIcon").remove();
          }
        }

        if ($(".addedFilter").length) {
          $(".searchButtonStyle").css("display", "inline-block");
          $(".resetFiltersLink").css("display", "inline-block");
        } else {
          $(".searchButtonStyle").css("display", "none");
          $(".resetFiltersLink").css("display", "none");
        }
      }); //const chartInfo = $(`${$('body').attr('class').split('')[0]} .chartInfo`).clone();

      $(".activeFiltersPanel").on("click", "span", function (e) {
        removeDom(this.parentElement, this);
        $(".mobileLegends label:contains(".concat(e.delegateTarget.innerText, ")")).removeClass("addedFilter");
      });

      var removeDom = function removeDom(elementQuery) {
        $(elementQuery).hide();
      }; // $('#canvas-holder').on('click', '.resetFiltersLink', function (e) {
      //     const checkboxes = $('.mobileLegends').find('.js-label-filter:checked');
      //     const addedFilters = $('#canvas-holder .addedFilter');
      //     for (let i = 0; i < addedFilters.length; i++) {
      //         //addedFilters[i].click();
      //          checkboxes.prop('checked', false);
      //          addedFilters.removeClass('addedFilter');
      //     }
      //     $('.chartInfo').html(chartInfo.html());
      // });

      /* Pathways accordion */


      $('.panel-group.pathway-accordion .panel-default .panel-heading a').on('click', function () {
        var myIdx = $(this).parents('.panel-default').index();
        var pTop = $('#accordion').offset().top;
        var mHgt = $(this).parents('.panel-default').eq(0).find('.panel-heading').height();
        var adjCount = 80;

        if (myIdx == 1) {
          adjCount = 60;
        } else if (myIdx == 2) {
          adjCount = 40;
        }

        if ($(this).hasClass('collapsed')) {
          $("html, body").animate({
            scrollTop: $(this).offset().top - 60
          }, 1000);
        }
      });
      $(".popoverBut .popupLink").click(function () {
        if (!$(this).parents(".popoverBut").find(".popoverContainer").hasClass("open")) {
          $(".popoverBut .popupLink").removeClass("active");
          $(".popoverContainer").removeClass("open").slideUp();
          $(this).parents(".popoverBut").find(".popoverContainer").addClass("open").slideDown();
          $(this).addClass("active");
        } else {
          $(".popoverBut .popupLink").removeClass("active");
          $(this).parents(".popoverBut").find(".popoverContainer").removeClass("open").slideUp();
        }

        return false;
      });
      $(".popoverBut .cancelBut").click(function () {
        $(this).parents(".popoverBut").find(".popoverContainer").slideUp();
        $(".popoverBut .popoverContainer.accountEditPopup .newPasswordBx").hide();
        $(".popoverBut .popoverContainer.accountEditPopup .currentPasswordBx").show();
        return false;
      }); // End Global Popover Container Open / Edit / cancel
      // Header Menu dropdown

      $("header .headerNav ul li.dashboard > a").click(function () {
        $(this).toggleClass("active");
        $(this).parents(".dashboard").find(".dashboardDropDown").slideToggle();
        return false;
      });
      $(".dashboardDropDown").click(function (e) {
        e.stopPropagation();
      });
      $(document).on("click", function (e) {
        $(".dashboardDropDown").slideUp(function () {
          $(".dashboardDropDown").slideUp("");
          $("header .headerNav ul li.dashboard > a").removeClass("active");
        });
        $(".humbergerMenuPopup").fadeOut();
        $(".donutChart .donutInfoBox").fadeOut();
        $(".filterSubOption.terms").slideUp();
        $(".filterSubOption.terms").removeClass("open");
        $(".alliancePatners .allianceDropDown .open").hide(function () {
          $(".allianceDropDown ul > li > a").removeClass("active");
        });
      });
      $(".alliancePatners .allianceDropDown .open").click(function (e) {
        e.stopPropagation();
      });
      $("header .humbergerIcon").click(function (e) {
        e.stopPropagation();
        $(".humbergerIcon").css("visibility", "hidden");
        $(".humbergerMenuPopup").fadeIn();
      }); //stop propagation

      $(".filterSubOption.terms, .humbergerMenuPopup, .donutChart .donutInfoBox").click(function (e) {
        e.stopPropagation();
      });
      $(".topSectionBg .filterAppliedBx .addIcon").click(function () {
        $(this).parents(".filterAppliedBx").find(".filterAppliedDetails").slideDown();
        return false;
      });
      $(".topSectionBg .filterAppliedBx .closePopover").click(function () {
        $(this).parents(".filterAppliedBx").find(".filterAppliedDetails").slideUp();
        return false;
      }); // End Header Menu dropdownf
      //Header Filters
      //if ($(window).width() >= 768) {

      $(".filterBySection .filterOption li a.filterLink").on("click", function () {
        if (!$(this).parents("li").find(".filterSubOption").hasClass("open")) {
          $(".filterSubOption").removeClass("open").slideUp(function () {
            var filterLinkAnchors = $(this).parents("li").find("a.filterLink");

            if (!$(filterLinkAnchors).find(".filterList").text().trim().length) {
              $(filterLinkAnchors).removeClass("active");
            }
          });
          $(this).parents("li").find(".filterSubOption").addClass("open").slideDown();
          $(this).addClass("active");
        } else {
          $(this).parents("li").find(".filterSubOption").removeClass("open").slideUp(function () {
            var filterLinkAnchor = $(this).parents("li").find("a.filterLink");

            if (!$(filterLinkAnchor).find(".filterList").text().trim().length) {
              $(filterLinkAnchor).removeClass("active");
            }
          });
        }

        return false;
      });
      $(".filterBySection .filterSubOption .clearAllLink a").click(function () {
        $(this).parents(".filterSubOption").find("a").removeClass("active");
        var radioUncheck = $(".filterBySection .radio input[type=radio]").prop("checked", false);
        $.uniform.update(radioUncheck);
        return false;
      }); //End Header Filters
      // Global Uniform custom form elements

      $(".customSelect, .customRadio, .customCheck").uniform(); // Global Accordions

      /* accordian start */

      function hidden(a) {
        $(a).removeClass("active");
        $(".resultItems").removeClass("open");
        $(a).parent().find(".accordianSubUl:first").slideUp();
      }

      function visible(b) {
        $(b).parent().siblings().find("a").removeClass("active");
        $(".resultItems").removeClass("open");
        $(b).parent().parent().find(".accordianLi .accordianSubUl:visible").slideUp();
        $(b).addClass("active");
        $(b).parents(".resultItems").addClass("open");
        $(b).parent().find(".accordianSubUl:first").slideDown();
      }

      function check(c) {
        if ($(c).parent().find(".accordianSubUl:first").is(":hidden")) {
          visible(c);
        } else {
          hidden(c);
        }
      }

      $(".loginLinks a").click(function (e) {
        e.preventDefault();
        var ele = $(this).attr("data-popup");
        $("section.content").addClass("blurContent");
        $("header.headerBg").addClass("blurContent");
        $("." + ele).fadeIn();
      });
      $(".accordianUl .accordianLi:has(.accordianSubUl) > a").click(function () {
        check($(this));
        return false;
      });
      $(".loadSearchButton").click(function (e) {
        var button = $(this),
            data = {
          action: "loadmore",
          s: loadMoreSearch.keyword,
          page: loadMoreSearch.current_page,
          _wpnonce: phpData.rest_nonce
        };
        $.ajax({
          url: loadMoreSearch.ajaxurl,
          data: data,
          type: "GET",
          beforeSend: function beforeSend(xhr) {
            button.text("Loading..."); //console.log('loading button clicked')
          },
          success: function success(data) {
            if (data) {
              // console.log('load more button clicked')
              button.html('Load More <span class="pinkRoundedArrow"></span>');
              $(".result_container").append(function () {
                return data["search_results"];
              });

              if (data.load_more == false) {
                button.hide();
                $('.search-trials-load').hide();
              } else {
                button.show();
              }

              loadMoreSearch.current_page++;
              if (loadMoreSearch.current_page === loadMoreSearch.max_page) button.remove();
            } else {
              button.remove();
            }
          }
        });
      });
      $(".dropDownBx").on("change", ".customSelect", function (e) {
        e.preventDefault();
        var downloadBut = $(e.target).parents(".popoverContainer").find(".okBut");
        var downloadButHref = downloadBut.attr("href");
        var pageSize = e.target.value.match(/\d+/)[0];
        downloadBut.attr("href", UTILITY.updateQueryString(downloadButHref, "posts_per_page", pageSize));
      });
      $(".filterOptionParent .term").click(function (e) {
        e.preventDefault();
        $(this).toggleClass("selected");
        var slugs = [];
        var filterNameList = [];
        var filter = $(this).parents(".filterSubOption").attr("data-filter");
        $(this).parents(".filterSubOption").find(".term.selected").each(function () {
          slugs.push($(this).attr("data-term-slug"));
          filterNameList.push($(this).attr("data-term-name"));
        });
        var slugToString = filterNameList.toString();
        var slugList = slugToString.replace(/,/g, "; ");
        var filterCount = filterNameList.length;

        if (filterNameList.length > 0) {
          slugList =
          /*": "+*/
          slugList;
          filterCount = "&nbsp;(" + filterNameList.length + ")&nbsp;";
          $(this).parents(".widget").find(".filterLink").addClass("active filterSelected");
        }

        if (filterNameList.length == 0) {
          filterCount = "";
          $(this).parents(".widget").find(".filterLink").removeClass("active filterSelected");
        }

        $(this).parents(".widget").find(".filterLink .filterList").html(slugList);
        $(this).parents(".widget").find(".filterLink .filterCount").html(filterCount);
        if (!slugs.length) slugs = [""];
        UTILITY.updateQueryString(window.location.href, "filter_" + filter, slugs.join(","));
        searchFilters();
      });
      $('.navbar-toggle').on('click', function () {
        if ($(this).attr('aria-expanded') == 'false') {
          $('body').css('cssText', 'overflow-y: hidden;');
        } else {
          $('body').css('cssText', 'overflow-y: auto;');
        }
      }); // home page location filter click

      $(".homeFilters .filterSubOption").click(function (e) {
        e.preventDefault();
        return false;
      }); // Trial Page Scroll Event

      /* trial page desktop on click scroll to respective content start */

      $(document).on("scroll", onScroll);
      var headerHeight = $("header").outerHeight();
      $(".scrollAnimate li a[href*=#]").bind("click", function (e) {
        e.preventDefault();
        $(document).off("scroll");
        $(this).parents(".scrollAnimate").find("a").removeClass("active");
        var target = $(this).attr("href"); //Get the target

        var scrollToPosition = $(target).offset().top - headerHeight + 45;
        $("html, body").animate({
          scrollTop: scrollToPosition
        }, 700, function () {
          window.location.hash = "" + target;
          $("html, body").animate({
            scrollTop: scrollToPosition
          }, 0);
          $(document).on("scroll", onScroll);
        });
        $(this).addClass("active");
      }); // trial page mobile animation on click

      $(".scrollAnimate2 li a[href*=#]").bind("click", function (e) {
        e.preventDefault();
        $(document).off("scroll");
        $(this).parents(".scrollAnimate2").find("a").removeClass("active");
        var target = $(this).attr("href"); //Get the target

        var scrollToPosition = $(target).offset().top - headerHeight - 50;
        $("html, body").animate({
          scrollTop: scrollToPosition
        }, 700, function () {
          window.location.hash = "" + target;
          $("html, body").animate({
            scrollTop: scrollToPosition
          }, 0);
          $(document).on("scroll", onScroll);
        });
        $(this).addClass("active");
      });

      function onScroll(event) {
        var scrollPos = $(document).scrollTop();
        $(".scrollAnimate li a").each(function () {
          var currLink = $(this);
          var refElement = $(currLink.attr("href"));

          if (refElement.position() && refElement.position().top <= scrollPos && refElement.position().top + refElement.height() > scrollPos) {
            $(".scrollAnimate li a").removeClass("active");
            currLink.addClass("active");
          } else {
            currLink.removeClass("active");
          }
        });
      }
      /* on click scroll to respective content end */

      /* trial page desktop leftbar stick */


      if ($("#sticky").length) {
        // make sure "#sticky" element exists
        var el = $("#sticky");
        var stickyTop = $("#sticky").offset().top; // returns number

        var stickyHeight = $("#sticky").height();
        $(window).scroll(function () {
          // scroll event
          var limit = $("footer").offset().top - stickyHeight - 20;
          var windowTop = $(window).scrollTop() + headerHeight; // returns number

          if (stickyTop < windowTop) {
            el.addClass("getFixed").css({
              position: "fixed",
              top: headerHeight
            });
          } else {
            el.removeClass("getFixed").css({
              position: "static",
              top: 0
            });
          }

          if (limit < windowTop) {
            var diff = limit - windowTop;
            el.css({
              top: diff
            });
          }
        });
      } // trial page mobile leftbar stick


      if ($(".sticky2").length) {
        // make sure "#sticky" element exists
        var el2 = $(".sticky2");
        var stickyTop2 = $(".sticky2").offset().top; // returns number

        var stickyHeight2 = $(".sticky2").height();
        $(window).scroll(function () {
          // scroll event
          var limit = $("footer").offset().top - stickyHeight2 - 20;
          var windowTop = $(window).scrollTop() + headerHeight + 15; // returns number

          var topPosition = headerHeight + 15;

          if (stickyTop2 < windowTop) {
            el2.addClass("getFixed").css({
              position: "fixed",
              top: topPosition
            });
          } else {
            el2.removeClass("getFixed").css({
              position: "relative",
              top: 0
            });
          }

          if (limit < windowTop) {
            var diff = limit - windowTop;
            el2.css({
              top: diff
            });
          }
        });
      }
      /* Get fixed when section reached to the top of window on scroll end */
      // Trail page Change tabs


      $(".studyDetailsSection .tabThumbStyle li a").on("click", function () {
        setTimeout(function () {
          if ($("#studyResults").hasClass("active")) {
            $("#studyDetailsNav").hide();
            $("#studyResultsNav").show();
            var url = document.getElementById("print_button").href;
            var res = url.replace("?tab=1", "?tab=2");
            document.getElementById("print_button").href = res;
            var pdf_url = document.getElementById("pdf_button").href;
            var pdf_res = pdf_url.replace("?tab=1", "?tab=2");
            document.getElementById("pdf_button").href = pdf_res;
          } else {
            $("#studyResultsNav").hide();
            $("#studyDetailsNav").show();
            var url = document.getElementById("print_button").href;
            var res = url.replace("?tab=2", "?tab=1");
            document.getElementById("print_button").href = res;
            var pdf_url = document.getElementById("pdf_button").href;
            var pdf_res = pdf_url.replace("?tab=2", "?tab=1");
            document.getElementById("pdf_button").href = pdf_res;
          }
        }, 200);
      });
      $(window).on('load resize', function () {
        $('.pathways-reference').css('cssText', 'min-height: initial;');
        var containerHeight = $('.celgeneDashboard').outerHeight() + $('header').outerHeight() + $('footer').outerHeight() - $('.pathways-reference').height();

        if ($(window).width() > 991) {
          $('.pathways-reference').css('cssText', 'min-height: calc(100vh - ' + (containerHeight + 34) + 'px);');
        } else {
          $('.pathways-reference').css('cssText', 'min-height: calc(100vh - ' + (containerHeight + 8) + 'px);');
        }
      });
      $('.bms-pathways-landing .disease-title').on('click', function () {
        if ($(window).width() < 767) {
          if ($(this).hasClass('active')) {
            $(this).next('.disease-container').slideUp();
            $(this).removeClass('active');
          } else {
            $('.bms-pathways-landing .disease-title').removeClass('active');
            $('.bms-pathways-landing .disease-container').slideUp();
            $(this).next('.disease-container').slideDown();
            $(this).addClass('active');
          }
        }
      }); //End  Trail page Change tabs
      // End Scrollbar Event

      $(document).on("click", "body *", function () {
        $(".humbergerIcon").css("visibility", "visible");
      }); // Header Popup

      $("body").on("click", "a[data-popup]", function (e) {
        $(".sectionPopup").hide();
        $(".humbergerIcon").css("visibility", "visible");
        var activeSection = $(this).attr("data-popup");
        $("." + activeSection).fadeIn();
        $("header, .filterBySection, .content").addClass("blurContent");
        $("body").addClass("overflow");

        if (activeSection == "loginSection") {// document.getElementById("hiddenRedirectField").value = window.location.href;
        }
      });
      $(".sectionPopup .closeBtn, .celgeneMslForm .cancelStyle").click(function () {
        $(".sectionPopup").hide();
        $(".humbergerIcon").css("visibility", "visible");
        $("body").removeClass("overflow");
        $("header, .filterBySection, .content").removeClass("blurContent");
      }); //End Header Popup

      $(".signupPopup , .loginPopup").click(function (e) {
        e.stopPropagation();
        $(".humbergerMenuPopup").fadeOut();
        $(".humbergerIcon").css("visibility", "visible");
      }); // Toggle Button Common click Event

      $(".borderBtn").click(function () {
        if ($(this).hasClass("active")) {
          $(this).removeClass("active");
        } else {
          $(this).addClass("active");
        }
      }); // Switch Button Toggle

      $(".btn-toggle").click(function () {
        $(this).find(".btn").toggleClass("active");

        if ($(this).find(".btn-primary").size() > 0) {
          $(this).find(".btn").toggleClass("btn-primary");
        }

        $(this).find(".btn").toggleClass("btn-default");
      }); // Mobile Global ul dropdown

      $(".span_select").click(function () {
        $(this).parents(".ulDropdown").find(".options").toggleClass("openselect");
        $(".ulDropdown").toggleClass("active");
      });
      $(".ulDropdown").on("click", ".selItem", function () {
        $(this).parents(".ulDropdown").find(".options").toggleClass("openselect");
      });
      $(document).on('click', function (event) {
        if (!$(event.target).closest(".ulDropdown").length && $(".ulDropdown").hasClass('active')) {
          $(".ulDropdown").removeClass('active');
          $(".ulDropdown").find(".options").removeClass("openselect");
        }
      });
      $(".options a").click(function () {
        $(".options a").removeClass("active");
        $(this).parents(".ulDropdown").find(".span_select").text("");

        if ($(this).parents(".ulDropdown").find(".selItem").length == 1) {
          $(this).parents(".ulDropdown").find(".selItem").remove();
        }

        $(this).parents(".ulDropdown").find(".span_select").after('<span class="selItem">' + $(this).text() + "</span>");
        $(this).parents(".ulDropdown").find(".options").removeClass("openselect");
        $(this).addClass("active");
        $(".ulDropdown").toggleClass("active");
      });
      /* Global Go top start */

      $("#gotop").click(function () {
        $("html, body").animate({
          scrollTop: "0px"
        }, 1000); // $(this).hide(); // optional, Hide on scroll reach to top

        return false;
      }); //Global Jump to link From header menu

      $(".goToabs a").click(function () {
        $("header .headerNav ul li a").removeClass("active");
        $("html, body").animate({
          scrollTop: $("#aboutBolderScience").length ? $("#aboutBolderScience").offset().top - $(".header").height() - 50 : ""
        }, 1000);
        $(this).addClass("active");
      });
      /* Go top end */
      //include in header for login and registration

      $('.sectionPopup .um .um-form input[type="text"], .sectionPopup .um .um-form input[type="password"]').focus(function () {
        if ($(this).val().trim().length < 1) {
          $(this).parents(".um-field").find(".um-field-label").addClass("active");
        }
      });
      $('.sectionPopup .um .um-form input[type="text"], .sectionPopup .um .um-form input[type="password"]').blur(function () {
        if ($(this).val().trim().length < 1) {
          $(this).parents(".um-field").find(".um-field-label").removeClass("active");
        }
      });
      $(window).load(function () {
        $('.mobileLegends label[for="js-label-filter-other"]').append('<span class="astrix">*</span>');
        var readmoreHt = $(".pageHeadReadMore.readMoreChild").height();

        if (readmoreHt > 67) {
          $(".readMoreParent").addClass("readMoreShow");
        } else {
          $(".readMoreParent").removeClass("readMoreShow");
        }
      });
      $(".clearAllFilter .resetFilters").click(function (e) {
        e.preventDefault();
        var resetfitlerItem = $(this).attr("data-reset-filter");

        if (resetfitlerItem == "filter_location") {
          UTILITY.updateQueryString(location.href, "filter_location", "");
          UTILITY.updateQueryString(location.href, "filter_state", "");
          UTILITY.updateQueryString(location.href, "bms_city", "");
          UTILITY.updateQueryString(location.href, "dis_location", "");
          UTILITY.updateQueryString(location.href, "dis_radius", "");
          UTILITY.updateQueryString(location.href, "bms_current_location", "");
          UTILITY.updateQueryString(location.href, "orderby", "relevance");
          window.location.reload();
        }

        var resetFilter = new URL(document.location).searchParams.get(resetfitlerItem);
        window.location.replace(window.location.href.replace(resetFilter, ""));
      });

      if ($("body").hasClass("post-type-archive-molecule") || $("body").hasClass("single-trial")) {
        var addPdfLink = function addPdfLink(isClick) {
          var _OBJECT_URL;

          var request = new XMLHttpRequest();
          var downloadText = "";

          if (isClick && $("body").hasClass("post-type-archive-molecule")) {
            downloadText = "All <br> Pipeline Molecules";
          }

          request.addEventListener("readystatechange", function (e) {
            if (isClick && request.readyState == 2 && request.status == 200) {
              // Download is being started
              $("#downloading_pdf").html("`Downloading.. ${downloadText}");
            } else if (isClick && request.readyState == 3 && isClick) {
              // Download is under progress
              $("#downloading_pdf").html("Downloading... ".concat(downloadText));
            } else if (request.readyState == 4) {
              // Downloaing has finished
              if (isClick) {
                $("#downloading_pdf").html("Download ".concat(downloadText));
              }

              if (window.navigator.msSaveOrOpenBlob) {
                // IE11
                if (isClick) {
                  var url = window.location.pathname.split("/");
                  var filename = url[2].toUpperCase() + ".pdf";
                  window.navigator.msSaveOrOpenBlob(request.response, filename);
                }
              } else {
                _OBJECT_URL = window.URL.createObjectURL(request.response); // Set href as a local object URL

                document.querySelector("#download_pdf").setAttribute("href", _OBJECT_URL); // Recommended : Revoke the object URL after some time to free up resources
                // There is no way to find out whether user finished downloading

                setTimeout(function () {
                  window.URL.revokeObjectURL(_OBJECT_URL);
                }, 60 * 1000);
              }
            }
          });

          if (isClick) {
            request.addEventListener("progress", function (e) {
              var percent_complete = e.loaded / e.total * 100;
            });
          }

          request.open("get", document.querySelector("#download_pdf").getAttribute("data-href"));
          request.responseType = "blob";
          request.send();
        };

        window.addEventListener("DOMContentLoaded", function () {
          addPdfLink();
        }, false);
        document.querySelector("#download_pdf").addEventListener("click", function () {
          addPdfLink(true);
        });
      }

      window.onload = function () {
        $('[data-toggle="popover"]').popover(); // user id cookie set and remove on login logout

        if (phpData.userId != 0) {
          var d = new Date();
          d.setTime(d.getTime() + 1000 * 60 * 60 * 24 * 365 * 2);
          var expires = "expires=" + d.toGMTString();
          document.cookie = "userId=" + phpData.userId + "; " + expires + "; path=/";
        } else if (phpData.userId == 0) {
          document.cookie = "userId=; Max-Age=-99999999;";
        }

        var url_string = window.location.href;
        var url = new URL(url_string);
        var searchType = url.searchParams.get("search_type");

        if (searchType == "celgene") {
          $(".filterBySection .clearSaveBox .clearLink").attr("href", "/?s=&orderby=relevance&search_type=celgene&filter_celgene_trial=celgene-trial,celgene-compound");
        }

        if (!UTILITY.getQueryString(window.location.href, "dis_radius")) {
          $("#customOrder").children('option[value="geo_distance"]').hide();
          $("#customOrder").children('option[value="geo_distance"]').attr("disabled", "disabled");
          $("#customOrder").val("relevance");
        }

        $("body").on("click", function (e) {
          //home page location filter slide up on outside click
          $(".homeFilters .filterSubOption").slideUp(); // if ($(window).width() < 768) {
          //     $(".mobileLegends .mobileDropdown").removeClass("active");
          //     $(".mobileLegends .customDropdown").removeClass("open");
          //     $(".mobileLegends .customDropdown").slideUp();
          // }
          // $('.filterAppliedDetails').slideUp();
          // search listing page click outside of filters

          if ($("body").hasClass("search") == true) {
            $(".filterOption li").each(function (e) {
              if ($(this).find("a").hasClass("filterSelected") == false) {
                $(this).find(".filterLink").removeClass("active");
              }
            });
          }

          $('[data-toggle="popover"]').each(function () {
            //the 'is' for buttons that trigger popups
            //the 'has' for icons within a button that triggers a popup
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $(".popover").has(e.target).length === 0) {
              $(this).popover("hide");
            }
          });
        }); // for datalist enhancement

        $(".savedClinicalItemsContainer").on("click", ".deleteIcon.deleteTopRow", function (e) {
          e.preventDefault();
          var trialId = $(this).attr("data-trial-id");
          api["delete"]("user/".concat(phpData.userId, "/unsave-trial"), {
            trial_id: trialId
          }).then(function (response) {
            location.reload();
          });
        }); // for login

        $(".doximityLogin").click(function (e) {
          var doximityAuth = new ClientOAuth2({
            clientId: phpData.doximity.clientId,
            clientSecret: phpData.doximity.clientSecret,
            authorizationUri: phpData.doximity.authorizationUri,
            redirectUri: phpData.doximity.redirectUriLogin,
            scopes: phpData.doximity.scopes,
            accessTokenUri: phpData.doximity.accessTokenUri,
            type: phpData.doximity.type,
            state: phpData.doximity.state
          });
          window.open(doximityAuth.code.getUri());
        });
        $(".saveTrialPopupContainer .borderButtonBlue").click(function (e) {
          var doximityAuth = new ClientOAuth2({
            clientId: phpData.doximity.clientId,
            clientSecret: phpData.doximity.clientSecret,
            authorizationUri: phpData.doximity.authorizationUri,
            redirectUri: phpData.doximity.redirectUriLogin,
            scopes: phpData.doximity.scopes,
            accessTokenUri: phpData.doximity.accessTokenUri,
            type: phpData.doximity.type,
            state: phpData.doximity.state
          });
          window.open(doximityAuth.code.getUri());
        }); // for registration

        $(".doximityRegistration").click(function (e) {
          var doximityAuth = new ClientOAuth2({
            clientId: phpData.doximity.clientId,
            clientSecret: phpData.doximity.clientSecret,
            authorizationUri: phpData.doximity.authorizationUri,
            redirectUri: phpData.doximity.redirectUriRegistration,
            scopes: phpData.doximity.scopes,
            accessTokenUri: phpData.doximity.accessTokenUri,
            type: phpData.doximity.type,
            state: phpData.doximity.state
          });
          window.open(doximityAuth.code.getUri());
        }); //for filters data value change on page load

        var filterSubOptionStatus = '.filterSubOption[data-filter="status"]';
        var checkedStatusInput = $('.filterSubOption[data-filter="status"] input:checked');

        if (checkedStatusInput.length) {
          $(filterSubOptionStatus).parents("li").find(".filterLink").addClass("active filterSelected");
          var statusString = checkedStatusInput.parent().text().replace(/\s\s+/g, "; "); //change the value

          $(filterSubOptionStatus).parents("li").find(".filterList").text(statusString.substring(2, statusString.length - 2));
          $(filterSubOptionStatus).parents("li").find(".filterCount").text(" (".concat($(checkedStatusInput).length, ") "));
        }

        var filterSubOptionPhase = '.filterSubOption[data-filter="phase"]';
        var checkedPhaseInput = $('.filterSubOption[data-filter="phase"] input:checked');

        if (checkedPhaseInput.length) {
          $(filterSubOptionPhase).parents("li").find(".filterLink").addClass("active filterSelected");
          var phaseString = checkedPhaseInput.parent().text().replace(/\s\s+/g, "; "); //change the value

          $(filterSubOptionPhase).parents("li").find(".filterList").text(phaseString.substring(2, phaseString.length - 2));
          $(filterSubOptionPhase).parents("li").find(".filterCount").text(" (".concat($(checkedPhaseInput).length, ") "));
        }

        var filterSubOptionAge = '.filterSubOption[data-filter="age"]';
        var checkedAgeInput = $('.filterSubOption[data-filter="age"] input:checked');

        if (checkedAgeInput.length) {
          $(filterSubOptionAge).parents("li").find(".filterLink").addClass("active filterSelected");

          var _statusString = checkedAgeInput.parent().text().replace(/\s\s+/g, "; "); //change the value


          $(filterSubOptionAge).parents("li").find(".filterList").text(_statusString.substring(2, _statusString.length - 2));
          $(filterSubOptionAge).parents("li").find(".filterCount").text(" (".concat($(checkedAgeInput).length, ") "));
        }

        var filterSubOptionSex = '.filterSubOption[data-filter="sex"]';
        var checkedSexInput = $('.filterSubOption[data-filter="sex"] input:checked');

        if (checkedSexInput.length) {
          $(filterSubOptionSex).parents("li").find(".filterLink").addClass("active filterSelected");

          var _statusString2 = checkedSexInput.parent().text().replace(/\s\s+/g, "; "); //change the value


          $(filterSubOptionSex).parents("li").find(".filterList").text(_statusString2.substring(2, _statusString2.length - 2));
          $(filterSubOptionSex).parents("li").find(".filterCount").text(" (".concat($(checkedSexInput).length, ") "));
        }

        if ($("body").hasClass("page-template-celgene-landing") || $("body").hasClass("tax-specialty") || $("body").hasClass("single-disease-area") || $("body").hasClass("single-molecule") || $("body").hasClass("single-pathways") || $("body").hasClass("post-type-archive") || $("body").hasClass("post-type-archive-alliance") || $("body").hasClass("searchFromCelgene")) {
          searchTermType = "celgene";
        } else if ($("body").hasClass("page-template-page-account-preferences") || $("body").hasClass("home") && $(".signUpSection").is(":visible") == true) {
          searchTermType = "interventions";
        } else if ($("body").hasClass("page-template-page-search-patient-type")) {
          searchTermType = "conditions";
        }

        var searchOptions = {
          url: function url(phrase) {
            var apiURL;

            switch (searchTermType) {
              case "all":
                apiURL = "/wp-json/boldsci/v1/search/search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce;
                break;

              case "celgene":
                apiURL = "/wp-json/boldsci/v1/search/search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce;
                break;

              case "interventions":
                apiURL = "/wp-json/boldsci/v1/search/search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce + "&type=interventions";
                break;

              case "conditions":
                apiURL = "/wp-json/boldsci/v1/search/search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce + "&type=conditions";
                break;
            }

            return apiURL;
          },
          list: {
            match: {
              enabled: true,
              method: function method(a, b) {
                try {
                  return a.search(b) > -1;
                } catch (error) {
                  console.log("no result found");
                }

                return;
              }
            },
            onClickEvent: function onClickEvent(e) {}
          },
          template: {
            type: "custom",
            method: function method(value, item) {
              if (item.url == "") {
                if (searchTermType == "all") {
                  // return "<span class='searchItem'>"+value+"</span> <span class='searchType'>"+item.type+"</span>"
                  return "<span class='searchItem'>" + value + "</span>";
                } else {
                  return value;
                }
              } else {
                if (searchTermType == "celgene") {
                  // return "<a href='" + item.url + "'><span class='searchItem'>"+value+"</span><span class='searchType'>"+item.type+"</span></a>"
                  return "<span class='searchItem'>" + value + "</span>";
                } else {
                  if (searchTermType == "all") {
                    // return "<span class='searchItem'>"+value+"</span> <span class='searchType'>"+item.type+"</span>"
                    return "<span class='searchItem'>" + value + "</span>";
                  } else {
                    return value;
                  }
                }
              }
            }
          },
          listLocation: "search_results",
          getValue: "name"
        };
        var searchHeaderOptions = {
          url: function url(phrase) {
            return "/wp-json/boldsci/v1/search/search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce;
          },
          list: {
            match: {
              enabled: true,
              method: function method(a, b) {
                try {
                  return a.search(b) > -1;
                } catch (error) {
                  console.log("no result found");
                }

                return;
              }
            },
            onClickEvent: function onClickEvent(e) {}
          },
          template: {
            type: "custom",
            method: function method(value, item) {
              if (item.url == "") {
                //  return "<span class='searchItem'>"+value+"</span> <span class='searchType'>"+item.type+"</span>"
                return "<span class='searchItem'>" + value + "</span>";
              } else {
                if (searchTermType == "celgene") {
                  // return "<a href='" + item.url + "'><span class='searchItem'>"+value+"</span><span class='searchType'>"+item.type+"</span></a>"
                  return "<span class='searchItem'>" + value + "</span>";
                } else {
                  //  return "<span class='searchItem'>"+value+"</span> <span class='searchType'>"+item.type+"</span>"
                  return "<span class='searchItem'>" + value + "</span>";
                }
              }
            }
          },
          listLocation: "search_results",
          getValue: "name"
        };
        var searchCelgene = {
          url: function url(phrase) {
            return "/wp-json/boldsci/v1/search/new_search_param/?s=" + phrase + "&_wpnonce=" + phpData.rest_nonce;
          },
          list: {
            maxNumberOfElements: 100,
            match: {
              enabled: false
            },
            onClickEvent: function onClickEvent(e) {}
          },
          template: {
            type: "custom",
            method: function method(value, item) {
              $(".celgeneSearchInput").addClass("ea-dropDown");
              $(".celgeneSearchIcon").addClass("ea-dropDown");
              return "<a href='" + item.url + "'><span class='searchItem'>" + value + "</span><span class='searchType'>" + item.type + "</span></a>";
            }
          },
          listLocation: "search_results",
          getValue: "name"
        };

        var showDropDownKey = function showDropDownKey() {
          var key = event.keyCode || event.charCode;

          if (key == 8 || key == 46) {
            if ($(".search-term-celgene").val().length < 4) {
              $(".celgeneSearchInput").removeClass("ea-dropDown");
              $(".celgeneSearchIcon").removeClass("ea-dropDown");
            }
          }
        };

        var showDropDownBlur = function showDropDownBlur() {
          $(".celgeneSearchInput").removeClass("ea-dropDown");
          $(".celgeneSearchIcon").removeClass("ea-dropDown");
        };

        var showDropDownFocus = function showDropDownFocus() {
          if ($("#eac-container-eac-3285 ul").find("li").length > 0) {
            $(".celgeneSearchInput").addClass("ea-dropDown");
            $(".celgeneSearchIcon").addClass("ea-dropDown");
          }
        };

        $(".search-term-header").easyAutocomplete(searchHeaderOptions);
        $(".search-terms").easyAutocomplete(searchOptions);
        $(".search-term-celgene").easyAutocomplete(searchCelgene);
        $(".search-term-celgene").focus(showDropDownFocus);
        $(".search-term-celgene").blur(showDropDownBlur);
        $(".search-term-celgene").keydown(showDropDownKey);
        $(window).resize(function (event) {
          if ($('.mobileOnly').hasClass('active') || $('.desktopOnly').hasClass('active')) {
            $(".search-term-header").easyAutocomplete(searchHeaderOptions);
            $(".search-terms").easyAutocomplete(searchOptions);
            $(".search-term-celgene").easyAutocomplete(searchCelgene);
            $('.desktopOnly').removeClass('active');
            $('.mobileOnly').removeClass('active');
          }

          $(".search-term-celgene").focus(showDropDownFocus);
          $(".search-term-celgene").blur(showDropDownBlur);
          $(".search-term-celgene").keydown(showDropDownKey);
          showDropDownBlur();
          showDropDownFocus();
        });
        $(".search-term-celgene").on('input', function () {
          var inVal = $(this).val();

          if (inVal.length > 0) {
            $('.header-search').addClass('active');
          } else {
            $('.header-search').removeClass('active');
          }
        });
        $('.header-search').on('click', function () {
          $(".search-term-celgene").val('');
          $(this).removeClass('active');
        });
        $(".search-term-celgene").on('focus', function () {
          var inVal = $(this).val();

          if (inVal.length > 0) {
            $('.header-search').addClass('active');
          } else {
            $('.header-search').removeClass('active');
          }
        });
      };

      if ($("body").find("#recur").length > 0) {
        $(".recurClass").show();
      }

      $(".recurClass").click(function () {
        $("html,body").animate({
          scrollTop: $(".loadRecruiting").offset().top - 106
        }, "slow");
      });
      $(window).on("load", function () {
        $(".page-template-bms-site-map .sitemap-links .disable-pathway-cat-link").on("click", function (e) {
          e.preventDefault();
        }); // Bms popup cookie start

        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        var conferenceView = urlParams.get('conference-view');

        if ($("div").hasClass("bms_popup")) {
          var value = UTILITY.getCookie("popup");

          if (conferenceView == 'true') {
            return;
          }

          if (value != "") {
            $("#interstialPopup2").hide();
          } else {
            $("body").addClass("modal-open");
            $("#interstialPopup2").show();
            $("#interstialPopup2").animate({
              opacity: 1,
              top: "-10px"
            }, "normal");
          }
        } // Bms popup cookie ends

      });
      $(".bmsCont").on("click", function (e) {
        UTILITY.setCookieInHours("popup", "true", 1);
        $("body").removeClass("modal-open");
        $("#interstialPopup2").hide();
      }); //popup close

      $("#jsClose").on("click", function (e) {
        UTILITY.setCookieInHours("popup", "true", 1);
        $("body").removeClass("modal-open");
        $("#interstialPopup2").hide();
      }); // BMS popup close on clicking link

      $(".abtBms").has("a").click(function () {
        UTILITY.setCookieInHours("popup", "true", 365);
        $("body").removeClass("modal-open");
        $("#interstialPopup2").hide();
      });
      $("#interstialPopup2").on("click", function () {
        $("body").removeClass("modal-open");
        $("#interstialPopup2").hide();
        UTILITY.setCookieInHours("popup", "true", 1);
      });
      $("#interstialPopup2 .modal-content").on("click", function (e) {
        e.stopPropagation();
      });
      $("#interstialPopup2").on("click", function () {
        $("body").removeClass("modal-open");
        $("#interstialPopup2").hide();
        UTILITY.setCookie("popup", "true", 365);
      });

      function isSearchSaved() {
        // Get Url
        var href = window.location.href;
        var urlParams = new URLSearchParams(href); // Get Param Types

        var searchType = urlParams.get("search_type"); // API Call to Save Search

        api.post("user/".concat(phpData.userId, "/validate-save"), {
          search_url: href,
          search_type: searchType,
          noLoader: true
        }).then(function (response) {
          //location.reload();
          // elementTarget.disabled = false;
          if (response[0] != 200) {
            $(document).find(".saveSearchBtn").text("Saved");
          } else {
            $(document).find(".saveSearchBtn").text("Save Search");
            console.log($(document).find(".saveSearchBtn").disabled);
          }
        });
      }

      $("button.loadTrialButton").click(function (e) {
        searchFilters($(this));
      });
      $('header.sub-header .navbar .navbar-nav li .dropdown-menu li a').on('click', function () {
        if ($(window).width() <= 991) {
          $(this).next('.dropdown-menu-inner').addClass('active');
        }
      });
      $('.back-link').on('click', function () {
        if ($(window).width() <= 991) {
          $(this).parents('.dropdown-menu-inner').removeClass('active');
        }
      });
      $('header.sub-header .navbar .navbar-nav li .dropdown-menu li').mouseenter(function () {
        if ($(window).width() >= 992) {
          $('header.sub-header .navbar .navbar-nav li .dropdown-menu li').removeClass('active');
        }
      });
      $('header.sub-header').mouseleave(function () {
        if ($(window).width() >= 992) {
          $('header.sub-header .navbar .navbar-nav li .dropdown-menu li').each(function () {
            if ($(this).find('.dropdown-menu-inner').hasClass('active')) {
              $(this).addClass('active');
            }
          });
        }
      }); // console.log(UTILITY.getCookie("acceptCookie"))

      var acceptCookie = UTILITY.getCookie("acceptCookie");

      if (!acceptCookie) {
        $('.cookie-consent').show();

        if ($('.cookie-consent').length) {
          var _headerHeight = $('header').height() - 3; // alert(headerHeight)


          $('.submenu-padding').css('padding-top', _headerHeight);
          $('.btn-accept-cookie').on('click', function () {
            $('.cookie-consent').remove();
            _headerHeight = $('header').height(); // alert(headerHeight);

            $('.submenu-padding').css('padding-top', _headerHeight);
            UTILITY.setCookie("acceptCookie", "true", 365);
          });
        }
      }

      function searchFilters(loadmoreBtn) {
        var requestData = {
          action: "search_celgene_filters",
          query: loadMoreTrials.posts,
          meta: UTILITY.getParamsByPrefix(["meta_", "date_"]),
          dist: UTILITY.getParamsByPrefix(["dis_"]),
          filter: UTILITY.getParamsByPrefix(["filter"]),
          orderby: UTILITY.getParams(["orderby"]),
          page: loadmoreBtn ? loadMoreTrials.current_page : 0,
          _wpnonce: phpData.rest_nonce,
          isAdminAjax: true
        };

        if (loadmoreBtn) {
          requestData["single"] = loadMoreTrials.single;
          requestData["taxonomy"] = loadMoreTrials.taxonomy;
          requestData["term"] = loadMoreTrials.term;
        }

        $.ajax({
          url: loadMoreTrials.ajaxurl,
          data: requestData,
          type: "POST",
          beforeSend: function beforeSend(xhr) {
            $(".preloader").show();
            $("button.loadTrialButton").text("Loading...");
          },
          success: function success(data) {
            if (data) {
              var totalCount = data.total_count;
              var onPageTrials = $(".resultItems").length + 5;
              console.log(onPageTrials);

              if (onPageTrials >= totalCount) {
                $("button.loadTrialButton").hide();
              } else {
                $("button.loadTrialButton").show();
              }

              $(".preloader").hide();
              $("button.loadTrialButton").text("Load More Trials");

              if (!isNaN(totalCount)) {
                $(".trialCount").text(totalCount);

                if (totalCount == 0) {
                  $("#zeroTrails").modal("show");
                }
              }

              if (loadmoreBtn) {
                $(".resultContainer").append(function () {
                  return $(data.html).click(function (e) {
                    if ($(e.target).hasClass("showHideArrow")) {
                      check($(e.target));
                      return false;
                    }
                  });
                });
              } else {
                $(".resultContainer").html(function () {
                  return $(data.html).click(function (e) {
                    if ($(e.target).hasClass("showHideArrow")) {
                      check($(e.target));
                      return false;
                    }
                  });
                });
              }

              if (loadmoreBtn) {
                loadMoreTrials.current_page++;
                if (loadMoreTrials.current_page === loadMoreTrials.max_page) loadmoreBtn.remove();
              }

              loadMoreTrials.posts = data.query;

              if ($(window).width() <= 767) {
                $("html, body").animate({
                  scrollTop: 0
                }, 500);
              }
            }

            isSearchSaved();

            if (!requestData["filter"].filter_location && !requestData["dist"].dis_location) {
              $(".resultContainer .resultItems").first().removeClass("open");
              $(".resultContainer .resultItems.open .resultItemsExpand").css("display", "none");
              $(".accordianLi .showHideArrow").first().removeClass("active");
            } else {
              $(".resultContainer .resultItems").first().addClass("open");
              $(".resultContainer .resultItems.open .resultItemsExpand").css("display", "block");
              $(".accordianLi .showHideArrow").first().addClass("active");
            }
          }
        });
      }

      $('.nct-popup').on('click', function () {
        if ($('body').hasClass('search')) {
          // console.log($(this).parent().parent().next('.hidden').find('.modal-content'))
          var dataShow = '.' + $(this).data('view');
          $(this).parent().parent().next('.hidden').find('.modal-content').find('li').addClass('hidden');
          $(this).parent().parent().next('.hidden').find('.modal-content').find("li".concat(dataShow)).removeClass('hidden');
          var content = $(this).parent().parent().next('.hidden').find('.modal-content').clone();
          $("#myVideoModal .modal-dialog").empty();
          var closeBtn = '<button type="button" class="close" data-dismiss="modal">&nbsp;</button>';
          $("#myVideoModal .modal-dialog").append(closeBtn);
          $("#myVideoModal .modal-dialog").append(content);
        }
      }); // $('.dropdown-menu li').mouseover(function() {
      // 	if ($(window).width() >= 992) {
      // 		let minHeight = 252;
      // 		let menuHeight = $(this).find('.dropdown-menu-inner').height()+22;
      // 		$('.dropdown-menu').css('min-height', '252px');
      // 		if(menuHeight > minHeight){
      // 			$(this).parent('.dropdown-menu').css('min-height', menuHeight);
      // 		}else{
      // 			$('.dropdown-menu').css('min-height', '252px');
      // 			$(this).find('.dropdown-menu-inner').css('min-height', '252px');
      // 		}
      // 	}
      // }).mouseout(function(){
      // 	$('.dropdown-menu').removeAttr('style');
      // });
      // $('.dropdown-menu li .dropdown-menu-inner ul li').mouseover(function() {
      // 	if ($(window).width() >= 992) {
      // 		let minHeight = 252;
      // 		let menuHeight = $(this).parent().parent().height()+22;
      // 		console.log($(this).parent().parent().parent().attr('class'));
      // 		$('.dropdown-menu').css('min-height', '252px');
      // 		if(menuHeight > minHeight){
      // 			$('.dropdown-menu').css('min-height', menuHeight);
      // 		}else{
      // 			$('.dropdown-menu').css('min-height', '252px');
      // 		}
      // 	}
      // }).mouseout(function(){
      // 	$('.dropdown-menu').removeAttr('style');
      // });

      UTILITY.polyfill();
    };

    module.exports = customJS;
  }, {
    "./api": 2,
    "./filters/location": 27,
    "./utility": 46,
    "@lvchengbin/url": 49,
    "bootstrap": "s7b+G+",
    "bootstrapSlider": "LeygW/",
    "bxSlider": "KUSO1n",
    "client-oauth2": 127,
    "easyAutoComplete": "P2RbX6"
  }],
  16: [function (require, module, exports) {
    var API = require("./api");

    var Specialty = require("./dashboard/account-preferences/specialty");

    var TrialOfInterest = require("./dashboard/account-preferences/trial-of-interest");

    var DrugIntervention = require("./dashboard/account-preferences/drug-intervention");

    var EditName = require("./dashboard/account-preferences/edit-name");

    var dashboardAccountPreferences = function dashboardAccountPreferences() {
      var $ = jQuery;
      var api = new API();
      var container = $(".accPreferencesCont");
      var formFields = $(".formField");
      var views = {
        specialty: new Specialty({
          element: container.find(".specialtySelection")
        }),
        trialOfInterest: new TrialOfInterest({
          element: container.find(".clinicalInterestType")
        }),
        drugIntervention: new DrugIntervention({
          element: container.find(".drugIntervention")
        }),
        editName: new EditName({
          element: container.find(".accInfoBx")
        })
      };
      $('a').click(function (e) {
        if (e.target.href && e.target.getAttribute('href') !== '#' && !e.target.getAttribute('href').includes('javascript')) {
          var targetToNaviate = e.target.href;

          if (phpData.specialityChanged) {
            e.preventDefault();
            container.find(phpData.specialityChanged).find('.popoverContainer').slideDown();
          }

          if (phpData.clinicalInterestChanged) {
            e.preventDefault();
            container.find(phpData.clinicalInterestChanged).find('.popoverContainer').slideDown();
          }

          if (phpData.drugInterventionChanged) {
            e.preventDefault();
            container.find(phpData.drugInterventionChanged).find('.popoverContainer').slideDown();
          }

          container.find('.whiteContainer .cancelBut').click(function (e) {
            location.assign(targetToNaviate);
          });
        }
      });
      $('.deleteAccountContainer').find('.confirmDeleteAcc').click(function () {
        //rest api to confirm deletion
        //if ajax requests status is 200
        var password = formFields.find('#delete-confirm-password').val();
        var email = formFields.find('#user-email').val();

        if (password) {
          api["delete"]("user/".concat(phpData.userId, "/delete-account"), {
            current_password: password,
            user_email: email
          }).then(function (res) {
            if (!res.success) {//show error message.
            }

            if (res.success) {
              location.href = res.redirect_url;
            }
          })["catch"](function (err) {//toaster for please enter password
          });
        } else {//toaster for please enter password
        }
      }); // Sign-up Page Account-preference show and hide function

      $(document).ready(function () {
        $(".editIcon").on('click', function (labels) {
          if ($(".title-label")[0].innerText === "Title:") {
            $(".hidden_label").hide();
          }
        });
        $(".hidden_label").show().css("opacity", "1");
        $(".salutation-acc-pref").change(function (element) {
          $(".hidden_label").show().css("opacity", "1");

          if (element.target.value) {
            $(".hidden_label").show().css("opacity", "1");
          } else {
            $(".hidden_label").hide();
          }
        });
      });
    };

    module.exports = dashboardAccountPreferences;
  }, {
    "./api": 2,
    "./dashboard/account-preferences/drug-intervention": 19,
    "./dashboard/account-preferences/edit-name": 20,
    "./dashboard/account-preferences/specialty": 21,
    "./dashboard/account-preferences/trial-of-interest": 22
  }],
  17: [function (require, module, exports) {
    var Collection = require("./dashboard/save-clinical-trials/collection");

    var Unsorted = require("./dashboard/save-clinical-trials/unsorted");

    var API = require("./api");

    var dashboardSavedClinicalTrials = function dashboardSavedClinicalTrials() {
      var $ = jQuery;
      var api = new API();
      var container = $(".savedClinicalContainer");
      var views = {
        unsorted: new Unsorted({
          element: container.find(".unsortedTrials"),
          views: function getVeiws() {
            return views;
          }
        }),
        collections: []
      };
      container.find(".savedClinicalItems").each(function () {
        var collectionId = $(this).attr("data-id");
        views.collections[collectionId] = new Collection({
          element: $(this),
          views: function getVeiws() {
            return views;
          }
        });
      });
      container.on("click", ".deleteTrial", function (e) {
        e.preventDefault();
        var trialId = $(this).parents("tr").attr("data-id");
        api["delete"]("user/".concat(phpData.userId, "/unsave-trial"), {
          trial_id: trialId
        }).then(function (response) {
          location.reload();
        });
      });
      $('.collection .savedClinicalContainer .savedClinicalCont').on("click", ".addIconAccord", function (e) {
        if (!$(this).parents('tr').next('tr.collectionHide').hasClass('showTr')) {
          $('.collection .savedClinicalContainer .savedClinicalCont .addIconAccord').removeClass('active');
          $('.collection .savedClinicalContainer .savedClinicalCont tr.collectionHide').removeClass('showTr');
          $(this).parents('tr').next('tr.collectionHide').addClass('showTr');
          $(this).addClass('active');
        } else {
          $('.collection .savedClinicalContainer .savedClinicalCont .addIconAccord').removeClass('active');
          $(this).parents('tr').next('tr.collectionHide').removeClass('showTr');
        }
      });
    };

    module.exports = dashboardSavedClinicalTrials;
  }, {
    "./api": 2,
    "./dashboard/save-clinical-trials/collection": 23,
    "./dashboard/save-clinical-trials/unsorted": 24
  }],
  18: [function (require, module, exports) {
    var BSChart = require("./bs-chart");

    var API = require("./api");

    var dashboardYourDashboard = function dashboardYourDashboard() {
      var $ = jQuery;
      var api = new API();
      var container = $(".dashboardCont");
      var dom = {
        window: $(window),
        document: $(document),
        body: $('body')
      }; // Add first set of data on page load.

      window.addEventListener('DOMContentLoaded', handleOnLoad, false);
      var views = {
        chart: new BSChart()
      }; // Tooltip Code

      function getCookie(name) {
        var dc = document.cookie;
        var prefix = name + "=";
        var begin = dc.indexOf("; " + prefix);

        if (begin == -1) {
          begin = dc.indexOf(prefix);
          if (begin != 0) return null;
        } else {
          begin += 2;
          var end = document.cookie.indexOf(";", begin);

          if (end == -1) {
            end = dc.length;
          }
        } // because unescape has been deprecated, replaced with decodeURI
        //return unescape(dc.substring(begin + prefix.length, end));


        return decodeURI(dc.substring(begin + prefix.length, end));
      }

      eraseCookie = function eraseCookie(name) {
        document.cookie = name + '=; Max-Age=-99999999;';
      };

      container.find(".tourPopup.bigSize .closeTourPopup").click(function (e) {
        $(this).parents('.tourPopup.bigSize').hide();
        eraseCookie("isTrialupdatePopupViewed_".concat(phpData.userId));
        document.cookie = "isTrialupdatePopupViewed_".concat(phpData.userId, "=true");
      });
      var popup = getCookie("isTrialupdatePopupViewed_".concat(phpData.userId));

      if (popup == "true") {
        $(".tourPopup.bigSize").hide();
      } else {
        if (popup == 'null') {
          document.cookie = "isTrialupdatePopupViewed_".concat(phpData.userId, "=false");
        }

        $(".tourPopup.bigSize").show();
      } // End Tooltip Code
      // Info for donut chart


      container.find('.donutChart .infoIcon').click(function () {
        $(this).parents('.infoIconConatiner').find('.donutInfoBox').fadeIn();
        return false;
      });
      container.find('.donutChart .closeBtn').click(function () {
        $(this).parents('.infoIconConatiner').find('.donutInfoBox').fadeOut();
        return false;
      });
      /**
       * Handle AJAX response to Elastic Search on page load.
       */

      function handleOnLoad(e) {
        if (!$("canvas").length) {
          return false;
        }

        if ('' !== phpData.payload) {
          // set initial checkboxes
          // Get status filters.
          views.chart.init(phpData.payload, false);
          return;
        }

        api.get(phpData.searchApiUrl, {
          // request: {
          'post__in': phpData.post__in // }

        }).then(function (data) {
          //console.log(data);
          views.chart.init(data, false); //views.chart.processResponse
        }, views.chart.errorHandler);
      }
    };

    module.exports = dashboardYourDashboard;
  }, {
    "./api": 2,
    "./bs-chart": 13
  }],
  19: [function (require, module, exports) {
    var API = require("../../api");

    var DrugIntervention = function DrugIntervention(obj) {
      var container = obj.element;
      var api = new API();
      var dom = {
        window: $(window),
        document: $(document),
        body: $('body')
      }; // Add Button Click Event 

      container.find(".addButton").click(function (e) {
        e.preventDefault();
        var drugText = container.find('.addAdditionalDrug input').val();

        if (drugText) {
          var drugItem = "<li><span class='listTitle'>".concat(drugText, "</span><a href='javascript:void(0);' class='removeLink'>Remove</a></li>");
          phpData.drugInterventionChanged = '.drugIntervention';
          container.find(".drugSelectionList ul").append(drugItem);
          container.find('.addAdditionalDrug input').val("");
        }
      }); // Save Button Click Event

      container.find(".saveBut").click(function (e) {
        e.preventDefault();
        $(this).parents('.popoverBut').find('.popoverContainer').slideDown();
      }); // Save Button Click Event

      container.find(".saveDrugSel").click(function (e) {
        e.preventDefault();
        save();
        $(this).parents('.popoverBut').find('.popoverContainer').slideUp();
      }); // Remove Drug Inerventions

      dom.document.on('click', '.drugIntervention .drugSelectionList ul li .removeLink', function (e) {
        e.preventDefault();
        phpData.drugInterventionChanged = '.drugIntervention';
        $(this).parent().remove();
      }); // Save Function to create Object

      save = function save() {
        var interventions = [];
        container.find(".drugSelectionList li").each(function () {
          var value = $(this).find("span.listTitle").text();

          if (value) {
            interventions.push(value);
          }
        }); // 

        api.post("user/".concat(phpData.userId, "/save-interventions"), {
          interventions: interventions
        }).then(function (response) {
          location.reload();
        });
      };
    };

    module.exports = DrugIntervention;
  }, {
    "../../api": 2
  }],
  20: [function (require, module, exports) {
    require('jqueryValidator');

    var API = require("../../api");

    var EditName = function EditName(obj) {
      var container = obj.element;
      var api = new API();
      container.find('.changePassword').click(function () {
        container.find('#current_password').val("");
        $(this).parents('li').find('.currentPasswordBx').hide();
        $(this).parents('li').find('.newPasswordBx').show();
        $(this).parents('form').find('.buttonSection .okBut').prop('disabled', true).addClass('disabled');
        return false;
      });
      container.find("form").on('blur keyup keydown  change', function (event) {
        var isFormValid = container.find("form").valid();
        container.find("form .okBut").prop('disabled', !isFormValid);
        container.find("form .okBut").toggleClass('disabled', !isFormValid);
      });
      container.find(".editIcon").on('click', function (event) {
        $(this).parents('.popoverBut').find('.popoverContainer').slideDown();
        return false;
      });
      container.find("form").validate({
        rules: {
          first_name: "required",
          last_name: "required",
          user_email: {
            required: true,
            validateEmail: true,
            email: true
          },
          user_pass: {
            required: true // passwordCheck: true,
            // minlength: 8

          },
          current_password: {
            required: true // passwordCheck: true,
            // minlength: 8

          },
          new_password: {
            required: true,
            passwordCheck: true,
            minlength: 8
          },
          new_password_confirm: {
            required: true,
            equalTo: "#new_password"
          }
        },
        messages: {
          first_name: "Please enter your firstname",
          last_name: "Please enter your lastname",
          user_email: "Please enter a valid email address",
          user_pass: {
            required: "Please provide a password",
            minlength: "Your password must be at least 8 characters long"
          },
          current_password: {
            required: "Please provide a password",
            minlength: "Your password must be at least 8 characters long"
          },
          new_password: {
            required: "Please provide a password",
            minlength: "Your password must be at least 8 characters long"
          },
          new_password_confirm: {
            required: "Please provide a password",
            equalTo: "Please enter the same password as above"
          }
        },
        submitHandler: function submitHandler() {
          saveUserProfile();
        }
      });

      saveUserProfile = function saveUserProfile() {
        var obj = {};
        container.find("form input").each(function (i, el) {
          var isInputVisible = $(this).is(":visible");

          if (isInputVisible) {
            obj[el.name] = $(this).val();
          }
        });
        container.find("form select").each(function (i, el) {
          var isInputVisible = $(this).is(":visible");

          if (isInputVisible) {
            obj[el.name] = $(this).val();
          }
        });
        api.post("user/".concat(phpData.userId, "/update-account"), obj).then(function (response) {
          //console.log(response);
          var responseId = response[Object.keys(response)[0]];
          var message = response[Object.keys(response)[2]];

          if (responseId == 200) {
            container.find('.accountEditPopup').slideUp();
            location.reload();
          } else {
            container.find("#current_password").removeClass('valid');
            container.find("#current_password").addClass('error');
            container.find("#current_password-error").show();
            container.find("#current_password-error").html(message);
            container.find('#current_password').val("");
          }
        })["catch"](function (err) {
          //console.log(err);
          container.find("#current_password").removeClass('valid');
          container.find("#current_password").addClass('error');
          container.find("#current_password-error").show();
          container.find("#current_password-error").html("Incorrect Password");
          container.find('#current_password').val("");
        });
      };

      jQuery.validator.addMethod("passwordCheck", function (value, element) {
        return this.optional(element) || /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$/.test(value);
      }, "Password must be at least 8 characters, contain at least one special character, and at least one uppercase letter.");
      jQuery.validator.addMethod("validateEmail", function (value, element) {
        return /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/.test(value);
      }, "Please enter a valid email address.");
    };

    module.exports = EditName;
  }, {
    "../../api": 2,
    "jqueryValidator": "5ZD6oW"
  }],
  21: [function (require, module, exports) {
    var API = require("../../api");

    var Speciality = function Speciality(obj) {
      var container = obj.element;
      var api = new API(); // Remove Speciality Content

      container.on('click', '.specialityBtn', function (e) {
        e.preventDefault();
        var textSpeciality = $(this).text();
        var dataId = $(this).attr("data-id");
        $(this).parents("[data-specialty-id=\"".concat(dataId, "\"]")).remove();
        var li = "<li><a href=\"javascript:void(0);\" data-id=\"".concat(dataId, "\">").concat(textSpeciality, "</a></li>");
        container.find(".addSpecBody ul").prepend(li);
        phpData.specialityChanged = '.specialtySelection';
      });
      container.on('click', '.addSpecBody ul li a', function (e) {
        e.preventDefault();
        var textSpeciality = $(this).text();
        var dataId = $(this).attr("data-id");
        $(this).parent().remove();
        var tr = container.find(".specialityDataCollection tr[data-specialty-id=\"".concat(dataId, "\"]")).clone();
        tr.find(".specialityBtn").addClass("active");
        tr.find(".lfBorder a").removeClass("active");
        phpData.specialityChanged = '.specialtySelection';
        container.find("table.specialitySelectionItems tbody").append(tr);
        container.find(".specialityDataCollection tr a").removeClass("active");
      });
      container.on('click', '.selectionLink', function (e) {
        e.preventDefault();
        $(this).toggleClass('active');
        phpData.specialityChanged = '.specialtySelection';
      }); // Save Button Click Event

      container.parent().find(".saveSpecialityButton").click(function (e) {
        e.preventDefault();
        saveSpeciality();
      }); // Save Function to create Object

      saveSpeciality = function saveSpeciality() {
        var sendSpecialityData = {
          specialty: [],
          subspecialty: []
        };
        var selectedSpecialties = [];
        container.find(".specialitySelectionItems td.rhtBorder .active").each(function () {
          selectedSpecialties.push($(this).data('id'));
        });
        var subSpecialties = [];
        container.find(".specialitySelectionItems td.lfBorder .active").each(function () {
          subSpecialties.push($(this).data('id'));
        });
        api.post("user/".concat(phpData.userId, "/save-specialties"), {
          specialties: selectedSpecialties,
          subSpecialties: subSpecialties
        }).then(function (response) {
          location.reload();
        });
      }; // Save Button Click Event


      container.find(".saveBut").click(function (e) {
        e.preventDefault();
        $(this).parents('.popoverBut').find('.popoverContainer').slideDown();
      });
    };

    module.exports = Speciality;
  }, {
    "../../api": 2
  }],
  22: [function (require, module, exports) {
    var API = require("../../api");

    var TrialOfInterest = function TrialOfInterest(obj) {
      var container = obj.element;
      var api = new API(); // Save Trials Intervention Button Click Event 

      container.find(".saveTrialInterestButton").click(function (e) {
        e.preventDefault();
        saveTrialInterest();
      }); // Save Function 

      saveTrialInterest = function saveTrialInterest() {
        var data = {};
        container.find("[name]").each(function () {
          data[$(this).attr("name")] = $(this).val();
        });
        api.post("user/".concat(phpData.userId, "/save-trials-of-interest"), {
          trials_of_interest: data
        }).then(function (response) {
          location.reload();
        });
      }; // Save Button Click Event


      container.find(".saveBut").click(function (e) {
        e.preventDefault();
        $(this).parents('.popoverBut').find('.popoverContainer').slideDown();
      });
      container.find('.rangeSlider').change(function (e) {
        phpData.clinicalInterestChanged = '.clinicalInterestType';
      });
    };

    module.exports = TrialOfInterest;
  }, {
    "../../api": 2
  }],
  23: [function (require, module, exports) {
    var API = require("../../api");

    var Collection = function Collection(obj) {
      var container = obj.element;
      var api = new API();
      var id = container.attr("data-id");
      container.on("click", ".removeTrial", function (e) {
        e.preventDefault();
        var trial = $(this).parents("tr");
        api.post("user/".concat(phpData.userId, "/remove-trial"), {
          collectionID: id,
          trial: trial.attr("data-id")
        }).then(function (response) {
          location.reload();
          obj.views().unsorted.addTrial(response.template);
          trial.remove();
        });
      });
      container.on("click", ".popoverBut .editIcon", function () {
        var collectionName = $(this).parent().find("h4 a").text();
        var trimtext = collectionName.replace(/\s/g, '');
        $(this).parents('.popoverBut').find(".popoverContainer .textbox").val(trimtext);
        $(this).parents('.popoverBut').find('.popoverContainer').slideDown();
        container.find("#editCollectionInput-error").html("");
        return false;
      });
      container.on("click", ".popoverBut .closePopover", function () {
        $(this).parents('.popoverBut').find('.popoverContainer').slideUp();
        return false;
      });

      this.addItem = function (trial) {
        container.find("tbody").append(trial);
      };

      container.find('.popoverBut .savedClinicalPopup .buttonSection .okBut').click(function () {
        var textboxValue = $(this).parents('.savedClinicalPopup').find('.textbox').val();
        var labelName = container.find('.savedClinicalSectionHead').find('h4').text();
        var inputName = container.find('#editCollectionInput').val();

        if (labelName == inputName || inputName == "") {
          var message = "Please change collection name";
          showError(message);
          return false;
        }

        api.post("user/".concat(phpData.userId, "/rename-collection"), {
          collection_id: id,
          collection_name: textboxValue
        }).then(function (response) {
          //console.log(response);
          var responseId = response[Object.keys(response)[0]];
          var message = response[Object.keys(response)[2]];

          if (responseId == 200) {
            $(this).parents('.popoverBut').find('.popoverContainer').slideUp();
            $(this).parents('.savedClinicalSectionHead').find('h4').text(textboxValue);
            location.reload();
          } else {
            showError(message);
          }
        });
      });

      function showError(message) {
        container.find("#editCollectionInput").removeClass('valid');
        container.find("#editCollectionInput").addClass('error');
        container.find("#editCollectionInput-error").show();
        container.find("#editCollectionInput-error").html(message);
      } // container.find("form").validate({
      //     rules: {
      //         editCollectionText: "required"
      //     },
      //     messages: {
      //         editCollectionText: "Collection cannot be blank"
      //     }
      // });

    };

    module.exports = Collection;
  }, {
    "../../api": 2
  }],
  24: [function (require, module, exports) {
    var Collection = require('../../save-trial/collection');

    var Notification = require('../../save-trial/notification');

    var API = require('../../api');

    var Unsorted = function Unsorted(obj) {
      var container = obj.element;
      var api = new API();
      var modal;
      var trialId;
      var collection = {
        name: "Unsorted List",
        id: ""
      }; // check whether you need an ID or name will do?

      container.on("click", ".addIcon", function (e) {
        e.preventDefault();
        modal = container.find(".unSavedPopover, .savedPopover");
        trialId = $(this).parents("tr").attr("data-id");
        $(this).parent().find(".savedPopover").show();
        $(this).parent().find(".savedPopover .slides:nth-child(1)").show();
        $(this).parent().find(".savedPopover .slides:nth-child(2)").hide(); //views.toggle("collection");
        //modal.slideDown();
      });
      var views = {
        collection: new Collection({
          element: container.find(".slides:nth-child(1)")
        }),
        notification: new Notification({
          element: container.find(".slides:nth-child(2)")
        }),
        hide: function hide() {
          this.collection.hide();
          this.notification.hide();
        },
        toggle: function toggle(view) {
          this.hide();
          this[view].show();
        },
        refresh: function refresh() {
          this.collection.refresh(container.find(".slides:nth-child(1)"));
          this.notification.refresh(container.find(".slides:nth-child(2)"));
          this.bindEvents();
        },
        bindEvents: function bindEvents() {
          this.collection.off();
          this.collection.on("click", ".closePopover", function (e) {
            e.preventDefault();

            if (!collection.id) {
              return;
            }

            api.post("user/".concat(phpData.userId, "/move-trial"), {
              trial_id: trialId,
              new_collection_id: collection.id
            }).then(function (response) {
              //console.log(response);
              location.reload();
              obj.views().collections[collection.id].addItem(response.template);
              container.find("tr[data-id=\"".concat(trialId, "\"]")).remove();
            });
          });
          this.collection.on("change", "[name='save-trial-to-collection']", function () {
            collection = {
              name: $(this).parents(".radio").next().html(),
              id: $(this).val()
            };
          });
          this.collection.on("click", ".addButton", function (e) {
            e.preventDefault();
            var tempCollection = views.collection.getCollection(e);

            if (isEmpty(tempCollection)) {
              alert("Please enter a Collection name");
              return false;
            }

            collection.name = tempCollection;
            api.post("user/".concat(phpData.userId, "/save-collection"), {
              name: tempCollection
            }).then(function (response) {
              collection.id = response.collection.collection_id;
              views.collection.addItem(collection);
            });
          });
        }
      };

      function isEmpty(str) {
        return !str.replace(/\s+/, '').length;
      }

      function close() {
        modal.hide(); //modal.slideUp();

        views.hide();

        if (collection == "unsorted") {
          return false;
        } //trigger rest endpoint to move from unsorted to a given collection

      }

      this.addTrial = function (trial) {
        container.find("tbody").append(trial);
        views.refresh();
      };

      views.bindEvents();
    };

    module.exports = Unsorted;
  }, {
    "../../api": 2,
    "../../save-trial/collection": 32,
    "../../save-trial/notification": 33
  }],
  25: [function (require, module, exports) {
    function DonutChart(obj) {
      var canvas = document.getElementById(obj.canvasId);
      var key = obj.key;
      var inputName = obj.inputName;
      var handleResponse = obj.handleResponse;
      var labels = [];
      var hasChanged = false;
      canvas.addEventListener('click', function (e) {
        var elements = donut.getElementsAtEvent(e);

        if (elements.length === 0) {
          return;
        }

        var clickedIndex = elements[0]._index;
        var checkboxes = $(legends).find('.js-label-filter:checked');

        if (checkboxes.length > 1) {
          checkboxes.prop('checked', false);
        }

        var matchingCheckbox = legends.querySelector('.js-label-filter-' + clickedIndex);
        $(matchingCheckbox).next().click();
      });
      var chart = canvas.getContext('2d');
      var legends = document.getElementById(obj.legendsId);
      var form = document.getElementById(obj.form);
      var loadStatus = true;
      var initialData = [];
      var donut = new Chart(chart, {
        type: 'doughnut',
        data: {
          labels: obj.labels,
          datasets: [{
            backgroundColor: obj.colorSet[0],
            data: [0, 0, 0, 0, 0, 0]
          }, {
            backgroundColor: obj.colorSet[1],
            data: [0, 0, 0, 0, 0, 0]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          stroke: false,
          aspectRatio: 1,
          cutoutPercentage: obj.cutoutPercentage,
          segmentShowStroke: false,
          legend: {
            display: false
          },
          tooltips: {
            enabled: false
          },
          animation: {
            animateScale: true,
            animateRotate: true
          },
          elements: {
            arc: {
              borderWidth: 0,
              // <-- Set this to zero
              borderColor: '#333'
            }
          },
          events: ['mousemove'],
          hover: {
            mode: null
          } // onHover: (event) => {
          //     event.target.style.cursor = 'pointer';
          // }

        }
      });

      this.getKey = function () {
        return key;
      };

      this.isParent = function () {
        return form.classList.contains('parent-group-current');
      };

      this.setParent = function () {
        form.classList.add('parent-group-current');
        this.enableLegends();
      };

      this.unsetParent = function () {
        form.classList.remove('parent-group-current');
      };

      this.enableLegends = function () {
        var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (reset) {
          $(form).find("input[type='checkbox']").removeAttr("disabled");
        } else {
          $(form).find("input[type='checkbox']").not(".disabled").removeAttr("disabled");
        }
      };

      this.getCheckedLegends = function () {
        var checkedLegends = [];
        $(form).find("input[type='checkbox']:checked").each(function () {
          checkedLegends.push($(this).val());
        });
        return checkedLegends;
      };

      this.getCheckedLegendsSearchValue = function () {
        var checkedLegends = [];
        $(form).find("input[type='checkbox']:checked").each(function () {
          checkedLegends.push($(this).attr("data-searchvalue"));
        });
        return checkedLegends;
      };

      this.isLegendSelected = function () {
        return this.getCheckedLegends().length;
      };

      this.setLegends = function (key) {
        if (!loadStatus) {
          return;
        }

        initialData = key; // const labels = [];

        var fragment = document.createDocumentFragment();
        var outputlabels = document.createElement('ul');

        var _loop4 = function _loop4(_i12) {
          var object = key ? key.find(function (k) {
            return k.name.toLowerCase() === obj.labels[_i12].toLowerCase();
          }) : null;
          var listItem = document.createElement('li');
          var input = document.createElement('input');
          var label = document.createElement('label');
          labels.push(obj.labels[_i12]);

          if (object && object.checked) {
            listItem.classList.add('is-active');
            input.classList.add('is-active');
          }

          if (object && object.checked) {
            input.setAttribute('checked', '');
          }

          input.setAttribute('type', 'checkbox');
          input.classList.add('js-label-filter');
          input.classList.add('js-label-filter-' + _i12);

          if (!object) {
            object = {
              slug: labels[_i12].replace(/\s/gi, "-").toLowerCase(),
              disabled: true
            };
            input.disabled = true;
            input.classList.add('disabled');
          } else {
            label.classList.add('ga-select-filter');
          }

          if (object && object.slug) {
            input.setAttribute('name', inputName);
            input.setAttribute('value', object.slug);
            input.setAttribute('id', 'js-label-filter-' + object.slug);
            input.setAttribute('data-searchvalue', ".".concat(object.slug));
            label.setAttribute('for', 'js-label-filter-' + object.slug);
          }

          label.textContent = labels[_i12];
          listItem.appendChild(input);
          listItem.appendChild(label);
          outputlabels.appendChild(listItem);
          input.addEventListener('change', function (e) {
            hasChanged = true;
            handleResponse(e);
          }, true); // checkboxes.push( input );
        };

        for (var _i12 = 0; _i12 < obj.labels.length; _i12++) {
          _loop4(_i12);
        } // Close labels markup.


        fragment.appendChild(outputlabels); // Output labels.

        legends.appendChild(fragment);
      };

      this.hasChanged = function () {
        var returnValue = hasChanged;
        hasChanged = false;
        return returnValue;
      };

      this.updateLegends = function (data) {
        $(form).find("input[type='checkbox']").each(function (index) {
          var slug = $(this).val();
          var obj = data.find(function (obj) {
            return obj.slug === slug;
          });

          if (obj) {
            $(this).removeAttr("disabled"); // $(this).removeClass('disabled');

            return;
          }

          $(this).attr("disabled", "");
          $(this).addClass('disabled');
        });
      };

      this.updateChart = function (data) {
        var keys = data.data.filters[key];
        var hasChecks = false;

        if (loadStatus || !phpData.payload.is_home) {
          labels = getlabelNames(data.data.filters[key]);
          initialData = data.data.filters[key];
        } //if (!labels.length) {


        labels = obj.labels; // }

        var _loop5 = function _loop5(_i13) {
          var matchingStatus = keys ? keys.find(function (thisStatus) {
            return thisStatus.name.toLowerCase() === labels[_i13].toLowerCase();
          }) : null;

          if (matchingStatus && matchingStatus.checked) {
            hasChecks = true;
            return "break";
          }
        };

        for (var _i13 = 0; _i13 < labels.length; _i13++) {
          var _ret = _loop5(_i13);

          if (_ret === "break") break;
        }

        var responseData = []; // Loop them to get label name and count.

        var _loop6 = function _loop6(_i14) {
          var matchingStatus = keys ? keys.find(function (thisStatus) {
            return thisStatus.name.toLowerCase() === labels[_i14].toLowerCase();
          }) : null; // Add donut info all the time, not just checked. Or if initial load.

          if (matchingStatus && !hasChecks || matchingStatus && matchingStatus.checked) {
            responseData.push(matchingStatus.count);
          } else {
            // Must explicitly add 0 if unchecked to retain the same number of datasets.
            responseData.push(0);
          }
        };

        for (var _i14 = 0; _i14 < labels.length; _i14++) {
          _loop6(_i14);
        } // Set data and labels.


        var isAllZero = responseData.every(function (item) {
          return item === 0;
        });

        if (isAllZero) {
          donut.data.datasets[0].data = [100];
          donut.data.datasets[1].data = [100];
          donut.data.datasets[0].backgroundColor = ['#ececec'];
          donut.data.datasets[1].backgroundColor = ['#ececec'];
          $('.no-data-text').removeClass('hidden');
          $('.pinkButtonStyle').addClass('empty-trial');
          $('.chartInfoInner').addClass('empty-info');
        } else {
          donut.data.datasets[0].data = responseData;
          donut.data.datasets[1].data = responseData;
          donut.data.datasets[0].backgroundColor = obj.colorSet[0];
          donut.data.datasets[1].backgroundColor = obj.colorSet[1];
          $('.no-data-text').addClass('hidden');
          $('.pinkButtonStyle').removeClass('empty-trial');
          $('.chartInfoInner').removeClass('empty-info');
        }

        donut.data.labels = labels; // Update chart.

        donut.update();
        loadStatus = false;
      };

      function getlabelNames(key) {
        var labels = [];

        for (var _i15 = 0; _i15 < key.length; _i15++) {
          labels.push(key[_i15].name);
        }

        return labels;
      }
    }

    module.exports = DonutChart;
  }, {}],
  26: [function (require, module, exports) {
    (function (global) {
      if (!global || !global._babelPolyfill) {
        require('babel-polyfill');
      }

      var Chart = require('chart.js');

      var customJS = require('./custom.js');

      var UserRegistration = require('./user-registration-2');

      var SaveTrial = require('./save-trial');

      var search = require('./search');

      var patentTypeSearch = require('./patient-type-search.js');

      var home = require('./home');

      var API = require('./api');

      var celgeneAlliance = require('./bms-pages/bms-alliance.js');

      var celgeneLanding = require('./bms-pages/bms-landing.js');

      var celgenedashboard = require('./bms-pages/bms-dashboard.js');

      var celgenePipeline = require('./bms-pages/bms-pipeline.js');

      var dashboardSavedClinicalTrials = require('./dashboard-saved-clinical-trials.js');

      var dashboardAccountPreferences = require('./dashboard-account-preferences');

      var dashboardYourDashboard = require('./dashboard-your-dashboard');

      var advanceSearch = require('./advance-search');

      var ourScience = require('./ourscience/our-science');

      var BMSTrials = require('./bms-trials');

      var BMSAccordion = require('./bms-according');

      var VideoModal = require('./components/video-modal');

      var homeAccordionEvent = false;

      (function (t) {
        var e = function e() {
          try {
            return !!Symbol.iterator;
          } catch (e) {
            return false;
          }
        };

        var r = e();

        var n = function n(t) {
          var e = {
            next: function next() {
              var e = t.shift();
              return {
                done: e === void 0,
                value: e
              };
            }
          };

          if (r) {
            e[Symbol.iterator] = function () {
              return e;
            };
          }

          return e;
        };

        var i = function i(e) {
          return encodeURIComponent(e).replace(/%20/g, "+");
        };

        var o = function o(e) {
          return decodeURIComponent(String(e).replace(/\+/g, " "));
        };

        var a = function a() {
          var a = function a(e) {
            Object.defineProperty(this, "_entries", {
              writable: true,
              value: {}
            });

            var t = _typeof2(e);

            if (t === "undefined") {} else if (t === "string") {
              if (e !== "") {
                this._fromString(e);
              }
            } else if (e instanceof a) {
              var r = this;
              e.forEach(function (e, t) {
                r.append(t, e);
              });
            } else if (e !== null && t === "object") {
              if (Object.prototype.toString.call(e) === "[object Array]") {
                for (var n = 0; n < e.length; n++) {
                  var i = e[n];

                  if (Object.prototype.toString.call(i) === "[object Array]" || i.length !== 2) {
                    this.append(i[0], i[1]);
                  } else {
                    throw new TypeError("Expected [string, any] as entry at index " + n + " of URLSearchParams's input");
                  }
                }
              } else {
                for (var o in e) {
                  if (e.hasOwnProperty(o)) {
                    this.append(o, e[o]);
                  }
                }
              }
            } else {
              throw new TypeError("Unsupported input's type for URLSearchParams");
            }
          };

          var e = a.prototype;

          e.append = function (e, t) {
            if (e in this._entries) {
              this._entries[e].push(String(t));
            } else {
              this._entries[e] = [String(t)];
            }
          };

          e["delete"] = function (e) {
            delete this._entries[e];
          };

          e.get = function (e) {
            return e in this._entries ? this._entries[e][0] : null;
          };

          e.getAll = function (e) {
            return e in this._entries ? this._entries[e].slice(0) : [];
          };

          e.has = function (e) {
            return e in this._entries;
          };

          e.set = function (e, t) {
            this._entries[e] = [String(t)];
          };

          e.forEach = function (e, t) {
            var r;

            for (var n in this._entries) {
              if (this._entries.hasOwnProperty(n)) {
                r = this._entries[n];

                for (var i = 0; i < r.length; i++) {
                  e.call(t, r[i], n, this);
                }
              }
            }
          };

          e.keys = function () {
            var r = [];
            this.forEach(function (e, t) {
              r.push(t);
            });
            return n(r);
          };

          e.values = function () {
            var t = [];
            this.forEach(function (e) {
              t.push(e);
            });
            return n(t);
          };

          e.entries = function () {
            var r = [];
            this.forEach(function (e, t) {
              r.push([t, e]);
            });
            return n(r);
          };

          if (r) {
            e[Symbol.iterator] = e.entries;
          }

          e.toString = function () {
            var r = [];
            this.forEach(function (e, t) {
              r.push(i(t) + "=" + i(e));
            });
            return r.join("&");
          };

          t.URLSearchParams = a;
        };

        var s = function s() {
          try {
            var e = t.URLSearchParams;
            return new e("?a=1").toString() === "a=1" && typeof e.prototype.set === "function";
          } catch (e) {
            return false;
          }
        };

        if (!s()) {
          a();
        }

        var f = t.URLSearchParams.prototype;

        if (typeof f.sort !== "function") {
          f.sort = function () {
            var r = this;
            var n = [];
            this.forEach(function (e, t) {
              n.push([t, e]);

              if (!r._entries) {
                r["delete"](t);
              }
            });
            n.sort(function (e, t) {
              if (e[0] < t[0]) {
                return -1;
              } else if (e[0] > t[0]) {
                return +1;
              } else {
                return 0;
              }
            });

            if (r._entries) {
              r._entries = {};
            }

            for (var e = 0; e < n.length; e++) {
              this.append(n[e][0], n[e][1]);
            }
          };
        }

        if (typeof f._fromString !== "function") {
          Object.defineProperty(f, "_fromString", {
            enumerable: false,
            configurable: false,
            writable: false,
            value: function value(e) {
              if (this._entries) {
                this._entries = {};
              } else {
                var r = [];
                this.forEach(function (e, t) {
                  r.push(t);
                });

                for (var t = 0; t < r.length; t++) {
                  this["delete"](r[t]);
                }
              }

              e = e.replace(/^\?/, "");
              var n = e.split("&");
              var i;

              for (var t = 0; t < n.length; t++) {
                i = n[t].split("=");
                this.append(o(i[0]), i.length > 1 ? o(i[1]) : "");
              }
            }
          });
        }
      })(typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : this);

      (function (h) {
        var e = function e() {
          try {
            var e = new h.URL("b", "http://a");
            e.pathname = "c%20d";
            return e.href === "http://a/c%20d" && e.searchParams;
          } catch (e) {
            return false;
          }
        };

        var t = function t() {
          var t = h.URL;

          var e = function e(_e, t) {
            if (typeof _e !== "string") _e = String(_e);
            var r = document,
                n;

            if (t && (h.location === void 0 || t !== h.location.href)) {
              r = document.implementation.createHTMLDocument("");
              n = r.createElement("base");
              n.href = t;
              r.head.appendChild(n);

              try {
                if (n.href.indexOf(t) !== 0) throw new Error(n.href);
              } catch (e) {
                throw new Error("URL unable to set base " + t + " due to " + e);
              }
            }

            var i = r.createElement("a");
            i.href = _e;

            if (n) {
              r.body.appendChild(i);
              i.href = i.href;
            }

            if (i.protocol === ":" || !/:/.test(i.href)) {
              throw new TypeError("Invalid URL");
            }

            Object.defineProperty(this, "_anchorElement", {
              value: i
            });
            var o = new h.URLSearchParams(this.search);
            var a = true;
            var s = true;
            var f = this;
            ["append", "delete", "set"].forEach(function (e) {
              var t = o[e];

              o[e] = function () {
                t.apply(o, arguments);

                if (a) {
                  s = false;
                  f.search = o.toString();
                  s = true;
                }
              };
            });
            Object.defineProperty(this, "searchParams", {
              value: o,
              enumerable: true
            });
            var c = void 0;
            Object.defineProperty(this, "_updateSearchParams", {
              enumerable: false,
              configurable: false,
              writable: false,
              value: function value() {
                if (this.search !== c) {
                  c = this.search;

                  if (s) {
                    a = false;

                    this.searchParams._fromString(this.search);

                    a = true;
                  }
                }
              }
            });
          };

          var r = e.prototype;

          var n = function n(t) {
            Object.defineProperty(r, t, {
              get: function get() {
                return this._anchorElement[t];
              },
              set: function set(e) {
                this._anchorElement[t] = e;
              },
              enumerable: true
            });
          };

          ["hash", "host", "hostname", "port", "protocol"].forEach(function (e) {
            n(e);
          });
          Object.defineProperty(r, "search", {
            get: function get() {
              return this._anchorElement["search"];
            },
            set: function set(e) {
              this._anchorElement["search"] = e;

              this._updateSearchParams();
            },
            enumerable: true
          });
          Object.defineProperties(r, {
            toString: {
              get: function get() {
                var e = this;
                return function () {
                  return e.href;
                };
              }
            },
            href: {
              get: function get() {
                return this._anchorElement.href.replace(/\?$/, "");
              },
              set: function set(e) {
                this._anchorElement.href = e;

                this._updateSearchParams();
              },
              enumerable: true
            },
            pathname: {
              get: function get() {
                return this._anchorElement.pathname.replace(/(^\/?)/, "/");
              },
              set: function set(e) {
                this._anchorElement.pathname = e;
              },
              enumerable: true
            },
            origin: {
              get: function get() {
                var e = {
                  "http:": 80,
                  "https:": 443,
                  "ftp:": 21
                }[this._anchorElement.protocol];
                var t = this._anchorElement.port != e && this._anchorElement.port !== "";
                return this._anchorElement.protocol + "//" + this._anchorElement.hostname + (t ? ":" + this._anchorElement.port : "");
              },
              enumerable: true
            },
            password: {
              get: function get() {
                return "";
              },
              set: function set(e) {},
              enumerable: true
            },
            username: {
              get: function get() {
                return "";
              },
              set: function set(e) {},
              enumerable: true
            }
          });

          e.createObjectURL = function (e) {
            return t.createObjectURL.apply(t, arguments);
          };

          e.revokeObjectURL = function (e) {
            return t.revokeObjectURL.apply(t, arguments);
          };

          h.URL = e;
        };

        if (!e()) {
          t();
        }

        if (h.location !== void 0 && !("origin" in h.location)) {
          var r = function r() {
            return h.location.protocol + "//" + h.location.hostname + (h.location.port ? ":" + h.location.port : "");
          };

          try {
            Object.defineProperty(h.location, "origin", {
              get: r,
              enumerable: true
            });
          } catch (e) {
            setInterval(function () {
              h.location.origin = r();
            }, 100);
          }
        }
      })(typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : this);

      (function ($) {
        var BolderScience = {
          /**
           * Initialize the theme codes.
           */
          init: function init() {
            celgenePipeline();
            VideoModal();

            if (!$('body').hasClass('post-type-archive-molecule')) {
              this.cacheElements();
              this.bindEvents();
              customJS();

              if (this.isHome() || this.isSpecialty() || this.isDiseaseArea() || this.isBmsScienceHome() || this.isTherapeuticArea()) {
                home();
              }

              UserRegistration();

              if (this.isSearchResults() || this.isSingleTrial()) {
                SaveTrial({
                  element: this.isSearchResults() ? $('.resultContainer') : $('.saveCollectionTrials')
                });
              }

              if (this.isPatientSearch()) {
                patentTypeSearch();
              }

              if (this.isSearchResults()) {
                search();
              }

              celgeneAlliance();
              celgeneLanding();
              celgenedashboard();

              if (this.isOurScience()) {
                ourScience();
              }

              if (this.isBmsScience()) {
                ourScience();
              } // this.isBmsTrials();


              if (this.isBmsTrials()) {
                var bmsPipeline = new BMSTrials({
                  container: $('#trialList')
                });
              } // console.log(this.isBmsAccordion() && this.isMobile())


              if (this.isBmsAccordion() && this.isMobile()) {
                homeAccordionEvent = true;
                var bmsAccordion = new BMSAccordion({
                  container: $('.trialFilter'),
                  openLink: $('.accordion-link'),
                  accordionComponent: $('.mobile-accordion'),
                  activeEl: $('#theraupeticArea')
                });
              } // window.onresize = function(event) {
              // 	if (BolderScience.isBmsAccordion() && BolderScience.isMobile()) {
              // 		homeAccordion();
              // 	}else{
              // 		$('.mobile-accordion').removeAttr('style');
              // 		$('.panel-title').removeClass('active');
              // 	}
              // }


              dashboardSavedClinicalTrials();
              dashboardAccountPreferences();

              if (this.isDashBoard()) {
                dashboardYourDashboard();
              }

              if (this.isAdvancedSearch()) {
                advanceSearch();
              } // if(this.isCookies()){
              // 	let headerHeight = $('header').height()-3;
              // 	// alert(headerHeight)
              // 	$('.submenu-padding').css('padding-top', headerHeight);
              // }


              if (this.isTablet()) {
                // $('.navbar-toggle').on('click', function(){
                // 	if($(this).hasClass('collapsed')){
                // 		$('body').css('position', 'fixed');
                // 	}else{
                // 		$('body').css('position', 'relative');
                // 	}
                // })
                if ($('.cookie-consent').is(':visible')) {
                  var navTop = $('.cookie-consent').height();
                  $('header.sub-header .navbar .navbar-collapse').height(navTop);
                  $('header.sub-header .navbar .navbar-collapse').css({
                    'top': navTop + 78
                  });
                }
              }
            }
          },

          /**
           * Cache elements we're referencing
           */
          cacheElements: function cacheElements() {
            this.dom = {
              window: $(window),
              document: $(document),
              body: $('body'),
              headerNav: $('.headerNav'),
              rangeSlider: $(".rangeSlider"),
              pillsLink: $('.filterPills .pillsLink'),
              filterPillsDropdown: $('.filterPillsDropdown'),
              mobileFilterPill: $('.filterByBx .filterMobPill'),
              mobileCancelFilter: $('.filterByBx .mobButton .mobileFilter'),
              backToTop: $('#backToTop'),
              pipelineTab: $(".pipelineTab"),
              scrollPosTop: 0,
              closeFilter: $('.close-filter')
            };
          },
          isHome: function isHome() {
            return this.dom.body.hasClass("home");
          },
          isSearchResults: function isSearchResults() {
            return this.dom.body.hasClass("search-results") || this.dom.body.hasClass("search-no-results");
          },
          isSaveTrialTemplate: function isSaveTrialTemplate() {
            return this.dom.body.hasClass("page-template-page-saved-clinical-trials");
          },
          isSingleTrial: function isSingleTrial() {
            return this.dom.body.hasClass("single-trial");
          },
          isDiseaseArea: function isDiseaseArea() {
            return this.dom.body.hasClass("single-disease-area");
          },
          isBmsScienceHome: function isBmsScienceHome() {
            return this.dom.body.hasClass("page-template-bms-science");
          },
          isTherapeuticArea: function isTherapeuticArea() {
            return this.dom.body.hasClass("single-therapeutic-area");
          },
          isSpecialty: function isSpecialty() {
            return this.dom.body.hasClass("tax-specialty");
          },
          isDashBoard: function isDashBoard() {
            return this.dom.body.hasClass("page-template-page-dashboard");
          },
          isCelgeneDashBoard: function isCelgeneDashBoard() {
            return this.dom.body.hasClass("page-template-celgene-dashboard");
          },
          isPatientSearch: function isPatientSearch() {
            return this.dom.body.hasClass("page-template-page-search-patient-type");
          },
          isAdvancedSearch: function isAdvancedSearch() {
            return this.dom.body.hasClass("advanced-search");
          },
          isOurScience: function isOurScience() {
            return this.dom.body.hasClass("ourScience-header");
          },
          isBmsScience: function isBmsScience() {
            return $('.sub-header').length;
          },
          isBmsTrials: function isBmsTrials() {
            // console.log($('#trialList').length)
            return $('#trialList').length;
          },
          isBmsAccordion: function isBmsAccordion() {
            return $('.bms-home-donut').length;
          },
          isMobile: function isMobile() {
            return $(window).width() < 768;
          },
          isTablet: function isTablet() {
            return $(window).width() < 769;
          },
          // isCookies: function(){
          // 	return $('.cookie-consent-panel').length;
          // },
          bindEvents: function bindEvents() {
            this.dom.rangeSlider.slider({});
            this.dom.rangeSlider.each(function () {
              var value = $(this).parents(".sliderItem").attr("data-value");
              $(this).slider('setValue', value, true);
            });
            var $this = this;
            this.dom.pillsLink.on('click', function (e) {
              e.stopPropagation();
              $this.filterPillClick($(this));
            });
            this.dom.filterPillsDropdown.on('click', function (e) {
              e.stopPropagation();
            });
            this.dom.document.on('click', function () {
              $this.documentClick();
            });
            this.dom.mobileFilterPill.on('click', function () {
              $this.mobFilterPillClick($(this));
            });
            this.dom.mobileCancelFilter.on('click', function () {
              $this.mobFilterCancel($(this));
            });
            this.dom.backToTop.on('click', function () {
              $this.backToTopClick();
            });
            this.dom.closeFilter.on('click', function () {
              $this.documentClick();
            });

            $.fn.isInViewport = function () {
              var elementTop = $(this).offset().top;
              var elementBottom = elementTop + $(this).outerHeight();
              var viewportTop = $(window).scrollTop();
              var viewportBottom = viewportTop + $(window).height();
              return elementBottom > viewportTop && elementTop < viewportBottom;
            };

            this.dom.window.scroll(function () {
              if ($(this).scrollTop() > 270) {
                $('#backToTop').show();
              } else {
                $('#backToTop').hide();
              }

              if ($("footer").isInViewport()) {
                $('#backToTop').addClass('footerVisible');
              } else {
                $('#backToTop').removeClass('footerVisible');
              }
            });
            this.dom.window.resize(function () {
              if (BolderScience.isBmsAccordion() && BolderScience.isMobile()) {
                if (!homeAccordionEvent) {
                  homeAccordionEvent = true;
                  var bmsAccordion = new BMSAccordion({
                    container: $('.trialFilter'),
                    openLink: $('.accordion-link'),
                    accordionComponent: $('.mobile-accordion'),
                    activeEl: $('#theraupeticArea')
                  });
                } else {
                  $('#theraupeticArea').slideDown();
                  $('.panel-title[data-accordion="theraupeticArea"]').addClass('active');
                }
              } else {
                $('.mobile-accordion').removeAttr('style');
                $('.panel-title').removeClass('active');
              }

              if ($(window).width() < 768) {
                return;
              }

              $('.filterByBx .filterMobPill').click(function () {
                $(this).parents('.filterByBx').find('.filterPills').slideDown();
              });
            });
          },
          filterPillClick: function filterPillClick(ele) {
            if (ele.hasClass('active')) {
              this.dom.pillsLink.removeClass('active');

              if ($(window).width() >= 768) {
                this.dom.pillsLink.parents('.filterPills').find('.filterPillsDropdown').slideUp();
              } else {
                this.dom.pillsLink.parents('.filterPills').find('.filterPillsDropdown').hide();
                $("html, body").css("overflow", "auto"); // $("body").css({ "position": "relative", "top": "" });
                // $('html, body').animate({ scrollTop: this.scrollPosTop }, 0);
              }
            } else {
              this.dom.pillsLink.removeClass('active');
              ele.addClass('active');

              if ($(window).width() >= 768) {
                this.dom.pillsLink.parents('.filterPills').find('.filterPillsDropdown').slideUp();
                ele.parents('li').find('.filterPillsDropdown').slideDown();
              } else {
                this.dom.pillsLink.parents('.filterPills').find('.filterPillsDropdown').hide();
                ele.parents('li').find('.filterPillsDropdown').show();
                $("html, body").css("overflow", "hidden"); // $("body").css({ "position": "fixed", "top": -(this.scrollPosTop) });
              }
            }

            return false;
          },
          documentClick: function documentClick() {
            var $this = this;

            if ($(window).width() >= 768) {
              console.log("go back up");
              $(".filterPillsDropdown").slideUp(function () {
                // $(".filterPillsDropdown").slideUp('slow');
                $this.dom.pillsLink.removeClass('active');
                $('.deseases').slideDown();
                $('.thearepeticAreas').slideUp();
                $('.deseases').find('input[type="radio"]').prop('checked', false);
              });
            }
          },
          mobFilterPillClick: function mobFilterPillClick(ele) {
            this.scrollPosTop = $(document).scrollTop();
            $("html, body").css("overflow", "hidden");
            $("body").css({
              "position": "fixed",
              "top": -this.scrollPosTop
            });
            ele.parents('.filterByBx').find('.filterPills').find('.filterPillsDropdown').show();
            $('.pillsLink').removeClass('active');
          },
          mobFilterCancel: function mobFilterCancel(ele) {
            $("html, body").css("overflow", "scroll");
            $("body").css({
              "position": "relative",
              "top": ""
            });
            $('html, body').animate({
              scrollTop: this.scrollPosTop
            }, 0);
            ele.parents('.filterByBx').find('.filterPills').find('.filterPillsDropdown').hide();
            $('.pillsLink').removeClass('active');
          },
          backToTopClick: function backToTopClick() {
            $('html, body').animate({
              scrollTop: '0px'
            }, 1000);
          }
        }; // $(window).on('load', function(){
        // 	setTimeout(function(){
        // 		BolderScience.init();
        // 		if($(".signUpSection").css("display") == "block"){
        // 			$("header, .content").addClass("blurContent");
        // 		}
        // 	}, 10);
        // });

        $(document).ready(function () {
          console.log("document ready");
          BolderScience.init();
          setTimeout(function () {
            if ($(".signUpSection").css("display") == "block") {
              $("header, .content").addClass("blurContent");
            }
          }, 10);
        });
      })(jQuery);
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "./advance-search": 1,
    "./api": 2,
    "./bms-according": 3,
    "./bms-pages/bms-alliance.js": 4,
    "./bms-pages/bms-dashboard.js": 5,
    "./bms-pages/bms-landing.js": 6,
    "./bms-pages/bms-pipeline.js": 7,
    "./bms-trials": 10,
    "./components/video-modal": 14,
    "./custom.js": 15,
    "./dashboard-account-preferences": 16,
    "./dashboard-saved-clinical-trials.js": 17,
    "./dashboard-your-dashboard": 18,
    "./home": 28,
    "./ourscience/our-science": 29,
    "./patient-type-search.js": 30,
    "./save-trial": 31,
    "./search": 35,
    "./user-registration-2": 37,
    "babel-polyfill": 52,
    "chart.js": 70
  }],
  27: [function (require, module, exports) {
    var API = require("./../api");

    var UTILITY = require("./../utility");

    var Location = function Location(obj) {
      if (UTILITY.isDiseaseArea() || UTILITY.isSpecialty() || UTILITY.conferenceView()) {
        return false;
      }

      var api = new API(),
          container = obj.element,
          country = container.find("#location-country"),
          state = container.find("#location-state"),
          city = container.find("#location-city"),
          radius = container.find("#location-radius"),
          geo = container.find("#location-geo"),
          searchCallback = obj.searchCallback,
          hasDisplay = obj.hasDisplay ? obj.hasDisplay : true,
          url = new URL(window.location.href),
          displayView = obj.displayView || "";
      var initialising = false;
      var location = {
        "filter_location": url.searchParams.get("filter_location") || country.val(),
        "filter_state": url.searchParams.get("filter_state") || state.val(),
        "bms_city": url.searchParams.get("bms_city") || city.val(),
        "dis_radius": url.searchParams.get("dis_radius") || "",
        "dis_location": url.searchParams.get("dis_location") || geo.val()
      };
      container.click(function (e) {
        if (!isHeaderView()) {
          e.stopPropagation();
          return false;
        }
      });
      container.find("select").on("change", function (event) {
        event.stopPropagation();
        resetChildren($(this));
        updateParam($(this));
        var value = $(this).val();

        if (value == "current-locations") {
          if (isSearchView()) {
            UTILITY.updateQueryString(window.location.href, "bms_current_location", "1");
          }

          fetchCurrentLocation(event);
          return false;
        }

        showChildren($(this));
        updateDisplay();

        if (searchCallback) {
          searchCallback(isHomeView() ? event : false);
        }
      });

      this.init = function () {
        if (isSearchView()) {
          //@TODO: move this to search.js based on the view.
          if (location["filter_location"] || location["dis_location"]) {
            $('.resultContainer .resultItems').first().addClass('open');
            $('.resultContainer .resultItems.open .resultItemsExpand').css('display', 'block');
            $('.accordianLi .showHideArrow').first().addClass('active');
          }
        }

        initialising = true;

        if (!isSearchView()) {
          fetchCurrentLocation({});
        } else {
          if (url.searchParams.get("bms_current_location") == "1") {
            fetchCurrentLocation({
              noCallback: true
            });
            return;
          }

          updateCityList(location).then(function (res) {
            // enableChild(city);
            for (var name in location) {
              if (location[name]) {
                container.find("[name=\"".concat(name, "\"]")).val(location[name]);
                showChildren(container.find("[name=\"".concat(name, "\"]")));
              }
            }

            updateDisplay();
            $.uniform.update();
            initialising = false;
          });
        }
      };

      function updateDisplay() {
        if (isPatientSearchView() || isAdvancedSearchView()) {
          return;
        }

        var display = "";
        var displayCount = 0;

        if (hasDisplay) {
          if (isSearchView()) {
            for (var name in location) {
              if (name == "dis_location" || !location[name]) {
                continue;
              }

              displayCount++;
              display += location[name] + ";";
            }

            display = display.substring(0, display.length - 1);
            container.parents(".widget").find(".filterLink").toggleClass("active filterSelected", display != "");

            if (displayCount != 0) {
              container.parents(".widget").find(".filterLink .filterCount").html("(" + displayCount + ")");
            } else {
              container.parents(".widget").find(".filterLink .filterCount").html("");
            }
          }

          if (isHomeView()) {
            display = "location";

            for (var _name in location) {
              if (_name == "dis_location" || _name == "dis_radius" || !location[_name]) {
                continue;
              }

              display = location[_name];
            }
          }

          if (display && display.indexOf("-") > -1) {
            display = display.replace(/-/g, " ");
          }

          $(displayView).html(display);
        }
      }

      function showChildren(ele) {
        var name = ele.attr("name");
        var value = ele.val();
        var children = container.find("[data-parent*='" + name + "']");

        if (!children.length || value == "") {
          return;
        } //add business rule as per our logic


        if (ele.is(country)) {
          if (value == "united-states") {
            children = children.not(city);
          } else {
            children = children.not(state);
          }
        }

        if (children.attr("data-api-source") == "1" && !initialising) {
          updateCityList(location).then(function (res) {
            if (location["bms_city"]) {
              city.val(location["bms_city"]);
              $.uniform.update(city);
            }

            enableChild(children);
          });
        } else {
          enableChild(children);
        }

        if (ele.is(city)) {
          var geoData = city.find(":selected").attr("geo_data");
          geo.val(geoData);

          if (isSearchView()) {
            location["dis_location"] = geoData;
            UTILITY.updateQueryString(window.location.href, "dis_location", geoData);
          }
        }
      }

      function updateParam(ele) {
        var name = ele.attr("name");
        var value = ele.val();

        if (isSearchView()) {
          if (value !== 'current-locations') {
            UTILITY.updateQueryString(window.location.href, name, value);
          }
        }

        location[name] = value;
      }

      function enableChild(ele) {
        ele.parents(".optionalField").show();
        ele.each(function () {
          if ($(this).hasClass("toggle-disabled")) {
            ele.removeAttr("disabled"); // Show sort by distance filter

            $('#customOrder').children('option[value="geo_distance"]').show();
            $('#customOrder').children('option[value="geo_distance"]').removeAttr("disabled");
          }

          if (isSearchView()) {
            var name = $(this).attr("name");
            var value = location[name] || $(this).val();

            if (value) {
              UTILITY.updateQueryString(window.location.href, name, value);
              location[name] = value;
            }
          }
        });
      }

      function disableChild(ele) {
        var name = ele.attr("name");
        var value = ele.is("select") ? ele.find("option:first-child").val() : "";

        if (ele.hasClass("toggle-disabled")) {
          ele.attr("disabled", "disabled"); // Hide sort by distance filter and apply sortby relevance

          $('#customOrder').children('option[value="geo_distance"]').hide();
          $('#customOrder').children('option[value="geo_distance"]').attr("disabled", "disabled");
          $('#customOrder').val('relevance');

          if (isSearchView()) {
            UTILITY.updateQueryString(window.location.href, 'orderby', 'relevance');
          }
        }

        ele.val(value);
        location[name] = "";
        ele.parents(".optionalField").hide();

        if (isSearchView()) {
          UTILITY.updateQueryString(window.location.href, name, "");
        }
      }
      /* Update City dropdown
      ** @param1 - country as String for Name of Country
      ** @param2 - state as String for Name of State
      ** @return - Nothing OR Void
      */


      function updateCityList(location) {
        if (!location["filter_location"]) {
          return new Promise(function (resolve, reject) {
            resolve(false);
          });
        }

        var requestData = {
          'location_type': 'city',
          'country': location["filter_location"].toLowerCase().trim().replace(/-/g, " ")
        };

        if (location["filter_state"] != '') {
          requestData['state'] = location["filter_state"].toLowerCase().trim().replace(/-/g, " ");
        }

        return api.get('/wp-json/boldsci/v1/search/location/', requestData).then(function (data, errorHandler) {
          city.find("option").remove();
          var options = '<option value="">City</option>';

          for (var _i16 = 0; _i16 < data.location_results.length; _i16++) {
            var _geo = "".concat(data.location_results[_i16].longitude, ",").concat(data.location_results[_i16].latitude),
                value = data.location_results[_i16].city.trim().replace(/ /g, "-"),
                _city = data.location_results[_i16].city;

            options += "<option geo_data=\"".concat(_geo, "\" value=\"").concat(value, "\">").concat(_city, "</option>");
          }

          city.html(options);
          return true;
        });
      }

      function fetchCurrentLocation(event) {
        var geo_location;

        if (!initialising) {
          country.val("current-locations");
        }

        $.uniform.update(country);
        api.get_geo(initialising).then(function (res) {
          geo_location = res;
          console.log('geo_location', geo_location);
          initialising = false;

          if (!geo_location) {
            return;
          }

          enableChild(radius);

          if (country.length) {
            country.val("current-locations");
          }

          $.uniform.update(country);
          location["filter_location"] = "current location";
          geo.val("".concat(geo_location.lon, ",").concat(geo_location.lat));

          if (isSearchView()) {
            location["filter_location"] = "current location";
            location["bms_city"] = "";
            UTILITY.updateQueryString(window.location.href, "filter_location", "");
            UTILITY.updateQueryString(window.location.href, "bms_city", "");
            UTILITY.updateQueryString(window.location.href, "dis_location", geo.val()); //UTILITY.updateQueryString(window.location.href, "dis_radius", radius.val());

            radius.val(UTILITY.getQueryString(window.location.href, "dis_radius"));
            $.uniform.update(radius);
          }

          updateDisplay();

          if (searchCallback && !event.noCallback) {
            searchCallback(isHomeView() ? event : false);
          } // return api.get('/wp-json/boldsci/v1/search/location/', {
          //     'location_type': 'address',
          //     'lat': geo_location.lat ,
          //     'lon': geo_location.lon,
          //     '_wpnonce': phpData.rest_nonce,
          // });

        })["catch"](function (error) {
          console.log(error);
          initialising = false;
        }); // .then( res => {
        //     let loc = res.location_results.pop();
        //     location["filter_location"] = "current location";
        //     geo.val(`${geo_location.lon},${geo_location.lat}`);
        //     if(isSearchView()) {
        //         location["filter_location"] = "current location";
        //         location["bms_city"] = "";
        //         UTILITY.updateQueryString(window.location.href, "filter_location", "");
        //         UTILITY.updateQueryString(window.location.href, "bms_city", "");
        //         UTILITY.updateQueryString(window.location.href, "dis_location", geo.val());
        //         UTILITY.updateQueryString(window.location.href, "dis_radius", radius.val());
        //     }
        //     updateDisplay();
        //     if(searchCallback && !event.noCallback) {
        //         searchCallback(isHomeView() ? event : false);
        //     }
        // });
      }

      function resetChildren(currentEle) {
        if (isSearchView() && country.val() !== "current-locations") {
          UTILITY.updateQueryString(window.location.href, "bms_current_location", "");
        }

        var parents = [currentEle.attr("name")];
        var fieldsHidden = {};

        while (parents.length) {
          var name = parents.pop();
          var children = container.find("[data-parent*='" + name + "']");

          if (children.length) {
            children.each(function () {
              var id = $(this).attr("id");
              var defaultValue = $(this).find("option").attr("value");

              if (fieldsHidden[id]) {
                return;
              }

              parents.push($(this).attr("name"));
              fieldsHidden[id] = true;
              disableChild($(this));
            });
          }
        }

        $.uniform.update();
      }

      function isSearchView() {
        return obj.callee == "search";
      }

      function isHomeView() {
        return obj.callee == "home";
      }

      function isAdvancedSearchView() {
        return obj.callee == "advanced-search";
      }

      function isPatientSearchView() {
        return obj.callee == "patient-search";
      }

      function isHeaderView() {
        return obj.callee == "header";
      }

      this.init();
    };

    module.exports = Location;
  }, {
    "./../api": 2,
    "./../utility": 46
  }],
  28: [function (require, module, exports) {
    var BSChart = require("./bs-chart");

    var API = require("./api");

    var LocationFilter = require("./filters/location");

    require('easyAutoComplete');

    function home() {
      var api = new API();
      var searchFormHome = document.getElementById('js-search-home');
      var searchTerm = document.getElementsByName('s')[0];
      var location = document.getElementsByName('filter_location')[0];
      var locationState = document.getElementsByName('filter_state')[0];
      var bmsCurrentLocation = document.getElementsByName('bms_current_location')[0];
      var locationDisRadius = document.getElementsByName('dis_radius')[0];
      var locationGeo = document.getElementsByName('dis_location')[0];
      var container = $(".homeChartSection");
      var searchButton = document.getElementById('js-sendSearch');
      var countNumber = document.getElementById('js-countNumber');
      var chartText = document.getElementById('js-chartText');
      var taFilter = $("[name='tarea[]']");
      window.addEventListener("pageshow", function (event) {
        var historyTraversal = event.persisted || typeof window.performance != "undefined" && window.performance.navigation.type === 2;

        if (historyTraversal) {
          // Handle page restore.
          window.location.reload();
        }
      });

      if (searchButton) {
        searchButton.addEventListener('click', function () {
          $(searchFormHome).submit();
        }, false);
      }

      if (countNumber) {
        countNumber.addEventListener('click', function () {
          // if($(this).text()=='0'){
          //     return
          // }
          if (!$(this).parent().hasClass('empty-info')) {
            $(searchFormHome).submit();
          }
        }, false);
      }

      if (chartText) {
        chartText.addEventListener('click', function () {
          if (!$(this).parent().hasClass('empty-info')) {
            $(searchFormHome).submit();
          }
        }, false);
      }

      $(searchFormHome).on('submit', function () {
        if (location.value == "current-locations") {
          location.value = "";

          if (locationGeo.value) {
            $(bmsCurrentLocation).removeAttr("disabled");
          }
        }
      });
      var sendSearchButtonD = document.getElementById('js-sendSearch-bottom-desktop');

      if (sendSearchButtonD) {
        sendSearchButtonD.addEventListener('click', function () {
          // if($(this).hasClass('empty-trial')){
          //     return
          // }
          var celgene_trial = document.getElementById('filter_celgene_trial'); // alert(celgene_trial.value)

          if (celgene_trial) {
            celgene_trial.value = "celgene-trial,celgene-compound";
          }

          $(searchFormHome).submit();
        }, false);
      }

      var sendSearchButtonM = document.getElementById('js-sendSearch-bottom-mobile');

      if (sendSearchButtonM) {
        sendSearchButtonM.addEventListener('click', function () {
          var celgene_trial = document.getElementById('filter_celgene_trial'); // alert(celgene_trial.value)

          if (celgene_trial) {
            celgene_trial.value = "celgene-trial,celgene-compound";
          }

          $(searchFormHome).submit();
        }, false);
      }

      var homeChart = $(".homeChartSection");
      homeChart.find(".tourPopup .closeTourPopup").click(function (e) {
        $(this).parents('.tourPopup').hide();
      }); // Add first set of data on page load.

      window.addEventListener('DOMContentLoaded', handleOnLoad, false);

      function updateFormFilters(data) {
        $('#filter_phase').val(data.phases);
        $('#filter_status').val(data.statuses);
      }

      var views = {
        chart: new BSChart({
          getViews: function getViews() {
            return views;
          }
        }),
        form: $("#js-search-home"),
        location: new LocationFilter({
          element: $(".filterSubOption.term-location"),
          callee: "home",
          displayView: ".locationDropItems .dropDownLoc",
          searchCallback: function searchCallback(data) {
            handleSearch(data);
          }
        }),
        bindEvents: function bindEvents() {
          this.form.on("updateFilters", function (e, data) {
            updateFormFilters(data);
          });
        }
      };

      searchTerm.onchange = function (e) {
        if (!$("body").hasClass("tax-specialty") && !$('body').hasClass('home') && !$('body').hasClass('single-therapeutic-area')) {
          handleSearch(e); //Home page handle for search and donut
        }
      };

      taFilter.change(function (e) {
        handleSearch(e);
      }); // Tooltip Code

      function getCookieHome(name) {
        var dc = document.cookie;
        var prefix = name + "=";
        var begin = dc.indexOf("; " + prefix);

        if (begin == -1) {
          begin = dc.indexOf(prefix);
          if (begin != 0) return null;
        } else {
          begin += 2;
          var end = document.cookie.indexOf(";", begin);

          if (end == -1) {
            end = dc.length;
          }
        } // because unescape has been deprecated, replaced with decodeURI
        //return unescape(dc.substring(begin + prefix.length, end));


        return decodeURI(dc.substring(begin + prefix.length, end));
      }

      var chartInfo = $("".concat($('body').attr('class').split('')[0], " .chartInfo")).clone();
      $('.pieChartSection').on('click', '.resetFiltersLink', function (e) {
        var checkboxes = $('.mobileLegends').find('.js-label-filter:checked');
        var addedFilters = $('#canvas-holder .addedFilter');

        for (var _i17 = 0; _i17 < addedFilters.length; _i17++) {
          //addedFilters[i].click();
          checkboxes.prop('checked', false);
          addedFilters.removeClass('addedFilter');
          addedFilters.addClass('ga-select-filter');
        }

        handleSearch(e);
        $('.chartInfo').html(chartInfo.html());
        $(this).hide();
        $('[data-accordion="theraupeticArea"]').text('THERAPEUTIC AREA');
      });

      eraseCookieHome = function eraseCookieHome(name) {
        document.cookie = name + '=; Max-Age=-99999999;';
      };

      container.find(".tourPopup.smallSize .closeTourPopup").click(function (e) {
        $(this).parents('.tourPopup.smallSize').hide();
        eraseCookieHome("isHomePopupViewed_".concat(phpData.userId));
        document.cookie = "isHomePopupViewed_".concat(phpData.userId, "=true");
      });
      var popupHome = getCookieHome("isHomePopupViewed_".concat(phpData.userId));

      if (popupHome == "true") {
        $(".tourPopup.smallSize").hide();
      } else {
        if (popupHome == 'null') {
          document.cookie = "isHomePopupViewed_".concat(phpData.userId, "=false");
        }

        $(".tourPopup.smallSize").show();
      } // End Tooltip Code

      /**
       * Don't submit the form from search icon. Update chart instead.
       */


      function handleSearch(e) {
        if (e.preventDefault) {
          e.preventDefault();
        } // console.log(da);


        var request = {
          's': searchTerm.value,
          'dis_location': locationGeo ? locationGeo.value : "",
          'dis_radius': locationDisRadius ? locationDisRadius.value : "",
          'state': locationState ? locationState.value : '',
          'location': location && location.value != "current-locations" ? location.value : ""
        };

        if (taFilter.length) {
          var da = [];
          var searchDa = [];
          taFilter.filter(":checked").each(function () {
            da.push("bms-pipeline-".concat($(this).val()));
            searchDa.push("." + $(this).val());
          });
          $('#filter_specialty').val(searchDa);
          request['da'] = da;
        }

        views.chart.setUpdateLegends(true);
        views.chart.update(request); // For some reason we need to blur out of current focus element.
        // This way we don't have to click twice checkboxes.
        // currentFocus.blur();

        return false;
      }
      /**
       * Handle AJAX response to Elastic Search on page load.
       */


      function handleOnLoad(e) {
        if ('' !== phpData.payload) {
          // set initial checkboxes
          // Get status filters.
          // console.log("Donut data onLoad", phpData.payload);
          views.chart.init(phpData.payload);
          return;
        }

        api.get(phpData.searchApiUrl, {}).then(function (data) {
          views.chart.init(data);
        }, views.chart.errorHandler);
      }

      function debounce(func, wait, immediate) {
        var timeout;
        return function (e) {
          var context = this,
              args = arguments;

          var later = function later() {
            timeout = null;
            if (!immediate) func.apply(context, args);
          };

          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
        };
      }

      ;
      views.bindEvents();
    }

    module.exports = home;
  }, {
    "./api": 2,
    "./bs-chart": 13,
    "./filters/location": 27,
    "easyAutoComplete": "P2RbX6"
  }],
  29: [function (require, module, exports) {
    var OurScience = function OurScience() {
      var $ = jQuery;
      $('.ourScience-header.show-search').on('click', function () {
        // alert(1);
        // if($(window).width() >= 992){
        // 	$('.search-panel').toggleClass('hidden');
        // 	$('.bmsSearchBar .bmsSearchInput').focus();
        // 	$(this).hide();
        // }else{
        // 	$('.mobile-search-panel').addClass('open');
        // }
        if ($(window).width() < 992) {
          $('.mobile-search-panel').addClass('open');
          $('body').css('cssText', 'overflow-y: hidden;');
        }
      }); // $(document).mouseup(function(e) {
      // 	var container = $('.search-panel');
      // 	// if the target of the click isn't the container nor a descendant of the container
      // 	if (!container.is(e.target) && container.has(e.target).length === 0) 
      // 	{
      // 		// container.hide();
      // 		container.addClass('hidden');
      // 		$('header.sub-header .show-search').show();
      // 	}
      // });
      // $('.mobile-search-panel .search-header .cancel-box .cancel-link').on('click', function(){

      $(document).on('click', '.mobile-search-panel .search-header .cancel-box .cancel-link', function () {
        $('.mobile-search-panel').removeClass('open');
        $('body').css('cssText', 'overflow-y: auto;');
      });
      $('.aria').on('click', function () {
        $('.therapeutic-areas-details').addClass('active');
        $('.aria').removeClass('active');
        $(this).toggleClass('active');
        $('.celgen-therapeutic-arias').addClass('opened');
      });
      var mobileSearch = $('.mobileOnly').clone();
      var DesktopSearch = $('.desktopOnly').clone();

      if ($(window).width() >= 992) {
        $('.mobileOnly').remove();
        $('.desktopOnly').addClass('active');
      } else {
        $('.desktopOnly').remove();
        $('.mobileOnly').addClass('active');
      }

      $(window).resize(function (event) {
        if ($(window).width() >= 992) {
          $('.mobileOnly').remove();

          if ($('.desktopOnly').length <= 0) {
            $('header.sub-header .navbar .collapse.navbar-collapse').append(DesktopSearch);
            $('.desktopOnly').addClass('active');
          }
        } else {
          $('.desktopOnly').remove();

          if ($('.mobileOnly').length <= 0) {
            $('.mobile-search-panel').append(mobileSearch);
            $('.mobileOnly').addClass('active');
          }
        }
      });
    };

    module.exports = OurScience;
  }, {}],
  30: [function (require, module, exports) {
    var User = require('./user');

    var LocationFilter = require("./filters/location");

    function PatentTypeSearch() {
      var $ = jQuery;
      var container;

      var init = function init() {
        container = $(".searchPatientType");
        var views = {
          location: new LocationFilter({
            element: container.find(".formItem.locationItem"),
            callee: "patient-search"
          })
        }; //checks user history

        container.find('[type=checkbox]:checked').parent().addClass('active');
        var filterValue = ''; // validation

        container.find("form").validate({
          onfocusout: false,
          onkeyup: false,
          onclick: false,
          submitHandler: function submitHandler(form) {
            // form.submit();
            var formJquery = $(form); // alert($('form').find('[name=meta_conditions]').val());

            if (formJquery.find('[type=checkbox]').is(':checked') || $('form').find('[name=meta_conditions]').val()) {
              formJquery.find('.stepsContainer input').each(function (idx, el) {
                //console.log(el.type);
                if (el.type === 'checkbox' && el.checked) {
                  filterValue = filterValue + el.value + ',';
                }

                if (el.type === 'hidden' && filterValue) {
                  el.value = filterValue.substring(0, filterValue.length - 1);
                  filterValue = '';
                }

                if (!el.value) {
                  el.removeAttribute('name');
                }
              });
              formJquery.find('.stepsContainer select').each(function (idx, el) {
                //console.log(el.className);
                if (!el.value) {
                  el.removeAttribute('name');
                }
              });

              var _location = container.find("#location-country").get(0);

              var locationGeo = document.getElementsByName('dis_location')[0];
              var bmsCurrentLocation = container.find('.formItem #bms_current_location').get(0);

              if (_location.value == "current-locations") {
                _location.value = "";

                if (locationGeo.value) {
                  $(bmsCurrentLocation).removeAttr("disabled");
                }
              }

              form.submit();
            }
          }
        });
      };

      init();
    }

    module.exports = PatentTypeSearch;
  }, {
    "./filters/location": 27,
    "./user": 45
  }],
  31: [function (require, module, exports) {
    var API = require('./api');

    var Collection = require('./save-trial/collection');

    var Notification = require('./save-trial/notification');

    var Unsave = require('./save-trial/unsave');

    var SaveTrial = function SaveTrial(obj) {
      var $ = jQuery;
      var api = new API();
      var collection = {
        name: "Unsorted List",
        id: ""
      }; // check whether you need an ID or name will do?

      var isLoading = false;
      var trialId;
      var container = $(".saveCollectionTrials"); // let resultContainer = $(".resultContainer");

      var resultContainer = obj.element;
      var containerDetail = $(".savedClinicalDetailCont");
      var modal;
      var showNotification = false;
      var reloadPage = false;
      var newTarget = '';
      $(document).ajaxStop(function () {
        isLoading = false;

        if (newTarget && newTarget !== '#' && !newTarget.includes('s=') && !newTarget.includes('trial') && !newTarget.includes('dashboard')) {
          location = newTarget;
        }

        if (reloadPage) {
          location.reload();
        }
      });
      $(document).ajaxStart(function () {
        isLoading = true;
      });
      /* window.addEventListener("beforeunload", (e) => {
           // Cancel the event
         if(e.target.href.include('bolderscience')) {
          }
       });*/

      $('a').click(function (e) {
        if (e.target.className.includes('saveTrialBut')) {
          isLoading = true;
        }

        if (isLoading) {
          e.preventDefault();

          if (e.target.href !== '#') {
            newTarget = e.target.href;
          }
        }
      });
      resultContainer.on("click", ".saveTrialBut", function (e) {
        e.preventDefault();
        e.target.innerText = 'Unsave';
        trialId = $(this).attr("data-trial-id");
        modal = $(".saveCollectionTrials").filter("[data-trial-id=\"".concat(trialId, "\"]")).find(".unSavedPopover, .savedPopover");
        views.refresh();
        views.toggle("collection");
        modal.slideDown();
      });
      resultContainer.on("click", '.unSaveTrialBut', function (e) {
        e.preventDefault();
        trialId = $(this).attr("data-trial-id");
        views.refresh();
        views.unsave.show(trialId);
      });
      resultContainer.on("click", '.closePopover', function (e) {
        e.preventDefault();
        closePopOver(e);
      }); //update Query params

      var updateQueryString = function updateQueryString(uri, key, value, action) {
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)", "i");
        var newUri = uri;

        if (uri.match(re)) {
          newUri = uri.replace(re, '$1' + key + "=" + value + '$2');
        } else {
          if (uri.indexOf('#') !== -1) {
            uri = uri.replace(/#.*/, '');
          }

          var separator = uri.indexOf('?') !== -1 ? "&" : "?";
          newUri = uri + separator + key + "=" + value;
        }

        if (action === 'val') {
          return newUri;
        }

        if (action === 'history') {
          history.pushState({}, null, newUri);
        }
      };

      resultContainer.on('click', '.trialNotification', function (e) {
        e.preventDefault();
        var setReceiveNotification = $(this).hasClass("yesBut") ? 1 : 0;
        reloadPage = true;
        trialId = $(".saveCollectionTrials").find(".saveTrialBut").attr("data-trial-id");
        api.post("user/".concat(phpData.userId, "/email-notification"), {
          trial_id: trialId,
          email_setting: setReceiveNotification
        }).then(function (response) {
          //console.log(response);
          killModal(setReceiveNotification);
        });
      });
      resultContainer.on("change", '[name="save-trial-to-collection"]', function (e) {
        collection = {
          name: $(this).parents(".radio").next().html(),
          id: $(this).val()
        };
      });
      var views = {
        collection: new Collection({
          element: container.find(".slides:nth-child(1)")
        }),
        notification: new Notification({
          element: container.find(".slides:nth-child(2)")
        }),
        unsave: new Unsave({
          element: container.find(".unSavedPopover")
        }),
        hide: function hide() {
          this.collection.hide();
          this.notification.hide();
        },
        refresh: function refresh() {
          this.collection.refresh(resultContainer.find(".slides:nth-child(1)"));
          this.notification.refresh(resultContainer.find(".slides:nth-child(2)")); // this.bindEvents();
        },
        toggle: function toggle(view) {
          this.hide();
          this[view].show();
        }
      };
      resultContainer.on('click', '.addButton', function (e) {
        e.preventDefault();
        var tempCollection = views.collection.getCollection(e);

        if (isEmpty(tempCollection)) {
          // alert("Please enter a Collection name");
          return false;
        }

        collection.name = tempCollection;
        api.post("user/".concat(phpData.userId, "/save-collection"), {
          name: tempCollection
        }).then(function (response) {
          collection.id = response.collection.collection_id;
          views.collection.addItem(collection);
        });
      });
      containerDetail.on('click', '.deleteIcon', function (e) {
        e.preventDefault();
        reloadPage = true;
        trialId = $(this).parents("tr.showTr").attr("data-id");
        api["delete"]("user/".concat(phpData.userId, "/unsave-trial"), {
          trial_id: trialId
        }).then(function (response) {});
      });
      containerDetail.on('click', '.btn-toggle', function (e) {
        // e.preventDefault();
        var setReceiveNotification = $(this).find('button.active').find('span').text() === 'OFF' ? 0 : 1; //console.log("Needs collection id to gsave notification", setReceiveNotification);

        trialId = $(this).parents("tr.showTr").attr("data-id");
        reloadPage = true;
        api.post("user/".concat(phpData.userId, "/email-notification"), {
          trial_id: trialId,
          email_setting: setReceiveNotification
        }).then(function (response) {//console.log(response);
        });
      });
      $(document).click(function (e) {
        if (!$('body').hasClass('page-template-page-saved-clinical-trials')) {
          if (!(e.target.className.includes('blueStarLink') || e.target.className.includes('addIcon') || $(e.target).parents('.popoverContainer').length) && $('.popoverContainer').is(':visible')) {
            var popoverContainer = $(".popoverContainer");
            popoverContainer.slideUp();
            showNotification = false;
            var savedPopover = $('.savedPopover');

            if (savedPopover.is(':visible')) {
              closePopOver(e);
            }
          }
        }
      });

      function isEmpty(str) {
        return !str.replace(/\s+/, '').length;
      }

      function killModal(optIn) {
        if (optIn) {//trigger rest endpoint to save here
        }

        modal.slideUp();
        views.hide();
      }

      var closePopOver = function closePopOver(e) {
        showNotification = resultContainer.find(e.target).parents('.popoverBut').find('.saveTrialBut').attr('data-show-notification') === '1';

        if (showNotification) {
          reloadPage = true;
        } else if (showNotification == 0) {
          reloadPage = true;
        }

        var collectionArr = collection.id ? [collection.id] : [];
        api.post("user/".concat(phpData.userId, "/save-trial"), {
          trial: trialId,
          collectionID: collectionArr
        }).then(function (response) {});
      }; // $('.popoverBut .closePopover').click(function(){
      // 	$(this).parents('.popoverBut').find('.popoverContainer').hide();
      // });

    };

    module.exports = SaveTrial;
  }, {
    "./api": 2,
    "./save-trial/collection": 32,
    "./save-trial/notification": 33,
    "./save-trial/unsave": 34
  }],
  32: [function (require, module, exports) {
    var Collection = function Collection(obj) {
      var container = obj.element;
      var self = this; //console.log('container', obj.element);
      //console.log(container.get(0));

      function bindEvents() {
        container.off();
        container.find(".createNewBut").click(function (e) {
          e.preventDefault();
          self.editBox(true); //@true: show input field.
        });
        container.find(".deleteButton").click(function (e) {
          e.preventDefault();
          self.editBox(false); //@true: show input field.
        });
      }

      this.show = function () {
        container.show();
      };

      this.hide = function () {
        container.hide();
      };

      this.refresh = function (element) {
        container = element;
        $(".customCheck").uniform();
        bindEvents();
      };

      this.off = function () {
        return container.off();
      };

      this.editBox = function (showInput) {
        container.find('.collectionTitle').toggleClass("showInput", showInput);
      };

      this.find = function (selector) {
        return container.find(selector);
      };

      this.on = function (event, selector, callback) {
        return container.on(event, selector, callback);
      };

      this.getCollection = function (e) {
        return container.find(e.target.parentElement).find('.textbox').val();
      };

      this.addItem = function (collection) {
        var item = "\n            <li>\n                <label class=\"checkBoxWhite\">\n                    <input type=\"radio\" checked name=\"save-trial-to-collection\" class=\"customCheck\" value=\"".concat(collection.id, "\">\n                <em>").concat(collection.name, "</em>\n                </label>\n            </li>");
        container.find(".radioElement").append(item);
        $(".customCheck").uniform();
        self.editBox(false);
        container.find(".collectionTitle .textbox").val("");
      };

      bindEvents();
    };

    module.exports = Collection;
  }, {}],
  33: [function (require, module, exports) {
    var Notification = function Notification(obj) {
      var container = obj.element;

      this.show = function () {
        container.show();
      };

      this.hide = function () {
        container.hide();
      };

      this.find = function (selector) {
        return container.find(selector);
      };

      this.refresh = function (element) {
        container = element;
      };

      this.setCollection = function (collection) {
        container.find(".newCollection").html(collection);
      };
    };

    module.exports = Notification;
  }, {}],
  34: [function (require, module, exports) {
    var API = require('../api');

    var Unsave = function Unsave(obj) {
      var container = obj.element;
      var self = this;
      var api = new API();
      var trialId;

      this.show = function (tId) {
        trialId = tId;
        var unSaveModal = $(".saveCollectionTrials").find(".unSavedPopover").parents("[data-trial-id=\"".concat(trialId, "\"]")).find(".unSavedPopover, .savedPopover");
        unSaveModal.slideDown();
        unSaveModal.off();
        attachEvent(unSaveModal);
      };

      this.hide = function () {
        $(".saveCollectionTrials").find(".unSavedPopover").slideUp();
      };

      this.find = function (selector) {
        return $(".saveCollectionTrials").find(".unSavedPopover").find(selector);
      };

      var attachEvent = function attachEvent(target) {
        $(target).find('.cancelBut').one('click', function (e) {
          e.preventDefault();
          self.hide();
        });
        $(target).find('.okBut').one('click', function (e) {
          e.preventDefault();
          self.hide();
          api["delete"]("user/".concat(phpData.userId, "/unsave-trial"), {
            trial_id: trialId
          }).then(function (response) {
            location.reload();
          });
        });
      };
    };

    module.exports = Unsave;
  }, {
    "../api": 2
  }],
  35: [function (require, module, exports) {
    var API = require('./api');

    var api = new API();

    var LocationFilter = require("./filters/location");

    var _require3 = require('@lvchengbin/url'),
        URL = _require3.URL,
        URLSearchParams = _require3.URLSearchParams;

    var UTILITY = require("./utility");

    function search() {
      var oldVal = UTILITY.getQueryString(window.location.href, 'orderby'),
          select = $('#customOrder');
      select.val(oldVal);
      select.change(function () {
        oldVal = UTILITY.getQueryString(window.location.href, 'orderby');
        var selVal = $(this).val();

        if (oldVal !== selVal) {
          sessionStorage.setItem("SelItem", selVal);
          UTILITY.updateQueryString(location.href, 'orderby', selVal);
          location.reload();
        }
      });
      $.uniform.update(select);
      $('.filterAppliedDetails').on('click', '.deleteIcon', function (e) {
        var filterAppTxt = $('.headerSearch .filterAppTxt .addIcon');
        var elementTarget = e.target;
        var filterParam = $(elementTarget).attr("data-filter");
        var filterAppTxtNum = parseInt(filterAppTxt.text().match(/\d+/)[0], 10);
        var newFilterAppTxt = filterAppTxt.text().replace(filterAppTxtNum, --filterAppTxtNum);
        filterAppTxt.text(newFilterAppTxt);
        $(elementTarget).parent().remove();
        UTILITY.updateQueryString(location.href, filterParam, "");
        handleSearch();
      });
      $('.adv-value').each(function (idx, el) {
        var textToReplace = el.innerText.replace(/ /g, '');
        var replaceFound = {
          text: ''
        };
        var advValue = textToReplace.split(',');
        var advNewValue = '';

        if (advValue.length > 1) {
          advValue.forEach(function (val) {
            var replaceFoundObj = UTILITY.advanceTooltip.find(function (jsonData) {
              return jsonData.val === val;
            });

            if (replaceFoundObj) {
              advNewValue += replaceFoundObj.text + ', ';
            }
          });
        } else {
          replaceFound = UTILITY.advanceTooltip.find(function (jsonData) {
            return jsonData.val === textToReplace;
          });
        }

        if (advNewValue && advValue.length > 1) {
          el.innerText = advNewValue.substring(0, advNewValue.length - 1);
        } else if (replaceFound && replaceFound.text) {
          el.innerText = replaceFound.text;
        }
      });
      var container = $(".searchBySectionCelgene");
      var celgeneDaSelected = container.find("[data-filter=celgene_da]");
      var celgeneMolSelected = container.find("[data-filter=celgene_mol]");
      var dataSpecialityOnLoadDa = container.find("[data-filter=celgene_da]").attr('data-specialty') || "";
      var dataSpecialityOnLoadMol = container.find("[data-filter=celgene_mol]").attr('data-specialty') || "";

      if (dataSpecialityOnLoadDa) {
        container.find("[data-filter=celgene_da] option[data-specialty=".concat(dataSpecialityOnLoadMol, "]")).removeAttr('disabled').show();
        container.find("[data-filter=celgene_mol] option[data-specialty*=".concat(dataSpecialityOnLoadMol, "]")).removeAttr('disabled').show();
      } else {
        container.find("[data-filter=celgene_da] option").removeAttr('disabled').show();
        container.find("[data-filter=celgene_mol] option").removeAttr('disabled').show();
      }

      container.find('.customSelect').change(function (e) {
        var elementTarget = e.target;
        var slug = elementTarget.value;
        var filter = elementTarget.getAttribute('data-filter');
        var filterSpecialty = elementTarget.options[elementTarget.options.selectedIndex].getAttribute('data-specialty');

        if (filter === 'specialty') {
          specialityUpdateView(e);
        } else if (filter === 'celgene_mol') {
          moleculeUpdateView(filterSpecialty);
        } else if (filter === 'celgene_da') {
          daUpdateView(filterSpecialty);
        }

        UTILITY.updateQueryString(location.href, "filter_" + filter, slug);
        handleSearch();
      });
      $(document).find(".saveSearchBtn").click(function (e) {
        e.preventDefault();
        var elementTarget = e.target; // Get Url

        var href = window.location.href;
        var urlParams = new URLSearchParams(href); // Get Param Types

        var searchType = urlParams.get('search_type'); // API Call to Save Search

        api.post("user/".concat(phpData.userId, "/save-search"), {
          "search_url": href,
          "search_type": searchType,
          "noLoader": true
        }).then(function (response) {
          //location.reload();
          // elementTarget.disabled = false;
          $(document).find(".saveSearchBtn").text("Saved");
        });
      });

      function isSearchSaved() {
        // Get Url
        var href = window.location.href;
        var urlParams = new URLSearchParams(href); // Get Param Types

        var searchType = urlParams.get('search_type'); // API Call to Save Search

        api.post("user/".concat(phpData.userId, "/validate-save"), {
          "search_url": href,
          "search_type": searchType,
          "noLoader": true
        }).then(function (response) {
          //location.reload();
          // elementTarget.disabled = false;
          // $(document).find(".saveSearchBtn").disabled = false;
          if (response[0] != 200) {
            $(document).find(".saveSearchBtn").text("Saved");
          }
        });
      }

      $(document).ready(function (e) {
        isSearchSaved();
      });
      var views = {
        location: new LocationFilter({
          element: $(".filterSubOption.term-location"),
          callee: "search",
          displayView: $(".filterSubOption.term-location").parents(".widget.widget_ep-facet").find(".filterList"),
          searchCallback: function searchCallback(data) {
            handleSearch(data);
          }
        })
      };

      function handleSearch(loadmoreBtn) {
        var requestData = {
          'action': 'search_celgene_filters',
          'query': loadMoreTrials.posts,
          'meta': UTILITY.getParamsByPrefix(["meta_", "date_"]),
          'dist': UTILITY.getParamsByPrefix(["dis_"]),
          'filter': UTILITY.getParamsByPrefix(["filter"]),
          'page': 0,
          'orderby': UTILITY.getParams(["orderby"]),
          '_wpnonce': phpData.rest_nonce,
          'isAdminAjax': true
        };
        console.log(requestData);

        if (loadmoreBtn) {
          requestData['single'] = loadMoreTrials.single;
        }

        api.post(loadMoreTrials.ajaxurl, requestData).then(function (response) {
          getTrials(response, loadmoreBtn);

          if (!requestData['filter'].filter_location && !requestData['dist'].dis_location) {
            $('.resultContainer .resultItems').first().removeClass('open');
            $('.resultContainer .resultItems.open .resultItemsExpand').css('display', 'none');
            $('.accordianLi .showHideArrow').first().removeClass('active');
          } else {
            $('.resultContainer .resultItems').first().addClass('open');
            $('.resultContainer .resultItems.open .resultItemsExpand').css('display', 'block');
            $('.accordianLi .showHideArrow').first().addClass('active');
          }
        })["catch"](function (err) {
          console.log(err);
        });
      }

      function getTrials(data, loadmoreBtn) {
        console.log(data);

        if (data) {
          var totalCount = data.total_count;

          if (data.total_count < 10) {
            // console.log('data.total_count' , data.total_count);
            $('.loadTrialButton').hide(); // console.log('hide button');
          } else {
            $('.loadTrialButton').show(); //console.log('show button');
          }

          $(".preloader").hide();

          if (!isNaN(totalCount)) {
            $(".trialCount").text(totalCount);

            if (totalCount == 0) {
              $('#zeroTrails').modal('show');
            }
          }

          if (loadmoreBtn) {
            $('.resultContainer').append(function () {
              return $(data.html).click(function (e) {
                if ($(e.target).hasClass('showHideArrow')) {
                  check($(e.target));
                  return false;
                }
              });
            });
          } else {
            $('.resultContainer').html(function () {
              return $(data.html).click(function (e) {
                if ($(e.target).hasClass('showHideArrow')) {
                  check($(e.target));
                  return false;
                }
              });
            });
          }

          isSearchSaved();

          if (loadmoreBtn) {
            loadMoreTrials.current_page++;
            if (loadMoreTrials.current_page === loadMoreTrials.max_page) loadmoreBtn.remove();
          }

          loadMoreTrials.posts = data.query;

          if ($(window).width() <= 767) {
            $('html, body').animate({
              scrollTop: 0
            }, 500);
          }
        }
      }

      function moleculeUpdateView(specialityValue) {
        var celgeneDaSelect = container.find("[data-filter=celgene_da]");
        var newSpecialityValues = '';
        var specialityTextValue = container.find("[data-filter=specialty] option:selected").val();

        if (specialityTextValue) {
          specialityValue = specialityTextValue;
        }

        if (specialityValue) {
          newSpecialityValues = specialityValue.split(',');
        }

        if (newSpecialityValues.length > 1) {
          celgeneDaSelect.find('option').not(':first-child').attr('disabled', 'disabled').hide();
          newSpecialityValues.forEach(function (newSpecialityValue) {
            celgeneDaSelect.find("option[data-specialty*=".concat(newSpecialityValue, "]")).not(':first-child').removeAttr('disabled').show();
          });
        } else if (specialityValue) {
          celgeneDaSelect.find("option[data-specialty!=".concat(specialityValue, "]")).not(':first-child').attr('disabled', 'disabled').hide();
          celgeneDaSelect.find("option[data-specialty*=".concat(specialityValue, "]")).not(':first-child').removeAttr('disabled').show();
        } else {
          celgeneDaSelect.find('option').removeAttr('disabled').show();
        }

        if (!celgeneDaSelect.val()) {
          container.find("#uniform-celgeneDiseaseAreaFilter span").text('All Diseases');
        }
      }

      function daUpdateView(specialityValue) {
        var celgeneMolSelect = container.find("[data-filter=celgene_mol]");
        var specialityTextValue = container.find("[data-filter=specialty] option:selected").val();

        if (specialityTextValue) {
          specialityValue = specialityTextValue;
        }

        if (specialityValue) {
          celgeneMolSelect.find("option[data-specialty!=".concat(specialityValue, "]")).not(':first-child').attr('disabled', 'disabled').hide();
          celgeneMolSelect.find("option[data-specialty*=".concat(specialityValue, "]")).not(':first-child').removeAttr('disabled').show();
        } else {
          celgeneMolSelect.find('option').removeAttr('disabled').show();
        }

        if (!celgeneMolSelect.val()) {
          container.find("#uniform-celgeneMoleculeFilter span").text('All Molecules');
        }
      }

      function specialityUpdateView(e) {
        var targetValue = e.target.value;

        if (celgeneDaSelected.val()) {
          celgeneDaSelected.val('');
          UTILITY.updateQueryString(location.href, "filter_" + 'celgene_da', '');
          container.find("#uniform-celgeneDiseaseAreaFilter span").text('All Diseases');
        }

        if (celgeneMolSelected.val()) {
          celgeneMolSelected.val('');
          UTILITY.updateQueryString(location.href, "filter_" + 'celgene_mol', '');
          container.find("#uniform-celgeneMoleculeFilter span").text('All Molecules');
        }

        if (!targetValue) {
          container.find("[data-filter=celgene_da] option").removeAttr('disabled').show();
          container.find("[data-filter=celgene_mol] option").removeAttr('disabled').show();
          return;
        }

        container.find("[data-filter=celgene_da] option[data-specialty!=".concat(targetValue, "]")).not(':first-child').attr('disabled', 'disabled').hide();
        container.find("[data-filter=celgene_da] option[data-specialty=".concat(targetValue, "]")).removeAttr('selected').removeAttr('disabled').show();
        container.find("[data-filter=celgene_mol] option[data-specialty!=".concat(targetValue, "]")).not(':first-child').attr('disabled', 'disabled').hide();
        container.find("[data-filter=celgene_mol] option[data-specialty*=".concat(targetValue, "]")).removeAttr('selected').removeAttr('disabled').show();
      }

      function hidden(a) {
        $(a).removeClass('active');
        $('.resultItems').removeClass('open');
        $(a).parent().find('.accordianSubUl:first').slideUp();
      }

      function visible(b) {
        $(b).parent().siblings().find('a').removeClass('active');
        $('.resultItems').removeClass('open');
        $(b).parent().parent().find('.accordianLi .accordianSubUl:visible').slideUp();
        $(b).addClass('active');
        $(b).parents('.resultItems').addClass('open');
        $(b).parent().find('.accordianSubUl:first').slideDown();
      }

      function check(c) {
        if ($(c).parent().find('.accordianSubUl:first').is(':hidden')) {
          visible(c);
        } else {
          hidden(c);
        }
      } // alert('Search');
      // let container = $('.result_container')
      // container.find('.nct-popup').on('click', function () {
      //     // console.log($(this).parent().parent().next('.hidden').find('.modal-content'))
      //     let dataShow = '.' + $(this).data('view');
      //     $(this).parent().parent().next('.hidden').find('.modal-content').find('li').addClass('hidden');
      //     $(this).parent().parent().next('.hidden').find('.modal-content').find(`li${dataShow}`).removeClass('hidden');
      //     let content = $(this).parent().parent().next('.hidden').find('.modal-content').clone();
      //     $("#myVideoModal .modal-dialog").empty();
      //     let closeBtn = '<button type="button" class="close" data-dismiss="modal">&nbsp;</button>'
      //     $("#myVideoModal .modal-dialog").append(closeBtn);
      //     $("#myVideoModal .modal-dialog").append(content);
      // })

    }

    module.exports = search;
  }, {
    "./api": 2,
    "./filters/location": 27,
    "./utility": 46,
    "@lvchengbin/url": 49
  }],
  36: [function (require, module, exports) {
    var Step =
    /*#__PURE__*/
    function () {
      "use strict";

      //errorMessage;
      function Step(obj) {
        _classCallCheck(this, Step);

        this.container = obj.element;
        this.key = obj.key;
        this.shouldSkip = false;
      }

      _createClass(Step, [{
        key: "action",
        value: function action() {}
      }, {
        key: "validate",
        value: function validate() {
          return this.action().length;
        }
      }, {
        key: "setSkip",
        value: function setSkip(skip) {
          this.shouldSkip = skip;
        }
      }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
          return this.errorMessage;
        }
      }]);

      return Step;
    }();

    module.exports = Step;
  }, {}],
  37: [function (require, module, exports) {
    var User = require('./user');

    var Registration = require('./user-registration/registration');

    var Login = require('./user-registration/login');

    var SignUp = require('./user-registration/sign-up');

    var _require4 = require('@lvchengbin/url'),
        URL = _require4.URL,
        URLSearchParams = _require4.URLSearchParams;

    function UserRegistration() {
      var $ = jQuery;
      var user = phpData.userId != 0 ? new User({
        id: phpData.userId
      }) : false;
      var container = $(".signUpSection");
      container.find(".nextBtn").click(function () {
        if (views.signUp.validate()) {
          views.signUp.next();
        }
      });
      container.find(".skipStepBtn").click(function () {
        views.signUp.next(true);
      });
      container.find(".previousBtn").click(function () {
        views.signUp.prev();
      });
      container.find(".finishBtn").click(function (e) {
        e.preventDefault();
        views.signUp.submit();
      });
      var views = {
        register: new Registration({
          element: $(".signupContent")
        }),
        login: new Login({
          element: $(".loginContent")
        }),
        signUp: new SignUp({
          element: $(".signupStepProcess")
        }),
        switchState: function switchState() {
          this.register.hide();
          this.signUp.show();
          $("body").addClass("overflow");
        }
      };

      function init() {
        var urlParams = new URLSearchParams(window.location.search);

        if (user && urlParams.has('new')) {
          show();
          views.switchState();
        }

        if (urlParams.has('login_failed')) {
          $(".login a").click();
        }
      }

      function show() {
        container.fadeIn();
      }

      init();
    }

    module.exports = UserRegistration;
  }, {
    "./user": 45,
    "./user-registration/login": 38,
    "./user-registration/registration": 39,
    "./user-registration/sign-up": 40,
    "@lvchengbin/url": 49
  }],
  38: [function (require, module, exports) {
    var _require5 = require('@lvchengbin/url'),
        URL = _require5.URL,
        URLSearchParams = _require5.URLSearchParams;

    var Login = function Login(obj) {
      var container = obj.element;
      var url_string = window.location.href;
      var url = new URL(url_string);
      var loginParam = url.searchParams.get("login_failed");

      if (loginParam) {
        if (loginParam == "true") {
          container.find("#loginform .loginFail").show();
        }
      } else {
        container.find("#loginform .loginFail").hide();
      }

      this.show = function () {
        container.show();
      };

      this.hide = function () {
        container.hide();
      };

      container.find("input").each(function () {
        if ($(this).val() != "") {
          $(this).parent().parent().find(".um-field-label").addClass("active");
        }
      });
      container.find("form#loginform").validate({
        onfocusout: false,
        onkeyup: false,
        onclick: false,
        rules: {
          log: "required",
          pwd: "required"
        },
        messages: {
          log: "Please enter a valid email address.",
          pwd: "The password you entered is incorrect. Try again, or choose another login option."
        },
        submitHandler: function submitHandler(form) {
          form.submit();
        }
      });
      $("#forgotForm").validate({
        onfocusout: false,
        onkeyup: false,
        onclick: false,
        rules: {
          usernameEmail: "required"
        },
        messages: {
          usernameEmail: "Please enter a valid email address."
        },
        submitHandler: function submitHandler(form) {
          container.find("#loginform .loginFail").hide();
          form.submit();
        }
      });
    };

    module.exports = Login;
  }, {
    "@lvchengbin/url": 49
  }],
  39: [function (require, module, exports) {
    var Registration = function Registration(obj) {
      var container = obj.element;
      container.find("input").each(function () {
        if ($(this).val() != "") {
          $(this).parent().parent().find(".um-field-label").addClass("active");
        }
      });

      this.show = function () {
        container.show();
      };

      this.hide = function () {
        container.hide();
      };

      this.validate = function () {
        $(".emailDuplicateError").html("");
        return container.find("input").hasClass("um-error");
      };

      container.find("form").validate({
        focusCleanup: true,
        focusInvalid: false,
        onfocusout: false,
        onkeyup: false,
        onclick: false,
        rules: {
          "first_name": {
            required: true,
            first_name: true
          },
          "last_name": {
            required: true,
            last_name: true
          },
          //"npi-3468": "required"
          // "npi":{
          //     required: true,
          //     validNPI: true
          // },
          "user_email": {
            required: true,
            validateEmail: true,
            email: true
          },
          "user_password": {
            required: true,
            passwordCheck: true
          },
          "confirm_user_password": {
            required: true,
            equalTo: "#user_password"
          },
          "Privacy[]": "required"
        },
        messages: {
          "first_name": {
            required: "Please enter your first name."
          },
          "last_name": {
            required: "Please enter your last name."
          },
          //"npi-3468": "Please enter a valid nip address"
          // "npi": {
          //     required: "Please enter a valid NPI number."
          // },
          "user_email": {
            required: "Please enter a valid email address."
          },
          "user_password": {
            required: "Please create a password."
          },
          "confirm_user_password": {
            required: "Please confirm the password.",
            equalTo: "Please enter the same password as above"
          },
          "Privacy[]": "You must agree to the privacy terms and conditions to continue."
        },
        submitHandler: function submitHandler(form) {
          $(".emailDuplicateError").html("");
          var formData = {};
          $("form").serializeArray().forEach(function (arr) {
            switch (arr.name) {
              case 'npi':
                formData['npi'] = arr.value;
                break;

              case 'salutation':
                formData['salutation'] = arr.value;
                break;

              case 'user_password':
                formData['password'] = arr.value;
                break;

              case 'title':
                formData['bs-title'] = arr.value;
                break;

              case 'last_name':
                formData['last_name'] = arr.value;
                break;

              case 'user_email':
                formData['email'] = arr.value;
                break;

              case 'first_name':
                formData['first_name'] = arr.value;
                break;

              case 'redirect_to':
                formData['redirect_to'] = arr.value;
                break;
            }
          });
          formData.name = "".concat(formData.first_name, " ").concat(formData.last_name);
          formData.username = "".concat(formData.first_name).concat(formData.last_name).concat(Math.trunc(Math.random() * 10));
          formData._wpnonce = phpData.rest_nonce;
          formData.action = "users.ajax";
          $.ajax({
            url: phpData.ajaxurl,
            data: formData,
            type: 'POST',
            success: function success(res) {
              //console.log('response', res);
              if (res.success) {
                window.location = formData.redirect_to;
              } else {
                //  console.log('err response', res);
                $(".emailDuplicateError").html(res.data);
              }
            }
          });
        }
      });
      container.find("form").on('blur keyup change', 'input', function (event) {
        //const isFormValid = container.find("form").valid();
        // container.find("form #um-submit-btn").prop('disabled', ! isFormValid);
        container.find("form #um-submit-btn").prop('disabled', false); // if(isFormValid == false){
        //     $(".emailDuplicateError").html("");
        // }
      });
      $.validator.addMethod("first_name", function (value, element) {
        return this.optional(element) || /.*\S+.*/.test(value);
      }, "Please enter your first name");
      $.validator.addMethod("last_name", function (value, element) {
        return this.optional(element) || /.*\S+.*/.test(value);
      }, "Please enter your last name");
      $.validator.addMethod("passwordCheck", function (value, element) {
        return this.optional(element) || /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$/.test(value);
      }, "Password must be at least 8 characters, contain at least one special character, and at least one uppercase letter.");
      jQuery.validator.addMethod("validateEmail", function (value, element) {
        return /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/.test(value);
      }, "Please enter a valid email address."); // jQuery.validator.addMethod("validNPI", function(value, element) {
      //     var test = "CB"
      //     var userData;
      //     $.get( 'https://npiregistry.cms.hhs.gov/api/?number='+value+'&version=2.1', function( data ) {
      //         if(data.Errors){
      //             $('#npi-error').text(data.Errors[0].description);
      //             return false
      //         }else{
      //             var fname = data.results[0].basic.first_name.toLowerCase();
      //             var lname = data.results[0].basic.last_name.toLowerCase();
      //             if($('#first_name').value == '' && $('#last_name').value == ''){
      //                 $('#npi-error').text('Please enter first name and last name to validate NPI number.');
      //                 return false
      //             }else if($('#first_name').value == '' && $('#last_name').value != ''){
      //                 $('#npi-error').text('Please enter first name validate NPI number.');
      //                 return false
      //             }else if($('#first_name').value != '' && $('#last_name').value == ''){
      //                 $('#npi-error').text('Please enter last name validate NPI number.');
      //                 return false
      //             }else{
      //                 if(fname != $('#first_name').value && lname != $('#last_name').value){
      //                     $('#npi-error').text('First name and Last name not matching NPI number.');
      //                     return false
      //                 }else if(fname != $('#first_name').value && lname == $('#last_name').value){
      //                     $('#npi-error').text('First name not matching NPI number.');
      //                     return false
      //                 }else if(fname == $('#first_name').value && lname != $('#last_name').value){
      //                     $('#npi-error').text('Last name not matching NPI number.');
      //                     return false
      //                 }
      //             }
      //         }
      //     });
      //       return false;
      // },'')
    };

    $(document).ready(function () {
      $(".signup-hidden_label").hide();
      $(".salutation").change(function (element) {
        if (element.target.value) {
          $(".signup-hidden_label").show().css("opacity", "1");
        } else {
          $(".signup-hidden_label").hide();
        }
      });
    });
    module.exports = Registration;
  }, {}],
  40: [function (require, module, exports) {
    var Specialty = require('./sign-up/specialty');

    var SubSpecialty = require('./sign-up/sub-specialty');

    var TrialOfInterest = require('./sign-up/trial-of-interest');

    var DrugIntervention = require('./sign-up/drug-intervention');

    var API = require("../api");

    var SignUp = function SignUp(obj) {
      var container = obj.element;
      var currentView = "specialty";
      var self = this;
      var api = new API();
      var specialtySkipped = false;
      var views = {
        specialty: new Specialty({
          element: container.find(".step1"),
          key: "specialties"
        }),
        subSpecialty: new SubSpecialty({
          element: container.find(".step2"),
          key: "subSpecialties"
        }),
        trialOfInterest: new TrialOfInterest({
          element: container.find(".step3"),
          key: "trials_of_interest"
        }),
        drugIntervention: new DrugIntervention({
          element: container.find(".step4"),
          key: "interventions"
        })
      };

      this.show = function () {
        container.fadeIn();
        stepSlider = $('#stepSlider').bxSlider({
          mode: 'vertical',
          infiniteLoop: false,
          hideControlOnEnd: true,
          pager: false,
          auto: false,
          pause: 10000,
          controls: false,
          touchEnabled: false,
          onSlideAfter: function onSlideAfter(currentSlide, oldIndex, newIndex) {
            updateTimeline(newIndex);
            currentView = Object.keys(views)[newIndex];
          },
          onSlideBefore: function onSlideBefore(currentSlide, oldIndex, newIndex) {
            update(newIndex);
          }
        });
      };

      this.validate = function () {
        var validateCurrentView = views[currentView].validate();

        if (validateCurrentView) {
          return validateCurrentView;
        }

        showErrorMessage();
      };

      this.next = function (isSkip) {
        clearErrorMessage();

        if (isSkip && views[currentView].shouldSkip) {
          var currentIndex = Object.keys(views).indexOf(currentView); //console.log("current", currentIndex);

          if (currentIndex == 2) {
            views[currentView].setSkip(true);
            stepSlider.goToSlide(currentIndex + 1);
          } else {
            stepSlider.goToSlide(currentIndex + 2);
            views[Object.keys(views)[currentIndex + 2]].setSkip(true);
          }
        } else {
          stepSlider.goToNextSlide();
        }
      };

      this.prev = function () {
        if (views[currentView].shouldSkip) {
          views[currentView].setSkip(false);
          var currentIndex = Object.keys(views).indexOf(currentView);
          stepSlider.goToSlide(currentIndex - 2);
        } else {
          stepSlider.goToPrevSlide();
        }
      };

      this.submit = function () {
        var data = {};

        for (var key in views) {
          var view = views[key];
          data[view.key] = view.action();
        }

        api.post("user/" + phpData.userId + "/save-profile", data).then(function (response) {
          response = JSON.parse(response);
          window.location.href = response.redirect_url;
        });
      };

      function update(newIndex) {
        if (typeof views[currentView].onChange == "function") {
          views[currentView].onChange(views);
        }

        container.attr("data-slide", newIndex);
      }

      function showErrorMessage() {
        container.find(".errorMsg").html(views[currentView].getErrorMessage());
      }

      function clearErrorMessage() {
        container.find(".errorMsg").html("");
      }

      function updateTimeline(index) {
        container.find(".progress li").removeClass("active");
        container.find(".progress li").removeClass("highlight");

        for (var _i18 = 0; _i18 < index; _i18 += 1) {
          container.find('li[data-step="' + (_i18 + 1) + '"]').addClass("active");
        }

        container.find('li[data-step="' + (index + 1) + '"]').addClass("highlight");
      }
    };

    module.exports = SignUp;
  }, {
    "../api": 2,
    "./sign-up/drug-intervention": 41,
    "./sign-up/specialty": 42,
    "./sign-up/sub-specialty": 43,
    "./sign-up/trial-of-interest": 44
  }],
  41: [function (require, module, exports) {
    var Step = require("../../step");

    var DrugIntervention =
    /*#__PURE__*/
    function (_Step) {
      "use strict";

      _inherits(DrugIntervention, _Step);

      function DrugIntervention() {
        _classCallCheck(this, DrugIntervention);

        return _possibleConstructorReturn(this, _getPrototypeOf(DrugIntervention).apply(this, arguments));
      }

      _createClass(DrugIntervention, [{
        key: "action",
        value: function action() {
          var interventions = [];
          this.container.find(".intervention").each(function () {
            if ($(this).val()) {
              interventions.push($(this).val());
            }
          });
          return interventions;
        }
      }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
          return "Please select at least one sub specialty";
        }
      }, {
        key: "validate",
        value: function validate() {
          return true;
        }
      }]);

      return DrugIntervention;
    }(Step);

    module.exports = DrugIntervention;
  }, {
    "../../step": 36
  }],
  42: [function (require, module, exports) {
    var Step = require("../../step");

    var Specialty =
    /*#__PURE__*/
    function (_Step2) {
      "use strict";

      _inherits(Specialty, _Step2);

      // figure out how to use property in class and browserify
      //errorMessage = "Please select at least one sub specialty";
      function Specialty(obj) {
        var _this2;

        _classCallCheck(this, Specialty);

        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Specialty).call(this, obj));
        _this2.shouldSkip = true;
        return _this2;
      }

      _createClass(Specialty, [{
        key: "action",
        value: function action() {
          var selectedSpecialties = [];
          this.container.find("li.active").each(function () {
            selectedSpecialties.push($(this).data('id'));
          });
          return selectedSpecialties;
        }
      }, {
        key: "skip",
        value: function skip() {}
      }, {
        key: "onChange",
        value: function onChange(views) {
          views.subSpecialty.setSpecialties(this.action());
        }
      }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
          return "Please select at least one specialty";
        }
      }]);

      return Specialty;
    }(Step);

    module.exports = Specialty;
  }, {
    "../../step": 36
  }],
  43: [function (require, module, exports) {
    var Step = require("../../step");

    var SubSpecialty =
    /*#__PURE__*/
    function (_Step3) {
      "use strict";

      _inherits(SubSpecialty, _Step3);

      function SubSpecialty() {
        _classCallCheck(this, SubSpecialty);

        return _possibleConstructorReturn(this, _getPrototypeOf(SubSpecialty).apply(this, arguments));
      }

      _createClass(SubSpecialty, [{
        key: "action",
        // figure out how to use property in class and browserify
        //errorMessage = "Please select at least one sub specialty";
        value: function action() {
          var subSpecialties = [];
          this.container.find("li.active").each(function () {
            subSpecialties.push($(this).data('id'));
          });
          return subSpecialties;
        }
      }, {
        key: "setSpecialties",
        value: function setSpecialties(specialties) {
          this.container.find(".twoParts[data-id]").hide();

          for (var _i19 = 0; _i19 < specialties.length; _i19++) {
            var specialty = specialties[_i19];
            this.container.find("[data-id=" + specialty + "]").show();
          }
        }
      }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
          return "Please select at least one sub Speciality";
        }
      }, {
        key: "validate",
        value: function validate() {
          return true;
        }
      }]);

      return SubSpecialty;
    }(Step);

    module.exports = SubSpecialty;
  }, {
    "../../step": 36
  }],
  44: [function (require, module, exports) {
    var Step = require("../../step");

    var TrialOfInterest =
    /*#__PURE__*/
    function (_Step4) {
      "use strict";

      _inherits(TrialOfInterest, _Step4);

      function TrialOfInterest() {
        _classCallCheck(this, TrialOfInterest);

        return _possibleConstructorReturn(this, _getPrototypeOf(TrialOfInterest).apply(this, arguments));
      }

      _createClass(TrialOfInterest, [{
        key: "action",
        value: function action() {
          var data = {};
          this.container.find("[name]").each(function () {
            data[$(this).attr("name")] = $(this).val();
          });
          return data;
        }
      }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
          return "Please select at least one sub specialty";
        }
      }, {
        key: "validate",
        value: function validate() {
          return true;
        }
      }]);

      return TrialOfInterest;
    }(Step);

    module.exports = TrialOfInterest;
  }, {
    "../../step": 36
  }],
  45: [function (require, module, exports) {
    var API = require('./api');

    function User(user) {
      var id = user.id,
          title,
          firstName,
          lastName,
          npi,
          salutation,
          email,
          password,
          terms,
          specialties,
          subSpecialties,
          trialEnroll,
          trialNew,
          trialStatusChanges,
          trialMolecules,
          interventions;
      var api = new API();

      this.setSpecialties = function (specialties) {};

      this.getId = function () {
        return id;
      };
    }

    module.exports = User;
  }, {
    "./api": 2
  }],
  46: [function (require, module, exports) {
    var _require6 = require('@lvchengbin/url'),
        URL = _require6.URL,
        URLSearchParams = _require6.URLSearchParams;

    var UTILITY = {
      getCookie: function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');

        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];

          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }

          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }

        return "";
      },
      conferenceView: function conferenceView() {
        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        var conferenceView = urlParams.get('conference-view');
        return conferenceView == 'true';
      },
      isHome: function isHome() {
        return $('body').hasClass("home");
      },
      isSearchResults: function isSearchResults() {
        return $('body').hasClass("search-results") || this.dom.body.hasClass("search-no-results");
      },
      isSaveTrialTemplate: function isSaveTrialTemplate() {
        return $('body').hasClass("page-template-page-saved-clinical-trials");
      },
      isSingleTrial: function isSingleTrial() {
        return $('body').hasClass("single-trial");
      },
      isDiseaseArea: function isDiseaseArea() {
        return $('body').hasClass("single-disease-area");
      },
      isSpecialty: function isSpecialty() {
        return $('body').hasClass("tax-specialty");
      },
      isDashBoard: function isDashBoard() {
        return $('body').hasClass("page-template-page-dashboard");
      },
      isCelgeneDashBoard: function isCelgeneDashBoard() {
        return $('body').hasClass("page-template-celgene-dashboard");
      },
      isPatientSearch: function isPatientSearch() {
        return $('body').hasClass("page-template-page-search-patient-type");
      },
      isAdvancedSearch: function isAdvancedSearch() {
        return $('body').hasClass("advanced-search");
      },
      getQueryString: function getQueryString(url, key) {
        if (!url) url = window.location.href;
        key = key.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + key + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
      },
      updateQueryString: function updateQueryString(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|#|$)", "i");
        var newUri = uri;

        if (uri.match(re)) {
          newUri = uri.replace(re, '$1' + key + "=" + value + '$2');
        } else {
          var hash = '';

          if (uri.indexOf('#') !== -1) {
            hash = uri.replace(/.*#/, '#');
            uri = uri.replace(/#.*/, '');
          }

          var separator = uri.indexOf('?') !== -1 ? "&" : "?";
          newUri = uri + separator + key + "=" + value;
        }

        if (key === 'posts_per_page') {
          return newUri;
        }

        history.pushState({}, null, newUri);
      },
      getParamsByPrefix: function getParamsByPrefix(prefix) {
        var url = new URL(window.location.href);
        var params = {};

        for (var _i20 = 0; _i20 < url.searchParams.dict.length; _i20++) {
          var key = url.searchParams.dict[_i20].shift();

          var value = url.searchParams.dict[_i20].shift();

          for (var j = 0; j < prefix.length; j++) {
            var givenKey = prefix[j];

            if (key.startsWith(givenKey)) {
              params[key] = value;
            }
          }
        }

        return params;
      },
      getParams: function getParams(uKey) {
        var url = new URL(window.location.href);

        for (var _i21 = 0; _i21 < url.searchParams.dict.length; _i21++) {
          var key = url.searchParams.dict[_i21].shift();

          var value = url.searchParams.dict[_i21].shift();

          if (uKey == key) {
            return value;
          }
        }

        return 0;
      },
      setCookie: function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      },
      setCookieInHours: function setCookieInHours(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + exdays * 60 * 60 * 1000);
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
      },
      polyfill: function polyfill() {
        //polyfill for array find for IE
        if (!Array.prototype.find) {
          Object.defineProperty(Array.prototype, 'find', {
            value: function value(predicate) {
              // 1. Let O be ? ToObject(this value).
              if (this == null) {
                throw new TypeError('"this" is null or not defined');
              }

              var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

              var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

              if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
              } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


              var thisArg = arguments[1]; // 5. Let k be 0.

              var k = 0; // 6. Repeat, while k < len

              while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];

                if (predicate.call(thisArg, kValue, k, o)) {
                  return kValue;
                } // e. Increase k by 1.


                k++;
              } // 7. Return undefined.


              return undefined;
            },
            configurable: true,
            writable: true
          });
        }
      },
      //static json data - to be replaced later
      countryOptions: [{
        "val": "current-locations",
        "value": "Current Location"
      }, {
        "val": "united-states",
        "value": "United States"
      }, {
        "val": "afghanistan",
        "value": "Afghanistan"
      }, {
        "val": "albania",
        "value": "Albania"
      }, {
        "val": "algeria",
        "value": "Algeria"
      }, {
        "val": "american-samoa",
        "value": "American Samoa"
      }, {
        "val": "andorra",
        "value": "Andorra"
      }, {
        "val": "angola",
        "value": "Angola"
      }, {
        "val": "antarctica",
        "value": "Antarctica"
      }, {
        "val": "argentina",
        "value": "Argentina"
      }, {
        "val": "armenia",
        "value": "Armenia"
      }, {
        "val": "aruba",
        "value": "Aruba"
      }, {
        "val": "australia",
        "value": "Australia"
      }, {
        "val": "austria",
        "value": "Austria"
      }, {
        "val": "azerbaijan",
        "value": "Azerbaijan"
      }, {
        "val": "bahamas",
        "value": "Bahamas"
      }, {
        "val": "bahrain",
        "value": "Bahrain"
      }, {
        "val": "bangladesh",
        "value": "Bangladesh"
      }, {
        "val": "barbados",
        "value": "Barbados"
      }, {
        "val": "belarus",
        "value": "Belarus"
      }, {
        "val": "belgium",
        "value": "Belgium"
      }, {
        "val": "belize",
        "value": "Belize"
      }, {
        "val": "benin",
        "value": "Benin"
      }, {
        "val": "bermuda",
        "value": "Bermuda"
      }, {
        "val": "bhutan",
        "value": "Bhutan"
      }, {
        "val": "bolivia",
        "value": "Bolivia"
      }, {
        "val": "bosnia-and-herzegovina",
        "value": "Bosnia and herzegovina"
      }, {
        "val": "botswana",
        "value": "Botswana"
      }, {
        "val": "brazil",
        "value": "Brazil"
      }, {
        "val": "brunei-darussalam",
        "value": "Brunei Darussalam"
      }, {
        "val": "bulgaria",
        "value": "Bulgaria"
      }, {
        "val": "burkina-faso",
        "value": "Burkina faso"
      }, {
        "val": "burundi",
        "value": "Burundi"
      }, {
        "val": "cote-divoire",
        "value": "CÃ´te D'Ivoire"
      }, {
        "val": "cambodia",
        "value": "Cambodia"
      }, {
        "val": "cameroon",
        "value": "Cameroon"
      }, {
        "val": "canada",
        "value": "Canada"
      }, {
        "val": "cayman-islands",
        "value": "Cayman islands"
      }, {
        "val": "central-african-republic",
        "value": "Central african republic"
      }, {
        "val": "chad",
        "value": "Chad"
      }, {
        "val": "chile",
        "value": "Chile"
      }, {
        "val": "china",
        "value": "China"
      }, {
        "val": "colombia",
        "value": "Colombia"
      }, {
        "val": "comoros",
        "value": "Comoros"
      }, {
        "val": "congo",
        "value": "Congo"
      }, {
        "val": "congo-the-democratic-republic-of-the",
        "value": "Congo, the democratic republic of the"
      }, {
        "val": "costa-rica",
        "value": "Costa rica"
      }, {
        "val": "croatia",
        "value": "Croatia"
      }, {
        "val": "cuba",
        "value": "Cuba"
      }, {
        "val": "cyprus",
        "value": "Cyprus"
      }, {
        "val": "czech-republic",
        "value": "Czech republic"
      }, {
        "val": "czechia",
        "value": "czechia"
      }, {
        "val": "denmark",
        "value": "Denmark"
      }, {
        "val": "djibouti",
        "value": "Djibouti"
      }, {
        "val": "dominican-republic",
        "value": "Dominican republic"
      }, {
        "val": "ecuador",
        "value": "Ecuador"
      }, {
        "val": "egypt",
        "value": "Egypt"
      }, {
        "val": "el-salvador",
        "value": "El salvador"
      }, {
        "val": "equatorial-guinea",
        "value": "Equatorial guinea"
      }, {
        "val": "estonia",
        "value": "Estonia"
      }, {
        "val": "ethiopia",
        "value": "Ethiopia"
      }, {
        "val": "faroe-islands",
        "value": "Faroe islands"
      }, {
        "val": "federated-states-of-micronesia",
        "value": "Federated States of Micronesia"
      }, {
        "val": "fiji",
        "value": "Fiji"
      }, {
        "val": "finland",
        "value": "Finland"
      }, {
        "val": "former-serbia-and-montenegro",
        "value": "Former serbia and montenegro"
      }, {
        "val": "former-yugoslavia",
        "value": "Former yugoslavia"
      }, {
        "val": "france",
        "value": "France"
      }, {
        "val": "french-guiana",
        "value": "French guiana"
      }, {
        "val": "french-polynesia",
        "value": "French polynesia"
      }, {
        "val": "gabon",
        "value": "Gabon"
      }, {
        "val": "gambia",
        "value": "Gambia"
      }, {
        "val": "georgia",
        "value": "Georgia"
      }, {
        "val": "germany",
        "value": "Germany"
      }, {
        "val": "ghana",
        "value": "Ghana"
      }, {
        "val": "gibraltar",
        "value": "Gibraltar"
      }, {
        "val": "greece",
        "value": "Greece"
      }, {
        "val": "greenland",
        "value": "Greenland"
      }, {
        "val": "grenada",
        "value": "Grenada"
      }, {
        "val": "guadeloupe",
        "value": "Guadeloupe"
      }, {
        "val": "guam",
        "value": "Guam"
      }, {
        "val": "guatemala",
        "value": "Guatemala"
      }, {
        "val": "guinea",
        "value": "Guinea"
      }, {
        "val": "guinea-bissau",
        "value": "Guinea-Bissau"
      }, {
        "val": "guyana",
        "value": "Guyana"
      }, {
        "val": "haiti",
        "value": "Haiti"
      }, {
        "val": "holy-see-vatican-city-state",
        "value": "Holy see (vatican city state)"
      }, {
        "val": "honduras",
        "value": "Honduras"
      }, {
        "val": "hong-kong",
        "value": "Hong kong"
      }, {
        "val": "hungary",
        "value": "Hungary"
      }, {
        "val": "iceland",
        "value": "Iceland"
      }, {
        "val": "india",
        "value": "India"
      }, {
        "val": "indonesia",
        "value": "Indonesia"
      }, {
        "val": "iran-islamic-republic-of",
        "value": "Iran, islamic iepublic of"
      }, {
        "val": "iraq",
        "value": "Iraq"
      }, {
        "val": "ireland",
        "value": "Ireland"
      }, {
        "val": "israel",
        "value": "Israel"
      }, {
        "val": "italy",
        "value": "Italy"
      }, {
        "val": "jamaica",
        "value": "Jamaica"
      }, {
        "val": "japan",
        "value": "Japan"
      }, {
        "val": "jersey",
        "value": "Jersey"
      }, {
        "val": "jordan",
        "value": "Jordan"
      }, {
        "val": "kazakhstan",
        "value": "Kazakhstan"
      }, {
        "val": "kenya",
        "value": "Kenya"
      }, {
        "val": "korea-democratic-peoples-republic-of",
        "value": "Korea, democratic people's pepublic of"
      }, {
        "val": "korea-republic-of",
        "value": "Korea, republic of"
      }, {
        "val": "kosovo",
        "value": "Kosovo"
      }, {
        "val": "kuwait",
        "value": "Kuwait"
      }, {
        "val": "kyrgyzstan",
        "value": "Kyrgyzstan"
      }, {
        "val": "lao-peoples-democratic-republic",
        "value": "Lao people's democratic republic"
      }, {
        "val": "latvia",
        "value": "Latvia"
      }, {
        "val": "lebanon",
        "value": "Lebanon"
      }, {
        "val": "lesotho",
        "value": "Lesotho"
      }, {
        "val": "liberia",
        "value": "Liberia"
      }, {
        "val": "libyan-arab-jamahiriya",
        "value": "Libyan arab jamahiriya"
      }, {
        "val": "liechtenstein",
        "value": "Liechtenstein"
      }, {
        "val": "lithuania",
        "value": "Lithuania"
      }, {
        "val": "luxembourg",
        "value": "Luxembourg"
      }, {
        "val": "macedonia-the-former-yugoslav-republic-of",
        "value": "Macedonia, the former yugoslav republic of"
      }, {
        "val": "madagascar",
        "value": "Madagascar"
      }, {
        "val": "malawi",
        "value": "Malawi"
      }, {
        "val": "malaysia",
        "value": "Malaysia"
      }, {
        "val": "maldives",
        "value": "Maldives"
      }, {
        "val": "mali",
        "value": "Mali"
      }, {
        "val": "malta",
        "value": "Malta"
      }, {
        "val": "martinique",
        "value": "Martinique"
      }, {
        "val": "mauritania",
        "value": "Mauritania"
      }, {
        "val": "mauritius",
        "value": "Mauritius"
      }, {
        "val": "mayotte",
        "value": "Mayotte"
      }, {
        "val": "mexico",
        "value": "Mexico"
      }, {
        "val": "moldova-republic-of",
        "value": "Moldova, republic of"
      }, {
        "val": "monaco",
        "value": "Monaco"
      }, {
        "val": "mongolia",
        "value": "Mongolia"
      }, {
        "val": "montenegro",
        "value": "Montenegro"
      }, {
        "val": "montserrat",
        "value": "Montserrat"
      }, {
        "val": "morocco",
        "value": "Morocco"
      }, {
        "val": "mozambique",
        "value": "Mozambique"
      }, {
        "val": "myanmar",
        "value": "Myanmar"
      }, {
        "val": "namibia",
        "value": "Namibia"
      }, {
        "val": "nepal",
        "value": "Nepal"
      }, {
        "val": "netherlands",
        "value": "Netherlands"
      }, {
        "val": "netherlands-antilles",
        "value": "Netherlands antilles"
      }, {
        "val": "new-caledonia",
        "value": "New Caledonia"
      }, {
        "val": "new-zealand",
        "value": "New Zealand"
      }, {
        "val": "nicaragua",
        "value": "Nicaragua"
      }, {
        "val": "niger",
        "value": "Niger"
      }, {
        "val": "nigeria",
        "value": "Nigeria"
      }, {
        "val": "northern-mariana-islands",
        "value": "Northern mariana islands"
      }, {
        "val": "norway",
        "value": "Norway"
      }, {
        "val": "oman",
        "value": "Oman"
      }, {
        "val": "pakistan",
        "value": "Pakistan"
      }, {
        "val": "palau",
        "value": "Palau"
      }, {
        "val": "palestinian-territories-occupied",
        "value": "Palestinian Territories, Occupied"
      }, {
        "val": "palestinian-territory-occupied",
        "value": "Palestinian Territory, occupied"
      }, {
        "val": "panama",
        "value": "Panama"
      }, {
        "val": "papua-new-guinea",
        "value": "Papua new guinea"
      }, {
        "val": "paraguay",
        "value": "Paraguay"
      }, {
        "val": "peru",
        "value": "Peru"
      }, {
        "val": "philippines",
        "value": "Philippines"
      }, {
        "val": "poland",
        "value": "Poland"
      }, {
        "val": "portugal",
        "value": "Portugal"
      }, {
        "val": "puerto-rico",
        "value": "Puerto rico"
      }, {
        "val": "qatar",
        "value": "Qatar"
      }, {
        "val": "reunion",
        "value": "Reunion"
      }, {
        "val": "romania",
        "value": "Romania"
      }, {
        "val": "russian-federation",
        "value": "Russian federation"
      }, {
        "val": "rwanda",
        "value": "Rwanda"
      }, {
        "val": "saint-kitts-and-nevis",
        "value": "Saint kitts and nevis"
      }, {
        "val": "saint-lucia",
        "value": "Saint lucia"
      }, {
        "val": "saudi-arabia",
        "value": "Saudi arabia"
      }, {
        "val": "senegal",
        "value": "Senegal"
      }, {
        "val": "serbia",
        "value": "Serbia"
      }, {
        "val": "seychelles",
        "value": "Seychelles"
      }, {
        "val": "sierra-leone",
        "value": "Sierra leone"
      }, {
        "val": "singapore",
        "value": "Singapore"
      }, {
        "val": "slovakia",
        "value": "Slovakia"
      }, {
        "val": "slovenia",
        "value": "Slovenia"
      }, {
        "val": "solomon-islands",
        "value": "Solomon islands"
      }, {
        "val": "somalia",
        "value": "Somalia"
      }, {
        "val": "south-africa",
        "value": "South africa"
      }, {
        "val": "spain",
        "value": "Spain"
      }, {
        "val": "sri-lanka",
        "value": "Sri lanka"
      }, {
        "val": "sudan",
        "value": "Sudan"
      }, {
        "val": "suriname",
        "value": "Suriname"
      }, {
        "val": "swaziland",
        "value": "Swaziland"
      }, {
        "val": "sweden",
        "value": "Sweden"
      }, {
        "val": "switzerland",
        "value": "Switzerland"
      }, {
        "val": "syrian-arab-republic",
        "value": "Syrian arab republic"
      }, {
        "val": "taiwan",
        "value": "Taiwan"
      }, {
        "val": "tajikistan",
        "value": "Tajikistan"
      }, {
        "val": "tanzania",
        "value": "Tanzania"
      }, {
        "val": "thailand",
        "value": "Thailand"
      }, {
        "val": "togo",
        "value": "Togo"
      }, {
        "val": "trinidad-and-tobago",
        "value": "Trinidad and tobago"
      }, {
        "val": "tunisia",
        "value": "Tunisia"
      }, {
        "val": "turkey",
        "value": "Turkey"
      }, {
        "val": "uganda",
        "value": "Uganda"
      }, {
        "val": "ukraine",
        "value": "Ukraine"
      }, {
        "val": "united-arab-emirates",
        "value": "United arab emirates"
      }, {
        "val": "united-kingdom",
        "value": "United kingdom"
      }, {
        "val": "uruguay",
        "value": "Uruguay"
      }, {
        "val": "uzbekistan",
        "value": "Uzbekistan"
      }, {
        "val": "vanuatu",
        "value": "Vanuatu"
      }, {
        "val": "venezuela",
        "value": "Venezuela"
      }, {
        "val": "vietnam",
        "value": "Vietnam"
      }, {
        "val": "virgin-islands-u-s",
        "value": "Virgin islands (U.S.)"
      }, {
        "val": "yemen",
        "value": "Yemen"
      }, {
        "val": "zambia",
        "value": "Zambia"
      }, {
        "val": "zimbabwe",
        "value": "Zimbabwe"
      }],
      stateOptions: [{
        val: 'alabama',
        'value': 'Alabama'
      }, {
        val: 'alaska',
        'value': 'Alaska'
      }, {
        val: 'arizona',
        'value': 'Arizona'
      }, {
        val: 'arkansas',
        'value': 'Arkansas'
      }, {
        val: 'california',
        'value': 'California'
      }, {
        val: 'colorado',
        'value': 'Colorado'
      }, {
        val: 'connecticut',
        'value': 'Connecticut'
      }, {
        val: 'delaware',
        'value': 'Delaware'
      }, {
        val: 'district-of-columbia',
        'value': 'District of Columbia'
      }, {
        val: 'florida',
        'value': 'Florida'
      }, {
        val: 'georgia',
        'value': 'Georgia'
      }, {
        val: 'hawaii',
        'value': 'Hawaii'
      }, {
        val: 'idaho',
        'value': 'Idaho'
      }, {
        val: 'illinois',
        'value': 'Illinois'
      }, {
        val: 'indiana',
        'value': 'Indiana'
      }, {
        val: 'iowa',
        'value': 'Iowa'
      }, {
        val: 'kansas',
        'value': 'Kansas'
      }, {
        val: 'kentucky',
        'value': 'Kentucky'
      }, {
        val: 'louisiana',
        'value': 'Louisiana'
      }, {
        val: 'maine',
        'value': 'Maine'
      }, {
        val: 'maryland',
        'value': 'Maryland'
      }, {
        val: 'massachusetts',
        'value': 'Massachusetts'
      }, {
        val: 'michigan',
        'value': 'Michigan'
      }, {
        val: 'minnesota',
        'value': 'Minnesota'
      }, {
        val: 'mississippi',
        'value': 'Mississippi'
      }, {
        val: 'missouri',
        'value': 'Missouri'
      }, {
        val: 'montana',
        'value': 'Montana'
      }, {
        val: 'nebraska',
        'value': 'Nebraska'
      }, {
        val: 'nevada',
        'value': 'Nevada'
      }, {
        val: 'new-hampshire',
        'value': 'New Hampshire'
      }, {
        val: 'new-jersey',
        'value': 'New Jersey'
      }, {
        val: 'new-mexico',
        'value': 'New Mexico'
      }, {
        val: 'new-york',
        'value': 'New York'
      }, {
        val: 'north-carolina',
        'value': 'North Carolina'
      }, {
        val: 'north-dakota',
        'value': 'North Dakota'
      }, {
        val: 'ohio',
        'value': 'Ohio'
      }, {
        val: 'oklahoma',
        'value': 'Oklahoma'
      }, {
        val: 'oregon',
        'value': 'Oregon'
      }, {
        val: 'pennsylvania',
        'value': 'Pennsylvania'
      }, {
        val: 'rhode-island',
        'value': 'Rhode Island'
      }, {
        val: 'south-carolina',
        'value': 'South Carolina'
      }, {
        val: 'south-dakota',
        'value': 'South Dakota'
      }, {
        val: 'tennessee',
        'value': 'Tennessee'
      }, {
        val: 'texas',
        'value': 'Texas'
      }, {
        val: 'utah',
        'value': 'Utah'
      }, {
        val: 'vermont',
        'value': 'Vermont'
      }, {
        val: 'virginia',
        'value': 'Virginia'
      }, {
        val: 'washington',
        'value': 'Washington'
      }, {
        val: 'west-virginia',
        'value': 'West Virginia'
      }, {
        val: 'wisconsin',
        'value': 'Wisconsin'
      }, {
        val: 'wyoming',
        'value': 'Wyoming'
      }],
      advanceTooltip: [{
        "val": "accepts-healthy-volunteers",
        "text": "Healthy volunteers may participate in the study"
      }, {
        "val": "birth-to-17-years",
        "text": "Child (birth-17 years)"
      }, {
        "val": "18-to-64-years",
        "text": " Adult (18-64 years)"
      }, {
        "val": "64-years",
        "text": " Older adult (65+ years)"
      }, {
        "val": "yes",
        "text": "Available"
      }, {
        "val": "no",
        "text": " No longer available"
      }, {
        "val": "temporarily",
        "text": " Temporarily not available"
      }, {
        "val": "approved",
        "text": " Approved for marketing"
      }, {
        "val": "nih",
        "text": "NIH"
      }, {
        "val": "u-s-fed",
        "text": "Other U.S. federal agency"
      }, {
        "val": "industry",
        "text": "Industry"
      }, {
        "val": "other",
        "text": "All others (individuals, universities, organizations)"
      }, {
        "val": "early-phase-1",
        "text": "Early phase 1"
      }, {
        "val": "phase-1",
        "text": "Phase 1"
      }, {
        "val": "phase-2",
        "text": "Phase 2"
      }, {
        "val": "phase-3",
        "text": "Phase 3"
      }, {
        "val": "phase-4",
        "text": "Phase 4"
      }, {
        "val": "n-a",
        "text": "Not applicable"
      }, {
        "val": "all",
        "text": "All"
      }, {
        "val": "female",
        "text": " Studies with female participants"
      }, {
        "val": "male",
        "text": " Studies with male participants"
      }, {
        "val": "not-yet-recruiting",
        "text": "Not yet recruiting"
      }, {
        "val": "recruiting",
        "text": " Recruiting"
      }, {
        "val": "enrolling-by-invitation",
        "text": "Enrolling by invitation"
      }, {
        "val": "active-not-recruiting",
        "text": " Active, not recruiting"
      }, {
        "val": "other",
        "text": " Other"
      }, {
        "val": "suspended",
        "text": " Suspended "
      }, {
        "val": "terminated",
        "text": " Terminated"
      }, {
        "val": "completed",
        "text": " Completed"
      }, {
        "val": "withdrawn",
        "text": " Withdrawn"
      }, {
        "val": "unknown-status",
        "text": " Unknown status"
      }, {
        "val": "protocol",
        "text": "Study protocols"
      }, {
        "val": "sap",
        "text": "Statistical analysis plans (SAPs)"
      }, {
        "val": "icf",
        "text": "Informed consent forms (ICFs)"
      }, {
        "val": "",
        "text": " All studies"
      }, {
        "val": "yes",
        "text": " Studies with results"
      }, {
        "val": "no",
        "text": " Studies without results"
      }, {
        "val": "all",
        "text": " All studies"
      }, {
        "val": "interventional",
        "text": " Interventional studies"
      }, {
        "val": "observational",
        "text": " Observational studies"
      }, {
        "val": "observational-patient-registry",
        "text": " Patient registries"
      }, {
        "val": "expanded-access",
        "text": " Expanded access studies"
      }, {
        "val": "individual-patients",
        "text": " Individual patients"
      }, {
        "val": "intermediate-size-population",
        "text": " Intermediate-size population"
      }, {
        "val": "treatment-protocol",
        "text": " Treatment IND/protocol"
      }]
    };
    module.exports = UTILITY;
  }, {
    "@lvchengbin/url": 49
  }],
  "GtKU1F": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        !function (e, t, n) {
          "use strict";

          function s(e) {
            var t = Array.prototype.slice.call(arguments, 1);
            return e.prop ? e.prop.apply(e, t) : e.attr.apply(e, t);
          }

          function a(e, t, n) {
            var s, a;

            for (s in n) {
              n.hasOwnProperty(s) && (a = s.replace(/ |$/g, t.eventNamespace), e.bind(a, n[s]));
            }
          }

          function i(e, t, n) {
            a(e, n, {
              focus: function focus() {
                t.addClass(n.focusClass);
              },
              blur: function blur() {
                t.removeClass(n.focusClass), t.removeClass(n.activeClass);
              },
              mouseenter: function mouseenter() {
                t.addClass(n.hoverClass);
              },
              mouseleave: function mouseleave() {
                t.removeClass(n.hoverClass), t.removeClass(n.activeClass);
              },
              "mousedown touchbegin": function mousedownTouchbegin() {
                e.is(":disabled") || t.addClass(n.activeClass);
              },
              "mouseup touchend": function mouseupTouchend() {
                t.removeClass(n.activeClass);
              }
            });
          }

          function r(e, t) {
            e.removeClass(t.hoverClass + " " + t.focusClass + " " + t.activeClass);
          }

          function l(e, t, n) {
            n ? e.addClass(t) : e.removeClass(t);
          }

          function u(e, t, n) {
            setTimeout(function () {
              var s = "checked",
                  a = t.is(":" + s);
              t.attr("readonly") || (t.prop ? t.prop(s, a) : a ? t.attr(s, s) : t.removeAttr(s)), l(e, n.checkedClass, a);
            }, 1);
          }

          function o(e, t, n) {
            l(e, n.disabledClass, t.is(":disabled"));
          }

          function c(e, t, n) {
            switch (n) {
              case "after":
                return e.after(t), e.next();

              case "before":
                return e.before(t), e.prev();

              case "wrap":
                return e.wrap(t), e.parent();
            }

            return null;
          }

          function d(e, n, a) {
            var i, r, l;
            return a || (a = {}), a = t.extend({
              bind: {},
              divClass: null,
              divWrap: "wrap",
              spanClass: null,
              spanHtml: null,
              spanWrap: "wrap"
            }, a), i = t("<div />"), r = t("<span />"), n.autoHide && e.is(":hidden") && "none" === e.css("display") && i.hide(), a.divClass && i.addClass(a.divClass), n.wrapperClass && i.addClass(n.wrapperClass), a.spanClass && r.addClass(a.spanClass), l = s(e, "id"), n.useID && l && s(i, "id", n.idPrefix + "-" + l), a.spanHtml && r.html(a.spanHtml), i = c(e, i, a.divWrap), r = c(e, r, a.spanWrap), o(i, e, n), {
              div: i,
              span: r
            };
          }

          function f(e, n) {
            var s;
            return n.wrapperClass ? (s = t("<span />").addClass(n.wrapperClass), s = c(e, s, "wrap")) : null;
          }

          function p() {
            var n, s, a, i;
            return i = "rgb(120,2,153)", s = t('<div style="width:0;height:0;color:' + i + '">'), t("body").append(s), a = s.get(0), n = e.getComputedStyle ? e.getComputedStyle(a, "").color : (a.currentStyle || a.style || {}).color, s.remove(), n.replace(/ /g, "") !== i;
          }

          function m(e) {
            return e ? t("<span />").text(e).html() : "";
          }

          function v() {
            return navigator.cpuClass && !navigator.product;
          }

          function h() {
            return void 0 !== e.XMLHttpRequest;
          }

          function C(e) {
            var t;
            return !!e[0].multiple || (t = s(e, "size"), !(!t || t <= 1));
          }

          function b() {
            return !1;
          }

          function y(e, t) {
            var n = "none";
            a(e, t, {
              "selectstart dragstart mousedown": b
            }), e.css({
              MozUserSelect: n,
              msUserSelect: n,
              webkitUserSelect: n,
              userSelect: n
            });
          }

          function w(e, n, s) {
            var a = t.map(e[0].files, function (e) {
              return e.name;
            }).join(", ");
            "" === a ? a = s.fileDefaultHtml : (a = a.split(/[\/\\]+/), a = a[a.length - 1]), n.text(a);
          }

          function g(e, t, n) {
            var s, a;

            for (s = [], e.each(function () {
              var e;

              for (e in t) {
                Object.prototype.hasOwnProperty.call(t, e) && (s.push({
                  el: this,
                  name: e,
                  old: this.style[e]
                }), this.style[e] = t[e]);
              }
            }), n(); s.length;) {
              a = s.pop(), a.el.style[a.name] = a.old;
            }
          }

          function k(e, t) {
            var n;
            n = e.parents(), n.push(e[0]), n = n.not(":visible"), g(n, {
              visibility: "hidden",
              display: "block",
              position: "absolute"
            }, t);
          }

          function H(e, t) {
            return function () {
              e.unwrap().unwrap().unbind(t.eventNamespace);
            };
          }

          var x = !0,
              A = !1,
              W = [{
            match: function match(e) {
              return e.is("a, button, :submit, :reset, input[type='button']");
            },
            apply: function apply(t, n) {
              var l, u, c, f, p;
              return u = n.submitDefaultHtml, t.is(":reset") && (u = n.resetDefaultHtml), f = t.is("a, button") ? function () {
                return t.html() || u;
              } : function () {
                return m(s(t, "value")) || u;
              }, c = d(t, n, {
                divClass: n.buttonClass,
                spanHtml: f()
              }), l = c.div, i(t, l, n), p = !1, a(l, n, {
                "click touchend": function clickTouchend() {
                  var n, a, i, r;
                  return !p && !t.is(":disabled") && (p = !0, t[0].dispatchEvent ? (n = document.createEvent("MouseEvents"), n.initEvent("click", !0, !0), a = t[0].dispatchEvent(n), t.is("a") && a && (i = s(t, "target"), r = s(t, "href"), i && "_self" !== i ? e.open(r, i) : document.location.href = r)) : t.click(), void (p = !1));
                }
              }), y(l, n), {
                remove: function remove() {
                  return l.after(t), l.remove(), t.unbind(n.eventNamespace), t;
                },
                update: function update() {
                  r(l, n), o(l, t, n), t.detach(), c.span.html(f()).append(t);
                }
              };
            }
          }, {
            match: function match(e) {
              return e.is(":checkbox");
            },
            apply: function apply(e, t) {
              var n, s, l;
              return n = d(e, t, {
                divClass: t.checkboxClass
              }), s = n.div, l = n.span, i(e, s, t), a(e, t, {
                "click touchend": function clickTouchend() {
                  u(l, e, t);
                }
              }), u(l, e, t), {
                remove: H(e, t),
                update: function update() {
                  r(s, t), l.removeClass(t.checkedClass), u(l, e, t), o(s, e, t);
                }
              };
            }
          }, {
            match: function match(e) {
              return e.is(":file");
            },
            apply: function apply(e, n) {
              function l() {
                w(e, p, n);
              }

              var u,
                  f,
                  p,
                  m,
                  h = "undefined" != typeof e.attr("multiple");
              return u = d(e, n, {
                divClass: n.fileClass,
                spanClass: n.fileButtonClass,
                spanHtml: h ? n.filesButtonHtml : n.fileButtonHtml,
                spanWrap: "after"
              }), f = u.div, m = u.span, p = t("<span />").html(n.fileDefaultHtml), p.addClass(n.filenameClass), p = c(e, p, "after"), s(e, "size") || s(e, "size", f.width() / 10), i(e, f, n), l(), v() ? a(e, n, {
                click: function click() {
                  e.trigger("change"), setTimeout(l, 0);
                }
              }) : a(e, n, {
                change: l
              }), y(p, n), y(m, n), {
                remove: function remove() {
                  return p.remove(), m.remove(), e.unwrap().unbind(n.eventNamespace);
                },
                update: function update() {
                  r(f, n), w(e, p, n), o(f, e, n);
                }
              };
            }
          }, {
            match: function match(e) {
              if (e.is("input")) {
                var t = (" " + s(e, "type") + " ").toLowerCase(),
                    n = " color date datetime datetime-local email month number password search tel text time url week ";
                return n.indexOf(t) >= 0;
              }

              return !1;
            },
            apply: function apply(e, t) {
              var n, a;
              return n = s(e, "type"), e.addClass(t.inputClass), a = f(e, t), i(e, e, t), t.inputAddTypeAsClass && e.addClass(n), {
                remove: function remove() {
                  e.removeClass(t.inputClass), t.inputAddTypeAsClass && e.removeClass(n), a && e.unwrap();
                },
                update: b
              };
            }
          }, {
            match: function match(e) {
              return e.is(":radio");
            },
            apply: function apply(e, n) {
              var l, c, f;
              return l = d(e, n, {
                divClass: n.radioClass
              }), c = l.div, f = l.span, i(e, c, n), a(e, n, {
                "click touchend": function clickTouchend() {
                  void 0 !== e.attr("name") ? t.uniform.update(t(':radio[name="' + s(e, "name") + '"]')) : t.uniform.update(e);
                }
              }), u(f, e, n), {
                remove: H(e, n),
                update: function update() {
                  r(c, n), u(f, e, n), o(c, e, n);
                }
              };
            }
          }, {
            match: function match(e) {
              return !(!e.is("select") || C(e));
            },
            apply: function apply(e, n) {
              var s, l, u, c;
              return n.selectAutoWidth && k(e, function () {
                c = e.width();
              }), s = d(e, n, {
                divClass: n.selectClass,
                spanHtml: (e.find(":selected:first") || e.find("option:first")).html(),
                spanWrap: "before"
              }), l = s.div, u = s.span, n.selectAutoWidth ? k(e, function () {
                g(t([u[0], l[0]]), {
                  display: "block"
                }, function () {
                  var e;
                  e = u.outerWidth() - u.width(), l.width(c + e), u.width(c);
                });
              }) : l.addClass("fixedWidth"), i(e, l, n), a(e, n, {
                change: function change() {
                  u.html(e.find(":selected").html()), l.removeClass(n.activeClass);
                },
                "click touchend": function clickTouchend() {
                  var t = e.find(":selected").html();
                  u.html() !== t && e.trigger("change");
                },
                keyup: function keyup() {
                  u.html(e.find(":selected").html());
                }
              }), y(u, n), {
                remove: function remove() {
                  return u.remove(), e.unwrap().unbind(n.eventNamespace), e;
                },
                update: function update() {
                  n.selectAutoWidth ? (t.uniform.restore(e), e.uniform(n)) : (r(l, n), e[0].selectedIndex = e[0].selectedIndex, u.html(e.find(":selected").html()), o(l, e, n));
                }
              };
            }
          }, {
            match: function match(e) {
              return !(!e.is("select") || !C(e));
            },
            apply: function apply(e, t) {
              var n;
              return e.addClass(t.selectMultiClass), n = f(e, t), i(e, e, t), {
                remove: function remove() {
                  e.removeClass(t.selectMultiClass), n && e.unwrap();
                },
                update: b
              };
            }
          }, {
            match: function match(e) {
              return e.is("textarea");
            },
            apply: function apply(e, t) {
              var n;
              return e.addClass(t.textareaClass), n = f(e, t), i(e, e, t), {
                remove: function remove() {
                  e.removeClass(t.textareaClass), n && e.unwrap();
                },
                update: b
              };
            }
          }];
          v() && !h() && (x = !1), t.uniform = {
            defaults: {
              activeClass: "active",
              autoHide: !0,
              buttonClass: "button",
              checkboxClass: "checker",
              checkedClass: "checked",
              disabledClass: "disabled",
              eventNamespace: ".uniform",
              fileButtonClass: "action",
              fileButtonHtml: "Choose File",
              filesButtonHtml: "Choose Files",
              fileClass: "uploader",
              fileDefaultHtml: "No file selected",
              filenameClass: "filename",
              focusClass: "focus",
              hoverClass: "hover",
              idPrefix: "uniform",
              inputAddTypeAsClass: !0,
              inputClass: "uniform-input",
              radioClass: "radio",
              resetDefaultHtml: "Reset",
              resetSelector: !1,
              selectAutoWidth: !0,
              selectClass: "selector",
              selectMultiClass: "uniform-multiselect",
              submitDefaultHtml: "Submit",
              textareaClass: "uniform",
              useID: !0,
              wrapperClass: null
            },
            elements: []
          }, t.fn.uniform = function (n) {
            var s = this;
            return n = t.extend({}, t.uniform.defaults, n), A || (A = !0, p() && (x = !1)), x ? (n.resetSelector && t(n.resetSelector).mouseup(function () {
              e.setTimeout(function () {
                t.uniform.update(s);
              }, 10);
            }), this.each(function () {
              var e,
                  s,
                  a,
                  i = t(this);
              if (i.data("uniformed")) return void t.uniform.update(i);

              for (e = 0; e < W.length; e += 1) {
                if (s = W[e], s.match(i, n)) return a = s.apply(i, n), i.data("uniformed", a), void t.uniform.elements.push(i.get(0));
              }
            })) : this;
          }, t.uniform.restore = t.fn.uniform.restore = function (e) {
            e === n && (e = t.uniform.elements), t(e).each(function () {
              var e,
                  n,
                  s = t(this);
              n = s.data("uniformed"), n && (n.remove(), e = t.inArray(this, t.uniform.elements), e >= 0 && t.uniform.elements.splice(e, 1), s.removeData("uniformed"));
            });
          }, t.uniform.update = t.fn.uniform.update = function (e) {
            e === n && (e = t.uniform.elements), t(e).each(function () {
              var e,
                  n = t(this);
              e = n.data("uniformed"), e && e.update(n, e.options);
            });
          };
        }(this, jQuery);
        ;
        browserify_shim__define__module__export__(typeof jQueryUniform != "undefined" ? jQueryUniform : window.jQueryUniform);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "jQueryUniform": [function (require, module, exports) {
    module.exports = require('GtKU1F');
  }, {}],
  49: [function (require, module, exports) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var isString = function isString(str) {
      return typeof str === 'string' || str instanceof String;
    };

    var isNumber = function isNumber(n) {
      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if ({}.toString.call(n).toLowerCase() === '[object number]') {
        return true;
      }

      if (strict) return false;
      return !isNaN(parseFloat(n)) && isFinite(n) && !/\.$/.test(n);
    };

    var isInteger = function isInteger(n) {
      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (isNumber(n, true)) return n % 1 === 0;
      if (strict) return false;

      if (isString(n)) {
        if (n === '-0') return true;
        return n.indexOf('.') < 0 && String(parseInt(n)) === n;
      }

      return false;
    };
    /**
     * BNF of IPv4 address
     *
     * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
     *
     * dec-octet = DIGIT                ; 0-9
     *           / %x31-39 DIGIT        ; 10-99
     *           / "1" 2DIGIT           ; 100-199
     *           / "2" 2DIGIT           ; 200-249
     *           / "25" %x30-35         ; 250-255
     */


    var ipv4 = function ipv4(ip) {
      if (!isString(ip)) return false;
      var pieces = ip.split('.');
      if (pieces.length !== 4) return false;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = pieces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _i22 = _step.value;
          if (!isInteger(_i22)) return false;
          if (_i22 < 0 || _i22 > 255) return false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    };
    /**
     * BNF of IPv6:
     *
     * IPv6address =                             6( h16 ":" ) ls32
     *              /                       "::" 5( h16 ":" ) ls32
     *              / [               h16 ] "::" 4( h16 ":" ) ls32
     *              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
     *              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
     *              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
     *              / [ *4( h16 ":" ) h16 ] "::"              ls32
     *              / [ *5( h16 ":" ) h16 ] "::"              h16
     *              / [ *6( h16 ":" ) h16 ] "::"
     *
     *  ls32 = ( h16 ":" h16 ) / IPv4address
     *       ; least-significant 32 bits of address
     *
     *  h16 = 1 * 4HEXDIG
     *      ; 16 bits of address represented in hexadcimal
     */


    var isIPv6 = function isIPv6(ip) {
      /**
       * An IPv6 address should have at least one colon(:)
       */
      if (ip.indexOf(':') < 0) return false;
      /**
       * An IPv6 address can start or end with '::', but cannot start or end with a single colon.
       */

      if (/(^:[^:])|([^:]:$)/.test(ip)) return false;
      /**
       * An IPv6 address should consist of colon(:), dot(.) and hexadecimel
       */

      if (!/^[0-9A-Fa-f:.]{2,}$/.test(ip)) return false;
      /**
       * An IPv6 address should not include any sequences bellow:
       * 1. a hexadecimal with length greater than 4
       * 2. three or more consecutive colons
       * 3. two or more consecutive dots
       */

      if (/[0-9A-Fa-f]{5,}|:{3,}|\.{2,}/.test(ip)) return false;
      /**
       * In an IPv6 address, the "::" can only appear once.
       */

      if (ip.split('::').length > 2) return false;
      /**
       * if the IPv6 address is in mixed form.
       */

      if (ip.indexOf('.') > -1) {
        var lastColon = ip.lastIndexOf(':');
        var hexadecimal = ip.substr(0, lastColon);
        var decimal = ip.substr(lastColon + 1);
        /**
         * the decimal part should be an valid IPv4 address.
         */

        if (!ipv4(decimal)) return false;
        /**
         * the length of the hexadecimal part should less than 6.
         */

        if (hexadecimal.split(':').length > 6) return false;
      } else {
        /**
         * An IPv6 address that is not in mixed form can at most have 8 hexadecimal sequences.
         */
        if (ip.split(':').length > 8) return false;
      }

      return true;
    };

    function encodePathname(pathname) {
      if (!pathname) return pathname;
      var splitted = pathname.split('/');
      var encoded = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = splitted[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var item = _step2.value;
          encoded.push(encodeURIComponent(item));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return encoded.join('/');
    }

    function encodeSearch(search) {
      if (!search) return search;
      return '?' + search.substr(1).replace(/[^&=]/g, function (m) {
        return encodeURIComponent(m);
      });
    }
    /**
     * <user>:<password> can only be supported with FTP scheme on IE9/10/11
     *
     * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
     * reserved = gen-delims / sub-delims
     * gen-delims = ":" / "/" / "?" / "#" / "[" / "]" / "@"
     * sub-delims = "!" / "$" / "&" / "'" / "(" / ")"
     *              / "*" / "+" / "," / ";" / "="
     *
     * pct-encoded = "%" HEXDIG HEXDIG
     */

    /**
     * protocols that always contain a // bit and must have non-empty path
     */


    var slashedProtocol = {
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

    var parse = function parse(url) {
      if (!isString(url)) return false;
      /**
       * scheme = ALPHA * ( ALPHA / DIGIT / "+" / "-" / "." )
       */

      var splitted = url.match(/^([a-zA-Z][a-zA-Z0-9+-.]*:)([^?#]*)(\?[^#]*)?(#.*)?/);
      if (!splitted) return false;

      var _splitted = _slicedToArray(splitted, 5),
          scheme = _splitted[1],
          hier = _splitted[2],
          _splitted$ = _splitted[3],
          search = _splitted$ === void 0 ? '' : _splitted$,
          _splitted$2 = _splitted[4],
          hash = _splitted$2 === void 0 ? '' : _splitted$2;

      var protocol = scheme.toLowerCase();
      var username = '';
      var password = '';
      var href = protocol;
      var origin = protocol;
      var port = '';
      var pathname = '/';
      var hostname = '';

      if (slashedProtocol[protocol]) {
        if (/^[:/?#[]@]*$/.test(hier)) return false;
        hier = '//' + hier.replace(/^\/+/, '');
        href += '//';
        origin += '//';
      }
      /**
       * hier-part = "//" authority path-abempty
       *              / path-absolute
       *              / path-rootless
       *              / path-empty
       * authority = [ userinfo "@" ] host [ ":" port ]
       * userinfo = *( unreserved / pct-encoded /sub-delims / ":" )
       *
       * path = path-abempty      ; begins with "/" or is empty
       *      / path-absolute     ; begins with "/" but not "//"
       *      / path-noscheme     ; begins with a non-colon segment
       *      / path-rootless     ; begins with a segment
       *      / path-empty        ; zero characters
       *
       * path-abempty     = *( "/" segment )
       * path-absolute    = "/" [ segment-nz *( "/" segment ) ]
       * path-noscheme    = segment-nz-nc *( "/" segment )
       * path-rootless    = segment-nz *( "/" segment )
       * path-empty       = 0<pchar>
       * segment          = *pchar
       * segment-nz       = 1*pchar
       * setment-nz-nc    = 1*( unreserved / pct-encoded /sub-delims / "@" )
       *                  ; non-zero-length segment without any colon ":"
       *
       * pchar            = unreserved / pct-encoded /sub-delims / ":" / "@"
       *
       * host = IP-literal / IPv4address / reg-name
       * IP-leteral = "[" ( IPv6address / IpvFuture ) "]"
       * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
       * reg-name = *( unreserved / pct-encoded / sub-delims )
       *
       * PORT = *DIGIT
       * A TCP header is limited to 16-bits for the source/destination port field.
       * @see http://www.faqs.org/rfcs/rfc793.html
       */

      /**
       * "//" authority path-abempty
       */


      if (slashedProtocol[protocol]) {
        var matches = hier.substr(2).match(/(?:(?:(?:([^:/?#[\]@]*):([^:/?#[\]@]*))?@)|^)([^:/?#[\]@]+|\[[^/?#[\]@]+\])(?::([0-9]+))?(\/.*|\/)?$/);
        if (!matches) return false;

        var _matches = _slicedToArray(matches, 6);

        var _matches$ = _matches[1];
        username = _matches$ === void 0 ? '' : _matches$;
        var _matches$2 = _matches[2];
        password = _matches$2 === void 0 ? '' : _matches$2;
        var _matches$3 = _matches[3];
        hostname = _matches$3 === void 0 ? '' : _matches$3;
        var _matches$4 = _matches[4];
        port = _matches$4 === void 0 ? '' : _matches$4;
        var _matches$5 = _matches[5];
        pathname = _matches$5 === void 0 ? '/' : _matches$5;
        if (port && port > 65535) return false;

        if (username || password) {
          if (username) {
            href += username;
          }

          if (password) {
            href += ':' + password;
          }

          href += '@';
        }
        /**
         * To check the format of IPv4
         * includes: 1.1.1.1, 1.1, 1.1.
         * excludes: .1.1, 1.1..
         */


        if (/^[\d.]+$/.test(hostname) && hostname.charAt(0) !== '.' && hostname.indexOf('..') < 0) {
          var ip = hostname.replace(/\.+$/, '');

          if (!ipv4(ip)) {
            var pieces = ip.split('.');
            if (pieces.length > 4) return false;
            /**
             * 300 => 0.0.1.44
             * 2 => 0.0.0.2
             */

            if (pieces.length === 1) {
              var n = pieces[0];
              ip = [n >> 24 & 0xff, n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff].join('.');
            } else {
              var l = pieces.length;

              if (l < 4) {
                pieces.splice.apply(pieces, [l - 1, 0].concat(_toConsumableArray(Array(3 - l).join(0).split(''))));
              }

              ip = pieces.join('.');
            }

            if (!ipv4(ip)) return false;
          }

          hostname = ip;
        } else if (hostname.charAt(0) === '[') {
          if (!isIPv6(hostname.substr(1, hostname.length - 2))) return false;
        }

        href += hostname;
        origin += hostname;

        if (port) {
          href += ':' + port;
          origin += ':' + port;
        }

        href += pathname;
      } else {
        pathname = hier;
        href += hier;
        origin = null;
      }

      href += search + hash;
      var host = hostname + (port ? ':' + port : '');
      var hierPart = hier.substr(0, 2) === '//' && host ? '//' : '';

      if (username || password) {
        hierPart += "".concat(username || '', ":").concat(password || '', "@");
      }

      hierPart += host;
      search = encodeSearch(search);

      if (pathname && pathname.charAt(0) !== '/') {
        pathname = '/' + pathname;
      }

      return {
        href: href,
        protocol: protocol,
        origin: origin,
        username: username,
        password: password,
        hostname: hostname,
        host: hostname + (port ? ':' + port : ''),
        pathname: encodePathname(pathname),
        search: search,
        hash: hash,
        port: port,
        hier: hierPart
      };
    };

    var resolvePath = function resolvePath(from, to) {
      var dot = /\/\.\//g;
      var dotdot = /\/[^/]+\/\.\.|[^/]+\/\.\.\//;
      var path = from.replace(/[^/]+$/, '') + to.replace(/^\//, '');
      path = path.replace(dot, '/');

      while (path.match(dotdot)) {
        path = path.replace(dotdot, '');
      }

      path = path.replace(/^[./]+/, '');
      if (path.charAt(0) === '/') return path;
      return '/' + path;
    };

    var resolve = function resolve(from, to) {
      var original = from;
      /**
       * the "from" must be a valid full URL string.
       */

      from = parse(from);

      if (!from) {
        throw new TypeError('The first paramter must be a valid URL string.');
      }

      if (!to) return original;
      /**
       * if "to" is a valid full URL string, return "to".
       */

      if (parse(to)) return to;

      if (to.substr(0, 2) === '//') {
        return from.protocol + to;
      } // absolute path


      if (to.charAt(0) === '/') {
        return from.protocol + from.hier + to;
      }

      if (/^\.+\//.test(to)) {
        return from.protocol + from.hier + resolvePath(from.pathname, to);
      }

      if (to.charAt(0) === '#') {
        return from.href.replace(/#.*$/i, '') + to;
      }

      if (to.charAt(0) === '?') {
        return from.protocol + from.hier + from.pathname + to;
      }

      return from.protocol + from.hier + resolvePath(from.pathname, '/' + to);
    };

    var decode = function decode(str) {
      return decodeURIComponent(String(str).replace(/\+/g, ' '));
    };

    var URLSearchParams =
    /*#__PURE__*/
    function () {
      function URLSearchParams(init) {
        _classCallCheck(this, URLSearchParams);

        this.dict = [];
        if (!init) return;

        if (URLSearchParams.prototype.isPrototypeOf(init)) {
          return new URLSearchParams(init.toString());
        }

        if (Array.isArray(init)) {
          throw new TypeError('Failed to construct "URLSearchParams": The provided value cannot be converted to a sequence.');
        }

        if (typeof init === 'string') {
          if (init.charAt(0) === '?') {
            init = init.slice(1);
          }

          var pairs = init.split(/&+/);
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = pairs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var item = _step3.value;
              var index = item.indexOf('=');
              this.append(index > -1 ? item.slice(0, index) : item, index > -1 ? item.slice(index + 1) : '');
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          return;
        }

        for (var attr in init) {
          this.append(attr, init[attr]);
        }
      }

      _createClass(URLSearchParams, [{
        key: "append",
        value: function append(name, value) {
          this.dict.push([decode(name), decode(value)]);
        }
      }, {
        key: "delete",
        value: function _delete(name) {
          var dict = this.dict;

          for (var _i23 = 0, l = dict.length; _i23 < l; _i23 += 1) {
            if (dict[_i23][0] == name) {
              dict.splice(_i23, 1);
              _i23--;
              l--;
            }
          }
        }
      }, {
        key: "get",
        value: function get(name) {
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = this.dict[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var item = _step4.value;

              if (item[0] == name) {
                return item[1];
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          return null;
        }
      }, {
        key: "getAll",
        value: function getAll(name) {
          var res = [];
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = this.dict[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var item = _step5.value;

              if (item[0] == name) {
                res.push(item[1]);
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          return res;
        }
      }, {
        key: "has",
        value: function has(name) {
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = this.dict[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var item = _step6.value;

              if (item[0] == name) {
                return true;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }

          return false;
        }
      }, {
        key: "set",
        value: function set(name, value) {
          var set = false;

          for (var _i24 = 0, l = this.dict.length; _i24 < l; _i24 += 1) {
            var item = this.dict[_i24];

            if (item[0] == name) {
              if (set) {
                this.dict.splice(_i24, 1);
                _i24--;
                l--;
              } else {
                item[1] = String(value);
                set = true;
              }
            }
          }

          if (!set) {
            this.dict.push([name, String(value)]);
          }
        }
        /**
         * Array.prototype.sort is not stable.
         * http://ecma-international.org/ecma-262/6.0/#sec-array.prototype.sort
         *
         * the URLSearchParams.sort should be a stable sorting algorithm method.
         * 
         * To use inseration sort while the length of the array little than 100, otherwise, using the merge sort instead.
         * It was identified by nodejs and v8;
         * https://github.com/nodejs/node/blob/master/lib/internal/url.js
         * https://github.com/v8/v8/blob/master/src/js/array.js
         */

      }, {
        key: "sort",
        value: function sort() {
          var a = this.dict;
          var n = a.length;
          if (n <= 2) ;else if (n < 100) {
            // insertion sort
            for (var _i25 = 1; _i25 < n; _i25 += 1) {
              var item = a[_i25];
              var j = _i25 - 1;

              while (j >= 0 && item[0] < a[j][0]) {
                a[j + 1] = a[j];
                j -= 1;
              }

              a[j + 1] = item;
            }
          } else {
            /**
             * Bottom-up iterative merge sort
             */
            for (var c = 1; c <= n - 1; c = 2 * c) {
              for (var l = 0; l < n - 1; l += 2 * c) {
                var m = l + c - 1;

                var _r = Math.min(l + 2 * c - 1, n - 1);

                if (m > _r) continue;
                merge(a, l, m, _r);
              }
            }
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          var dict = [];
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = this.dict[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var item = _step7.value;
              dict.push([item[0], item[1]]);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }

          return dict;
        }
      }, {
        key: "keys",
        value: function keys() {
          var keys = [];
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = this.dict[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var item = _step8.value;
              keys.push(item[0]);
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          return keys;
        }
      }, {
        key: "values",
        value: function values() {
          var values = [];
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = this.dict[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var item = _step9.value;
              values.push(item[1]);
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          return values;
        }
      }, {
        key: "toString",
        value: function toString() {
          var pairs = [];
          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = this.dict[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var item = _step10.value;
              pairs.push(encodeURIComponent(item[0]) + '=' + encodeURIComponent(item[1]));
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }

          return pairs.join('&');
        }
      }]);

      return URLSearchParams;
    }(); // function for merge sort


    function merge(a, l, m, r) {
      var n1 = m - l + 1;
      var n2 = r - m;
      var L = a.slice(l, m + 1);
      var R = a.slice(m + 1, 1 + r);
      var i = 0,
          j = 0,
          k = l;

      while (i < n1 && j < n2) {
        if (L[i][0] <= R[j][0]) {
          a[k] = L[i];
          i++;
        } else {
          a[k] = R[j];
          j++;
        }

        k++;
      }

      while (i < n1) {
        a[k] = L[i];
        i++;
        k++;
      }

      while (j < n2) {
        a[k] = R[j];
        j++;
        k++;
      }
    }

    var validBaseProtocols = {
      'http:': true,
      'https:': true,
      'file:': true,
      'ftp:': true,
      'gopher': true
    };
    var attrs = ['href', 'origin', 'host', 'hash', 'hostname', 'pathname', 'port', 'protocol', 'search', 'username', 'password', 'searchParams'];

    var URL =
    /*#__PURE__*/
    function () {
      function URL(url, base) {
        _classCallCheck(this, URL);

        if (URL.prototype.isPrototypeOf(url)) {
          return new URL(url.href);
        }

        if (URL.prototype.isPrototypeOf(base)) {
          return new URL(url, base.href);
        }

        url = String(url);

        if (base !== undefined) {
          var _parsed = parse(base);

          if (!_parsed || !validBaseProtocols[_parsed.protocol]) {
            throw new TypeError('Failed to construct "URL": Invalid base URL');
          }

          if (parse(url)) base = null;
        } else {
          if (!parse(url)) {
            throw new TypeError('Failed to construct "URL": Invalid URL');
          }
        }

        if (base) {
          url = resolve(base, url);
        }

        var parsed = parse(url);

        for (var _i26 = 0, _attrs = attrs; _i26 < _attrs.length; _i26++) {
          var item = _attrs[_i26];
          this[item] = parsed[item];
        }

        this.searchParams = new URLSearchParams(this.search);
      }

      _createClass(URL, [{
        key: "toString",
        value: function toString() {
          return this.href;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.href;
        }
      }]);

      return URL;
    }();

    exports.URL = URL;
    exports.URLSearchParams = URLSearchParams;
    exports.parse = parse;
    exports.resolve = resolve;
  }, {}],
  "+Jzwe3": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        (function e(t, n, r) {
          function s(o, u) {
            if (!n[o]) {
              if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
              }

              var l = n[o] = {
                exports: {}
              };
              t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e);
              }, l, l.exports, e, t, n, r);
            }

            return n[o].exports;
          }

          var i = typeof require == "function" && require;

          for (var o = 0; o < r.length; o++) {
            s(r[o]);
          }

          return s;
        })({
          1: [function (_dereq_, module, exports) {
            (function (global) {
              "use strict";

              _dereq_(327);

              _dereq_(328);

              _dereq_(2);

              if (global._babelPolyfill) {
                throw new Error("only one instance of babel-polyfill is allowed");
              }

              global._babelPolyfill = true;
              var DEFINE_PROPERTY = "defineProperty";

              function define(O, key, value) {
                O[key] || Object[DEFINE_PROPERTY](O, key, {
                  writable: true,
                  configurable: true,
                  value: value
                });
              }

              define(String.prototype, "padLeft", "".padStart);
              define(String.prototype, "padRight", "".padEnd);
              "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
                [][key] && define(Array, key, Function.call.bind([][key]));
              });
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
          }, {
            "2": 2,
            "327": 327,
            "328": 328
          }],
          2: [function (_dereq_, module, exports) {
            _dereq_(130);

            module.exports = _dereq_(23).RegExp.escape;
          }, {
            "130": 130,
            "23": 23
          }],
          3: [function (_dereq_, module, exports) {
            module.exports = function (it) {
              if (typeof it != 'function') throw TypeError(it + ' is not a function!');
              return it;
            };
          }, {}],
          4: [function (_dereq_, module, exports) {
            var cof = _dereq_(18);

            module.exports = function (it, msg) {
              if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
              return +it;
            };
          }, {
            "18": 18
          }],
          5: [function (_dereq_, module, exports) {
            // 22.1.3.31 Array.prototype[@@unscopables]
            var UNSCOPABLES = _dereq_(128)('unscopables');

            var ArrayProto = Array.prototype;
            if (ArrayProto[UNSCOPABLES] == undefined) _dereq_(42)(ArrayProto, UNSCOPABLES, {});

            module.exports = function (key) {
              ArrayProto[UNSCOPABLES][key] = true;
            };
          }, {
            "128": 128,
            "42": 42
          }],
          6: [function (_dereq_, module, exports) {
            module.exports = function (it, Constructor, name, forbiddenField) {
              if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                throw TypeError(name + ': incorrect invocation!');
              }

              return it;
            };
          }, {}],
          7: [function (_dereq_, module, exports) {
            var isObject = _dereq_(51);

            module.exports = function (it) {
              if (!isObject(it)) throw TypeError(it + ' is not an object!');
              return it;
            };
          }, {
            "51": 51
          }],
          8: [function (_dereq_, module, exports) {
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
            'use strict';

            var toObject = _dereq_(119);

            var toAbsoluteIndex = _dereq_(114);

            var toLength = _dereq_(118);

            module.exports = [].copyWithin || function copyWithin(target
            /* = 0 */
            , start
            /* = 0, end = @length */
            ) {
              var O = toObject(this);
              var len = toLength(O.length);
              var to = toAbsoluteIndex(target, len);
              var from = toAbsoluteIndex(start, len);
              var end = arguments.length > 2 ? arguments[2] : undefined;
              var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
              var inc = 1;

              if (from < to && to < from + count) {
                inc = -1;
                from += count - 1;
                to += count - 1;
              }

              while (count-- > 0) {
                if (from in O) O[to] = O[from];else delete O[to];
                to += inc;
                from += inc;
              }

              return O;
            };
          }, {
            "114": 114,
            "118": 118,
            "119": 119
          }],
          9: [function (_dereq_, module, exports) {
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
            'use strict';

            var toObject = _dereq_(119);

            var toAbsoluteIndex = _dereq_(114);

            var toLength = _dereq_(118);

            module.exports = function fill(value
            /* , start = 0, end = @length */
            ) {
              var O = toObject(this);
              var length = toLength(O.length);
              var aLen = arguments.length;
              var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
              var end = aLen > 2 ? arguments[2] : undefined;
              var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

              while (endPos > index) {
                O[index++] = value;
              }

              return O;
            };
          }, {
            "114": 114,
            "118": 118,
            "119": 119
          }],
          10: [function (_dereq_, module, exports) {
            var forOf = _dereq_(39);

            module.exports = function (iter, ITERATOR) {
              var result = [];
              forOf(iter, false, result.push, result, ITERATOR);
              return result;
            };
          }, {
            "39": 39
          }],
          11: [function (_dereq_, module, exports) {
            // false -> Array#indexOf
            // true  -> Array#includes
            var toIObject = _dereq_(117);

            var toLength = _dereq_(118);

            var toAbsoluteIndex = _dereq_(114);

            module.exports = function (IS_INCLUDES) {
              return function ($this, el, fromIndex) {
                var O = toIObject($this);
                var length = toLength(O.length);
                var index = toAbsoluteIndex(fromIndex, length);
                var value; // Array#includes uses SameValueZero equality algorithm
                // eslint-disable-next-line no-self-compare

                if (IS_INCLUDES && el != el) while (length > index) {
                  value = O[index++]; // eslint-disable-next-line no-self-compare

                  if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
                } else for (; length > index; index++) {
                  if (IS_INCLUDES || index in O) {
                    if (O[index] === el) return IS_INCLUDES || index || 0;
                  }
                }
                return !IS_INCLUDES && -1;
              };
            };
          }, {
            "114": 114,
            "117": 117,
            "118": 118
          }],
          12: [function (_dereq_, module, exports) {
            // 0 -> Array#forEach
            // 1 -> Array#map
            // 2 -> Array#filter
            // 3 -> Array#some
            // 4 -> Array#every
            // 5 -> Array#find
            // 6 -> Array#findIndex
            var ctx = _dereq_(25);

            var IObject = _dereq_(47);

            var toObject = _dereq_(119);

            var toLength = _dereq_(118);

            var asc = _dereq_(15);

            module.exports = function (TYPE, $create) {
              var IS_MAP = TYPE == 1;
              var IS_FILTER = TYPE == 2;
              var IS_SOME = TYPE == 3;
              var IS_EVERY = TYPE == 4;
              var IS_FIND_INDEX = TYPE == 6;
              var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
              var create = $create || asc;
              return function ($this, callbackfn, that) {
                var O = toObject($this);
                var self = IObject(O);
                var f = ctx(callbackfn, that, 3);
                var length = toLength(self.length);
                var index = 0;
                var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
                var val, res;

                for (; length > index; index++) {
                  if (NO_HOLES || index in self) {
                    val = self[index];
                    res = f(val, index, O);

                    if (TYPE) {
                      if (IS_MAP) result[index] = res; // map
                      else if (res) switch (TYPE) {
                          case 3:
                            return true;
                          // some

                          case 5:
                            return val;
                          // find

                          case 6:
                            return index;
                          // findIndex

                          case 2:
                            result.push(val);
                          // filter
                        } else if (IS_EVERY) return false; // every
                    }
                  }
                }

                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
              };
            };
          }, {
            "118": 118,
            "119": 119,
            "15": 15,
            "25": 25,
            "47": 47
          }],
          13: [function (_dereq_, module, exports) {
            var aFunction = _dereq_(3);

            var toObject = _dereq_(119);

            var IObject = _dereq_(47);

            var toLength = _dereq_(118);

            module.exports = function (that, callbackfn, aLen, memo, isRight) {
              aFunction(callbackfn);
              var O = toObject(that);
              var self = IObject(O);
              var length = toLength(O.length);
              var index = isRight ? length - 1 : 0;
              var i = isRight ? -1 : 1;
              if (aLen < 2) for (;;) {
                if (index in self) {
                  memo = self[index];
                  index += i;
                  break;
                }

                index += i;

                if (isRight ? index < 0 : length <= index) {
                  throw TypeError('Reduce of empty array with no initial value');
                }
              }

              for (; isRight ? index >= 0 : length > index; index += i) {
                if (index in self) {
                  memo = callbackfn(memo, self[index], index, O);
                }
              }

              return memo;
            };
          }, {
            "118": 118,
            "119": 119,
            "3": 3,
            "47": 47
          }],
          14: [function (_dereq_, module, exports) {
            var isObject = _dereq_(51);

            var isArray = _dereq_(49);

            var SPECIES = _dereq_(128)('species');

            module.exports = function (original) {
              var C;

              if (isArray(original)) {
                C = original.constructor; // cross-realm fallback

                if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

                if (isObject(C)) {
                  C = C[SPECIES];
                  if (C === null) C = undefined;
                }
              }

              return C === undefined ? Array : C;
            };
          }, {
            "128": 128,
            "49": 49,
            "51": 51
          }],
          15: [function (_dereq_, module, exports) {
            // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
            var speciesConstructor = _dereq_(14);

            module.exports = function (original, length) {
              return new (speciesConstructor(original))(length);
            };
          }, {
            "14": 14
          }],
          16: [function (_dereq_, module, exports) {
            'use strict';

            var aFunction = _dereq_(3);

            var isObject = _dereq_(51);

            var invoke = _dereq_(46);

            var arraySlice = [].slice;
            var factories = {};

            var construct = function construct(F, len, args) {
              if (!(len in factories)) {
                for (var n = [], i = 0; i < len; i++) {
                  n[i] = 'a[' + i + ']';
                } // eslint-disable-next-line no-new-func


                factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
              }

              return factories[len](F, args);
            };

            module.exports = Function.bind || function bind(that
            /* , ...args */
            ) {
              var fn = aFunction(this);
              var partArgs = arraySlice.call(arguments, 1);

              var bound = function bound()
              /* args... */
              {
                var args = partArgs.concat(arraySlice.call(arguments));
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
              };

              if (isObject(fn.prototype)) bound.prototype = fn.prototype;
              return bound;
            };
          }, {
            "3": 3,
            "46": 46,
            "51": 51
          }],
          17: [function (_dereq_, module, exports) {
            // getting tag from 19.1.3.6 Object.prototype.toString()
            var cof = _dereq_(18);

            var TAG = _dereq_(128)('toStringTag'); // ES3 wrong here


            var ARG = cof(function () {
              return arguments;
            }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

            var tryGet = function tryGet(it, key) {
              try {
                return it[key];
              } catch (e) {
                /* empty */
              }
            };

            module.exports = function (it) {
              var O, T, B;
              return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
              : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
              : ARG ? cof(O) // ES3 arguments fallback
              : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };
          }, {
            "128": 128,
            "18": 18
          }],
          18: [function (_dereq_, module, exports) {
            var toString = {}.toString;

            module.exports = function (it) {
              return toString.call(it).slice(8, -1);
            };
          }, {}],
          19: [function (_dereq_, module, exports) {
            'use strict';

            var dP = _dereq_(72).f;

            var create = _dereq_(71);

            var redefineAll = _dereq_(93);

            var ctx = _dereq_(25);

            var anInstance = _dereq_(6);

            var forOf = _dereq_(39);

            var $iterDefine = _dereq_(55);

            var step = _dereq_(57);

            var setSpecies = _dereq_(100);

            var DESCRIPTORS = _dereq_(29);

            var fastKey = _dereq_(66).fastKey;

            var validate = _dereq_(125);

            var SIZE = DESCRIPTORS ? '_s' : 'size';

            var getEntry = function getEntry(that, key) {
              // fast case
              var index = fastKey(key);
              var entry;
              if (index !== 'F') return that._i[index]; // frozen object case

              for (entry = that._f; entry; entry = entry.n) {
                if (entry.k == key) return entry;
              }
            };

            module.exports = {
              getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function (that, iterable) {
                  anInstance(that, C, NAME, '_i');
                  that._t = NAME; // collection type

                  that._i = create(null); // index

                  that._f = undefined; // first entry

                  that._l = undefined; // last entry

                  that[SIZE] = 0; // size

                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {
                  // 23.1.3.1 Map.prototype.clear()
                  // 23.2.3.2 Set.prototype.clear()
                  clear: function clear() {
                    for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                      entry.r = true;
                      if (entry.p) entry.p = entry.p.n = undefined;
                      delete data[entry.i];
                    }

                    that._f = that._l = undefined;
                    that[SIZE] = 0;
                  },
                  // 23.1.3.3 Map.prototype.delete(key)
                  // 23.2.3.4 Set.prototype.delete(value)
                  'delete': function _delete(key) {
                    var that = validate(this, NAME);
                    var entry = getEntry(that, key);

                    if (entry) {
                      var next = entry.n;
                      var prev = entry.p;
                      delete that._i[entry.i];
                      entry.r = true;
                      if (prev) prev.n = next;
                      if (next) next.p = prev;
                      if (that._f == entry) that._f = next;
                      if (that._l == entry) that._l = prev;
                      that[SIZE]--;
                    }

                    return !!entry;
                  },
                  // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                  // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                  forEach: function forEach(callbackfn
                  /* , that = undefined */
                  ) {
                    validate(this, NAME);
                    var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                    var entry;

                    while (entry = entry ? entry.n : this._f) {
                      f(entry.v, entry.k, this); // revert to the last existing entry

                      while (entry && entry.r) {
                        entry = entry.p;
                      }
                    }
                  },
                  // 23.1.3.7 Map.prototype.has(key)
                  // 23.2.3.7 Set.prototype.has(value)
                  has: function has(key) {
                    return !!getEntry(validate(this, NAME), key);
                  }
                });
                if (DESCRIPTORS) dP(C.prototype, 'size', {
                  get: function get() {
                    return validate(this, NAME)[SIZE];
                  }
                });
                return C;
              },
              def: function def(that, key, value) {
                var entry = getEntry(that, key);
                var prev, index; // change existing entry

                if (entry) {
                  entry.v = value; // create new entry
                } else {
                  that._l = entry = {
                    i: index = fastKey(key, true),
                    // <- index
                    k: key,
                    // <- key
                    v: value,
                    // <- value
                    p: prev = that._l,
                    // <- previous entry
                    n: undefined,
                    // <- next entry
                    r: false // <- removed

                  };
                  if (!that._f) that._f = entry;
                  if (prev) prev.n = entry;
                  that[SIZE]++; // add to index

                  if (index !== 'F') that._i[index] = entry;
                }

                return that;
              },
              getEntry: getEntry,
              setStrong: function setStrong(C, NAME, IS_MAP) {
                // add .keys, .values, .entries, [@@iterator]
                // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
                $iterDefine(C, NAME, function (iterated, kind) {
                  this._t = validate(iterated, NAME); // target

                  this._k = kind; // kind

                  this._l = undefined; // previous
                }, function () {
                  var that = this;
                  var kind = that._k;
                  var entry = that._l; // revert to the last existing entry

                  while (entry && entry.r) {
                    entry = entry.p;
                  } // get next entry


                  if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                    // or finish the iteration
                    that._t = undefined;
                    return step(1);
                  } // return step by kind


                  if (kind == 'keys') return step(0, entry.k);
                  if (kind == 'values') return step(0, entry.v);
                  return step(0, [entry.k, entry.v]);
                }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

                setSpecies(NAME);
              }
            };
          }, {
            "100": 100,
            "125": 125,
            "25": 25,
            "29": 29,
            "39": 39,
            "55": 55,
            "57": 57,
            "6": 6,
            "66": 66,
            "71": 71,
            "72": 72,
            "93": 93
          }],
          20: [function (_dereq_, module, exports) {
            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var classof = _dereq_(17);

            var from = _dereq_(10);

            module.exports = function (NAME) {
              return function toJSON() {
                if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
                return from(this);
              };
            };
          }, {
            "10": 10,
            "17": 17
          }],
          21: [function (_dereq_, module, exports) {
            'use strict';

            var redefineAll = _dereq_(93);

            var getWeak = _dereq_(66).getWeak;

            var anObject = _dereq_(7);

            var isObject = _dereq_(51);

            var anInstance = _dereq_(6);

            var forOf = _dereq_(39);

            var createArrayMethod = _dereq_(12);

            var $has = _dereq_(41);

            var validate = _dereq_(125);

            var arrayFind = createArrayMethod(5);
            var arrayFindIndex = createArrayMethod(6);
            var id = 0; // fallback for uncaught frozen keys

            var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
              return that._l || (that._l = new UncaughtFrozenStore());
            };

            var UncaughtFrozenStore = function UncaughtFrozenStore() {
              this.a = [];
            };

            var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
              return arrayFind(store.a, function (it) {
                return it[0] === key;
              });
            };

            UncaughtFrozenStore.prototype = {
              get: function get(key) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) return entry[1];
              },
              has: function has(key) {
                return !!findUncaughtFrozen(this, key);
              },
              set: function set(key, value) {
                var entry = findUncaughtFrozen(this, key);
                if (entry) entry[1] = value;else this.a.push([key, value]);
              },
              'delete': function _delete(key) {
                var index = arrayFindIndex(this.a, function (it) {
                  return it[0] === key;
                });
                if (~index) this.a.splice(index, 1);
                return !!~index;
              }
            };
            module.exports = {
              getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function (that, iterable) {
                  anInstance(that, C, NAME, '_i');
                  that._t = NAME; // collection type

                  that._i = id++; // collection id

                  that._l = undefined; // leak store for uncaught frozen objects

                  if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                });
                redefineAll(C.prototype, {
                  // 23.3.3.2 WeakMap.prototype.delete(key)
                  // 23.4.3.3 WeakSet.prototype.delete(value)
                  'delete': function _delete(key) {
                    if (!isObject(key)) return false;
                    var data = getWeak(key);
                    if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
                    return data && $has(data, this._i) && delete data[this._i];
                  },
                  // 23.3.3.4 WeakMap.prototype.has(key)
                  // 23.4.3.4 WeakSet.prototype.has(value)
                  has: function has(key) {
                    if (!isObject(key)) return false;
                    var data = getWeak(key);
                    if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                    return data && $has(data, this._i);
                  }
                });
                return C;
              },
              def: function def(that, key, value) {
                var data = getWeak(anObject(key), true);
                if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
                return that;
              },
              ufstore: uncaughtFrozenStore
            };
          }, {
            "12": 12,
            "125": 125,
            "39": 39,
            "41": 41,
            "51": 51,
            "6": 6,
            "66": 66,
            "7": 7,
            "93": 93
          }],
          22: [function (_dereq_, module, exports) {
            'use strict';

            var global = _dereq_(40);

            var $export = _dereq_(33);

            var redefine = _dereq_(94);

            var redefineAll = _dereq_(93);

            var meta = _dereq_(66);

            var forOf = _dereq_(39);

            var anInstance = _dereq_(6);

            var isObject = _dereq_(51);

            var fails = _dereq_(35);

            var $iterDetect = _dereq_(56);

            var setToStringTag = _dereq_(101);

            var inheritIfRequired = _dereq_(45);

            module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
              var Base = global[NAME];
              var C = Base;
              var ADDER = IS_MAP ? 'set' : 'add';
              var proto = C && C.prototype;
              var O = {};

              var fixMethod = function fixMethod(KEY) {
                var fn = proto[KEY];
                redefine(proto, KEY, KEY == 'delete' ? function (a) {
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                } : KEY == 'has' ? function has(a) {
                  return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                } : KEY == 'get' ? function get(a) {
                  return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                } : KEY == 'add' ? function add(a) {
                  fn.call(this, a === 0 ? 0 : a);
                  return this;
                } : function set(a, b) {
                  fn.call(this, a === 0 ? 0 : a, b);
                  return this;
                });
              };

              if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
                new C().entries().next();
              }))) {
                // create collection constructor
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                redefineAll(C.prototype, methods);
                meta.NEED = true;
              } else {
                var instance = new C(); // early implementations not supports chaining

                var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

                var THROWS_ON_PRIMITIVES = fails(function () {
                  instance.has(1);
                }); // most early implementations doesn't supports iterables, most modern - not close it correctly

                var ACCEPT_ITERABLES = $iterDetect(function (iter) {
                  new C(iter);
                }); // eslint-disable-line no-new
                // for early implementations -0 and +0 not the same

                var BUGGY_ZERO = !IS_WEAK && fails(function () {
                  // V8 ~ Chromium 42- fails only with 5+ elements
                  var $instance = new C();
                  var index = 5;

                  while (index--) {
                    $instance[ADDER](index, index);
                  }

                  return !$instance.has(-0);
                });

                if (!ACCEPT_ITERABLES) {
                  C = wrapper(function (target, iterable) {
                    anInstance(target, C, NAME);
                    var that = inheritIfRequired(new Base(), target, C);
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                    return that;
                  });
                  C.prototype = proto;
                  proto.constructor = C;
                }

                if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                  fixMethod('delete');
                  fixMethod('has');
                  IS_MAP && fixMethod('get');
                }

                if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

                if (IS_WEAK && proto.clear) delete proto.clear;
              }

              setToStringTag(C, NAME);
              O[NAME] = C;
              $export($export.G + $export.W + $export.F * (C != Base), O);
              if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
              return C;
            };
          }, {
            "101": 101,
            "33": 33,
            "35": 35,
            "39": 39,
            "40": 40,
            "45": 45,
            "51": 51,
            "56": 56,
            "6": 6,
            "66": 66,
            "93": 93,
            "94": 94
          }],
          23: [function (_dereq_, module, exports) {
            var core = module.exports = {
              version: '2.5.0'
            };
            if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
          }, {}],
          24: [function (_dereq_, module, exports) {
            'use strict';

            var $defineProperty = _dereq_(72);

            var createDesc = _dereq_(92);

            module.exports = function (object, index, value) {
              if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
            };
          }, {
            "72": 72,
            "92": 92
          }],
          25: [function (_dereq_, module, exports) {
            // optional / simple context binding
            var aFunction = _dereq_(3);

            module.exports = function (fn, that, length) {
              aFunction(fn);
              if (that === undefined) return fn;

              switch (length) {
                case 1:
                  return function (a) {
                    return fn.call(that, a);
                  };

                case 2:
                  return function (a, b) {
                    return fn.call(that, a, b);
                  };

                case 3:
                  return function (a, b, c) {
                    return fn.call(that, a, b, c);
                  };
              }

              return function ()
              /* ...args */
              {
                return fn.apply(that, arguments);
              };
            };
          }, {
            "3": 3
          }],
          26: [function (_dereq_, module, exports) {
            'use strict'; // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

            var fails = _dereq_(35);

            var getTime = Date.prototype.getTime;
            var $toISOString = Date.prototype.toISOString;

            var lz = function lz(num) {
              return num > 9 ? num : '0' + num;
            }; // PhantomJS / old WebKit has a broken implementations


            module.exports = fails(function () {
              return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
            }) || !fails(function () {
              $toISOString.call(new Date(NaN));
            }) ? function toISOString() {
              if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
              var d = this;
              var y = d.getUTCFullYear();
              var m = d.getUTCMilliseconds();
              var s = y < 0 ? '-' : y > 9999 ? '+' : '';
              return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
            } : $toISOString;
          }, {
            "35": 35
          }],
          27: [function (_dereq_, module, exports) {
            'use strict';

            var anObject = _dereq_(7);

            var toPrimitive = _dereq_(120);

            var NUMBER = 'number';

            module.exports = function (hint) {
              if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
              return toPrimitive(anObject(this), hint != NUMBER);
            };
          }, {
            "120": 120,
            "7": 7
          }],
          28: [function (_dereq_, module, exports) {
            // 7.2.1 RequireObjectCoercible(argument)
            module.exports = function (it) {
              if (it == undefined) throw TypeError("Can't call method on  " + it);
              return it;
            };
          }, {}],
          29: [function (_dereq_, module, exports) {
            // Thank's IE8 for his funny defineProperty
            module.exports = !_dereq_(35)(function () {
              return Object.defineProperty({}, 'a', {
                get: function get() {
                  return 7;
                }
              }).a != 7;
            });
          }, {
            "35": 35
          }],
          30: [function (_dereq_, module, exports) {
            var isObject = _dereq_(51);

            var document = _dereq_(40).document; // typeof document.createElement is 'object' in old IE


            var is = isObject(document) && isObject(document.createElement);

            module.exports = function (it) {
              return is ? document.createElement(it) : {};
            };
          }, {
            "40": 40,
            "51": 51
          }],
          31: [function (_dereq_, module, exports) {
            // IE 8- don't enum bug keys
            module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
          }, {}],
          32: [function (_dereq_, module, exports) {
            // all enumerable object keys, includes symbols
            var getKeys = _dereq_(81);

            var gOPS = _dereq_(78);

            var pIE = _dereq_(82);

            module.exports = function (it) {
              var result = getKeys(it);
              var getSymbols = gOPS.f;

              if (getSymbols) {
                var symbols = getSymbols(it);
                var isEnum = pIE.f;
                var i = 0;
                var key;

                while (symbols.length > i) {
                  if (isEnum.call(it, key = symbols[i++])) result.push(key);
                }
              }

              return result;
            };
          }, {
            "78": 78,
            "81": 81,
            "82": 82
          }],
          33: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var core = _dereq_(23);

            var hide = _dereq_(42);

            var redefine = _dereq_(94);

            var ctx = _dereq_(25);

            var PROTOTYPE = 'prototype';

            var $export = function $export(type, name, source) {
              var IS_FORCED = type & $export.F;
              var IS_GLOBAL = type & $export.G;
              var IS_STATIC = type & $export.S;
              var IS_PROTO = type & $export.P;
              var IS_BIND = type & $export.B;
              var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
              var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
              var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
              var key, own, out, exp;
              if (IS_GLOBAL) source = name;

              for (key in source) {
                // contains in native
                own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

                out = (own ? target : source)[key]; // bind timers to global for call from export context

                exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

                if (target) redefine(target, key, out, type & $export.U); // export

                if (exports[key] != out) hide(exports, key, exp);
                if (IS_PROTO && expProto[key] != out) expProto[key] = out;
              }
            };

            global.core = core; // type bitmap

            $export.F = 1; // forced

            $export.G = 2; // global

            $export.S = 4; // static

            $export.P = 8; // proto

            $export.B = 16; // bind

            $export.W = 32; // wrap

            $export.U = 64; // safe

            $export.R = 128; // real proto method for `library`

            module.exports = $export;
          }, {
            "23": 23,
            "25": 25,
            "40": 40,
            "42": 42,
            "94": 94
          }],
          34: [function (_dereq_, module, exports) {
            var MATCH = _dereq_(128)('match');

            module.exports = function (KEY) {
              var re = /./;

              try {
                '/./'[KEY](re);
              } catch (e) {
                try {
                  re[MATCH] = false;
                  return !'/./'[KEY](re);
                } catch (f) {
                  /* empty */
                }
              }

              return true;
            };
          }, {
            "128": 128
          }],
          35: [function (_dereq_, module, exports) {
            module.exports = function (exec) {
              try {
                return !!exec();
              } catch (e) {
                return true;
              }
            };
          }, {}],
          36: [function (_dereq_, module, exports) {
            'use strict';

            var hide = _dereq_(42);

            var redefine = _dereq_(94);

            var fails = _dereq_(35);

            var defined = _dereq_(28);

            var wks = _dereq_(128);

            module.exports = function (KEY, length, exec) {
              var SYMBOL = wks(KEY);
              var fns = exec(defined, SYMBOL, ''[KEY]);
              var strfn = fns[0];
              var rxfn = fns[1];

              if (fails(function () {
                var O = {};

                O[SYMBOL] = function () {
                  return 7;
                };

                return ''[KEY](O) != 7;
              })) {
                redefine(String.prototype, KEY, strfn);
                hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                ? function (string, arg) {
                  return rxfn.call(string, this, arg);
                } // 21.2.5.6 RegExp.prototype[@@match](string)
                // 21.2.5.9 RegExp.prototype[@@search](string)
                : function (string) {
                  return rxfn.call(string, this);
                });
              }
            };
          }, {
            "128": 128,
            "28": 28,
            "35": 35,
            "42": 42,
            "94": 94
          }],
          37: [function (_dereq_, module, exports) {
            'use strict'; // 21.2.5.3 get RegExp.prototype.flags

            var anObject = _dereq_(7);

            module.exports = function () {
              var that = anObject(this);
              var result = '';
              if (that.global) result += 'g';
              if (that.ignoreCase) result += 'i';
              if (that.multiline) result += 'm';
              if (that.unicode) result += 'u';
              if (that.sticky) result += 'y';
              return result;
            };
          }, {
            "7": 7
          }],
          38: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

            var isArray = _dereq_(49);

            var isObject = _dereq_(51);

            var toLength = _dereq_(118);

            var ctx = _dereq_(25);

            var IS_CONCAT_SPREADABLE = _dereq_(128)('isConcatSpreadable');

            function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
              var targetIndex = start;
              var sourceIndex = 0;
              var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
              var element, spreadable;

              while (sourceIndex < sourceLen) {
                if (sourceIndex in source) {
                  element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                  spreadable = false;

                  if (isObject(element)) {
                    spreadable = element[IS_CONCAT_SPREADABLE];
                    spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
                  }

                  if (spreadable && depth > 0) {
                    targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                  } else {
                    if (targetIndex >= 0x1fffffffffffff) throw TypeError();
                    target[targetIndex] = element;
                  }

                  targetIndex++;
                }

                sourceIndex++;
              }

              return targetIndex;
            }

            module.exports = flattenIntoArray;
          }, {
            "118": 118,
            "128": 128,
            "25": 25,
            "49": 49,
            "51": 51
          }],
          39: [function (_dereq_, module, exports) {
            var ctx = _dereq_(25);

            var call = _dereq_(53);

            var isArrayIter = _dereq_(48);

            var anObject = _dereq_(7);

            var toLength = _dereq_(118);

            var getIterFn = _dereq_(129);

            var BREAK = {};
            var RETURN = {};

            var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
              var iterFn = ITERATOR ? function () {
                return iterable;
              } : getIterFn(iterable);
              var f = ctx(fn, that, entries ? 2 : 1);
              var index = 0;
              var length, step, iterator, result;
              if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

              if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
                result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                if (result === BREAK || result === RETURN) return result;
              } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                result = call(iterator, f, step.value, entries);
                if (result === BREAK || result === RETURN) return result;
              }
            };

            exports.BREAK = BREAK;
            exports.RETURN = RETURN;
          }, {
            "118": 118,
            "129": 129,
            "25": 25,
            "48": 48,
            "53": 53,
            "7": 7
          }],
          40: [function (_dereq_, module, exports) {
            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
            : Function('return this')();
            if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
          }, {}],
          41: [function (_dereq_, module, exports) {
            var hasOwnProperty = {}.hasOwnProperty;

            module.exports = function (it, key) {
              return hasOwnProperty.call(it, key);
            };
          }, {}],
          42: [function (_dereq_, module, exports) {
            var dP = _dereq_(72);

            var createDesc = _dereq_(92);

            module.exports = _dereq_(29) ? function (object, key, value) {
              return dP.f(object, key, createDesc(1, value));
            } : function (object, key, value) {
              object[key] = value;
              return object;
            };
          }, {
            "29": 29,
            "72": 72,
            "92": 92
          }],
          43: [function (_dereq_, module, exports) {
            var document = _dereq_(40).document;

            module.exports = document && document.documentElement;
          }, {
            "40": 40
          }],
          44: [function (_dereq_, module, exports) {
            module.exports = !_dereq_(29) && !_dereq_(35)(function () {
              return Object.defineProperty(_dereq_(30)('div'), 'a', {
                get: function get() {
                  return 7;
                }
              }).a != 7;
            });
          }, {
            "29": 29,
            "30": 30,
            "35": 35
          }],
          45: [function (_dereq_, module, exports) {
            var isObject = _dereq_(51);

            var setPrototypeOf = _dereq_(99).set;

            module.exports = function (that, target, C) {
              var S = target.constructor;
              var P;

              if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                setPrototypeOf(that, P);
              }

              return that;
            };
          }, {
            "51": 51,
            "99": 99
          }],
          46: [function (_dereq_, module, exports) {
            // fast apply, http://jsperf.lnkit.com/fast-apply/5
            module.exports = function (fn, args, that) {
              var un = that === undefined;

              switch (args.length) {
                case 0:
                  return un ? fn() : fn.call(that);

                case 1:
                  return un ? fn(args[0]) : fn.call(that, args[0]);

                case 2:
                  return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

                case 3:
                  return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

                case 4:
                  return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
              }

              return fn.apply(that, args);
            };
          }, {}],
          47: [function (_dereq_, module, exports) {
            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            var cof = _dereq_(18); // eslint-disable-next-line no-prototype-builtins


            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
              return cof(it) == 'String' ? it.split('') : Object(it);
            };
          }, {
            "18": 18
          }],
          48: [function (_dereq_, module, exports) {
            // check on default Array iterator
            var Iterators = _dereq_(58);

            var ITERATOR = _dereq_(128)('iterator');

            var ArrayProto = Array.prototype;

            module.exports = function (it) {
              return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };
          }, {
            "128": 128,
            "58": 58
          }],
          49: [function (_dereq_, module, exports) {
            // 7.2.2 IsArray(argument)
            var cof = _dereq_(18);

            module.exports = Array.isArray || function isArray(arg) {
              return cof(arg) == 'Array';
            };
          }, {
            "18": 18
          }],
          50: [function (_dereq_, module, exports) {
            // 20.1.2.3 Number.isInteger(number)
            var isObject = _dereq_(51);

            var floor = Math.floor;

            module.exports = function isInteger(it) {
              return !isObject(it) && isFinite(it) && floor(it) === it;
            };
          }, {
            "51": 51
          }],
          51: [function (_dereq_, module, exports) {
            module.exports = function (it) {
              return _typeof2(it) === 'object' ? it !== null : typeof it === 'function';
            };
          }, {}],
          52: [function (_dereq_, module, exports) {
            // 7.2.8 IsRegExp(argument)
            var isObject = _dereq_(51);

            var cof = _dereq_(18);

            var MATCH = _dereq_(128)('match');

            module.exports = function (it) {
              var isRegExp;
              return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
            };
          }, {
            "128": 128,
            "18": 18,
            "51": 51
          }],
          53: [function (_dereq_, module, exports) {
            // call something on iterator step with safe closing on error
            var anObject = _dereq_(7);

            module.exports = function (iterator, fn, value, entries) {
              try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
              } catch (e) {
                var ret = iterator['return'];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e;
              }
            };
          }, {
            "7": 7
          }],
          54: [function (_dereq_, module, exports) {
            'use strict';

            var create = _dereq_(71);

            var descriptor = _dereq_(92);

            var setToStringTag = _dereq_(101);

            var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

            _dereq_(42)(IteratorPrototype, _dereq_(128)('iterator'), function () {
              return this;
            });

            module.exports = function (Constructor, NAME, next) {
              Constructor.prototype = create(IteratorPrototype, {
                next: descriptor(1, next)
              });
              setToStringTag(Constructor, NAME + ' Iterator');
            };
          }, {
            "101": 101,
            "128": 128,
            "42": 42,
            "71": 71,
            "92": 92
          }],
          55: [function (_dereq_, module, exports) {
            'use strict';

            var LIBRARY = _dereq_(60);

            var $export = _dereq_(33);

            var redefine = _dereq_(94);

            var hide = _dereq_(42);

            var has = _dereq_(41);

            var Iterators = _dereq_(58);

            var $iterCreate = _dereq_(54);

            var setToStringTag = _dereq_(101);

            var getPrototypeOf = _dereq_(79);

            var ITERATOR = _dereq_(128)('iterator');

            var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

            var FF_ITERATOR = '@@iterator';
            var KEYS = 'keys';
            var VALUES = 'values';

            var returnThis = function returnThis() {
              return this;
            };

            module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
              $iterCreate(Constructor, NAME, next);

              var getMethod = function getMethod(kind) {
                if (!BUGGY && kind in proto) return proto[kind];

                switch (kind) {
                  case KEYS:
                    return function keys() {
                      return new Constructor(this, kind);
                    };

                  case VALUES:
                    return function values() {
                      return new Constructor(this, kind);
                    };
                }

                return function entries() {
                  return new Constructor(this, kind);
                };
              };

              var TAG = NAME + ' Iterator';
              var DEF_VALUES = DEFAULT == VALUES;
              var VALUES_BUG = false;
              var proto = Base.prototype;
              var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
              var $default = $native || getMethod(DEFAULT);
              var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
              var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
              var methods, key, IteratorPrototype; // Fix native

              if ($anyNative) {
                IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

                if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                  // Set @@toStringTag to native iterators
                  setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

                  if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                }
              } // fix Array#{values, @@iterator}.name in V8 / FF


              if (DEF_VALUES && $native && $native.name !== VALUES) {
                VALUES_BUG = true;

                $default = function values() {
                  return $native.call(this);
                };
              } // Define iterator


              if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                hide(proto, ITERATOR, $default);
              } // Plug for library


              Iterators[NAME] = $default;
              Iterators[TAG] = returnThis;

              if (DEFAULT) {
                methods = {
                  values: DEF_VALUES ? $default : getMethod(VALUES),
                  keys: IS_SET ? $default : getMethod(KEYS),
                  entries: $entries
                };
                if (FORCED) for (key in methods) {
                  if (!(key in proto)) redefine(proto, key, methods[key]);
                } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
              }

              return methods;
            };
          }, {
            "101": 101,
            "128": 128,
            "33": 33,
            "41": 41,
            "42": 42,
            "54": 54,
            "58": 58,
            "60": 60,
            "79": 79,
            "94": 94
          }],
          56: [function (_dereq_, module, exports) {
            var ITERATOR = _dereq_(128)('iterator');

            var SAFE_CLOSING = false;

            try {
              var riter = [7][ITERATOR]();

              riter['return'] = function () {
                SAFE_CLOSING = true;
              }; // eslint-disable-next-line no-throw-literal


              Array.from(riter, function () {
                throw 2;
              });
            } catch (e) {
              /* empty */
            }

            module.exports = function (exec, skipClosing) {
              if (!skipClosing && !SAFE_CLOSING) return false;
              var safe = false;

              try {
                var arr = [7];
                var iter = arr[ITERATOR]();

                iter.next = function () {
                  return {
                    done: safe = true
                  };
                };

                arr[ITERATOR] = function () {
                  return iter;
                };

                exec(arr);
              } catch (e) {
                /* empty */
              }

              return safe;
            };
          }, {
            "128": 128
          }],
          57: [function (_dereq_, module, exports) {
            module.exports = function (done, value) {
              return {
                value: value,
                done: !!done
              };
            };
          }, {}],
          58: [function (_dereq_, module, exports) {
            module.exports = {};
          }, {}],
          59: [function (_dereq_, module, exports) {
            var getKeys = _dereq_(81);

            var toIObject = _dereq_(117);

            module.exports = function (object, el) {
              var O = toIObject(object);
              var keys = getKeys(O);
              var length = keys.length;
              var index = 0;
              var key;

              while (length > index) {
                if (O[key = keys[index++]] === el) return key;
              }
            };
          }, {
            "117": 117,
            "81": 81
          }],
          60: [function (_dereq_, module, exports) {
            module.exports = false;
          }, {}],
          61: [function (_dereq_, module, exports) {
            // 20.2.2.14 Math.expm1(x)
            var $expm1 = Math.expm1;
            module.exports = !$expm1 // Old FF bug
            || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
            || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
              return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
            } : $expm1;
          }, {}],
          62: [function (_dereq_, module, exports) {
            // 20.2.2.16 Math.fround(x)
            var sign = _dereq_(65);

            var pow = Math.pow;
            var EPSILON = pow(2, -52);
            var EPSILON32 = pow(2, -23);
            var MAX32 = pow(2, 127) * (2 - EPSILON32);
            var MIN32 = pow(2, -126);

            var roundTiesToEven = function roundTiesToEven(n) {
              return n + 1 / EPSILON - 1 / EPSILON;
            };

            module.exports = Math.fround || function fround(x) {
              var $abs = Math.abs(x);
              var $sign = sign(x);
              var a, result;
              if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
              a = (1 + EPSILON32 / EPSILON) * $abs;
              result = a - (a - $abs); // eslint-disable-next-line no-self-compare

              if (result > MAX32 || result != result) return $sign * Infinity;
              return $sign * result;
            };
          }, {
            "65": 65
          }],
          63: [function (_dereq_, module, exports) {
            // 20.2.2.20 Math.log1p(x)
            module.exports = Math.log1p || function log1p(x) {
              return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
            };
          }, {}],
          64: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
              if (arguments.length === 0 // eslint-disable-next-line no-self-compare
              || x != x // eslint-disable-next-line no-self-compare
              || inLow != inLow // eslint-disable-next-line no-self-compare
              || inHigh != inHigh // eslint-disable-next-line no-self-compare
              || outLow != outLow // eslint-disable-next-line no-self-compare
              || outHigh != outHigh) return NaN;
              if (x === Infinity || x === -Infinity) return x;
              return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
            };
          }, {}],
          65: [function (_dereq_, module, exports) {
            // 20.2.2.28 Math.sign(x)
            module.exports = Math.sign || function sign(x) {
              // eslint-disable-next-line no-self-compare
              return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
            };
          }, {}],
          66: [function (_dereq_, module, exports) {
            var META = _dereq_(124)('meta');

            var isObject = _dereq_(51);

            var has = _dereq_(41);

            var setDesc = _dereq_(72).f;

            var id = 0;

            var isExtensible = Object.isExtensible || function () {
              return true;
            };

            var FREEZE = !_dereq_(35)(function () {
              return isExtensible(Object.preventExtensions({}));
            });

            var setMeta = function setMeta(it) {
              setDesc(it, META, {
                value: {
                  i: 'O' + ++id,
                  // object ID
                  w: {} // weak collections IDs

                }
              });
            };

            var fastKey = function fastKey(it, create) {
              // return primitive with prefix
              if (!isObject(it)) return _typeof2(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

              if (!has(it, META)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return 'F'; // not necessary to add metadata

                if (!create) return 'E'; // add missing metadata

                setMeta(it); // return object ID
              }

              return it[META].i;
            };

            var getWeak = function getWeak(it, create) {
              if (!has(it, META)) {
                // can't set metadata to uncaught frozen object
                if (!isExtensible(it)) return true; // not necessary to add metadata

                if (!create) return false; // add missing metadata

                setMeta(it); // return hash weak collections IDs
              }

              return it[META].w;
            }; // add metadata on freeze-family methods calling


            var onFreeze = function onFreeze(it) {
              if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
              return it;
            };

            var meta = module.exports = {
              KEY: META,
              NEED: false,
              fastKey: fastKey,
              getWeak: getWeak,
              onFreeze: onFreeze
            };
          }, {
            "124": 124,
            "35": 35,
            "41": 41,
            "51": 51,
            "72": 72
          }],
          67: [function (_dereq_, module, exports) {
            var Map = _dereq_(160);

            var $export = _dereq_(33);

            var shared = _dereq_(103)('metadata');

            var store = shared.store || (shared.store = new (_dereq_(266))());

            var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
              var targetMetadata = store.get(target);

              if (!targetMetadata) {
                if (!create) return undefined;
                store.set(target, targetMetadata = new Map());
              }

              var keyMetadata = targetMetadata.get(targetKey);

              if (!keyMetadata) {
                if (!create) return undefined;
                targetMetadata.set(targetKey, keyMetadata = new Map());
              }

              return keyMetadata;
            };

            var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
              var metadataMap = getOrCreateMetadataMap(O, P, false);
              return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
            };

            var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
              var metadataMap = getOrCreateMetadataMap(O, P, false);
              return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
            };

            var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
              getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
            };

            var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
              var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
              var keys = [];
              if (metadataMap) metadataMap.forEach(function (_, key) {
                keys.push(key);
              });
              return keys;
            };

            var toMetaKey = function toMetaKey(it) {
              return it === undefined || _typeof2(it) == 'symbol' ? it : String(it);
            };

            var exp = function exp(O) {
              $export($export.S, 'Reflect', O);
            };

            module.exports = {
              store: store,
              map: getOrCreateMetadataMap,
              has: ordinaryHasOwnMetadata,
              get: ordinaryGetOwnMetadata,
              set: ordinaryDefineOwnMetadata,
              keys: ordinaryOwnMetadataKeys,
              key: toMetaKey,
              exp: exp
            };
          }, {
            "103": 103,
            "160": 160,
            "266": 266,
            "33": 33
          }],
          68: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var macrotask = _dereq_(113).set;

            var Observer = global.MutationObserver || global.WebKitMutationObserver;
            var process = global.process;
            var Promise = global.Promise;
            var isNode = _dereq_(18)(process) == 'process';

            module.exports = function () {
              var head, last, notify;

              var flush = function flush() {
                var parent, fn;
                if (isNode && (parent = process.domain)) parent.exit();

                while (head) {
                  fn = head.fn;
                  head = head.next;

                  try {
                    fn();
                  } catch (e) {
                    if (head) notify();else last = undefined;
                    throw e;
                  }
                }

                last = undefined;
                if (parent) parent.enter();
              }; // Node.js


              if (isNode) {
                notify = function notify() {
                  process.nextTick(flush);
                }; // browsers with MutationObserver

              } else if (Observer) {
                var toggle = true;
                var node = document.createTextNode('');
                new Observer(flush).observe(node, {
                  characterData: true
                }); // eslint-disable-line no-new

                notify = function notify() {
                  node.data = toggle = !toggle;
                }; // environments with maybe non-completely correct, but existent Promise

              } else if (Promise && Promise.resolve) {
                var promise = Promise.resolve();

                notify = function notify() {
                  promise.then(flush);
                }; // for other environments - macrotask based on:
                // - setImmediate
                // - MessageChannel
                // - window.postMessag
                // - onreadystatechange
                // - setTimeout

              } else {
                notify = function notify() {
                  // strange IE + webpack dev server bug - use .call(global)
                  macrotask.call(global, flush);
                };
              }

              return function (fn) {
                var task = {
                  fn: fn,
                  next: undefined
                };
                if (last) last.next = task;

                if (!head) {
                  head = task;
                  notify();
                }

                last = task;
              };
            };
          }, {
            "113": 113,
            "18": 18,
            "40": 40
          }],
          69: [function (_dereq_, module, exports) {
            'use strict'; // 25.4.1.5 NewPromiseCapability(C)

            var aFunction = _dereq_(3);

            function PromiseCapability(C) {
              var resolve, reject;
              this.promise = new C(function ($$resolve, $$reject) {
                if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
                resolve = $$resolve;
                reject = $$reject;
              });
              this.resolve = aFunction(resolve);
              this.reject = aFunction(reject);
            }

            module.exports.f = function (C) {
              return new PromiseCapability(C);
            };
          }, {
            "3": 3
          }],
          70: [function (_dereq_, module, exports) {
            'use strict'; // 19.1.2.1 Object.assign(target, source, ...)

            var getKeys = _dereq_(81);

            var gOPS = _dereq_(78);

            var pIE = _dereq_(82);

            var toObject = _dereq_(119);

            var IObject = _dereq_(47);

            var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

            module.exports = !$assign || _dereq_(35)(function () {
              var A = {};
              var B = {}; // eslint-disable-next-line no-undef

              var S = Symbol();
              var K = 'abcdefghijklmnopqrst';
              A[S] = 7;
              K.split('').forEach(function (k) {
                B[k] = k;
              });
              return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
            }) ? function assign(target, source) {
              // eslint-disable-line no-unused-vars
              var T = toObject(target);
              var aLen = arguments.length;
              var index = 1;
              var getSymbols = gOPS.f;
              var isEnum = pIE.f;

              while (aLen > index) {
                var S = IObject(arguments[index++]);
                var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
                var length = keys.length;
                var j = 0;
                var key;

                while (length > j) {
                  if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
                }
              }

              return T;
            } : $assign;
          }, {
            "119": 119,
            "35": 35,
            "47": 47,
            "78": 78,
            "81": 81,
            "82": 82
          }],
          71: [function (_dereq_, module, exports) {
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            var anObject = _dereq_(7);

            var dPs = _dereq_(73);

            var enumBugKeys = _dereq_(31);

            var IE_PROTO = _dereq_(102)('IE_PROTO');

            var Empty = function Empty() {
              /* empty */
            };

            var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

            var _createDict = function createDict() {
              // Thrash, waste and sodomy: IE GC bug
              var iframe = _dereq_(30)('iframe');

              var i = enumBugKeys.length;
              var lt = '<';
              var gt = '>';
              var iframeDocument;
              iframe.style.display = 'none';

              _dereq_(43).appendChild(iframe);

              iframe.src = 'javascript:'; // eslint-disable-line no-script-url
              // createDict = iframe.contentWindow.Object;
              // html.removeChild(iframe);

              iframeDocument = iframe.contentWindow.document;
              iframeDocument.open();
              iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
              iframeDocument.close();
              _createDict = iframeDocument.F;

              while (i--) {
                delete _createDict[PROTOTYPE][enumBugKeys[i]];
              }

              return _createDict();
            };

            module.exports = Object.create || function create(O, Properties) {
              var result;

              if (O !== null) {
                Empty[PROTOTYPE] = anObject(O);
                result = new Empty();
                Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

                result[IE_PROTO] = O;
              } else result = _createDict();

              return Properties === undefined ? result : dPs(result, Properties);
            };
          }, {
            "102": 102,
            "30": 30,
            "31": 31,
            "43": 43,
            "7": 7,
            "73": 73
          }],
          72: [function (_dereq_, module, exports) {
            var anObject = _dereq_(7);

            var IE8_DOM_DEFINE = _dereq_(44);

            var toPrimitive = _dereq_(120);

            var dP = Object.defineProperty;
            exports.f = _dereq_(29) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPrimitive(P, true);
              anObject(Attributes);
              if (IE8_DOM_DEFINE) try {
                return dP(O, P, Attributes);
              } catch (e) {
                /* empty */
              }
              if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
              if ('value' in Attributes) O[P] = Attributes.value;
              return O;
            };
          }, {
            "120": 120,
            "29": 29,
            "44": 44,
            "7": 7
          }],
          73: [function (_dereq_, module, exports) {
            var dP = _dereq_(72);

            var anObject = _dereq_(7);

            var getKeys = _dereq_(81);

            module.exports = _dereq_(29) ? Object.defineProperties : function defineProperties(O, Properties) {
              anObject(O);
              var keys = getKeys(Properties);
              var length = keys.length;
              var i = 0;
              var P;

              while (length > i) {
                dP.f(O, P = keys[i++], Properties[P]);
              }

              return O;
            };
          }, {
            "29": 29,
            "7": 7,
            "72": 72,
            "81": 81
          }],
          74: [function (_dereq_, module, exports) {
            'use strict'; // Forced replacement prototype accessors methods

            module.exports = _dereq_(60) || !_dereq_(35)(function () {
              var K = Math.random(); // In FF throws only define methods
              // eslint-disable-next-line no-undef, no-useless-call

              __defineSetter__.call(null, K, function () {
                /* empty */
              });

              delete _dereq_(40)[K];
            });
          }, {
            "35": 35,
            "40": 40,
            "60": 60
          }],
          75: [function (_dereq_, module, exports) {
            var pIE = _dereq_(82);

            var createDesc = _dereq_(92);

            var toIObject = _dereq_(117);

            var toPrimitive = _dereq_(120);

            var has = _dereq_(41);

            var IE8_DOM_DEFINE = _dereq_(44);

            var gOPD = Object.getOwnPropertyDescriptor;
            exports.f = _dereq_(29) ? gOPD : function getOwnPropertyDescriptor(O, P) {
              O = toIObject(O);
              P = toPrimitive(P, true);
              if (IE8_DOM_DEFINE) try {
                return gOPD(O, P);
              } catch (e) {
                /* empty */
              }
              if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
            };
          }, {
            "117": 117,
            "120": 120,
            "29": 29,
            "41": 41,
            "44": 44,
            "82": 82,
            "92": 92
          }],
          76: [function (_dereq_, module, exports) {
            // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
            var toIObject = _dereq_(117);

            var gOPN = _dereq_(77).f;

            var toString = {}.toString;
            var windowNames = (typeof window === "undefined" ? "undefined" : _typeof2(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

            var getWindowNames = function getWindowNames(it) {
              try {
                return gOPN(it);
              } catch (e) {
                return windowNames.slice();
              }
            };

            module.exports.f = function getOwnPropertyNames(it) {
              return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
            };
          }, {
            "117": 117,
            "77": 77
          }],
          77: [function (_dereq_, module, exports) {
            // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
            var $keys = _dereq_(80);

            var hiddenKeys = _dereq_(31).concat('length', 'prototype');

            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
              return $keys(O, hiddenKeys);
            };
          }, {
            "31": 31,
            "80": 80
          }],
          78: [function (_dereq_, module, exports) {
            exports.f = Object.getOwnPropertySymbols;
          }, {}],
          79: [function (_dereq_, module, exports) {
            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            var has = _dereq_(41);

            var toObject = _dereq_(119);

            var IE_PROTO = _dereq_(102)('IE_PROTO');

            var ObjectProto = Object.prototype;

            module.exports = Object.getPrototypeOf || function (O) {
              O = toObject(O);
              if (has(O, IE_PROTO)) return O[IE_PROTO];

              if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
              }

              return O instanceof Object ? ObjectProto : null;
            };
          }, {
            "102": 102,
            "119": 119,
            "41": 41
          }],
          80: [function (_dereq_, module, exports) {
            var has = _dereq_(41);

            var toIObject = _dereq_(117);

            var arrayIndexOf = _dereq_(11)(false);

            var IE_PROTO = _dereq_(102)('IE_PROTO');

            module.exports = function (object, names) {
              var O = toIObject(object);
              var i = 0;
              var result = [];
              var key;

              for (key in O) {
                if (key != IE_PROTO) has(O, key) && result.push(key);
              } // Don't enum bug & hidden keys


              while (names.length > i) {
                if (has(O, key = names[i++])) {
                  ~arrayIndexOf(result, key) || result.push(key);
                }
              }

              return result;
            };
          }, {
            "102": 102,
            "11": 11,
            "117": 117,
            "41": 41
          }],
          81: [function (_dereq_, module, exports) {
            // 19.1.2.14 / 15.2.3.14 Object.keys(O)
            var $keys = _dereq_(80);

            var enumBugKeys = _dereq_(31);

            module.exports = Object.keys || function keys(O) {
              return $keys(O, enumBugKeys);
            };
          }, {
            "31": 31,
            "80": 80
          }],
          82: [function (_dereq_, module, exports) {
            exports.f = {}.propertyIsEnumerable;
          }, {}],
          83: [function (_dereq_, module, exports) {
            // most Object methods by ES6 should accept primitives
            var $export = _dereq_(33);

            var core = _dereq_(23);

            var fails = _dereq_(35);

            module.exports = function (KEY, exec) {
              var fn = (core.Object || {})[KEY] || Object[KEY];
              var exp = {};
              exp[KEY] = exec(fn);
              $export($export.S + $export.F * fails(function () {
                fn(1);
              }), 'Object', exp);
            };
          }, {
            "23": 23,
            "33": 33,
            "35": 35
          }],
          84: [function (_dereq_, module, exports) {
            var getKeys = _dereq_(81);

            var toIObject = _dereq_(117);

            var isEnum = _dereq_(82).f;

            module.exports = function (isEntries) {
              return function (it) {
                var O = toIObject(it);
                var keys = getKeys(O);
                var length = keys.length;
                var i = 0;
                var result = [];
                var key;

                while (length > i) {
                  if (isEnum.call(O, key = keys[i++])) {
                    result.push(isEntries ? [key, O[key]] : O[key]);
                  }
                }

                return result;
              };
            };
          }, {
            "117": 117,
            "81": 81,
            "82": 82
          }],
          85: [function (_dereq_, module, exports) {
            // all object keys, includes non-enumerable and symbols
            var gOPN = _dereq_(77);

            var gOPS = _dereq_(78);

            var anObject = _dereq_(7);

            var Reflect = _dereq_(40).Reflect;

            module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
              var keys = gOPN.f(anObject(it));
              var getSymbols = gOPS.f;
              return getSymbols ? keys.concat(getSymbols(it)) : keys;
            };
          }, {
            "40": 40,
            "7": 7,
            "77": 77,
            "78": 78
          }],
          86: [function (_dereq_, module, exports) {
            var $parseFloat = _dereq_(40).parseFloat;

            var $trim = _dereq_(111).trim;

            module.exports = 1 / $parseFloat(_dereq_(112) + '-0') !== -Infinity ? function parseFloat(str) {
              var string = $trim(String(str), 3);
              var result = $parseFloat(string);
              return result === 0 && string.charAt(0) == '-' ? -0 : result;
            } : $parseFloat;
          }, {
            "111": 111,
            "112": 112,
            "40": 40
          }],
          87: [function (_dereq_, module, exports) {
            var $parseInt = _dereq_(40).parseInt;

            var $trim = _dereq_(111).trim;

            var ws = _dereq_(112);

            var hex = /^[-+]?0[xX]/;
            module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
              var string = $trim(String(str), 3);
              return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
            } : $parseInt;
          }, {
            "111": 111,
            "112": 112,
            "40": 40
          }],
          88: [function (_dereq_, module, exports) {
            'use strict';

            var path = _dereq_(89);

            var invoke = _dereq_(46);

            var aFunction = _dereq_(3);

            module.exports = function ()
            /* ...pargs */
            {
              var fn = aFunction(this);
              var length = arguments.length;
              var pargs = Array(length);
              var i = 0;
              var _ = path._;
              var holder = false;

              while (length > i) {
                if ((pargs[i] = arguments[i++]) === _) holder = true;
              }

              return function ()
              /* ...args */
              {
                var that = this;
                var aLen = arguments.length;
                var j = 0;
                var k = 0;
                var args;
                if (!holder && !aLen) return invoke(fn, pargs, that);
                args = pargs.slice();
                if (holder) for (; length > j; j++) {
                  if (args[j] === _) args[j] = arguments[k++];
                }

                while (aLen > k) {
                  args.push(arguments[k++]);
                }

                return invoke(fn, args, that);
              };
            };
          }, {
            "3": 3,
            "46": 46,
            "89": 89
          }],
          89: [function (_dereq_, module, exports) {
            module.exports = _dereq_(40);
          }, {
            "40": 40
          }],
          90: [function (_dereq_, module, exports) {
            module.exports = function (exec) {
              try {
                return {
                  e: false,
                  v: exec()
                };
              } catch (e) {
                return {
                  e: true,
                  v: e
                };
              }
            };
          }, {}],
          91: [function (_dereq_, module, exports) {
            var newPromiseCapability = _dereq_(69);

            module.exports = function (C, x) {
              var promiseCapability = newPromiseCapability.f(C);
              var resolve = promiseCapability.resolve;
              resolve(x);
              return promiseCapability.promise;
            };
          }, {
            "69": 69
          }],
          92: [function (_dereq_, module, exports) {
            module.exports = function (bitmap, value) {
              return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
              };
            };
          }, {}],
          93: [function (_dereq_, module, exports) {
            var redefine = _dereq_(94);

            module.exports = function (target, src, safe) {
              for (var key in src) {
                redefine(target, key, src[key], safe);
              }

              return target;
            };
          }, {
            "94": 94
          }],
          94: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var hide = _dereq_(42);

            var has = _dereq_(41);

            var SRC = _dereq_(124)('src');

            var TO_STRING = 'toString';
            var $toString = Function[TO_STRING];
            var TPL = ('' + $toString).split(TO_STRING);

            _dereq_(23).inspectSource = function (it) {
              return $toString.call(it);
            };

            (module.exports = function (O, key, val, safe) {
              var isFunction = typeof val == 'function';
              if (isFunction) has(val, 'name') || hide(val, 'name', key);
              if (O[key] === val) return;
              if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

              if (O === global) {
                O[key] = val;
              } else if (!safe) {
                delete O[key];
                hide(O, key, val);
              } else if (O[key]) {
                O[key] = val;
              } else {
                hide(O, key, val);
              } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

            })(Function.prototype, TO_STRING, function toString() {
              return typeof this == 'function' && this[SRC] || $toString.call(this);
            });
          }, {
            "124": 124,
            "23": 23,
            "40": 40,
            "41": 41,
            "42": 42
          }],
          95: [function (_dereq_, module, exports) {
            module.exports = function (regExp, replace) {
              var replacer = replace === Object(replace) ? function (part) {
                return replace[part];
              } : replace;
              return function (it) {
                return String(it).replace(regExp, replacer);
              };
            };
          }, {}],
          96: [function (_dereq_, module, exports) {
            // 7.2.9 SameValue(x, y)
            module.exports = Object.is || function is(x, y) {
              // eslint-disable-next-line no-self-compare
              return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };
          }, {}],
          97: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

            var $export = _dereq_(33);

            var aFunction = _dereq_(3);

            var ctx = _dereq_(25);

            var forOf = _dereq_(39);

            module.exports = function (COLLECTION) {
              $export($export.S, COLLECTION, {
                from: function from(source
                /* , mapFn, thisArg */
                ) {
                  var mapFn = arguments[1];
                  var mapping, A, n, cb;
                  aFunction(this);
                  mapping = mapFn !== undefined;
                  if (mapping) aFunction(mapFn);
                  if (source == undefined) return new this();
                  A = [];

                  if (mapping) {
                    n = 0;
                    cb = ctx(mapFn, arguments[2], 2);
                    forOf(source, false, function (nextItem) {
                      A.push(cb(nextItem, n++));
                    });
                  } else {
                    forOf(source, false, A.push, A);
                  }

                  return new this(A);
                }
              });
            };
          }, {
            "25": 25,
            "3": 3,
            "33": 33,
            "39": 39
          }],
          98: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

            var $export = _dereq_(33);

            module.exports = function (COLLECTION) {
              $export($export.S, COLLECTION, {
                of: function of() {
                  var length = arguments.length;
                  var A = Array(length);

                  while (length--) {
                    A[length] = arguments[length];
                  }

                  return new this(A);
                }
              });
            };
          }, {
            "33": 33
          }],
          99: [function (_dereq_, module, exports) {
            // Works with __proto__ only. Old v8 can't work with null proto objects.

            /* eslint-disable no-proto */
            var isObject = _dereq_(51);

            var anObject = _dereq_(7);

            var check = function check(O, proto) {
              anObject(O);
              if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
            };

            module.exports = {
              set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
              function (test, buggy, set) {
                try {
                  set = _dereq_(25)(Function.call, _dereq_(75).f(Object.prototype, '__proto__').set, 2);
                  set(test, []);
                  buggy = !(test instanceof Array);
                } catch (e) {
                  buggy = true;
                }

                return function setPrototypeOf(O, proto) {
                  check(O, proto);
                  if (buggy) O.__proto__ = proto;else set(O, proto);
                  return O;
                };
              }({}, false) : undefined),
              check: check
            };
          }, {
            "25": 25,
            "51": 51,
            "7": 7,
            "75": 75
          }],
          100: [function (_dereq_, module, exports) {
            'use strict';

            var global = _dereq_(40);

            var dP = _dereq_(72);

            var DESCRIPTORS = _dereq_(29);

            var SPECIES = _dereq_(128)('species');

            module.exports = function (KEY) {
              var C = global[KEY];
              if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
                configurable: true,
                get: function get() {
                  return this;
                }
              });
            };
          }, {
            "128": 128,
            "29": 29,
            "40": 40,
            "72": 72
          }],
          101: [function (_dereq_, module, exports) {
            var def = _dereq_(72).f;

            var has = _dereq_(41);

            var TAG = _dereq_(128)('toStringTag');

            module.exports = function (it, tag, stat) {
              if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
                configurable: true,
                value: tag
              });
            };
          }, {
            "128": 128,
            "41": 41,
            "72": 72
          }],
          102: [function (_dereq_, module, exports) {
            var shared = _dereq_(103)('keys');

            var uid = _dereq_(124);

            module.exports = function (key) {
              return shared[key] || (shared[key] = uid(key));
            };
          }, {
            "103": 103,
            "124": 124
          }],
          103: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var SHARED = '__core-js_shared__';
            var store = global[SHARED] || (global[SHARED] = {});

            module.exports = function (key) {
              return store[key] || (store[key] = {});
            };
          }, {
            "40": 40
          }],
          104: [function (_dereq_, module, exports) {
            // 7.3.20 SpeciesConstructor(O, defaultConstructor)
            var anObject = _dereq_(7);

            var aFunction = _dereq_(3);

            var SPECIES = _dereq_(128)('species');

            module.exports = function (O, D) {
              var C = anObject(O).constructor;
              var S;
              return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
            };
          }, {
            "128": 128,
            "3": 3,
            "7": 7
          }],
          105: [function (_dereq_, module, exports) {
            'use strict';

            var fails = _dereq_(35);

            module.exports = function (method, arg) {
              return !!method && fails(function () {
                // eslint-disable-next-line no-useless-call
                arg ? method.call(null, function () {
                  /* empty */
                }, 1) : method.call(null);
              });
            };
          }, {
            "35": 35
          }],
          106: [function (_dereq_, module, exports) {
            var toInteger = _dereq_(116);

            var defined = _dereq_(28); // true  -> String#at
            // false -> String#codePointAt


            module.exports = function (TO_STRING) {
              return function (that, pos) {
                var s = String(defined(that));
                var i = toInteger(pos);
                var l = s.length;
                var a, b;
                if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                a = s.charCodeAt(i);
                return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
              };
            };
          }, {
            "116": 116,
            "28": 28
          }],
          107: [function (_dereq_, module, exports) {
            // helper for String#{startsWith, endsWith, includes}
            var isRegExp = _dereq_(52);

            var defined = _dereq_(28);

            module.exports = function (that, searchString, NAME) {
              if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
              return String(defined(that));
            };
          }, {
            "28": 28,
            "52": 52
          }],
          108: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var fails = _dereq_(35);

            var defined = _dereq_(28);

            var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

            var createHTML = function createHTML(string, tag, attribute, value) {
              var S = String(defined(string));
              var p1 = '<' + tag;
              if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
              return p1 + '>' + S + '</' + tag + '>';
            };

            module.exports = function (NAME, exec) {
              var O = {};
              O[NAME] = exec(createHTML);
              $export($export.P + $export.F * fails(function () {
                var test = ''[NAME]('"');
                return test !== test.toLowerCase() || test.split('"').length > 3;
              }), 'String', O);
            };
          }, {
            "28": 28,
            "33": 33,
            "35": 35
          }],
          109: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-string-pad-start-end
            var toLength = _dereq_(118);

            var repeat = _dereq_(110);

            var defined = _dereq_(28);

            module.exports = function (that, maxLength, fillString, left) {
              var S = String(defined(that));
              var stringLength = S.length;
              var fillStr = fillString === undefined ? ' ' : String(fillString);
              var intMaxLength = toLength(maxLength);
              if (intMaxLength <= stringLength || fillStr == '') return S;
              var fillLen = intMaxLength - stringLength;
              var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
              if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
              return left ? stringFiller + S : S + stringFiller;
            };
          }, {
            "110": 110,
            "118": 118,
            "28": 28
          }],
          110: [function (_dereq_, module, exports) {
            'use strict';

            var toInteger = _dereq_(116);

            var defined = _dereq_(28);

            module.exports = function repeat(count) {
              var str = String(defined(this));
              var res = '';
              var n = toInteger(count);
              if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

              for (; n > 0; (n >>>= 1) && (str += str)) {
                if (n & 1) res += str;
              }

              return res;
            };
          }, {
            "116": 116,
            "28": 28
          }],
          111: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var defined = _dereq_(28);

            var fails = _dereq_(35);

            var spaces = _dereq_(112);

            var space = '[' + spaces + ']';
            var non = "\u200B\x85";
            var ltrim = RegExp('^' + space + space + '*');
            var rtrim = RegExp(space + space + '*$');

            var exporter = function exporter(KEY, exec, ALIAS) {
              var exp = {};
              var FORCE = fails(function () {
                return !!spaces[KEY]() || non[KEY]() != non;
              });
              var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
              if (ALIAS) exp[ALIAS] = fn;
              $export($export.P + $export.F * FORCE, 'String', exp);
            }; // 1 -> String#trimLeft
            // 2 -> String#trimRight
            // 3 -> String#trim


            var trim = exporter.trim = function (string, TYPE) {
              string = String(defined(string));
              if (TYPE & 1) string = string.replace(ltrim, '');
              if (TYPE & 2) string = string.replace(rtrim, '');
              return string;
            };

            module.exports = exporter;
          }, {
            "112": 112,
            "28": 28,
            "33": 33,
            "35": 35
          }],
          112: [function (_dereq_, module, exports) {
            module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
          }, {}],
          113: [function (_dereq_, module, exports) {
            var ctx = _dereq_(25);

            var invoke = _dereq_(46);

            var html = _dereq_(43);

            var cel = _dereq_(30);

            var global = _dereq_(40);

            var process = global.process;
            var setTask = global.setImmediate;
            var clearTask = global.clearImmediate;
            var MessageChannel = global.MessageChannel;
            var Dispatch = global.Dispatch;
            var counter = 0;
            var queue = {};
            var ONREADYSTATECHANGE = 'onreadystatechange';
            var defer, channel, port;

            var run = function run() {
              var id = +this; // eslint-disable-next-line no-prototype-builtins

              if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
              }
            };

            var listener = function listener(event) {
              run.call(event.data);
            }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


            if (!setTask || !clearTask) {
              setTask = function setImmediate(fn) {
                var args = [];
                var i = 1;

                while (arguments.length > i) {
                  args.push(arguments[i++]);
                }

                queue[++counter] = function () {
                  // eslint-disable-next-line no-new-func
                  invoke(typeof fn == 'function' ? fn : Function(fn), args);
                };

                defer(counter);
                return counter;
              };

              clearTask = function clearImmediate(id) {
                delete queue[id];
              }; // Node.js 0.8-


              if (_dereq_(18)(process) == 'process') {
                defer = function defer(id) {
                  process.nextTick(ctx(run, id, 1));
                }; // Sphere (JS game engine) Dispatch API

              } else if (Dispatch && Dispatch.now) {
                defer = function defer(id) {
                  Dispatch.now(ctx(run, id, 1));
                }; // Browsers with MessageChannel, includes WebWorkers

              } else if (MessageChannel) {
                channel = new MessageChannel();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
                // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
              } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                defer = function defer(id) {
                  global.postMessage(id + '', '*');
                };

                global.addEventListener('message', listener, false); // IE8-
              } else if (ONREADYSTATECHANGE in cel('script')) {
                defer = function defer(id) {
                  html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
                    html.removeChild(this);
                    run.call(id);
                  };
                }; // Rest old browsers

              } else {
                defer = function defer(id) {
                  setTimeout(ctx(run, id, 1), 0);
                };
              }
            }

            module.exports = {
              set: setTask,
              clear: clearTask
            };
          }, {
            "18": 18,
            "25": 25,
            "30": 30,
            "40": 40,
            "43": 43,
            "46": 46
          }],
          114: [function (_dereq_, module, exports) {
            var toInteger = _dereq_(116);

            var max = Math.max;
            var min = Math.min;

            module.exports = function (index, length) {
              index = toInteger(index);
              return index < 0 ? max(index + length, 0) : min(index, length);
            };
          }, {
            "116": 116
          }],
          115: [function (_dereq_, module, exports) {
            // https://tc39.github.io/ecma262/#sec-toindex
            var toInteger = _dereq_(116);

            var toLength = _dereq_(118);

            module.exports = function (it) {
              if (it === undefined) return 0;
              var number = toInteger(it);
              var length = toLength(number);
              if (number !== length) throw RangeError('Wrong length!');
              return length;
            };
          }, {
            "116": 116,
            "118": 118
          }],
          116: [function (_dereq_, module, exports) {
            // 7.1.4 ToInteger
            var ceil = Math.ceil;
            var floor = Math.floor;

            module.exports = function (it) {
              return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };
          }, {}],
          117: [function (_dereq_, module, exports) {
            // to indexed object, toObject with fallback for non-array-like ES3 strings
            var IObject = _dereq_(47);

            var defined = _dereq_(28);

            module.exports = function (it) {
              return IObject(defined(it));
            };
          }, {
            "28": 28,
            "47": 47
          }],
          118: [function (_dereq_, module, exports) {
            // 7.1.15 ToLength
            var toInteger = _dereq_(116);

            var min = Math.min;

            module.exports = function (it) {
              return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
            };
          }, {
            "116": 116
          }],
          119: [function (_dereq_, module, exports) {
            // 7.1.13 ToObject(argument)
            var defined = _dereq_(28);

            module.exports = function (it) {
              return Object(defined(it));
            };
          }, {
            "28": 28
          }],
          120: [function (_dereq_, module, exports) {
            // 7.1.1 ToPrimitive(input [, PreferredType])
            var isObject = _dereq_(51); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string


            module.exports = function (it, S) {
              if (!isObject(it)) return it;
              var fn, val;
              if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
              if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
              if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
              throw TypeError("Can't convert object to primitive value");
            };
          }, {
            "51": 51
          }],
          121: [function (_dereq_, module, exports) {
            'use strict';

            if (_dereq_(29)) {
              var LIBRARY = _dereq_(60);

              var global = _dereq_(40);

              var fails = _dereq_(35);

              var $export = _dereq_(33);

              var $typed = _dereq_(123);

              var $buffer = _dereq_(122);

              var ctx = _dereq_(25);

              var anInstance = _dereq_(6);

              var propertyDesc = _dereq_(92);

              var hide = _dereq_(42);

              var redefineAll = _dereq_(93);

              var toInteger = _dereq_(116);

              var toLength = _dereq_(118);

              var toIndex = _dereq_(115);

              var toAbsoluteIndex = _dereq_(114);

              var toPrimitive = _dereq_(120);

              var has = _dereq_(41);

              var classof = _dereq_(17);

              var isObject = _dereq_(51);

              var toObject = _dereq_(119);

              var isArrayIter = _dereq_(48);

              var create = _dereq_(71);

              var getPrototypeOf = _dereq_(79);

              var gOPN = _dereq_(77).f;

              var getIterFn = _dereq_(129);

              var uid = _dereq_(124);

              var wks = _dereq_(128);

              var createArrayMethod = _dereq_(12);

              var createArrayIncludes = _dereq_(11);

              var speciesConstructor = _dereq_(104);

              var ArrayIterators = _dereq_(141);

              var Iterators = _dereq_(58);

              var $iterDetect = _dereq_(56);

              var setSpecies = _dereq_(100);

              var arrayFill = _dereq_(9);

              var arrayCopyWithin = _dereq_(8);

              var $DP = _dereq_(72);

              var $GOPD = _dereq_(75);

              var dP = $DP.f;
              var gOPD = $GOPD.f;
              var RangeError = global.RangeError;
              var TypeError = global.TypeError;
              var Uint8Array = global.Uint8Array;
              var ARRAY_BUFFER = 'ArrayBuffer';
              var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
              var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
              var PROTOTYPE = 'prototype';
              var ArrayProto = Array[PROTOTYPE];
              var $ArrayBuffer = $buffer.ArrayBuffer;
              var $DataView = $buffer.DataView;
              var arrayForEach = createArrayMethod(0);
              var arrayFilter = createArrayMethod(2);
              var arraySome = createArrayMethod(3);
              var arrayEvery = createArrayMethod(4);
              var arrayFind = createArrayMethod(5);
              var arrayFindIndex = createArrayMethod(6);
              var arrayIncludes = createArrayIncludes(true);
              var arrayIndexOf = createArrayIncludes(false);
              var arrayValues = ArrayIterators.values;
              var arrayKeys = ArrayIterators.keys;
              var arrayEntries = ArrayIterators.entries;
              var arrayLastIndexOf = ArrayProto.lastIndexOf;
              var arrayReduce = ArrayProto.reduce;
              var arrayReduceRight = ArrayProto.reduceRight;
              var arrayJoin = ArrayProto.join;
              var arraySort = ArrayProto.sort;
              var arraySlice = ArrayProto.slice;
              var arrayToString = ArrayProto.toString;
              var arrayToLocaleString = ArrayProto.toLocaleString;
              var ITERATOR = wks('iterator');
              var TAG = wks('toStringTag');
              var TYPED_CONSTRUCTOR = uid('typed_constructor');
              var DEF_CONSTRUCTOR = uid('def_constructor');
              var ALL_CONSTRUCTORS = $typed.CONSTR;
              var TYPED_ARRAY = $typed.TYPED;
              var VIEW = $typed.VIEW;
              var WRONG_LENGTH = 'Wrong length!';
              var $map = createArrayMethod(1, function (O, length) {
                return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
              });
              var LITTLE_ENDIAN = fails(function () {
                // eslint-disable-next-line no-undef
                return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
              });
              var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
                new Uint8Array(1).set({});
              });

              var toOffset = function toOffset(it, BYTES) {
                var offset = toInteger(it);
                if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
                return offset;
              };

              var validate = function validate(it) {
                if (isObject(it) && TYPED_ARRAY in it) return it;
                throw TypeError(it + ' is not a typed array!');
              };

              var allocate = function allocate(C, length) {
                if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                  throw TypeError('It is not a typed array constructor!');
                }

                return new C(length);
              };

              var speciesFromList = function speciesFromList(O, list) {
                return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
              };

              var fromList = function fromList(C, list) {
                var index = 0;
                var length = list.length;
                var result = allocate(C, length);

                while (length > index) {
                  result[index] = list[index++];
                }

                return result;
              };

              var addGetter = function addGetter(it, key, internal) {
                dP(it, key, {
                  get: function get() {
                    return this._d[internal];
                  }
                });
              };

              var $from = function from(source
              /* , mapfn, thisArg */
              ) {
                var O = toObject(source);
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var iterFn = getIterFn(O);
                var i, length, values, result, step, iterator;

                if (iterFn != undefined && !isArrayIter(iterFn)) {
                  for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                    values.push(step.value);
                  }

                  O = values;
                }

                if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

                for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                  result[i] = mapping ? mapfn(O[i], i) : O[i];
                }

                return result;
              };

              var $of = function of()
              /* ...items */
              {
                var index = 0;
                var length = arguments.length;
                var result = allocate(this, length);

                while (length > index) {
                  result[index] = arguments[index++];
                }

                return result;
              }; // iOS Safari 6.x fails here


              var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
                arrayToLocaleString.call(new Uint8Array(1));
              });

              var $toLocaleString = function toLocaleString() {
                return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
              };

              var proto = {
                copyWithin: function copyWithin(target, start
                /* , end */
                ) {
                  return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
                },
                every: function every(callbackfn
                /* , thisArg */
                ) {
                  return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                fill: function fill(value
                /* , start, end */
                ) {
                  // eslint-disable-line no-unused-vars
                  return arrayFill.apply(validate(this), arguments);
                },
                filter: function filter(callbackfn
                /* , thisArg */
                ) {
                  return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
                },
                find: function find(predicate
                /* , thisArg */
                ) {
                  return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                },
                findIndex: function findIndex(predicate
                /* , thisArg */
                ) {
                  return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                },
                forEach: function forEach(callbackfn
                /* , thisArg */
                ) {
                  arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                indexOf: function indexOf(searchElement
                /* , fromIndex */
                ) {
                  return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                },
                includes: function includes(searchElement
                /* , fromIndex */
                ) {
                  return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                },
                join: function join(separator) {
                  // eslint-disable-line no-unused-vars
                  return arrayJoin.apply(validate(this), arguments);
                },
                lastIndexOf: function lastIndexOf(searchElement
                /* , fromIndex */
                ) {
                  // eslint-disable-line no-unused-vars
                  return arrayLastIndexOf.apply(validate(this), arguments);
                },
                map: function map(mapfn
                /* , thisArg */
                ) {
                  return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                reduce: function reduce(callbackfn
                /* , initialValue */
                ) {
                  // eslint-disable-line no-unused-vars
                  return arrayReduce.apply(validate(this), arguments);
                },
                reduceRight: function reduceRight(callbackfn
                /* , initialValue */
                ) {
                  // eslint-disable-line no-unused-vars
                  return arrayReduceRight.apply(validate(this), arguments);
                },
                reverse: function reverse() {
                  var that = this;
                  var length = validate(that).length;
                  var middle = Math.floor(length / 2);
                  var index = 0;
                  var value;

                  while (index < middle) {
                    value = that[index];
                    that[index++] = that[--length];
                    that[length] = value;
                  }

                  return that;
                },
                some: function some(callbackfn
                /* , thisArg */
                ) {
                  return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                },
                sort: function sort(comparefn) {
                  return arraySort.call(validate(this), comparefn);
                },
                subarray: function subarray(begin, end) {
                  var O = validate(this);
                  var length = O.length;
                  var $begin = toAbsoluteIndex(begin, length);
                  return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
                }
              };

              var $slice = function slice(start, end) {
                return speciesFromList(this, arraySlice.call(validate(this), start, end));
              };

              var $set = function set(arrayLike
              /* , offset */
              ) {
                validate(this);
                var offset = toOffset(arguments[1], 1);
                var length = this.length;
                var src = toObject(arrayLike);
                var len = toLength(src.length);
                var index = 0;
                if (len + offset > length) throw RangeError(WRONG_LENGTH);

                while (index < len) {
                  this[offset + index] = src[index++];
                }
              };

              var $iterators = {
                entries: function entries() {
                  return arrayEntries.call(validate(this));
                },
                keys: function keys() {
                  return arrayKeys.call(validate(this));
                },
                values: function values() {
                  return arrayValues.call(validate(this));
                }
              };

              var isTAIndex = function isTAIndex(target, key) {
                return isObject(target) && target[TYPED_ARRAY] && _typeof2(key) != 'symbol' && key in target && String(+key) == String(key);
              };

              var $getDesc = function getOwnPropertyDescriptor(target, key) {
                return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
              };

              var $setDesc = function defineProperty(target, key, desc) {
                if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
                && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
                  target[key] = desc.value;
                  return target;
                }

                return dP(target, key, desc);
              };

              if (!ALL_CONSTRUCTORS) {
                $GOPD.f = $getDesc;
                $DP.f = $setDesc;
              }

              $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
                getOwnPropertyDescriptor: $getDesc,
                defineProperty: $setDesc
              });

              if (fails(function () {
                arrayToString.call({});
              })) {
                arrayToString = arrayToLocaleString = function toString() {
                  return arrayJoin.call(this);
                };
              }

              var $TypedArrayPrototype$ = redefineAll({}, proto);
              redefineAll($TypedArrayPrototype$, $iterators);
              hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
              redefineAll($TypedArrayPrototype$, {
                slice: $slice,
                set: $set,
                constructor: function constructor() {
                  /* noop */
                },
                toString: arrayToString,
                toLocaleString: $toLocaleString
              });
              addGetter($TypedArrayPrototype$, 'buffer', 'b');
              addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
              addGetter($TypedArrayPrototype$, 'byteLength', 'l');
              addGetter($TypedArrayPrototype$, 'length', 'e');
              dP($TypedArrayPrototype$, TAG, {
                get: function get() {
                  return this[TYPED_ARRAY];
                }
              }); // eslint-disable-next-line max-statements

              module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
                CLAMPED = !!CLAMPED;
                var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
                var GETTER = 'get' + KEY;
                var SETTER = 'set' + KEY;
                var TypedArray = global[NAME];
                var Base = TypedArray || {};
                var TAC = TypedArray && getPrototypeOf(TypedArray);
                var FORCED = !TypedArray || !$typed.ABV;
                var O = {};
                var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

                var getter = function getter(that, index) {
                  var data = that._d;
                  return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
                };

                var setter = function setter(that, index, value) {
                  var data = that._d;
                  if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
                  data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
                };

                var addElement = function addElement(that, index) {
                  dP(that, index, {
                    get: function get() {
                      return getter(this, index);
                    },
                    set: function set(value) {
                      return setter(this, index, value);
                    },
                    enumerable: true
                  });
                };

                if (FORCED) {
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    anInstance(that, TypedArray, NAME, '_d');
                    var index = 0;
                    var offset = 0;
                    var buffer, byteLength, length, klass;

                    if (!isObject(data)) {
                      length = toIndex(data);
                      byteLength = length * BYTES;
                      buffer = new $ArrayBuffer(byteLength);
                    } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      buffer = data;
                      offset = toOffset($offset, BYTES);
                      var $len = data.byteLength;

                      if ($length === undefined) {
                        if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                        byteLength = $len - offset;
                        if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                      } else {
                        byteLength = toLength($length) * BYTES;
                        if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
                      }

                      length = byteLength / BYTES;
                    } else if (TYPED_ARRAY in data) {
                      return fromList(TypedArray, data);
                    } else {
                      return $from.call(TypedArray, data);
                    }

                    hide(that, '_d', {
                      b: buffer,
                      o: offset,
                      l: byteLength,
                      e: length,
                      v: new $DataView(buffer)
                    });

                    while (index < length) {
                      addElement(that, index++);
                    }
                  });
                  TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
                  hide(TypedArrayPrototype, 'constructor', TypedArray);
                } else if (!fails(function () {
                  TypedArray(1);
                }) || !fails(function () {
                  new TypedArray(-1); // eslint-disable-line no-new
                }) || !$iterDetect(function (iter) {
                  new TypedArray(); // eslint-disable-line no-new

                  new TypedArray(null); // eslint-disable-line no-new

                  new TypedArray(1.5); // eslint-disable-line no-new

                  new TypedArray(iter); // eslint-disable-line no-new
                }, true)) {
                  TypedArray = wrapper(function (that, data, $offset, $length) {
                    anInstance(that, TypedArray, NAME);
                    var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
                    // https://github.com/websockets/ws/pull/645

                    if (!isObject(data)) return new Base(toIndex(data));

                    if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                      return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
                    }

                    if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                    return $from.call(TypedArray, data);
                  });
                  arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
                    if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
                  });
                  TypedArray[PROTOTYPE] = TypedArrayPrototype;
                  if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
                }

                var $nativeIterator = TypedArrayPrototype[ITERATOR];
                var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
                var $iterator = $iterators.values;
                hide(TypedArray, TYPED_CONSTRUCTOR, true);
                hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
                hide(TypedArrayPrototype, VIEW, true);
                hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

                if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                  dP(TypedArrayPrototype, TAG, {
                    get: function get() {
                      return NAME;
                    }
                  });
                }

                O[NAME] = TypedArray;
                $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
                $export($export.S, NAME, {
                  BYTES_PER_ELEMENT: BYTES
                });
                $export($export.S + $export.F * fails(function () {
                  Base.of.call(TypedArray, 1);
                }), NAME, {
                  from: $from,
                  of: $of
                });
                if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
                $export($export.P, NAME, proto);
                setSpecies(NAME);
                $export($export.P + $export.F * FORCED_SET, NAME, {
                  set: $set
                });
                $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
                if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
                $export($export.P + $export.F * fails(function () {
                  new TypedArray(1).slice();
                }), NAME, {
                  slice: $slice
                });
                $export($export.P + $export.F * (fails(function () {
                  return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
                }) || !fails(function () {
                  TypedArrayPrototype.toLocaleString.call([1, 2]);
                })), NAME, {
                  toLocaleString: $toLocaleString
                });
                Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
                if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
              };
            } else module.exports = function () {
              /* empty */
            };
          }, {
            "100": 100,
            "104": 104,
            "11": 11,
            "114": 114,
            "115": 115,
            "116": 116,
            "118": 118,
            "119": 119,
            "12": 12,
            "120": 120,
            "122": 122,
            "123": 123,
            "124": 124,
            "128": 128,
            "129": 129,
            "141": 141,
            "17": 17,
            "25": 25,
            "29": 29,
            "33": 33,
            "35": 35,
            "40": 40,
            "41": 41,
            "42": 42,
            "48": 48,
            "51": 51,
            "56": 56,
            "58": 58,
            "6": 6,
            "60": 60,
            "71": 71,
            "72": 72,
            "75": 75,
            "77": 77,
            "79": 79,
            "8": 8,
            "9": 9,
            "92": 92,
            "93": 93
          }],
          122: [function (_dereq_, module, exports) {
            'use strict';

            var global = _dereq_(40);

            var DESCRIPTORS = _dereq_(29);

            var LIBRARY = _dereq_(60);

            var $typed = _dereq_(123);

            var hide = _dereq_(42);

            var redefineAll = _dereq_(93);

            var fails = _dereq_(35);

            var anInstance = _dereq_(6);

            var toInteger = _dereq_(116);

            var toLength = _dereq_(118);

            var toIndex = _dereq_(115);

            var gOPN = _dereq_(77).f;

            var dP = _dereq_(72).f;

            var arrayFill = _dereq_(9);

            var setToStringTag = _dereq_(101);

            var ARRAY_BUFFER = 'ArrayBuffer';
            var DATA_VIEW = 'DataView';
            var PROTOTYPE = 'prototype';
            var WRONG_LENGTH = 'Wrong length!';
            var WRONG_INDEX = 'Wrong index!';
            var $ArrayBuffer = global[ARRAY_BUFFER];
            var $DataView = global[DATA_VIEW];
            var Math = global.Math;
            var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

            var Infinity = global.Infinity;
            var BaseBuffer = $ArrayBuffer;
            var abs = Math.abs;
            var pow = Math.pow;
            var floor = Math.floor;
            var log = Math.log;
            var LN2 = Math.LN2;
            var BUFFER = 'buffer';
            var BYTE_LENGTH = 'byteLength';
            var BYTE_OFFSET = 'byteOffset';
            var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
            var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
            var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

            function packIEEE754(value, mLen, nBytes) {
              var buffer = Array(nBytes);
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
              var i = 0;
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
              var e, m, c;
              value = abs(value); // eslint-disable-next-line no-self-compare

              if (value != value || value === Infinity) {
                // eslint-disable-next-line no-self-compare
                m = value != value ? 1 : 0;
                e = eMax;
              } else {
                e = floor(log(value) / LN2);

                if (value * (c = pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }

                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * pow(2, 1 - eBias);
                }

                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * pow(2, eBias - 1) * pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
                ;
              }

              e = e << mLen | m;
              eLen += mLen;

              for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
                ;
              }

              buffer[--i] |= s * 128;
              return buffer;
            }

            function unpackIEEE754(buffer, mLen, nBytes) {
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = eLen - 7;
              var i = nBytes - 1;
              var s = buffer[i--];
              var e = s & 127;
              var m;
              s >>= 7;

              for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
                ;
              }

              m = e & (1 << -nBits) - 1;
              e >>= -nBits;
              nBits += mLen;

              for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
                ;
              }

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : s ? -Infinity : Infinity;
              } else {
                m = m + pow(2, mLen);
                e = e - eBias;
              }

              return (s ? -1 : 1) * m * pow(2, e - mLen);
            }

            function unpackI32(bytes) {
              return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
            }

            function packI8(it) {
              return [it & 0xff];
            }

            function packI16(it) {
              return [it & 0xff, it >> 8 & 0xff];
            }

            function packI32(it) {
              return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
            }

            function packF64(it) {
              return packIEEE754(it, 52, 8);
            }

            function packF32(it) {
              return packIEEE754(it, 23, 4);
            }

            function addGetter(C, key, internal) {
              dP(C[PROTOTYPE], key, {
                get: function get() {
                  return this[internal];
                }
              });
            }

            function get(view, bytes, index, isLittleEndian) {
              var numIndex = +index;
              var intIndex = toIndex(numIndex);
              if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
              var store = view[$BUFFER]._b;
              var start = intIndex + view[$OFFSET];
              var pack = store.slice(start, start + bytes);
              return isLittleEndian ? pack : pack.reverse();
            }

            function set(view, bytes, index, conversion, value, isLittleEndian) {
              var numIndex = +index;
              var intIndex = toIndex(numIndex);
              if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
              var store = view[$BUFFER]._b;
              var start = intIndex + view[$OFFSET];
              var pack = conversion(+value);

              for (var i = 0; i < bytes; i++) {
                store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
              }
            }

            if (!$typed.ABV) {
              $ArrayBuffer = function ArrayBuffer(length) {
                anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                var byteLength = toIndex(length);
                this._b = arrayFill.call(Array(byteLength), 0);
                this[$LENGTH] = byteLength;
              };

              $DataView = function DataView(buffer, byteOffset, byteLength) {
                anInstance(this, $DataView, DATA_VIEW);
                anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                var bufferLength = buffer[$LENGTH];
                var offset = toInteger(byteOffset);
                if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
                byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
                if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
                this[$BUFFER] = buffer;
                this[$OFFSET] = offset;
                this[$LENGTH] = byteLength;
              };

              if (DESCRIPTORS) {
                addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
                addGetter($DataView, BUFFER, '_b');
                addGetter($DataView, BYTE_LENGTH, '_l');
                addGetter($DataView, BYTE_OFFSET, '_o');
              }

              redefineAll($DataView[PROTOTYPE], {
                getInt8: function getInt8(byteOffset) {
                  return get(this, 1, byteOffset)[0] << 24 >> 24;
                },
                getUint8: function getUint8(byteOffset) {
                  return get(this, 1, byteOffset)[0];
                },
                getInt16: function getInt16(byteOffset
                /* , littleEndian */
                ) {
                  var bytes = get(this, 2, byteOffset, arguments[1]);
                  return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                },
                getUint16: function getUint16(byteOffset
                /* , littleEndian */
                ) {
                  var bytes = get(this, 2, byteOffset, arguments[1]);
                  return bytes[1] << 8 | bytes[0];
                },
                getInt32: function getInt32(byteOffset
                /* , littleEndian */
                ) {
                  return unpackI32(get(this, 4, byteOffset, arguments[1]));
                },
                getUint32: function getUint32(byteOffset
                /* , littleEndian */
                ) {
                  return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
                },
                getFloat32: function getFloat32(byteOffset
                /* , littleEndian */
                ) {
                  return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
                },
                getFloat64: function getFloat64(byteOffset
                /* , littleEndian */
                ) {
                  return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
                },
                setInt8: function setInt8(byteOffset, value) {
                  set(this, 1, byteOffset, packI8, value);
                },
                setUint8: function setUint8(byteOffset, value) {
                  set(this, 1, byteOffset, packI8, value);
                },
                setInt16: function setInt16(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 2, byteOffset, packI16, value, arguments[2]);
                },
                setUint16: function setUint16(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 2, byteOffset, packI16, value, arguments[2]);
                },
                setInt32: function setInt32(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 4, byteOffset, packI32, value, arguments[2]);
                },
                setUint32: function setUint32(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 4, byteOffset, packI32, value, arguments[2]);
                },
                setFloat32: function setFloat32(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 4, byteOffset, packF32, value, arguments[2]);
                },
                setFloat64: function setFloat64(byteOffset, value
                /* , littleEndian */
                ) {
                  set(this, 8, byteOffset, packF64, value, arguments[2]);
                }
              });
            } else {
              if (!fails(function () {
                $ArrayBuffer(1);
              }) || !fails(function () {
                new $ArrayBuffer(-1); // eslint-disable-line no-new
              }) || fails(function () {
                new $ArrayBuffer(); // eslint-disable-line no-new

                new $ArrayBuffer(1.5); // eslint-disable-line no-new

                new $ArrayBuffer(NaN); // eslint-disable-line no-new

                return $ArrayBuffer.name != ARRAY_BUFFER;
              })) {
                $ArrayBuffer = function ArrayBuffer(length) {
                  anInstance(this, $ArrayBuffer);
                  return new BaseBuffer(toIndex(length));
                };

                var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

                for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                  if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
                }

                if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
              } // iOS Safari 7.x bug


              var view = new $DataView(new $ArrayBuffer(2));
              var $setInt8 = $DataView[PROTOTYPE].setInt8;
              view.setInt8(0, 2147483648);
              view.setInt8(1, 2147483649);
              if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
                setInt8: function setInt8(byteOffset, value) {
                  $setInt8.call(this, byteOffset, value << 24 >> 24);
                },
                setUint8: function setUint8(byteOffset, value) {
                  $setInt8.call(this, byteOffset, value << 24 >> 24);
                }
              }, true);
            }

            setToStringTag($ArrayBuffer, ARRAY_BUFFER);
            setToStringTag($DataView, DATA_VIEW);
            hide($DataView[PROTOTYPE], $typed.VIEW, true);
            exports[ARRAY_BUFFER] = $ArrayBuffer;
            exports[DATA_VIEW] = $DataView;
          }, {
            "101": 101,
            "115": 115,
            "116": 116,
            "118": 118,
            "123": 123,
            "29": 29,
            "35": 35,
            "40": 40,
            "42": 42,
            "6": 6,
            "60": 60,
            "72": 72,
            "77": 77,
            "9": 9,
            "93": 93
          }],
          123: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var hide = _dereq_(42);

            var uid = _dereq_(124);

            var TYPED = uid('typed_array');
            var VIEW = uid('view');
            var ABV = !!(global.ArrayBuffer && global.DataView);
            var CONSTR = ABV;
            var i = 0;
            var l = 9;
            var Typed;
            var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

            while (i < l) {
              if (Typed = global[TypedArrayConstructors[i++]]) {
                hide(Typed.prototype, TYPED, true);
                hide(Typed.prototype, VIEW, true);
              } else CONSTR = false;
            }

            module.exports = {
              ABV: ABV,
              CONSTR: CONSTR,
              TYPED: TYPED,
              VIEW: VIEW
            };
          }, {
            "124": 124,
            "40": 40,
            "42": 42
          }],
          124: [function (_dereq_, module, exports) {
            var id = 0;
            var px = Math.random();

            module.exports = function (key) {
              return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };
          }, {}],
          125: [function (_dereq_, module, exports) {
            var isObject = _dereq_(51);

            module.exports = function (it, TYPE) {
              if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
              return it;
            };
          }, {
            "51": 51
          }],
          126: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var core = _dereq_(23);

            var LIBRARY = _dereq_(60);

            var wksExt = _dereq_(127);

            var defineProperty = _dereq_(72).f;

            module.exports = function (name) {
              var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
              if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
                value: wksExt.f(name)
              });
            };
          }, {
            "127": 127,
            "23": 23,
            "40": 40,
            "60": 60,
            "72": 72
          }],
          127: [function (_dereq_, module, exports) {
            exports.f = _dereq_(128);
          }, {
            "128": 128
          }],
          128: [function (_dereq_, module, exports) {
            var store = _dereq_(103)('wks');

            var uid = _dereq_(124);

            var _Symbol = _dereq_(40).Symbol;

            var USE_SYMBOL = typeof _Symbol == 'function';

            var $exports = module.exports = function (name) {
              return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
            };

            $exports.store = store;
          }, {
            "103": 103,
            "124": 124,
            "40": 40
          }],
          129: [function (_dereq_, module, exports) {
            var classof = _dereq_(17);

            var ITERATOR = _dereq_(128)('iterator');

            var Iterators = _dereq_(58);

            module.exports = _dereq_(23).getIteratorMethod = function (it) {
              if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
            };
          }, {
            "128": 128,
            "17": 17,
            "23": 23,
            "58": 58
          }],
          130: [function (_dereq_, module, exports) {
            // https://github.com/benjamingr/RexExp.escape
            var $export = _dereq_(33);

            var $re = _dereq_(95)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

            $export($export.S, 'RegExp', {
              escape: function escape(it) {
                return $re(it);
              }
            });
          }, {
            "33": 33,
            "95": 95
          }],
          131: [function (_dereq_, module, exports) {
            // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
            var $export = _dereq_(33);

            $export($export.P, 'Array', {
              copyWithin: _dereq_(8)
            });

            _dereq_(5)('copyWithin');
          }, {
            "33": 33,
            "5": 5,
            "8": 8
          }],
          132: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $every = _dereq_(12)(4);

            $export($export.P + $export.F * !_dereq_(105)([].every, true), 'Array', {
              // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
              every: function every(callbackfn
              /* , thisArg */
              ) {
                return $every(this, callbackfn, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "12": 12,
            "33": 33
          }],
          133: [function (_dereq_, module, exports) {
            // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
            var $export = _dereq_(33);

            $export($export.P, 'Array', {
              fill: _dereq_(9)
            });

            _dereq_(5)('fill');
          }, {
            "33": 33,
            "5": 5,
            "9": 9
          }],
          134: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $filter = _dereq_(12)(2);

            $export($export.P + $export.F * !_dereq_(105)([].filter, true), 'Array', {
              // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
              filter: function filter(callbackfn
              /* , thisArg */
              ) {
                return $filter(this, callbackfn, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "12": 12,
            "33": 33
          }],
          135: [function (_dereq_, module, exports) {
            'use strict'; // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

            var $export = _dereq_(33);

            var $find = _dereq_(12)(6);

            var KEY = 'findIndex';
            var forced = true; // Shouldn't skip holes

            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            });
            $export($export.P + $export.F * forced, 'Array', {
              findIndex: function findIndex(callbackfn
              /* , that = undefined */
              ) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
              }
            });

            _dereq_(5)(KEY);
          }, {
            "12": 12,
            "33": 33,
            "5": 5
          }],
          136: [function (_dereq_, module, exports) {
            'use strict'; // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

            var $export = _dereq_(33);

            var $find = _dereq_(12)(5);

            var KEY = 'find';
            var forced = true; // Shouldn't skip holes

            if (KEY in []) Array(1)[KEY](function () {
              forced = false;
            });
            $export($export.P + $export.F * forced, 'Array', {
              find: function find(callbackfn
              /* , that = undefined */
              ) {
                return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
              }
            });

            _dereq_(5)(KEY);
          }, {
            "12": 12,
            "33": 33,
            "5": 5
          }],
          137: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $forEach = _dereq_(12)(0);

            var STRICT = _dereq_(105)([].forEach, true);

            $export($export.P + $export.F * !STRICT, 'Array', {
              // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
              forEach: function forEach(callbackfn
              /* , thisArg */
              ) {
                return $forEach(this, callbackfn, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "12": 12,
            "33": 33
          }],
          138: [function (_dereq_, module, exports) {
            'use strict';

            var ctx = _dereq_(25);

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var call = _dereq_(53);

            var isArrayIter = _dereq_(48);

            var toLength = _dereq_(118);

            var createProperty = _dereq_(24);

            var getIterFn = _dereq_(129);

            $export($export.S + $export.F * !_dereq_(56)(function (iter) {
              Array.from(iter);
            }), 'Array', {
              // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
              from: function from(arrayLike
              /* , mapfn = undefined, thisArg = undefined */
              ) {
                var O = toObject(arrayLike);
                var C = typeof this == 'function' ? this : Array;
                var aLen = arguments.length;
                var mapfn = aLen > 1 ? arguments[1] : undefined;
                var mapping = mapfn !== undefined;
                var index = 0;
                var iterFn = getIterFn(O);
                var length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                  for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                    createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                  }
                } else {
                  length = toLength(O.length);

                  for (result = new C(length); length > index; index++) {
                    createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                  }
                }

                result.length = index;
                return result;
              }
            });
          }, {
            "118": 118,
            "119": 119,
            "129": 129,
            "24": 24,
            "25": 25,
            "33": 33,
            "48": 48,
            "53": 53,
            "56": 56
          }],
          139: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $indexOf = _dereq_(11)(false);

            var $native = [].indexOf;
            var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(105)($native)), 'Array', {
              // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
              indexOf: function indexOf(searchElement
              /* , fromIndex = 0 */
              ) {
                return NEGATIVE_ZERO // convert -0 to +0
                ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "11": 11,
            "33": 33
          }],
          140: [function (_dereq_, module, exports) {
            // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
            var $export = _dereq_(33);

            $export($export.S, 'Array', {
              isArray: _dereq_(49)
            });
          }, {
            "33": 33,
            "49": 49
          }],
          141: [function (_dereq_, module, exports) {
            'use strict';

            var addToUnscopables = _dereq_(5);

            var step = _dereq_(57);

            var Iterators = _dereq_(58);

            var toIObject = _dereq_(117); // 22.1.3.4 Array.prototype.entries()
            // 22.1.3.13 Array.prototype.keys()
            // 22.1.3.29 Array.prototype.values()
            // 22.1.3.30 Array.prototype[@@iterator]()


            module.exports = _dereq_(55)(Array, 'Array', function (iterated, kind) {
              this._t = toIObject(iterated); // target

              this._i = 0; // next index

              this._k = kind; // kind
              // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
            }, function () {
              var O = this._t;
              var kind = this._k;
              var index = this._i++;

              if (!O || index >= O.length) {
                this._t = undefined;
                return step(1);
              }

              if (kind == 'keys') return step(0, index);
              if (kind == 'values') return step(0, O[index]);
              return step(0, [index, O[index]]);
            }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

            Iterators.Arguments = Iterators.Array;
            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');
          }, {
            "117": 117,
            "5": 5,
            "55": 55,
            "57": 57,
            "58": 58
          }],
          142: [function (_dereq_, module, exports) {
            'use strict'; // 22.1.3.13 Array.prototype.join(separator)

            var $export = _dereq_(33);

            var toIObject = _dereq_(117);

            var arrayJoin = [].join; // fallback for not array-like strings

            $export($export.P + $export.F * (_dereq_(47) != Object || !_dereq_(105)(arrayJoin)), 'Array', {
              join: function join(separator) {
                return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
              }
            });
          }, {
            "105": 105,
            "117": 117,
            "33": 33,
            "47": 47
          }],
          143: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toIObject = _dereq_(117);

            var toInteger = _dereq_(116);

            var toLength = _dereq_(118);

            var $native = [].lastIndexOf;
            var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
            $export($export.P + $export.F * (NEGATIVE_ZERO || !_dereq_(105)($native)), 'Array', {
              // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
              lastIndexOf: function lastIndexOf(searchElement
              /* , fromIndex = @[*-1] */
              ) {
                // convert -0 to +0
                if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
                var O = toIObject(this);
                var length = toLength(O.length);
                var index = length - 1;
                if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
                if (index < 0) index = length + index;

                for (; index >= 0; index--) {
                  if (index in O) if (O[index] === searchElement) return index || 0;
                }

                return -1;
              }
            });
          }, {
            "105": 105,
            "116": 116,
            "117": 117,
            "118": 118,
            "33": 33
          }],
          144: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $map = _dereq_(12)(1);

            $export($export.P + $export.F * !_dereq_(105)([].map, true), 'Array', {
              // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
              map: function map(callbackfn
              /* , thisArg */
              ) {
                return $map(this, callbackfn, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "12": 12,
            "33": 33
          }],
          145: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var createProperty = _dereq_(24); // WebKit Array.of isn't generic


            $export($export.S + $export.F * _dereq_(35)(function () {
              function F() {
                /* empty */
              }

              return !(Array.of.call(F) instanceof F);
            }), 'Array', {
              // 22.1.2.3 Array.of( ...items)
              of: function of()
              /* ...args */
              {
                var index = 0;
                var aLen = arguments.length;
                var result = new (typeof this == 'function' ? this : Array)(aLen);

                while (aLen > index) {
                  createProperty(result, index, arguments[index++]);
                }

                result.length = aLen;
                return result;
              }
            });
          }, {
            "24": 24,
            "33": 33,
            "35": 35
          }],
          146: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $reduce = _dereq_(13);

            $export($export.P + $export.F * !_dereq_(105)([].reduceRight, true), 'Array', {
              // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
              reduceRight: function reduceRight(callbackfn
              /* , initialValue */
              ) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], true);
              }
            });
          }, {
            "105": 105,
            "13": 13,
            "33": 33
          }],
          147: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $reduce = _dereq_(13);

            $export($export.P + $export.F * !_dereq_(105)([].reduce, true), 'Array', {
              // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
              reduce: function reduce(callbackfn
              /* , initialValue */
              ) {
                return $reduce(this, callbackfn, arguments.length, arguments[1], false);
              }
            });
          }, {
            "105": 105,
            "13": 13,
            "33": 33
          }],
          148: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var html = _dereq_(43);

            var cof = _dereq_(18);

            var toAbsoluteIndex = _dereq_(114);

            var toLength = _dereq_(118);

            var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects

            $export($export.P + $export.F * _dereq_(35)(function () {
              if (html) arraySlice.call(html);
            }), 'Array', {
              slice: function slice(begin, end) {
                var len = toLength(this.length);
                var klass = cof(this);
                end = end === undefined ? len : end;
                if (klass == 'Array') return arraySlice.call(this, begin, end);
                var start = toAbsoluteIndex(begin, len);
                var upTo = toAbsoluteIndex(end, len);
                var size = toLength(upTo - start);
                var cloned = Array(size);
                var i = 0;

                for (; i < size; i++) {
                  cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
                }

                return cloned;
              }
            });
          }, {
            "114": 114,
            "118": 118,
            "18": 18,
            "33": 33,
            "35": 35,
            "43": 43
          }],
          149: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $some = _dereq_(12)(3);

            $export($export.P + $export.F * !_dereq_(105)([].some, true), 'Array', {
              // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
              some: function some(callbackfn
              /* , thisArg */
              ) {
                return $some(this, callbackfn, arguments[1]);
              }
            });
          }, {
            "105": 105,
            "12": 12,
            "33": 33
          }],
          150: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var aFunction = _dereq_(3);

            var toObject = _dereq_(119);

            var fails = _dereq_(35);

            var $sort = [].sort;
            var test = [1, 2, 3];
            $export($export.P + $export.F * (fails(function () {
              // IE8-
              test.sort(undefined);
            }) || !fails(function () {
              // V8 bug
              test.sort(null); // Old WebKit
            }) || !_dereq_(105)($sort)), 'Array', {
              // 22.1.3.25 Array.prototype.sort(comparefn)
              sort: function sort(comparefn) {
                return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
              }
            });
          }, {
            "105": 105,
            "119": 119,
            "3": 3,
            "33": 33,
            "35": 35
          }],
          151: [function (_dereq_, module, exports) {
            _dereq_(100)('Array');
          }, {
            "100": 100
          }],
          152: [function (_dereq_, module, exports) {
            // 20.3.3.1 / 15.9.4.4 Date.now()
            var $export = _dereq_(33);

            $export($export.S, 'Date', {
              now: function now() {
                return new Date().getTime();
              }
            });
          }, {
            "33": 33
          }],
          153: [function (_dereq_, module, exports) {
            // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
            var $export = _dereq_(33);

            var toISOString = _dereq_(26); // PhantomJS / old WebKit has a broken implementations


            $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
              toISOString: toISOString
            });
          }, {
            "26": 26,
            "33": 33
          }],
          154: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var toPrimitive = _dereq_(120);

            $export($export.P + $export.F * _dereq_(35)(function () {
              return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
                toISOString: function toISOString() {
                  return 1;
                }
              }) !== 1;
            }), 'Date', {
              // eslint-disable-next-line no-unused-vars
              toJSON: function toJSON(key) {
                var O = toObject(this);
                var pv = toPrimitive(O);
                return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
              }
            });
          }, {
            "119": 119,
            "120": 120,
            "33": 33,
            "35": 35
          }],
          155: [function (_dereq_, module, exports) {
            var TO_PRIMITIVE = _dereq_(128)('toPrimitive');

            var proto = Date.prototype;
            if (!(TO_PRIMITIVE in proto)) _dereq_(42)(proto, TO_PRIMITIVE, _dereq_(27));
          }, {
            "128": 128,
            "27": 27,
            "42": 42
          }],
          156: [function (_dereq_, module, exports) {
            var DateProto = Date.prototype;
            var INVALID_DATE = 'Invalid Date';
            var TO_STRING = 'toString';
            var $toString = DateProto[TO_STRING];
            var getTime = DateProto.getTime;

            if (new Date(NaN) + '' != INVALID_DATE) {
              _dereq_(94)(DateProto, TO_STRING, function toString() {
                var value = getTime.call(this); // eslint-disable-next-line no-self-compare

                return value === value ? $toString.call(this) : INVALID_DATE;
              });
            }
          }, {
            "94": 94
          }],
          157: [function (_dereq_, module, exports) {
            // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
            var $export = _dereq_(33);

            $export($export.P, 'Function', {
              bind: _dereq_(16)
            });
          }, {
            "16": 16,
            "33": 33
          }],
          158: [function (_dereq_, module, exports) {
            'use strict';

            var isObject = _dereq_(51);

            var getPrototypeOf = _dereq_(79);

            var HAS_INSTANCE = _dereq_(128)('hasInstance');

            var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

            if (!(HAS_INSTANCE in FunctionProto)) _dereq_(72).f(FunctionProto, HAS_INSTANCE, {
              value: function value(O) {
                if (typeof this != 'function' || !isObject(O)) return false;
                if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

                while (O = getPrototypeOf(O)) {
                  if (this.prototype === O) return true;
                }

                return false;
              }
            });
          }, {
            "128": 128,
            "51": 51,
            "72": 72,
            "79": 79
          }],
          159: [function (_dereq_, module, exports) {
            var dP = _dereq_(72).f;

            var FProto = Function.prototype;
            var nameRE = /^\s*function ([^ (]*)/;
            var NAME = 'name'; // 19.2.4.2 name

            NAME in FProto || _dereq_(29) && dP(FProto, NAME, {
              configurable: true,
              get: function get() {
                try {
                  return ('' + this).match(nameRE)[1];
                } catch (e) {
                  return '';
                }
              }
            });
          }, {
            "29": 29,
            "72": 72
          }],
          160: [function (_dereq_, module, exports) {
            'use strict';

            var strong = _dereq_(19);

            var validate = _dereq_(125);

            var MAP = 'Map'; // 23.1 Map Objects

            module.exports = _dereq_(22)(MAP, function (get) {
              return function Map() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              };
            }, {
              // 23.1.3.6 Map.prototype.get(key)
              get: function get(key) {
                var entry = strong.getEntry(validate(this, MAP), key);
                return entry && entry.v;
              },
              // 23.1.3.9 Map.prototype.set(key, value)
              set: function set(key, value) {
                return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
              }
            }, strong, true);
          }, {
            "125": 125,
            "19": 19,
            "22": 22
          }],
          161: [function (_dereq_, module, exports) {
            // 20.2.2.3 Math.acosh(x)
            var $export = _dereq_(33);

            var log1p = _dereq_(63);

            var sqrt = Math.sqrt;
            var $acosh = Math.acosh;
            $export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
            && Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
            && $acosh(Infinity) == Infinity), 'Math', {
              acosh: function acosh(x) {
                return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
              }
            });
          }, {
            "33": 33,
            "63": 63
          }],
          162: [function (_dereq_, module, exports) {
            // 20.2.2.5 Math.asinh(x)
            var $export = _dereq_(33);

            var $asinh = Math.asinh;

            function asinh(x) {
              return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
            } // Tor Browser bug: Math.asinh(0) -> -0


            $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
              asinh: asinh
            });
          }, {
            "33": 33
          }],
          163: [function (_dereq_, module, exports) {
            // 20.2.2.7 Math.atanh(x)
            var $export = _dereq_(33);

            var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

            $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
              atanh: function atanh(x) {
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
              }
            });
          }, {
            "33": 33
          }],
          164: [function (_dereq_, module, exports) {
            // 20.2.2.9 Math.cbrt(x)
            var $export = _dereq_(33);

            var sign = _dereq_(65);

            $export($export.S, 'Math', {
              cbrt: function cbrt(x) {
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
              }
            });
          }, {
            "33": 33,
            "65": 65
          }],
          165: [function (_dereq_, module, exports) {
            // 20.2.2.11 Math.clz32(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              clz32: function clz32(x) {
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
              }
            });
          }, {
            "33": 33
          }],
          166: [function (_dereq_, module, exports) {
            // 20.2.2.12 Math.cosh(x)
            var $export = _dereq_(33);

            var exp = Math.exp;
            $export($export.S, 'Math', {
              cosh: function cosh(x) {
                return (exp(x = +x) + exp(-x)) / 2;
              }
            });
          }, {
            "33": 33
          }],
          167: [function (_dereq_, module, exports) {
            // 20.2.2.14 Math.expm1(x)
            var $export = _dereq_(33);

            var $expm1 = _dereq_(61);

            $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
              expm1: $expm1
            });
          }, {
            "33": 33,
            "61": 61
          }],
          168: [function (_dereq_, module, exports) {
            // 20.2.2.16 Math.fround(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              fround: _dereq_(62)
            });
          }, {
            "33": 33,
            "62": 62
          }],
          169: [function (_dereq_, module, exports) {
            // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
            var $export = _dereq_(33);

            var abs = Math.abs;
            $export($export.S, 'Math', {
              hypot: function hypot(value1, value2) {
                // eslint-disable-line no-unused-vars
                var sum = 0;
                var i = 0;
                var aLen = arguments.length;
                var larg = 0;
                var arg, div;

                while (i < aLen) {
                  arg = abs(arguments[i++]);

                  if (larg < arg) {
                    div = larg / arg;
                    sum = sum * div * div + 1;
                    larg = arg;
                  } else if (arg > 0) {
                    div = arg / larg;
                    sum += div * div;
                  } else sum += arg;
                }

                return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
              }
            });
          }, {
            "33": 33
          }],
          170: [function (_dereq_, module, exports) {
            // 20.2.2.18 Math.imul(x, y)
            var $export = _dereq_(33);

            var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

            $export($export.S + $export.F * _dereq_(35)(function () {
              return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
            }), 'Math', {
              imul: function imul(x, y) {
                var UINT16 = 0xffff;
                var xn = +x;
                var yn = +y;
                var xl = UINT16 & xn;
                var yl = UINT16 & yn;
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
              }
            });
          }, {
            "33": 33,
            "35": 35
          }],
          171: [function (_dereq_, module, exports) {
            // 20.2.2.21 Math.log10(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              log10: function log10(x) {
                return Math.log(x) * Math.LOG10E;
              }
            });
          }, {
            "33": 33
          }],
          172: [function (_dereq_, module, exports) {
            // 20.2.2.20 Math.log1p(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              log1p: _dereq_(63)
            });
          }, {
            "33": 33,
            "63": 63
          }],
          173: [function (_dereq_, module, exports) {
            // 20.2.2.22 Math.log2(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              log2: function log2(x) {
                return Math.log(x) / Math.LN2;
              }
            });
          }, {
            "33": 33
          }],
          174: [function (_dereq_, module, exports) {
            // 20.2.2.28 Math.sign(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              sign: _dereq_(65)
            });
          }, {
            "33": 33,
            "65": 65
          }],
          175: [function (_dereq_, module, exports) {
            // 20.2.2.30 Math.sinh(x)
            var $export = _dereq_(33);

            var expm1 = _dereq_(61);

            var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

            $export($export.S + $export.F * _dereq_(35)(function () {
              return !Math.sinh(-2e-17) != -2e-17;
            }), 'Math', {
              sinh: function sinh(x) {
                return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
              }
            });
          }, {
            "33": 33,
            "35": 35,
            "61": 61
          }],
          176: [function (_dereq_, module, exports) {
            // 20.2.2.33 Math.tanh(x)
            var $export = _dereq_(33);

            var expm1 = _dereq_(61);

            var exp = Math.exp;
            $export($export.S, 'Math', {
              tanh: function tanh(x) {
                var a = expm1(x = +x);
                var b = expm1(-x);
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
              }
            });
          }, {
            "33": 33,
            "61": 61
          }],
          177: [function (_dereq_, module, exports) {
            // 20.2.2.34 Math.trunc(x)
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              trunc: function trunc(it) {
                return (it > 0 ? Math.floor : Math.ceil)(it);
              }
            });
          }, {
            "33": 33
          }],
          178: [function (_dereq_, module, exports) {
            'use strict';

            var global = _dereq_(40);

            var has = _dereq_(41);

            var cof = _dereq_(18);

            var inheritIfRequired = _dereq_(45);

            var toPrimitive = _dereq_(120);

            var fails = _dereq_(35);

            var gOPN = _dereq_(77).f;

            var gOPD = _dereq_(75).f;

            var dP = _dereq_(72).f;

            var $trim = _dereq_(111).trim;

            var NUMBER = 'Number';
            var $Number = global[NUMBER];
            var Base = $Number;
            var proto = $Number.prototype; // Opera ~12 has broken Object#toString

            var BROKEN_COF = cof(_dereq_(71)(proto)) == NUMBER;
            var TRIM = 'trim' in String.prototype; // 7.1.3 ToNumber(argument)

            var toNumber = function toNumber(argument) {
              var it = toPrimitive(argument, false);

              if (typeof it == 'string' && it.length > 2) {
                it = TRIM ? it.trim() : $trim(it, 3);
                var first = it.charCodeAt(0);
                var third, radix, maxCode;

                if (first === 43 || first === 45) {
                  third = it.charCodeAt(2);
                  if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                } else if (first === 48) {
                  switch (it.charCodeAt(1)) {
                    case 66:
                    case 98:
                      radix = 2;
                      maxCode = 49;
                      break;
                    // fast equal /^0b[01]+$/i

                    case 79:
                    case 111:
                      radix = 8;
                      maxCode = 55;
                      break;
                    // fast equal /^0o[0-7]+$/i

                    default:
                      return +it;
                  }

                  for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
                    code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
                    // but ToNumber should return NaN if a string contains unavailable symbols

                    if (code < 48 || code > maxCode) return NaN;
                  }

                  return parseInt(digits, radix);
                }
              }

              return +it;
            };

            if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
              $Number = function Number(value) {
                var it = arguments.length < 1 ? 0 : value;
                var that = this;
                return that instanceof $Number // check on 1..constructor(foo) case
                && (BROKEN_COF ? fails(function () {
                  proto.valueOf.call(that);
                }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
              };

              for (var keys = _dereq_(29) ? gOPN(Base) : ( // ES3:
              'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
              'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
                if (has(Base, key = keys[j]) && !has($Number, key)) {
                  dP($Number, key, gOPD(Base, key));
                }
              }

              $Number.prototype = proto;
              proto.constructor = $Number;

              _dereq_(94)(global, NUMBER, $Number);
            }
          }, {
            "111": 111,
            "120": 120,
            "18": 18,
            "29": 29,
            "35": 35,
            "40": 40,
            "41": 41,
            "45": 45,
            "71": 71,
            "72": 72,
            "75": 75,
            "77": 77,
            "94": 94
          }],
          179: [function (_dereq_, module, exports) {
            // 20.1.2.1 Number.EPSILON
            var $export = _dereq_(33);

            $export($export.S, 'Number', {
              EPSILON: Math.pow(2, -52)
            });
          }, {
            "33": 33
          }],
          180: [function (_dereq_, module, exports) {
            // 20.1.2.2 Number.isFinite(number)
            var $export = _dereq_(33);

            var _isFinite = _dereq_(40).isFinite;

            $export($export.S, 'Number', {
              isFinite: function isFinite(it) {
                return typeof it == 'number' && _isFinite(it);
              }
            });
          }, {
            "33": 33,
            "40": 40
          }],
          181: [function (_dereq_, module, exports) {
            // 20.1.2.3 Number.isInteger(number)
            var $export = _dereq_(33);

            $export($export.S, 'Number', {
              isInteger: _dereq_(50)
            });
          }, {
            "33": 33,
            "50": 50
          }],
          182: [function (_dereq_, module, exports) {
            // 20.1.2.4 Number.isNaN(number)
            var $export = _dereq_(33);

            $export($export.S, 'Number', {
              isNaN: function isNaN(number) {
                // eslint-disable-next-line no-self-compare
                return number != number;
              }
            });
          }, {
            "33": 33
          }],
          183: [function (_dereq_, module, exports) {
            // 20.1.2.5 Number.isSafeInteger(number)
            var $export = _dereq_(33);

            var isInteger = _dereq_(50);

            var abs = Math.abs;
            $export($export.S, 'Number', {
              isSafeInteger: function isSafeInteger(number) {
                return isInteger(number) && abs(number) <= 0x1fffffffffffff;
              }
            });
          }, {
            "33": 33,
            "50": 50
          }],
          184: [function (_dereq_, module, exports) {
            // 20.1.2.6 Number.MAX_SAFE_INTEGER
            var $export = _dereq_(33);

            $export($export.S, 'Number', {
              MAX_SAFE_INTEGER: 0x1fffffffffffff
            });
          }, {
            "33": 33
          }],
          185: [function (_dereq_, module, exports) {
            // 20.1.2.10 Number.MIN_SAFE_INTEGER
            var $export = _dereq_(33);

            $export($export.S, 'Number', {
              MIN_SAFE_INTEGER: -0x1fffffffffffff
            });
          }, {
            "33": 33
          }],
          186: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var $parseFloat = _dereq_(86); // 20.1.2.12 Number.parseFloat(string)


            $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
              parseFloat: $parseFloat
            });
          }, {
            "33": 33,
            "86": 86
          }],
          187: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var $parseInt = _dereq_(87); // 20.1.2.13 Number.parseInt(string, radix)


            $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
              parseInt: $parseInt
            });
          }, {
            "33": 33,
            "87": 87
          }],
          188: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toInteger = _dereq_(116);

            var aNumberValue = _dereq_(4);

            var repeat = _dereq_(110);

            var $toFixed = 1.0.toFixed;
            var floor = Math.floor;
            var data = [0, 0, 0, 0, 0, 0];
            var ERROR = 'Number.toFixed: incorrect invocation!';
            var ZERO = '0';

            var multiply = function multiply(n, c) {
              var i = -1;
              var c2 = c;

              while (++i < 6) {
                c2 += n * data[i];
                data[i] = c2 % 1e7;
                c2 = floor(c2 / 1e7);
              }
            };

            var divide = function divide(n) {
              var i = 6;
              var c = 0;

              while (--i >= 0) {
                c += data[i];
                data[i] = floor(c / n);
                c = c % n * 1e7;
              }
            };

            var numToString = function numToString() {
              var i = 6;
              var s = '';

              while (--i >= 0) {
                if (s !== '' || i === 0 || data[i] !== 0) {
                  var t = String(data[i]);
                  s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
                }
              }

              return s;
            };

            var pow = function pow(x, n, acc) {
              return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
            };

            var log = function log(x) {
              var n = 0;
              var x2 = x;

              while (x2 >= 4096) {
                n += 12;
                x2 /= 4096;
              }

              while (x2 >= 2) {
                n += 1;
                x2 /= 2;
              }

              return n;
            };

            $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_dereq_(35)(function () {
              // V8 ~ Android 4.3-
              $toFixed.call({});
            })), 'Number', {
              toFixed: function toFixed(fractionDigits) {
                var x = aNumberValue(this, ERROR);
                var f = toInteger(fractionDigits);
                var s = '';
                var m = ZERO;
                var e, z, j, k;
                if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

                if (x != x) return 'NaN';
                if (x <= -1e21 || x >= 1e21) return String(x);

                if (x < 0) {
                  s = '-';
                  x = -x;
                }

                if (x > 1e-21) {
                  e = log(x * pow(2, 69, 1)) - 69;
                  z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
                  z *= 0x10000000000000;
                  e = 52 - e;

                  if (e > 0) {
                    multiply(0, z);
                    j = f;

                    while (j >= 7) {
                      multiply(1e7, 0);
                      j -= 7;
                    }

                    multiply(pow(10, j, 1), 0);
                    j = e - 1;

                    while (j >= 23) {
                      divide(1 << 23);
                      j -= 23;
                    }

                    divide(1 << j);
                    multiply(1, 1);
                    divide(2);
                    m = numToString();
                  } else {
                    multiply(0, z);
                    multiply(1 << -e, 0);
                    m = numToString() + repeat.call(ZERO, f);
                  }
                }

                if (f > 0) {
                  k = m.length;
                  m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
                } else {
                  m = s + m;
                }

                return m;
              }
            });
          }, {
            "110": 110,
            "116": 116,
            "33": 33,
            "35": 35,
            "4": 4
          }],
          189: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $fails = _dereq_(35);

            var aNumberValue = _dereq_(4);

            var $toPrecision = 1.0.toPrecision;
            $export($export.P + $export.F * ($fails(function () {
              // IE7-
              return $toPrecision.call(1, undefined) !== '1';
            }) || !$fails(function () {
              // V8 ~ Android 4.3-
              $toPrecision.call({});
            })), 'Number', {
              toPrecision: function toPrecision(precision) {
                var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
                return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
              }
            });
          }, {
            "33": 33,
            "35": 35,
            "4": 4
          }],
          190: [function (_dereq_, module, exports) {
            // 19.1.3.1 Object.assign(target, source)
            var $export = _dereq_(33);

            $export($export.S + $export.F, 'Object', {
              assign: _dereq_(70)
            });
          }, {
            "33": 33,
            "70": 70
          }],
          191: [function (_dereq_, module, exports) {
            var $export = _dereq_(33); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


            $export($export.S, 'Object', {
              create: _dereq_(71)
            });
          }, {
            "33": 33,
            "71": 71
          }],
          192: [function (_dereq_, module, exports) {
            var $export = _dereq_(33); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


            $export($export.S + $export.F * !_dereq_(29), 'Object', {
              defineProperties: _dereq_(73)
            });
          }, {
            "29": 29,
            "33": 33,
            "73": 73
          }],
          193: [function (_dereq_, module, exports) {
            var $export = _dereq_(33); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


            $export($export.S + $export.F * !_dereq_(29), 'Object', {
              defineProperty: _dereq_(72).f
            });
          }, {
            "29": 29,
            "33": 33,
            "72": 72
          }],
          194: [function (_dereq_, module, exports) {
            // 19.1.2.5 Object.freeze(O)
            var isObject = _dereq_(51);

            var meta = _dereq_(66).onFreeze;

            _dereq_(83)('freeze', function ($freeze) {
              return function freeze(it) {
                return $freeze && isObject(it) ? $freeze(meta(it)) : it;
              };
            });
          }, {
            "51": 51,
            "66": 66,
            "83": 83
          }],
          195: [function (_dereq_, module, exports) {
            // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
            var toIObject = _dereq_(117);

            var $getOwnPropertyDescriptor = _dereq_(75).f;

            _dereq_(83)('getOwnPropertyDescriptor', function () {
              return function getOwnPropertyDescriptor(it, key) {
                return $getOwnPropertyDescriptor(toIObject(it), key);
              };
            });
          }, {
            "117": 117,
            "75": 75,
            "83": 83
          }],
          196: [function (_dereq_, module, exports) {
            // 19.1.2.7 Object.getOwnPropertyNames(O)
            _dereq_(83)('getOwnPropertyNames', function () {
              return _dereq_(76).f;
            });
          }, {
            "76": 76,
            "83": 83
          }],
          197: [function (_dereq_, module, exports) {
            // 19.1.2.9 Object.getPrototypeOf(O)
            var toObject = _dereq_(119);

            var $getPrototypeOf = _dereq_(79);

            _dereq_(83)('getPrototypeOf', function () {
              return function getPrototypeOf(it) {
                return $getPrototypeOf(toObject(it));
              };
            });
          }, {
            "119": 119,
            "79": 79,
            "83": 83
          }],
          198: [function (_dereq_, module, exports) {
            // 19.1.2.11 Object.isExtensible(O)
            var isObject = _dereq_(51);

            _dereq_(83)('isExtensible', function ($isExtensible) {
              return function isExtensible(it) {
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
              };
            });
          }, {
            "51": 51,
            "83": 83
          }],
          199: [function (_dereq_, module, exports) {
            // 19.1.2.12 Object.isFrozen(O)
            var isObject = _dereq_(51);

            _dereq_(83)('isFrozen', function ($isFrozen) {
              return function isFrozen(it) {
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
              };
            });
          }, {
            "51": 51,
            "83": 83
          }],
          200: [function (_dereq_, module, exports) {
            // 19.1.2.13 Object.isSealed(O)
            var isObject = _dereq_(51);

            _dereq_(83)('isSealed', function ($isSealed) {
              return function isSealed(it) {
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
              };
            });
          }, {
            "51": 51,
            "83": 83
          }],
          201: [function (_dereq_, module, exports) {
            // 19.1.3.10 Object.is(value1, value2)
            var $export = _dereq_(33);

            $export($export.S, 'Object', {
              is: _dereq_(96)
            });
          }, {
            "33": 33,
            "96": 96
          }],
          202: [function (_dereq_, module, exports) {
            // 19.1.2.14 Object.keys(O)
            var toObject = _dereq_(119);

            var $keys = _dereq_(81);

            _dereq_(83)('keys', function () {
              return function keys(it) {
                return $keys(toObject(it));
              };
            });
          }, {
            "119": 119,
            "81": 81,
            "83": 83
          }],
          203: [function (_dereq_, module, exports) {
            // 19.1.2.15 Object.preventExtensions(O)
            var isObject = _dereq_(51);

            var meta = _dereq_(66).onFreeze;

            _dereq_(83)('preventExtensions', function ($preventExtensions) {
              return function preventExtensions(it) {
                return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
              };
            });
          }, {
            "51": 51,
            "66": 66,
            "83": 83
          }],
          204: [function (_dereq_, module, exports) {
            // 19.1.2.17 Object.seal(O)
            var isObject = _dereq_(51);

            var meta = _dereq_(66).onFreeze;

            _dereq_(83)('seal', function ($seal) {
              return function seal(it) {
                return $seal && isObject(it) ? $seal(meta(it)) : it;
              };
            });
          }, {
            "51": 51,
            "66": 66,
            "83": 83
          }],
          205: [function (_dereq_, module, exports) {
            // 19.1.3.19 Object.setPrototypeOf(O, proto)
            var $export = _dereq_(33);

            $export($export.S, 'Object', {
              setPrototypeOf: _dereq_(99).set
            });
          }, {
            "33": 33,
            "99": 99
          }],
          206: [function (_dereq_, module, exports) {
            'use strict'; // 19.1.3.6 Object.prototype.toString()

            var classof = _dereq_(17);

            var test = {};
            test[_dereq_(128)('toStringTag')] = 'z';

            if (test + '' != '[object z]') {
              _dereq_(94)(Object.prototype, 'toString', function toString() {
                return '[object ' + classof(this) + ']';
              }, true);
            }
          }, {
            "128": 128,
            "17": 17,
            "94": 94
          }],
          207: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var $parseFloat = _dereq_(86); // 18.2.4 parseFloat(string)


            $export($export.G + $export.F * (parseFloat != $parseFloat), {
              parseFloat: $parseFloat
            });
          }, {
            "33": 33,
            "86": 86
          }],
          208: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var $parseInt = _dereq_(87); // 18.2.5 parseInt(string, radix)


            $export($export.G + $export.F * (parseInt != $parseInt), {
              parseInt: $parseInt
            });
          }, {
            "33": 33,
            "87": 87
          }],
          209: [function (_dereq_, module, exports) {
            'use strict';

            var LIBRARY = _dereq_(60);

            var global = _dereq_(40);

            var ctx = _dereq_(25);

            var classof = _dereq_(17);

            var $export = _dereq_(33);

            var isObject = _dereq_(51);

            var aFunction = _dereq_(3);

            var anInstance = _dereq_(6);

            var forOf = _dereq_(39);

            var speciesConstructor = _dereq_(104);

            var task = _dereq_(113).set;

            var microtask = _dereq_(68)();

            var newPromiseCapabilityModule = _dereq_(69);

            var perform = _dereq_(90);

            var promiseResolve = _dereq_(91);

            var PROMISE = 'Promise';
            var TypeError = global.TypeError;
            var process = global.process;
            var $Promise = global[PROMISE];
            var isNode = classof(process) == 'process';

            var empty = function empty() {
              /* empty */
            };

            var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
            var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
            var USE_NATIVE = !!function () {
              try {
                // correct subclassing with @@species support
                var promise = $Promise.resolve(1);

                var FakePromise = (promise.constructor = {})[_dereq_(128)('species')] = function (exec) {
                  exec(empty, empty);
                }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


                return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
              } catch (e) {
                /* empty */
              }
            }(); // helpers

            var sameConstructor = LIBRARY ? function (a, b) {
              // with library wrapper special case
              return a === b || a === $Promise && b === Wrapper;
            } : function (a, b) {
              return a === b;
            };

            var isThenable = function isThenable(it) {
              var then;
              return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
            };

            var notify = function notify(promise, isReject) {
              if (promise._n) return;
              promise._n = true;
              var chain = promise._c;
              microtask(function () {
                var value = promise._v;
                var ok = promise._s == 1;
                var i = 0;

                var run = function run(reaction) {
                  var handler = ok ? reaction.ok : reaction.fail;
                  var resolve = reaction.resolve;
                  var reject = reaction.reject;
                  var domain = reaction.domain;
                  var result, then;

                  try {
                    if (handler) {
                      if (!ok) {
                        if (promise._h == 2) onHandleUnhandled(promise);
                        promise._h = 1;
                      }

                      if (handler === true) result = value;else {
                        if (domain) domain.enter();
                        result = handler(value);
                        if (domain) domain.exit();
                      }

                      if (result === reaction.promise) {
                        reject(TypeError('Promise-chain cycle'));
                      } else if (then = isThenable(result)) {
                        then.call(result, resolve, reject);
                      } else resolve(result);
                    } else reject(value);
                  } catch (e) {
                    reject(e);
                  }
                };

                while (chain.length > i) {
                  run(chain[i++]);
                } // variable length - can't use forEach


                promise._c = [];
                promise._n = false;
                if (isReject && !promise._h) onUnhandled(promise);
              });
            };

            var onUnhandled = function onUnhandled(promise) {
              task.call(global, function () {
                var value = promise._v;
                var unhandled = isUnhandled(promise);
                var result, handler, console;

                if (unhandled) {
                  result = perform(function () {
                    if (isNode) {
                      process.emit('unhandledRejection', value, promise);
                    } else if (handler = global.onunhandledrejection) {
                      handler({
                        promise: promise,
                        reason: value
                      });
                    } else if ((console = global.console) && console.error) {
                      console.error('Unhandled promise rejection', value);
                    }
                  }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

                  promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                }

                promise._a = undefined;
                if (unhandled && result.e) throw result.v;
              });
            };

            var isUnhandled = function isUnhandled(promise) {
              if (promise._h == 1) return false;
              var chain = promise._a || promise._c;
              var i = 0;
              var reaction;

              while (chain.length > i) {
                reaction = chain[i++];
                if (reaction.fail || !isUnhandled(reaction.promise)) return false;
              }

              return true;
            };

            var onHandleUnhandled = function onHandleUnhandled(promise) {
              task.call(global, function () {
                var handler;

                if (isNode) {
                  process.emit('rejectionHandled', promise);
                } else if (handler = global.onrejectionhandled) {
                  handler({
                    promise: promise,
                    reason: promise._v
                  });
                }
              });
            };

            var $reject = function $reject(value) {
              var promise = this;
              if (promise._d) return;
              promise._d = true;
              promise = promise._w || promise; // unwrap

              promise._v = value;
              promise._s = 2;
              if (!promise._a) promise._a = promise._c.slice();
              notify(promise, true);
            };

            var $resolve = function $resolve(value) {
              var promise = this;
              var then;
              if (promise._d) return;
              promise._d = true;
              promise = promise._w || promise; // unwrap

              try {
                if (promise === value) throw TypeError("Promise can't be resolved itself");

                if (then = isThenable(value)) {
                  microtask(function () {
                    var wrapper = {
                      _w: promise,
                      _d: false
                    }; // wrap

                    try {
                      then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                    } catch (e) {
                      $reject.call(wrapper, e);
                    }
                  });
                } else {
                  promise._v = value;
                  promise._s = 1;
                  notify(promise, false);
                }
              } catch (e) {
                $reject.call({
                  _w: promise,
                  _d: false
                }, e); // wrap
              }
            }; // constructor polyfill


            if (!USE_NATIVE) {
              // 25.4.3.1 Promise(executor)
              $Promise = function Promise(executor) {
                anInstance(this, $Promise, PROMISE, '_h');
                aFunction(executor);
                Internal.call(this);

                try {
                  executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                } catch (err) {
                  $reject.call(this, err);
                }
              }; // eslint-disable-next-line no-unused-vars


              Internal = function Promise(executor) {
                this._c = []; // <- awaiting reactions

                this._a = undefined; // <- checked in isUnhandled reactions

                this._s = 0; // <- state

                this._d = false; // <- done

                this._v = undefined; // <- value

                this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

                this._n = false; // <- notify
              };

              Internal.prototype = _dereq_(93)($Promise.prototype, {
                // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
                then: function then(onFulfilled, onRejected) {
                  var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                  reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                  reaction.fail = typeof onRejected == 'function' && onRejected;
                  reaction.domain = isNode ? process.domain : undefined;

                  this._c.push(reaction);

                  if (this._a) this._a.push(reaction);
                  if (this._s) notify(this, false);
                  return reaction.promise;
                },
                // 25.4.5.1 Promise.prototype.catch(onRejected)
                'catch': function _catch(onRejected) {
                  return this.then(undefined, onRejected);
                }
              });

              OwnPromiseCapability = function OwnPromiseCapability() {
                var promise = new Internal();
                this.promise = promise;
                this.resolve = ctx($resolve, promise, 1);
                this.reject = ctx($reject, promise, 1);
              };

              newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
                return sameConstructor($Promise, C) ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
              };
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, {
              Promise: $Promise
            });

            _dereq_(101)($Promise, PROMISE);

            _dereq_(100)(PROMISE);

            Wrapper = _dereq_(23)[PROMISE]; // statics

            $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
              // 25.4.4.5 Promise.reject(r)
              reject: function reject(r) {
                var capability = newPromiseCapability(this);
                var $$reject = capability.reject;
                $$reject(r);
                return capability.promise;
              }
            });
            $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
              // 25.4.4.6 Promise.resolve(x)
              resolve: function resolve(x) {
                // instanceof instead of internal slot check because we should fix it without replacement native Promise core
                if (x instanceof $Promise && sameConstructor(x.constructor, this)) return x;
                return promiseResolve(this, x);
              }
            });
            $export($export.S + $export.F * !(USE_NATIVE && _dereq_(56)(function (iter) {
              $Promise.all(iter)['catch'](empty);
            })), PROMISE, {
              // 25.4.4.1 Promise.all(iterable)
              all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function () {
                  var values = [];
                  var index = 0;
                  var remaining = 1;
                  forOf(iterable, false, function (promise) {
                    var $index = index++;
                    var alreadyCalled = false;
                    values.push(undefined);
                    remaining++;
                    C.resolve(promise).then(function (value) {
                      if (alreadyCalled) return;
                      alreadyCalled = true;
                      values[$index] = value;
                      --remaining || resolve(values);
                    }, reject);
                  });
                  --remaining || resolve(values);
                });
                if (result.e) reject(result.v);
                return capability.promise;
              },
              // 25.4.4.4 Promise.race(iterable)
              race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function () {
                  forOf(iterable, false, function (promise) {
                    C.resolve(promise).then(capability.resolve, reject);
                  });
                });
                if (result.e) reject(result.v);
                return capability.promise;
              }
            });
          }, {
            "100": 100,
            "101": 101,
            "104": 104,
            "113": 113,
            "128": 128,
            "17": 17,
            "23": 23,
            "25": 25,
            "3": 3,
            "33": 33,
            "39": 39,
            "40": 40,
            "51": 51,
            "56": 56,
            "6": 6,
            "60": 60,
            "68": 68,
            "69": 69,
            "90": 90,
            "91": 91,
            "93": 93
          }],
          210: [function (_dereq_, module, exports) {
            // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
            var $export = _dereq_(33);

            var aFunction = _dereq_(3);

            var anObject = _dereq_(7);

            var rApply = (_dereq_(40).Reflect || {}).apply;
            var fApply = Function.apply; // MS Edge argumentsList argument is optional

            $export($export.S + $export.F * !_dereq_(35)(function () {
              rApply(function () {
                /* empty */
              });
            }), 'Reflect', {
              apply: function apply(target, thisArgument, argumentsList) {
                var T = aFunction(target);
                var L = anObject(argumentsList);
                return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
              }
            });
          }, {
            "3": 3,
            "33": 33,
            "35": 35,
            "40": 40,
            "7": 7
          }],
          211: [function (_dereq_, module, exports) {
            // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
            var $export = _dereq_(33);

            var create = _dereq_(71);

            var aFunction = _dereq_(3);

            var anObject = _dereq_(7);

            var isObject = _dereq_(51);

            var fails = _dereq_(35);

            var bind = _dereq_(16);

            var rConstruct = (_dereq_(40).Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
            // FF Nightly sets third argument as `new.target`, but does not create `this` from it

            var NEW_TARGET_BUG = fails(function () {
              function F() {
                /* empty */
              }

              return !(rConstruct(function () {
                /* empty */
              }, [], F) instanceof F);
            });
            var ARGS_BUG = !fails(function () {
              rConstruct(function () {
                /* empty */
              });
            });
            $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
              construct: function construct(Target, args
              /* , newTarget */
              ) {
                aFunction(Target);
                anObject(args);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

                if (Target == newTarget) {
                  // w/o altered newTarget, optimization for 0-4 arguments
                  switch (args.length) {
                    case 0:
                      return new Target();

                    case 1:
                      return new Target(args[0]);

                    case 2:
                      return new Target(args[0], args[1]);

                    case 3:
                      return new Target(args[0], args[1], args[2]);

                    case 4:
                      return new Target(args[0], args[1], args[2], args[3]);
                  } // w/o altered newTarget, lot of arguments case


                  var $args = [null];
                  $args.push.apply($args, args);
                  return new (bind.apply(Target, $args))();
                } // with altered newTarget, not support built-in constructors


                var proto = newTarget.prototype;
                var instance = create(isObject(proto) ? proto : Object.prototype);
                var result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance;
              }
            });
          }, {
            "16": 16,
            "3": 3,
            "33": 33,
            "35": 35,
            "40": 40,
            "51": 51,
            "7": 7,
            "71": 71
          }],
          212: [function (_dereq_, module, exports) {
            // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
            var dP = _dereq_(72);

            var $export = _dereq_(33);

            var anObject = _dereq_(7);

            var toPrimitive = _dereq_(120); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


            $export($export.S + $export.F * _dereq_(35)(function () {
              // eslint-disable-next-line no-undef
              Reflect.defineProperty(dP.f({}, 1, {
                value: 1
              }), 1, {
                value: 2
              });
            }), 'Reflect', {
              defineProperty: function defineProperty(target, propertyKey, attributes) {
                anObject(target);
                propertyKey = toPrimitive(propertyKey, true);
                anObject(attributes);

                try {
                  dP.f(target, propertyKey, attributes);
                  return true;
                } catch (e) {
                  return false;
                }
              }
            });
          }, {
            "120": 120,
            "33": 33,
            "35": 35,
            "7": 7,
            "72": 72
          }],
          213: [function (_dereq_, module, exports) {
            // 26.1.4 Reflect.deleteProperty(target, propertyKey)
            var $export = _dereq_(33);

            var gOPD = _dereq_(75).f;

            var anObject = _dereq_(7);

            $export($export.S, 'Reflect', {
              deleteProperty: function deleteProperty(target, propertyKey) {
                var desc = gOPD(anObject(target), propertyKey);
                return desc && !desc.configurable ? false : delete target[propertyKey];
              }
            });
          }, {
            "33": 33,
            "7": 7,
            "75": 75
          }],
          214: [function (_dereq_, module, exports) {
            'use strict'; // 26.1.5 Reflect.enumerate(target)

            var $export = _dereq_(33);

            var anObject = _dereq_(7);

            var Enumerate = function Enumerate(iterated) {
              this._t = anObject(iterated); // target

              this._i = 0; // next index

              var keys = this._k = []; // keys

              var key;

              for (key in iterated) {
                keys.push(key);
              }
            };

            _dereq_(54)(Enumerate, 'Object', function () {
              var that = this;
              var keys = that._k;
              var key;

              do {
                if (that._i >= keys.length) return {
                  value: undefined,
                  done: true
                };
              } while (!((key = keys[that._i++]) in that._t));

              return {
                value: key,
                done: false
              };
            });

            $export($export.S, 'Reflect', {
              enumerate: function enumerate(target) {
                return new Enumerate(target);
              }
            });
          }, {
            "33": 33,
            "54": 54,
            "7": 7
          }],
          215: [function (_dereq_, module, exports) {
            // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
            var gOPD = _dereq_(75);

            var $export = _dereq_(33);

            var anObject = _dereq_(7);

            $export($export.S, 'Reflect', {
              getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                return gOPD.f(anObject(target), propertyKey);
              }
            });
          }, {
            "33": 33,
            "7": 7,
            "75": 75
          }],
          216: [function (_dereq_, module, exports) {
            // 26.1.8 Reflect.getPrototypeOf(target)
            var $export = _dereq_(33);

            var getProto = _dereq_(79);

            var anObject = _dereq_(7);

            $export($export.S, 'Reflect', {
              getPrototypeOf: function getPrototypeOf(target) {
                return getProto(anObject(target));
              }
            });
          }, {
            "33": 33,
            "7": 7,
            "79": 79
          }],
          217: [function (_dereq_, module, exports) {
            // 26.1.6 Reflect.get(target, propertyKey [, receiver])
            var gOPD = _dereq_(75);

            var getPrototypeOf = _dereq_(79);

            var has = _dereq_(41);

            var $export = _dereq_(33);

            var isObject = _dereq_(51);

            var anObject = _dereq_(7);

            function get(target, propertyKey
            /* , receiver */
            ) {
              var receiver = arguments.length < 3 ? target : arguments[2];
              var desc, proto;
              if (anObject(target) === receiver) return target[propertyKey];
              if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
              if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
            }

            $export($export.S, 'Reflect', {
              get: get
            });
          }, {
            "33": 33,
            "41": 41,
            "51": 51,
            "7": 7,
            "75": 75,
            "79": 79
          }],
          218: [function (_dereq_, module, exports) {
            // 26.1.9 Reflect.has(target, propertyKey)
            var $export = _dereq_(33);

            $export($export.S, 'Reflect', {
              has: function has(target, propertyKey) {
                return propertyKey in target;
              }
            });
          }, {
            "33": 33
          }],
          219: [function (_dereq_, module, exports) {
            // 26.1.10 Reflect.isExtensible(target)
            var $export = _dereq_(33);

            var anObject = _dereq_(7);

            var $isExtensible = Object.isExtensible;
            $export($export.S, 'Reflect', {
              isExtensible: function isExtensible(target) {
                anObject(target);
                return $isExtensible ? $isExtensible(target) : true;
              }
            });
          }, {
            "33": 33,
            "7": 7
          }],
          220: [function (_dereq_, module, exports) {
            // 26.1.11 Reflect.ownKeys(target)
            var $export = _dereq_(33);

            $export($export.S, 'Reflect', {
              ownKeys: _dereq_(85)
            });
          }, {
            "33": 33,
            "85": 85
          }],
          221: [function (_dereq_, module, exports) {
            // 26.1.12 Reflect.preventExtensions(target)
            var $export = _dereq_(33);

            var anObject = _dereq_(7);

            var $preventExtensions = Object.preventExtensions;
            $export($export.S, 'Reflect', {
              preventExtensions: function preventExtensions(target) {
                anObject(target);

                try {
                  if ($preventExtensions) $preventExtensions(target);
                  return true;
                } catch (e) {
                  return false;
                }
              }
            });
          }, {
            "33": 33,
            "7": 7
          }],
          222: [function (_dereq_, module, exports) {
            // 26.1.14 Reflect.setPrototypeOf(target, proto)
            var $export = _dereq_(33);

            var setProto = _dereq_(99);

            if (setProto) $export($export.S, 'Reflect', {
              setPrototypeOf: function setPrototypeOf(target, proto) {
                setProto.check(target, proto);

                try {
                  setProto.set(target, proto);
                  return true;
                } catch (e) {
                  return false;
                }
              }
            });
          }, {
            "33": 33,
            "99": 99
          }],
          223: [function (_dereq_, module, exports) {
            // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
            var dP = _dereq_(72);

            var gOPD = _dereq_(75);

            var getPrototypeOf = _dereq_(79);

            var has = _dereq_(41);

            var $export = _dereq_(33);

            var createDesc = _dereq_(92);

            var anObject = _dereq_(7);

            var isObject = _dereq_(51);

            function set(target, propertyKey, V
            /* , receiver */
            ) {
              var receiver = arguments.length < 4 ? target : arguments[3];
              var ownDesc = gOPD.f(anObject(target), propertyKey);
              var existingDescriptor, proto;

              if (!ownDesc) {
                if (isObject(proto = getPrototypeOf(target))) {
                  return set(proto, propertyKey, V, receiver);
                }

                ownDesc = createDesc(0);
              }

              if (has(ownDesc, 'value')) {
                if (ownDesc.writable === false || !isObject(receiver)) return false;
                existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
                existingDescriptor.value = V;
                dP.f(receiver, propertyKey, existingDescriptor);
                return true;
              }

              return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
            }

            $export($export.S, 'Reflect', {
              set: set
            });
          }, {
            "33": 33,
            "41": 41,
            "51": 51,
            "7": 7,
            "72": 72,
            "75": 75,
            "79": 79,
            "92": 92
          }],
          224: [function (_dereq_, module, exports) {
            var global = _dereq_(40);

            var inheritIfRequired = _dereq_(45);

            var dP = _dereq_(72).f;

            var gOPN = _dereq_(77).f;

            var isRegExp = _dereq_(52);

            var $flags = _dereq_(37);

            var $RegExp = global.RegExp;
            var Base = $RegExp;
            var proto = $RegExp.prototype;
            var re1 = /a/g;
            var re2 = /a/g; // "new" creates a new object, old webkit buggy here

            var CORRECT_NEW = new $RegExp(re1) !== re1;

            if (_dereq_(29) && (!CORRECT_NEW || _dereq_(35)(function () {
              re2[_dereq_(128)('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

              return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
            }))) {
              $RegExp = function RegExp(p, f) {
                var tiRE = this instanceof $RegExp;
                var piRE = isRegExp(p);
                var fiU = f === undefined;
                return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
              };

              var proxy = function proxy(key) {
                key in $RegExp || dP($RegExp, key, {
                  configurable: true,
                  get: function get() {
                    return Base[key];
                  },
                  set: function set(it) {
                    Base[key] = it;
                  }
                });
              };

              for (var keys = gOPN(Base), i = 0; keys.length > i;) {
                proxy(keys[i++]);
              }

              proto.constructor = $RegExp;
              $RegExp.prototype = proto;

              _dereq_(94)(global, 'RegExp', $RegExp);
            }

            _dereq_(100)('RegExp');
          }, {
            "100": 100,
            "128": 128,
            "29": 29,
            "35": 35,
            "37": 37,
            "40": 40,
            "45": 45,
            "52": 52,
            "72": 72,
            "77": 77,
            "94": 94
          }],
          225: [function (_dereq_, module, exports) {
            // 21.2.5.3 get RegExp.prototype.flags()
            if (_dereq_(29) && /./g.flags != 'g') _dereq_(72).f(RegExp.prototype, 'flags', {
              configurable: true,
              get: _dereq_(37)
            });
          }, {
            "29": 29,
            "37": 37,
            "72": 72
          }],
          226: [function (_dereq_, module, exports) {
            // @@match logic
            _dereq_(36)('match', 1, function (defined, MATCH, $match) {
              // 21.1.3.11 String.prototype.match(regexp)
              return [function match(regexp) {
                'use strict';

                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[MATCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
              }, $match];
            });
          }, {
            "36": 36
          }],
          227: [function (_dereq_, module, exports) {
            // @@replace logic
            _dereq_(36)('replace', 2, function (defined, REPLACE, $replace) {
              // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
              return [function replace(searchValue, replaceValue) {
                'use strict';

                var O = defined(this);
                var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
              }, $replace];
            });
          }, {
            "36": 36
          }],
          228: [function (_dereq_, module, exports) {
            // @@search logic
            _dereq_(36)('search', 1, function (defined, SEARCH, $search) {
              // 21.1.3.15 String.prototype.search(regexp)
              return [function search(regexp) {
                'use strict';

                var O = defined(this);
                var fn = regexp == undefined ? undefined : regexp[SEARCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
              }, $search];
            });
          }, {
            "36": 36
          }],
          229: [function (_dereq_, module, exports) {
            // @@split logic
            _dereq_(36)('split', 2, function (defined, SPLIT, $split) {
              'use strict';

              var isRegExp = _dereq_(52);

              var _split = $split;
              var $push = [].push;
              var $SPLIT = 'split';
              var LENGTH = 'length';
              var LAST_INDEX = 'lastIndex';

              if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
                var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
                // based on es5-shim implementation, need to rework it

                $split = function $split(separator, limit) {
                  var string = String(this);
                  if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

                  if (!isRegExp(separator)) return _split.call(string, separator, limit);
                  var output = [];
                  var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
                  var lastLastIndex = 0;
                  var splitLimit = limit === undefined ? 4294967295 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

                  var separatorCopy = new RegExp(separator.source, flags + 'g');
                  var separator2, match, lastIndex, lastLength, i; // Doesn't need flags gy, but they don't hurt

                  if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);

                  while (match = separatorCopy.exec(string)) {
                    // `separatorCopy.lastIndex` is not reliable cross-browser
                    lastIndex = match.index + match[0][LENGTH];

                    if (lastIndex > lastLastIndex) {
                      output.push(string.slice(lastLastIndex, match.index)); // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
                      // eslint-disable-next-line no-loop-func

                      if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                        for (i = 1; i < arguments[LENGTH] - 2; i++) {
                          if (arguments[i] === undefined) match[i] = undefined;
                        }
                      });
                      if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                      lastLength = match[0][LENGTH];
                      lastLastIndex = lastIndex;
                      if (output[LENGTH] >= splitLimit) break;
                    }

                    if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
                  }

                  if (lastLastIndex === string[LENGTH]) {
                    if (lastLength || !separatorCopy.test('')) output.push('');
                  } else output.push(string.slice(lastLastIndex));

                  return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
                }; // Chakra, V8

              } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
                $split = function $split(separator, limit) {
                  return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
                };
              } // 21.1.3.17 String.prototype.split(separator, limit)


              return [function split(separator, limit) {
                var O = defined(this);
                var fn = separator == undefined ? undefined : separator[SPLIT];
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
              }, $split];
            });
          }, {
            "36": 36,
            "52": 52
          }],
          230: [function (_dereq_, module, exports) {
            'use strict';

            _dereq_(225);

            var anObject = _dereq_(7);

            var $flags = _dereq_(37);

            var DESCRIPTORS = _dereq_(29);

            var TO_STRING = 'toString';
            var $toString = /./[TO_STRING];

            var define = function define(fn) {
              _dereq_(94)(RegExp.prototype, TO_STRING, fn, true);
            }; // 21.2.5.14 RegExp.prototype.toString()


            if (_dereq_(35)(function () {
              return $toString.call({
                source: 'a',
                flags: 'b'
              }) != '/a/b';
            })) {
              define(function toString() {
                var R = anObject(this);
                return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
              }); // FF44- RegExp#toString has a wrong name
            } else if ($toString.name != TO_STRING) {
              define(function toString() {
                return $toString.call(this);
              });
            }
          }, {
            "225": 225,
            "29": 29,
            "35": 35,
            "37": 37,
            "7": 7,
            "94": 94
          }],
          231: [function (_dereq_, module, exports) {
            'use strict';

            var strong = _dereq_(19);

            var validate = _dereq_(125);

            var SET = 'Set'; // 23.2 Set Objects

            module.exports = _dereq_(22)(SET, function (get) {
              return function Set() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              };
            }, {
              // 23.2.3.1 Set.prototype.add(value)
              add: function add(value) {
                return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
              }
            }, strong);
          }, {
            "125": 125,
            "19": 19,
            "22": 22
          }],
          232: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.2 String.prototype.anchor(name)

            _dereq_(108)('anchor', function (createHTML) {
              return function anchor(name) {
                return createHTML(this, 'a', 'name', name);
              };
            });
          }, {
            "108": 108
          }],
          233: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.3 String.prototype.big()

            _dereq_(108)('big', function (createHTML) {
              return function big() {
                return createHTML(this, 'big', '', '');
              };
            });
          }, {
            "108": 108
          }],
          234: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.4 String.prototype.blink()

            _dereq_(108)('blink', function (createHTML) {
              return function blink() {
                return createHTML(this, 'blink', '', '');
              };
            });
          }, {
            "108": 108
          }],
          235: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.5 String.prototype.bold()

            _dereq_(108)('bold', function (createHTML) {
              return function bold() {
                return createHTML(this, 'b', '', '');
              };
            });
          }, {
            "108": 108
          }],
          236: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $at = _dereq_(106)(false);

            $export($export.P, 'String', {
              // 21.1.3.3 String.prototype.codePointAt(pos)
              codePointAt: function codePointAt(pos) {
                return $at(this, pos);
              }
            });
          }, {
            "106": 106,
            "33": 33
          }],
          237: [function (_dereq_, module, exports) {
            // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
            'use strict';

            var $export = _dereq_(33);

            var toLength = _dereq_(118);

            var context = _dereq_(107);

            var ENDS_WITH = 'endsWith';
            var $endsWith = ''[ENDS_WITH];
            $export($export.P + $export.F * _dereq_(34)(ENDS_WITH), 'String', {
              endsWith: function endsWith(searchString
              /* , endPosition = @length */
              ) {
                var that = context(this, searchString, ENDS_WITH);
                var endPosition = arguments.length > 1 ? arguments[1] : undefined;
                var len = toLength(that.length);
                var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
                var search = String(searchString);
                return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
              }
            });
          }, {
            "107": 107,
            "118": 118,
            "33": 33,
            "34": 34
          }],
          238: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.6 String.prototype.fixed()

            _dereq_(108)('fixed', function (createHTML) {
              return function fixed() {
                return createHTML(this, 'tt', '', '');
              };
            });
          }, {
            "108": 108
          }],
          239: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.7 String.prototype.fontcolor(color)

            _dereq_(108)('fontcolor', function (createHTML) {
              return function fontcolor(color) {
                return createHTML(this, 'font', 'color', color);
              };
            });
          }, {
            "108": 108
          }],
          240: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.8 String.prototype.fontsize(size)

            _dereq_(108)('fontsize', function (createHTML) {
              return function fontsize(size) {
                return createHTML(this, 'font', 'size', size);
              };
            });
          }, {
            "108": 108
          }],
          241: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var toAbsoluteIndex = _dereq_(114);

            var fromCharCode = String.fromCharCode;
            var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
              // 21.1.2.2 String.fromCodePoint(...codePoints)
              fromCodePoint: function fromCodePoint(x) {
                // eslint-disable-line no-unused-vars
                var res = [];
                var aLen = arguments.length;
                var i = 0;
                var code;

                while (aLen > i) {
                  code = +arguments[i++];
                  if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
                  res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
                }

                return res.join('');
              }
            });
          }, {
            "114": 114,
            "33": 33
          }],
          242: [function (_dereq_, module, exports) {
            // 21.1.3.7 String.prototype.includes(searchString, position = 0)
            'use strict';

            var $export = _dereq_(33);

            var context = _dereq_(107);

            var INCLUDES = 'includes';
            $export($export.P + $export.F * _dereq_(34)(INCLUDES), 'String', {
              includes: function includes(searchString
              /* , position = 0 */
              ) {
                return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
              }
            });
          }, {
            "107": 107,
            "33": 33,
            "34": 34
          }],
          243: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.9 String.prototype.italics()

            _dereq_(108)('italics', function (createHTML) {
              return function italics() {
                return createHTML(this, 'i', '', '');
              };
            });
          }, {
            "108": 108
          }],
          244: [function (_dereq_, module, exports) {
            'use strict';

            var $at = _dereq_(106)(true); // 21.1.3.27 String.prototype[@@iterator]()


            _dereq_(55)(String, 'String', function (iterated) {
              this._t = String(iterated); // target

              this._i = 0; // next index
              // 21.1.5.2.1 %StringIteratorPrototype%.next()
            }, function () {
              var O = this._t;
              var index = this._i;
              var point;
              if (index >= O.length) return {
                value: undefined,
                done: true
              };
              point = $at(O, index);
              this._i += point.length;
              return {
                value: point,
                done: false
              };
            });
          }, {
            "106": 106,
            "55": 55
          }],
          245: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.10 String.prototype.link(url)

            _dereq_(108)('link', function (createHTML) {
              return function link(url) {
                return createHTML(this, 'a', 'href', url);
              };
            });
          }, {
            "108": 108
          }],
          246: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var toIObject = _dereq_(117);

            var toLength = _dereq_(118);

            $export($export.S, 'String', {
              // 21.1.2.4 String.raw(callSite, ...substitutions)
              raw: function raw(callSite) {
                var tpl = toIObject(callSite.raw);
                var len = toLength(tpl.length);
                var aLen = arguments.length;
                var res = [];
                var i = 0;

                while (len > i) {
                  res.push(String(tpl[i++]));
                  if (i < aLen) res.push(String(arguments[i]));
                }

                return res.join('');
              }
            });
          }, {
            "117": 117,
            "118": 118,
            "33": 33
          }],
          247: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            $export($export.P, 'String', {
              // 21.1.3.13 String.prototype.repeat(count)
              repeat: _dereq_(110)
            });
          }, {
            "110": 110,
            "33": 33
          }],
          248: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.11 String.prototype.small()

            _dereq_(108)('small', function (createHTML) {
              return function small() {
                return createHTML(this, 'small', '', '');
              };
            });
          }, {
            "108": 108
          }],
          249: [function (_dereq_, module, exports) {
            // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
            'use strict';

            var $export = _dereq_(33);

            var toLength = _dereq_(118);

            var context = _dereq_(107);

            var STARTS_WITH = 'startsWith';
            var $startsWith = ''[STARTS_WITH];
            $export($export.P + $export.F * _dereq_(34)(STARTS_WITH), 'String', {
              startsWith: function startsWith(searchString
              /* , position = 0 */
              ) {
                var that = context(this, searchString, STARTS_WITH);
                var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
                var search = String(searchString);
                return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
              }
            });
          }, {
            "107": 107,
            "118": 118,
            "33": 33,
            "34": 34
          }],
          250: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.12 String.prototype.strike()

            _dereq_(108)('strike', function (createHTML) {
              return function strike() {
                return createHTML(this, 'strike', '', '');
              };
            });
          }, {
            "108": 108
          }],
          251: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.13 String.prototype.sub()

            _dereq_(108)('sub', function (createHTML) {
              return function sub() {
                return createHTML(this, 'sub', '', '');
              };
            });
          }, {
            "108": 108
          }],
          252: [function (_dereq_, module, exports) {
            'use strict'; // B.2.3.14 String.prototype.sup()

            _dereq_(108)('sup', function (createHTML) {
              return function sup() {
                return createHTML(this, 'sup', '', '');
              };
            });
          }, {
            "108": 108
          }],
          253: [function (_dereq_, module, exports) {
            'use strict'; // 21.1.3.25 String.prototype.trim()

            _dereq_(111)('trim', function ($trim) {
              return function trim() {
                return $trim(this, 3);
              };
            });
          }, {
            "111": 111
          }],
          254: [function (_dereq_, module, exports) {
            'use strict'; // ECMAScript 6 symbols shim

            var global = _dereq_(40);

            var has = _dereq_(41);

            var DESCRIPTORS = _dereq_(29);

            var $export = _dereq_(33);

            var redefine = _dereq_(94);

            var META = _dereq_(66).KEY;

            var $fails = _dereq_(35);

            var shared = _dereq_(103);

            var setToStringTag = _dereq_(101);

            var uid = _dereq_(124);

            var wks = _dereq_(128);

            var wksExt = _dereq_(127);

            var wksDefine = _dereq_(126);

            var keyOf = _dereq_(59);

            var enumKeys = _dereq_(32);

            var isArray = _dereq_(49);

            var anObject = _dereq_(7);

            var toIObject = _dereq_(117);

            var toPrimitive = _dereq_(120);

            var createDesc = _dereq_(92);

            var _create = _dereq_(71);

            var gOPNExt = _dereq_(76);

            var $GOPD = _dereq_(75);

            var $DP = _dereq_(72);

            var $keys = _dereq_(81);

            var gOPD = $GOPD.f;
            var dP = $DP.f;
            var gOPN = gOPNExt.f;
            var $Symbol = global.Symbol;
            var $JSON = global.JSON;

            var _stringify = $JSON && $JSON.stringify;

            var PROTOTYPE = 'prototype';
            var HIDDEN = wks('_hidden');
            var TO_PRIMITIVE = wks('toPrimitive');
            var isEnum = {}.propertyIsEnumerable;
            var SymbolRegistry = shared('symbol-registry');
            var AllSymbols = shared('symbols');
            var OPSymbols = shared('op-symbols');
            var ObjectProto = Object[PROTOTYPE];
            var USE_NATIVE = typeof $Symbol == 'function';
            var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

            var setSymbolDesc = DESCRIPTORS && $fails(function () {
              return _create(dP({}, 'a', {
                get: function get() {
                  return dP(this, 'a', {
                    value: 7
                  }).a;
                }
              })).a != 7;
            }) ? function (it, key, D) {
              var protoDesc = gOPD(ObjectProto, key);
              if (protoDesc) delete ObjectProto[key];
              dP(it, key, D);
              if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
            } : dP;

            var wrap = function wrap(tag) {
              var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

              sym._k = tag;
              return sym;
            };

            var isSymbol = USE_NATIVE && _typeof2($Symbol.iterator) == 'symbol' ? function (it) {
              return _typeof2(it) == 'symbol';
            } : function (it) {
              return it instanceof $Symbol;
            };

            var $defineProperty = function defineProperty(it, key, D) {
              if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
              anObject(it);
              key = toPrimitive(key, true);
              anObject(D);

              if (has(AllSymbols, key)) {
                if (!D.enumerable) {
                  if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
                  it[HIDDEN][key] = true;
                } else {
                  if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                  D = _create(D, {
                    enumerable: createDesc(0, false)
                  });
                }

                return setSymbolDesc(it, key, D);
              }

              return dP(it, key, D);
            };

            var $defineProperties = function defineProperties(it, P) {
              anObject(it);
              var keys = enumKeys(P = toIObject(P));
              var i = 0;
              var l = keys.length;
              var key;

              while (l > i) {
                $defineProperty(it, key = keys[i++], P[key]);
              }

              return it;
            };

            var $create = function create(it, P) {
              return P === undefined ? _create(it) : $defineProperties(_create(it), P);
            };

            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
              var E = isEnum.call(this, key = toPrimitive(key, true));
              if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
              return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };

            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
              it = toIObject(it);
              key = toPrimitive(key, true);
              if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
              var D = gOPD(it, key);
              if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
              return D;
            };

            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
              var names = gOPN(toIObject(it));
              var result = [];
              var i = 0;
              var key;

              while (names.length > i) {
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
              }

              return result;
            };

            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
              var IS_OP = it === ObjectProto;
              var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
              var result = [];
              var i = 0;
              var key;

              while (names.length > i) {
                if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
              }

              return result;
            }; // 19.4.1.1 Symbol([description])


            if (!USE_NATIVE) {
              $Symbol = function _Symbol2() {
                if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
                var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

                var $set = function $set(value) {
                  if (this === ObjectProto) $set.call(OPSymbols, value);
                  if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                  setSymbolDesc(this, tag, createDesc(1, value));
                };

                if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
                  configurable: true,
                  set: $set
                });
                return wrap(tag);
              };

              redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                return this._k;
              });
              $GOPD.f = $getOwnPropertyDescriptor;
              $DP.f = $defineProperty;
              _dereq_(77).f = gOPNExt.f = $getOwnPropertyNames;
              _dereq_(82).f = $propertyIsEnumerable;
              _dereq_(78).f = $getOwnPropertySymbols;

              if (DESCRIPTORS && !_dereq_(60)) {
                redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
              }

              wksExt.f = function (name) {
                return wrap(wks(name));
              };
            }

            $export($export.G + $export.W + $export.F * !USE_NATIVE, {
              Symbol: $Symbol
            });

            for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
            'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
              wks(es6Symbols[j++]);
            }

            for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
              wksDefine(wellKnownSymbols[k++]);
            }

            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
              // 19.4.2.1 Symbol.for(key)
              'for': function _for(key) {
                return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
              },
              // 19.4.2.5 Symbol.keyFor(sym)
              keyFor: function keyFor(key) {
                if (isSymbol(key)) return keyOf(SymbolRegistry, key);
                throw TypeError(key + ' is not a symbol!');
              },
              useSetter: function useSetter() {
                setter = true;
              },
              useSimple: function useSimple() {
                setter = false;
              }
            });
            $export($export.S + $export.F * !USE_NATIVE, 'Object', {
              // 19.1.2.2 Object.create(O [, Properties])
              create: $create,
              // 19.1.2.4 Object.defineProperty(O, P, Attributes)
              defineProperty: $defineProperty,
              // 19.1.2.3 Object.defineProperties(O, Properties)
              defineProperties: $defineProperties,
              // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
              getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
              // 19.1.2.7 Object.getOwnPropertyNames(O)
              getOwnPropertyNames: $getOwnPropertyNames,
              // 19.1.2.8 Object.getOwnPropertySymbols(O)
              getOwnPropertySymbols: $getOwnPropertySymbols
            }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
              var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
              // WebKit converts symbol values to JSON as null
              // V8 throws on boxed symbols

              return _stringify([S]) != '[null]' || _stringify({
                a: S
              }) != '{}' || _stringify(Object(S)) != '{}';
            })), 'JSON', {
              stringify: function stringify(it) {
                if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

                var args = [it];
                var i = 1;
                var replacer, $replacer;

                while (arguments.length > i) {
                  args.push(arguments[i++]);
                }

                replacer = args[1];
                if (typeof replacer == 'function') $replacer = replacer;
                if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
                  if ($replacer) value = $replacer.call(this, key, value);
                  if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return _stringify.apply($JSON, args);
              }
            }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

            $Symbol[PROTOTYPE][TO_PRIMITIVE] || _dereq_(42)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

            setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

            setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

            setToStringTag(global.JSON, 'JSON', true);
          }, {
            "101": 101,
            "103": 103,
            "117": 117,
            "120": 120,
            "124": 124,
            "126": 126,
            "127": 127,
            "128": 128,
            "29": 29,
            "32": 32,
            "33": 33,
            "35": 35,
            "40": 40,
            "41": 41,
            "42": 42,
            "49": 49,
            "59": 59,
            "60": 60,
            "66": 66,
            "7": 7,
            "71": 71,
            "72": 72,
            "75": 75,
            "76": 76,
            "77": 77,
            "78": 78,
            "81": 81,
            "82": 82,
            "92": 92,
            "94": 94
          }],
          255: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var $typed = _dereq_(123);

            var buffer = _dereq_(122);

            var anObject = _dereq_(7);

            var toAbsoluteIndex = _dereq_(114);

            var toLength = _dereq_(118);

            var isObject = _dereq_(51);

            var ArrayBuffer = _dereq_(40).ArrayBuffer;

            var speciesConstructor = _dereq_(104);

            var $ArrayBuffer = buffer.ArrayBuffer;
            var $DataView = buffer.DataView;
            var $isView = $typed.ABV && ArrayBuffer.isView;
            var $slice = $ArrayBuffer.prototype.slice;
            var VIEW = $typed.VIEW;
            var ARRAY_BUFFER = 'ArrayBuffer';
            $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
              ArrayBuffer: $ArrayBuffer
            });
            $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
              // 24.1.3.1 ArrayBuffer.isView(arg)
              isView: function isView(it) {
                return $isView && $isView(it) || isObject(it) && VIEW in it;
              }
            });
            $export($export.P + $export.U + $export.F * _dereq_(35)(function () {
              return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
            }), ARRAY_BUFFER, {
              // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
              slice: function slice(start, end) {
                if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix

                var len = anObject(this).byteLength;
                var first = toAbsoluteIndex(start, len);

                var _final = toAbsoluteIndex(end === undefined ? len : end, len);

                var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(_final - first));
                var viewS = new $DataView(this);
                var viewT = new $DataView(result);
                var index = 0;

                while (first < _final) {
                  viewT.setUint8(index++, viewS.getUint8(first++));
                }

                return result;
              }
            });

            _dereq_(100)(ARRAY_BUFFER);
          }, {
            "100": 100,
            "104": 104,
            "114": 114,
            "118": 118,
            "122": 122,
            "123": 123,
            "33": 33,
            "35": 35,
            "40": 40,
            "51": 51,
            "7": 7
          }],
          256: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            $export($export.G + $export.W + $export.F * !_dereq_(123).ABV, {
              DataView: _dereq_(122).DataView
            });
          }, {
            "122": 122,
            "123": 123,
            "33": 33
          }],
          257: [function (_dereq_, module, exports) {
            _dereq_(121)('Float32', 4, function (init) {
              return function Float32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          258: [function (_dereq_, module, exports) {
            _dereq_(121)('Float64', 8, function (init) {
              return function Float64Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          259: [function (_dereq_, module, exports) {
            _dereq_(121)('Int16', 2, function (init) {
              return function Int16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          260: [function (_dereq_, module, exports) {
            _dereq_(121)('Int32', 4, function (init) {
              return function Int32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          261: [function (_dereq_, module, exports) {
            _dereq_(121)('Int8', 1, function (init) {
              return function Int8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          262: [function (_dereq_, module, exports) {
            _dereq_(121)('Uint16', 2, function (init) {
              return function Uint16Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          263: [function (_dereq_, module, exports) {
            _dereq_(121)('Uint32', 4, function (init) {
              return function Uint32Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          264: [function (_dereq_, module, exports) {
            _dereq_(121)('Uint8', 1, function (init) {
              return function Uint8Array(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            });
          }, {
            "121": 121
          }],
          265: [function (_dereq_, module, exports) {
            _dereq_(121)('Uint8', 1, function (init) {
              return function Uint8ClampedArray(data, byteOffset, length) {
                return init(this, data, byteOffset, length);
              };
            }, true);
          }, {
            "121": 121
          }],
          266: [function (_dereq_, module, exports) {
            'use strict';

            var each = _dereq_(12)(0);

            var redefine = _dereq_(94);

            var meta = _dereq_(66);

            var assign = _dereq_(70);

            var weak = _dereq_(21);

            var isObject = _dereq_(51);

            var fails = _dereq_(35);

            var validate = _dereq_(125);

            var WEAK_MAP = 'WeakMap';
            var getWeak = meta.getWeak;
            var isExtensible = Object.isExtensible;
            var uncaughtFrozenStore = weak.ufstore;
            var tmp = {};
            var InternalMap;

            var wrapper = function wrapper(get) {
              return function WeakMap() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              };
            };

            var methods = {
              // 23.3.3.3 WeakMap.prototype.get(key)
              get: function get(key) {
                if (isObject(key)) {
                  var data = getWeak(key);
                  if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
                  return data ? data[this._i] : undefined;
                }
              },
              // 23.3.3.5 WeakMap.prototype.set(key, value)
              set: function set(key, value) {
                return weak.def(validate(this, WEAK_MAP), key, value);
              }
            }; // 23.3 WeakMap Objects

            var $WeakMap = module.exports = _dereq_(22)(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


            if (fails(function () {
              return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
            })) {
              InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
              assign(InternalMap.prototype, methods);
              meta.NEED = true;
              each(['delete', 'has', 'get', 'set'], function (key) {
                var proto = $WeakMap.prototype;
                var method = proto[key];
                redefine(proto, key, function (a, b) {
                  // store frozen objects on internal weakmap shim
                  if (isObject(a) && !isExtensible(a)) {
                    if (!this._f) this._f = new InternalMap();

                    var result = this._f[key](a, b);

                    return key == 'set' ? this : result; // store all the rest on native weakmap
                  }

                  return method.call(this, a, b);
                });
              });
            }
          }, {
            "12": 12,
            "125": 125,
            "21": 21,
            "22": 22,
            "35": 35,
            "51": 51,
            "66": 66,
            "70": 70,
            "94": 94
          }],
          267: [function (_dereq_, module, exports) {
            'use strict';

            var weak = _dereq_(21);

            var validate = _dereq_(125);

            var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

            _dereq_(22)(WEAK_SET, function (get) {
              return function WeakSet() {
                return get(this, arguments.length > 0 ? arguments[0] : undefined);
              };
            }, {
              // 23.4.3.1 WeakSet.prototype.add(value)
              add: function add(value) {
                return weak.def(validate(this, WEAK_SET), value, true);
              }
            }, weak, false, true);
          }, {
            "125": 125,
            "21": 21,
            "22": 22
          }],
          268: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

            var $export = _dereq_(33);

            var flattenIntoArray = _dereq_(38);

            var toObject = _dereq_(119);

            var toLength = _dereq_(118);

            var aFunction = _dereq_(3);

            var arraySpeciesCreate = _dereq_(15);

            $export($export.P, 'Array', {
              flatMap: function flatMap(callbackfn
              /* , thisArg */
              ) {
                var O = toObject(this);
                var sourceLen, A;
                aFunction(callbackfn);
                sourceLen = toLength(O.length);
                A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                return A;
              }
            });

            _dereq_(5)('flatMap');
          }, {
            "118": 118,
            "119": 119,
            "15": 15,
            "3": 3,
            "33": 33,
            "38": 38,
            "5": 5
          }],
          269: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

            var $export = _dereq_(33);

            var flattenIntoArray = _dereq_(38);

            var toObject = _dereq_(119);

            var toLength = _dereq_(118);

            var toInteger = _dereq_(116);

            var arraySpeciesCreate = _dereq_(15);

            $export($export.P, 'Array', {
              flatten: function flatten()
              /* depthArg = 1 */
              {
                var depthArg = arguments[0];
                var O = toObject(this);
                var sourceLen = toLength(O.length);
                var A = arraySpeciesCreate(O, 0);
                flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                return A;
              }
            });

            _dereq_(5)('flatten');
          }, {
            "116": 116,
            "118": 118,
            "119": 119,
            "15": 15,
            "33": 33,
            "38": 38,
            "5": 5
          }],
          270: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/tc39/Array.prototype.includes

            var $export = _dereq_(33);

            var $includes = _dereq_(11)(true);

            $export($export.P, 'Array', {
              includes: function includes(el
              /* , fromIndex = 0 */
              ) {
                return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
              }
            });

            _dereq_(5)('includes');
          }, {
            "11": 11,
            "33": 33,
            "5": 5
          }],
          271: [function (_dereq_, module, exports) {
            // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
            var $export = _dereq_(33);

            var microtask = _dereq_(68)();

            var process = _dereq_(40).process;

            var isNode = _dereq_(18)(process) == 'process';
            $export($export.G, {
              asap: function asap(fn) {
                var domain = isNode && process.domain;
                microtask(domain ? domain.bind(fn) : fn);
              }
            });
          }, {
            "18": 18,
            "33": 33,
            "40": 40,
            "68": 68
          }],
          272: [function (_dereq_, module, exports) {
            // https://github.com/ljharb/proposal-is-error
            var $export = _dereq_(33);

            var cof = _dereq_(18);

            $export($export.S, 'Error', {
              isError: function isError(it) {
                return cof(it) === 'Error';
              }
            });
          }, {
            "18": 18,
            "33": 33
          }],
          273: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-global
            var $export = _dereq_(33);

            $export($export.G, {
              global: _dereq_(40)
            });
          }, {
            "33": 33,
            "40": 40
          }],
          274: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
            _dereq_(97)('Map');
          }, {
            "97": 97
          }],
          275: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
            _dereq_(98)('Map');
          }, {
            "98": 98
          }],
          276: [function (_dereq_, module, exports) {
            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export = _dereq_(33);

            $export($export.P + $export.R, 'Map', {
              toJSON: _dereq_(20)('Map')
            });
          }, {
            "20": 20,
            "33": 33
          }],
          277: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              clamp: function clamp(x, lower, upper) {
                return Math.min(upper, Math.max(lower, x));
              }
            });
          }, {
            "33": 33
          }],
          278: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              DEG_PER_RAD: Math.PI / 180
            });
          }, {
            "33": 33
          }],
          279: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            var RAD_PER_DEG = 180 / Math.PI;
            $export($export.S, 'Math', {
              degrees: function degrees(radians) {
                return radians * RAD_PER_DEG;
              }
            });
          }, {
            "33": 33
          }],
          280: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            var scale = _dereq_(64);

            var fround = _dereq_(62);

            $export($export.S, 'Math', {
              fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
                return fround(scale(x, inLow, inHigh, outLow, outHigh));
              }
            });
          }, {
            "33": 33,
            "62": 62,
            "64": 64
          }],
          281: [function (_dereq_, module, exports) {
            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              iaddh: function iaddh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
              }
            });
          }, {
            "33": 33
          }],
          282: [function (_dereq_, module, exports) {
            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              imulh: function imulh(u, v) {
                var UINT16 = 0xffff;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >> 16;
                var v1 = $v >> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
              }
            });
          }, {
            "33": 33
          }],
          283: [function (_dereq_, module, exports) {
            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              isubh: function isubh(x0, x1, y0, y1) {
                var $x0 = x0 >>> 0;
                var $x1 = x1 >>> 0;
                var $y0 = y0 >>> 0;
                return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
              }
            });
          }, {
            "33": 33
          }],
          284: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              RAD_PER_DEG: 180 / Math.PI
            });
          }, {
            "33": 33
          }],
          285: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            var DEG_PER_RAD = Math.PI / 180;
            $export($export.S, 'Math', {
              radians: function radians(degrees) {
                return degrees * DEG_PER_RAD;
              }
            });
          }, {
            "33": 33
          }],
          286: [function (_dereq_, module, exports) {
            // https://rwaldron.github.io/proposal-math-extensions/
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              scale: _dereq_(64)
            });
          }, {
            "33": 33,
            "64": 64
          }],
          287: [function (_dereq_, module, exports) {
            // http://jfbastien.github.io/papers/Math.signbit.html
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              signbit: function signbit(x) {
                // eslint-disable-next-line no-self-compare
                return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
              }
            });
          }, {
            "33": 33
          }],
          288: [function (_dereq_, module, exports) {
            // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
            var $export = _dereq_(33);

            $export($export.S, 'Math', {
              umulh: function umulh(u, v) {
                var UINT16 = 0xffff;
                var $u = +u;
                var $v = +v;
                var u0 = $u & UINT16;
                var v0 = $v & UINT16;
                var u1 = $u >>> 16;
                var v1 = $v >>> 16;
                var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
              }
            });
          }, {
            "33": 33
          }],
          289: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var aFunction = _dereq_(3);

            var $defineProperty = _dereq_(72); // B.2.2.2 Object.prototype.__defineGetter__(P, getter)


            _dereq_(29) && $export($export.P + _dereq_(74), 'Object', {
              __defineGetter__: function __defineGetter__(P, getter) {
                $defineProperty.f(toObject(this), P, {
                  get: aFunction(getter),
                  enumerable: true,
                  configurable: true
                });
              }
            });
          }, {
            "119": 119,
            "29": 29,
            "3": 3,
            "33": 33,
            "72": 72,
            "74": 74
          }],
          290: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var aFunction = _dereq_(3);

            var $defineProperty = _dereq_(72); // B.2.2.3 Object.prototype.__defineSetter__(P, setter)


            _dereq_(29) && $export($export.P + _dereq_(74), 'Object', {
              __defineSetter__: function __defineSetter__(P, setter) {
                $defineProperty.f(toObject(this), P, {
                  set: aFunction(setter),
                  enumerable: true,
                  configurable: true
                });
              }
            });
          }, {
            "119": 119,
            "29": 29,
            "3": 3,
            "33": 33,
            "72": 72,
            "74": 74
          }],
          291: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-object-values-entries
            var $export = _dereq_(33);

            var $entries = _dereq_(84)(true);

            $export($export.S, 'Object', {
              entries: function entries(it) {
                return $entries(it);
              }
            });
          }, {
            "33": 33,
            "84": 84
          }],
          292: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-object-getownpropertydescriptors
            var $export = _dereq_(33);

            var ownKeys = _dereq_(85);

            var toIObject = _dereq_(117);

            var gOPD = _dereq_(75);

            var createProperty = _dereq_(24);

            $export($export.S, 'Object', {
              getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                var O = toIObject(object);
                var getDesc = gOPD.f;
                var keys = ownKeys(O);
                var result = {};
                var i = 0;
                var key, desc;

                while (keys.length > i) {
                  desc = getDesc(O, key = keys[i++]);
                  if (desc !== undefined) createProperty(result, key, desc);
                }

                return result;
              }
            });
          }, {
            "117": 117,
            "24": 24,
            "33": 33,
            "75": 75,
            "85": 85
          }],
          293: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var toPrimitive = _dereq_(120);

            var getPrototypeOf = _dereq_(79);

            var getOwnPropertyDescriptor = _dereq_(75).f; // B.2.2.4 Object.prototype.__lookupGetter__(P)


            _dereq_(29) && $export($export.P + _dereq_(74), 'Object', {
              __lookupGetter__: function __lookupGetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;

                do {
                  if (D = getOwnPropertyDescriptor(O, K)) return D.get;
                } while (O = getPrototypeOf(O));
              }
            });
          }, {
            "119": 119,
            "120": 120,
            "29": 29,
            "33": 33,
            "74": 74,
            "75": 75,
            "79": 79
          }],
          294: [function (_dereq_, module, exports) {
            'use strict';

            var $export = _dereq_(33);

            var toObject = _dereq_(119);

            var toPrimitive = _dereq_(120);

            var getPrototypeOf = _dereq_(79);

            var getOwnPropertyDescriptor = _dereq_(75).f; // B.2.2.5 Object.prototype.__lookupSetter__(P)


            _dereq_(29) && $export($export.P + _dereq_(74), 'Object', {
              __lookupSetter__: function __lookupSetter__(P) {
                var O = toObject(this);
                var K = toPrimitive(P, true);
                var D;

                do {
                  if (D = getOwnPropertyDescriptor(O, K)) return D.set;
                } while (O = getPrototypeOf(O));
              }
            });
          }, {
            "119": 119,
            "120": 120,
            "29": 29,
            "33": 33,
            "74": 74,
            "75": 75,
            "79": 79
          }],
          295: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-object-values-entries
            var $export = _dereq_(33);

            var $values = _dereq_(84)(false);

            $export($export.S, 'Object', {
              values: function values(it) {
                return $values(it);
              }
            });
          }, {
            "33": 33,
            "84": 84
          }],
          296: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/zenparsing/es-observable

            var $export = _dereq_(33);

            var global = _dereq_(40);

            var core = _dereq_(23);

            var microtask = _dereq_(68)();

            var OBSERVABLE = _dereq_(128)('observable');

            var aFunction = _dereq_(3);

            var anObject = _dereq_(7);

            var anInstance = _dereq_(6);

            var redefineAll = _dereq_(93);

            var hide = _dereq_(42);

            var forOf = _dereq_(39);

            var RETURN = forOf.RETURN;

            var getMethod = function getMethod(fn) {
              return fn == null ? undefined : aFunction(fn);
            };

            var cleanupSubscription = function cleanupSubscription(subscription) {
              var cleanup = subscription._c;

              if (cleanup) {
                subscription._c = undefined;
                cleanup();
              }
            };

            var subscriptionClosed = function subscriptionClosed(subscription) {
              return subscription._o === undefined;
            };

            var closeSubscription = function closeSubscription(subscription) {
              if (!subscriptionClosed(subscription)) {
                subscription._o = undefined;
                cleanupSubscription(subscription);
              }
            };

            var Subscription = function Subscription(observer, subscriber) {
              anObject(observer);
              this._c = undefined;
              this._o = observer;
              observer = new SubscriptionObserver(this);

              try {
                var cleanup = subscriber(observer);
                var subscription = cleanup;

                if (cleanup != null) {
                  if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
                    subscription.unsubscribe();
                  };else aFunction(cleanup);
                  this._c = cleanup;
                }
              } catch (e) {
                observer.error(e);
                return;
              }

              if (subscriptionClosed(this)) cleanupSubscription(this);
            };

            Subscription.prototype = redefineAll({}, {
              unsubscribe: function unsubscribe() {
                closeSubscription(this);
              }
            });

            var SubscriptionObserver = function SubscriptionObserver(subscription) {
              this._s = subscription;
            };

            SubscriptionObserver.prototype = redefineAll({}, {
              next: function next(value) {
                var subscription = this._s;

                if (!subscriptionClosed(subscription)) {
                  var observer = subscription._o;

                  try {
                    var m = getMethod(observer.next);
                    if (m) return m.call(observer, value);
                  } catch (e) {
                    try {
                      closeSubscription(subscription);
                    } finally {
                      throw e;
                    }
                  }
                }
              },
              error: function error(value) {
                var subscription = this._s;
                if (subscriptionClosed(subscription)) throw value;
                var observer = subscription._o;
                subscription._o = undefined;

                try {
                  var m = getMethod(observer.error);
                  if (!m) throw value;
                  value = m.call(observer, value);
                } catch (e) {
                  try {
                    cleanupSubscription(subscription);
                  } finally {
                    throw e;
                  }
                }

                cleanupSubscription(subscription);
                return value;
              },
              complete: function complete(value) {
                var subscription = this._s;

                if (!subscriptionClosed(subscription)) {
                  var observer = subscription._o;
                  subscription._o = undefined;

                  try {
                    var m = getMethod(observer.complete);
                    value = m ? m.call(observer, value) : undefined;
                  } catch (e) {
                    try {
                      cleanupSubscription(subscription);
                    } finally {
                      throw e;
                    }
                  }

                  cleanupSubscription(subscription);
                  return value;
                }
              }
            });

            var $Observable = function Observable(subscriber) {
              anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
            };

            redefineAll($Observable.prototype, {
              subscribe: function subscribe(observer) {
                return new Subscription(observer, this._f);
              },
              forEach: function forEach(fn) {
                var that = this;
                return new (core.Promise || global.Promise)(function (resolve, reject) {
                  aFunction(fn);
                  var subscription = that.subscribe({
                    next: function next(value) {
                      try {
                        return fn(value);
                      } catch (e) {
                        reject(e);
                        subscription.unsubscribe();
                      }
                    },
                    error: reject,
                    complete: resolve
                  });
                });
              }
            });
            redefineAll($Observable, {
              from: function from(x) {
                var C = typeof this === 'function' ? this : $Observable;
                var method = getMethod(anObject(x)[OBSERVABLE]);

                if (method) {
                  var observable = anObject(method.call(x));
                  return observable.constructor === C ? observable : new C(function (observer) {
                    return observable.subscribe(observer);
                  });
                }

                return new C(function (observer) {
                  var done = false;
                  microtask(function () {
                    if (!done) {
                      try {
                        if (forOf(x, false, function (it) {
                          observer.next(it);
                          if (done) return RETURN;
                        }) === RETURN) return;
                      } catch (e) {
                        if (done) throw e;
                        observer.error(e);
                        return;
                      }

                      observer.complete();
                    }
                  });
                  return function () {
                    done = true;
                  };
                });
              },
              of: function of() {
                for (var i = 0, l = arguments.length, items = Array(l); i < l;) {
                  items[i] = arguments[i++];
                }

                return new (typeof this === 'function' ? this : $Observable)(function (observer) {
                  var done = false;
                  microtask(function () {
                    if (!done) {
                      for (var j = 0; j < items.length; ++j) {
                        observer.next(items[j]);
                        if (done) return;
                      }

                      observer.complete();
                    }
                  });
                  return function () {
                    done = true;
                  };
                });
              }
            });
            hide($Observable.prototype, OBSERVABLE, function () {
              return this;
            });
            $export($export.G, {
              Observable: $Observable
            });

            _dereq_(100)('Observable');
          }, {
            "100": 100,
            "128": 128,
            "23": 23,
            "3": 3,
            "33": 33,
            "39": 39,
            "40": 40,
            "42": 42,
            "6": 6,
            "68": 68,
            "7": 7,
            "93": 93
          }],
          297: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-promise-finally
            'use strict';

            var $export = _dereq_(33);

            var core = _dereq_(23);

            var global = _dereq_(40);

            var speciesConstructor = _dereq_(104);

            var promiseResolve = _dereq_(91);

            $export($export.P + $export.R, 'Promise', {
              'finally': function _finally(onFinally) {
                var C = speciesConstructor(this, core.Promise || global.Promise);
                var isFunction = typeof onFinally == 'function';
                return this.then(isFunction ? function (x) {
                  return promiseResolve(C, onFinally()).then(function () {
                    return x;
                  });
                } : onFinally, isFunction ? function (e) {
                  return promiseResolve(C, onFinally()).then(function () {
                    throw e;
                  });
                } : onFinally);
              }
            });
          }, {
            "104": 104,
            "23": 23,
            "33": 33,
            "40": 40,
            "91": 91
          }],
          298: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/tc39/proposal-promise-try

            var $export = _dereq_(33);

            var newPromiseCapability = _dereq_(69);

            var perform = _dereq_(90);

            $export($export.S, 'Promise', {
              'try': function _try(callbackfn) {
                var promiseCapability = newPromiseCapability.f(this);
                var result = perform(callbackfn);
                (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
                return promiseCapability.promise;
              }
            });
          }, {
            "33": 33,
            "69": 69,
            "90": 90
          }],
          299: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var toMetaKey = metadata.key;
            var ordinaryDefineOwnMetadata = metadata.set;
            metadata.exp({
              defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
              }
            });
          }, {
            "67": 67,
            "7": 7
          }],
          300: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var toMetaKey = metadata.key;
            var getOrCreateMetadataMap = metadata.map;
            var store = metadata.store;
            metadata.exp({
              deleteMetadata: function deleteMetadata(metadataKey, target
              /* , targetKey */
              ) {
                var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
                var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
                if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
                if (metadataMap.size) return true;
                var targetMetadata = store.get(target);
                targetMetadata['delete'](targetKey);
                return !!targetMetadata.size || store['delete'](target);
              }
            });
          }, {
            "67": 67,
            "7": 7
          }],
          301: [function (_dereq_, module, exports) {
            var Set = _dereq_(231);

            var from = _dereq_(10);

            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var getPrototypeOf = _dereq_(79);

            var ordinaryOwnMetadataKeys = metadata.keys;
            var toMetaKey = metadata.key;

            var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
              var oKeys = ordinaryOwnMetadataKeys(O, P);
              var parent = getPrototypeOf(O);
              if (parent === null) return oKeys;
              var pKeys = ordinaryMetadataKeys(parent, P);
              return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
            };

            metadata.exp({
              getMetadataKeys: function getMetadataKeys(target
              /* , targetKey */
              ) {
                return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
              }
            });
          }, {
            "10": 10,
            "231": 231,
            "67": 67,
            "7": 7,
            "79": 79
          }],
          302: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var getPrototypeOf = _dereq_(79);

            var ordinaryHasOwnMetadata = metadata.has;
            var ordinaryGetOwnMetadata = metadata.get;
            var toMetaKey = metadata.key;

            var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
              var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
              if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
              var parent = getPrototypeOf(O);
              return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
            };

            metadata.exp({
              getMetadata: function getMetadata(metadataKey, target
              /* , targetKey */
              ) {
                return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
              }
            });
          }, {
            "67": 67,
            "7": 7,
            "79": 79
          }],
          303: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var ordinaryOwnMetadataKeys = metadata.keys;
            var toMetaKey = metadata.key;
            metadata.exp({
              getOwnMetadataKeys: function getOwnMetadataKeys(target
              /* , targetKey */
              ) {
                return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
              }
            });
          }, {
            "67": 67,
            "7": 7
          }],
          304: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var ordinaryGetOwnMetadata = metadata.get;
            var toMetaKey = metadata.key;
            metadata.exp({
              getOwnMetadata: function getOwnMetadata(metadataKey, target
              /* , targetKey */
              ) {
                return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
              }
            });
          }, {
            "67": 67,
            "7": 7
          }],
          305: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var getPrototypeOf = _dereq_(79);

            var ordinaryHasOwnMetadata = metadata.has;
            var toMetaKey = metadata.key;

            var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
              var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
              if (hasOwn) return true;
              var parent = getPrototypeOf(O);
              return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
            };

            metadata.exp({
              hasMetadata: function hasMetadata(metadataKey, target
              /* , targetKey */
              ) {
                return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
              }
            });
          }, {
            "67": 67,
            "7": 7,
            "79": 79
          }],
          306: [function (_dereq_, module, exports) {
            var metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var ordinaryHasOwnMetadata = metadata.has;
            var toMetaKey = metadata.key;
            metadata.exp({
              hasOwnMetadata: function hasOwnMetadata(metadataKey, target
              /* , targetKey */
              ) {
                return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
              }
            });
          }, {
            "67": 67,
            "7": 7
          }],
          307: [function (_dereq_, module, exports) {
            var $metadata = _dereq_(67);

            var anObject = _dereq_(7);

            var aFunction = _dereq_(3);

            var toMetaKey = $metadata.key;
            var ordinaryDefineOwnMetadata = $metadata.set;
            $metadata.exp({
              metadata: function metadata(metadataKey, metadataValue) {
                return function decorator(target, targetKey) {
                  ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
                };
              }
            });
          }, {
            "3": 3,
            "67": 67,
            "7": 7
          }],
          308: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
            _dereq_(97)('Set');
          }, {
            "97": 97
          }],
          309: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
            _dereq_(98)('Set');
          }, {
            "98": 98
          }],
          310: [function (_dereq_, module, exports) {
            // https://github.com/DavidBruant/Map-Set.prototype.toJSON
            var $export = _dereq_(33);

            $export($export.P + $export.R, 'Set', {
              toJSON: _dereq_(20)('Set')
            });
          }, {
            "20": 20,
            "33": 33
          }],
          311: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/mathiasbynens/String.prototype.at

            var $export = _dereq_(33);

            var $at = _dereq_(106)(true);

            $export($export.P, 'String', {
              at: function at(pos) {
                return $at(this, pos);
              }
            });
          }, {
            "106": 106,
            "33": 33
          }],
          312: [function (_dereq_, module, exports) {
            'use strict'; // https://tc39.github.io/String.prototype.matchAll/

            var $export = _dereq_(33);

            var defined = _dereq_(28);

            var toLength = _dereq_(118);

            var isRegExp = _dereq_(52);

            var getFlags = _dereq_(37);

            var RegExpProto = RegExp.prototype;

            var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
              this._r = regexp;
              this._s = string;
            };

            _dereq_(54)($RegExpStringIterator, 'RegExp String', function next() {
              var match = this._r.exec(this._s);

              return {
                value: match,
                done: match === null
              };
            });

            $export($export.P, 'String', {
              matchAll: function matchAll(regexp) {
                defined(this);
                if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
                var S = String(this);
                var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
                var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
                rx.lastIndex = toLength(regexp.lastIndex);
                return new $RegExpStringIterator(rx, S);
              }
            });
          }, {
            "118": 118,
            "28": 28,
            "33": 33,
            "37": 37,
            "52": 52,
            "54": 54
          }],
          313: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/tc39/proposal-string-pad-start-end

            var $export = _dereq_(33);

            var $pad = _dereq_(109);

            $export($export.P, 'String', {
              padEnd: function padEnd(maxLength
              /* , fillString = ' ' */
              ) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
              }
            });
          }, {
            "109": 109,
            "33": 33
          }],
          314: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/tc39/proposal-string-pad-start-end

            var $export = _dereq_(33);

            var $pad = _dereq_(109);

            $export($export.P, 'String', {
              padStart: function padStart(maxLength
              /* , fillString = ' ' */
              ) {
                return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
              }
            });
          }, {
            "109": 109,
            "33": 33
          }],
          315: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

            _dereq_(111)('trimLeft', function ($trim) {
              return function trimLeft() {
                return $trim(this, 1);
              };
            }, 'trimStart');
          }, {
            "111": 111
          }],
          316: [function (_dereq_, module, exports) {
            'use strict'; // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

            _dereq_(111)('trimRight', function ($trim) {
              return function trimRight() {
                return $trim(this, 2);
              };
            }, 'trimEnd');
          }, {
            "111": 111
          }],
          317: [function (_dereq_, module, exports) {
            _dereq_(126)('asyncIterator');
          }, {
            "126": 126
          }],
          318: [function (_dereq_, module, exports) {
            _dereq_(126)('observable');
          }, {
            "126": 126
          }],
          319: [function (_dereq_, module, exports) {
            // https://github.com/tc39/proposal-global
            var $export = _dereq_(33);

            $export($export.S, 'System', {
              global: _dereq_(40)
            });
          }, {
            "33": 33,
            "40": 40
          }],
          320: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
            _dereq_(97)('WeakMap');
          }, {
            "97": 97
          }],
          321: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
            _dereq_(98)('WeakMap');
          }, {
            "98": 98
          }],
          322: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
            _dereq_(97)('WeakSet');
          }, {
            "97": 97
          }],
          323: [function (_dereq_, module, exports) {
            // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
            _dereq_(98)('WeakSet');
          }, {
            "98": 98
          }],
          324: [function (_dereq_, module, exports) {
            var $iterators = _dereq_(141);

            var getKeys = _dereq_(81);

            var redefine = _dereq_(94);

            var global = _dereq_(40);

            var hide = _dereq_(42);

            var Iterators = _dereq_(58);

            var wks = _dereq_(128);

            var ITERATOR = wks('iterator');
            var TO_STRING_TAG = wks('toStringTag');
            var ArrayValues = Iterators.Array;
            var DOMIterables = {
              CSSRuleList: true,
              // TODO: Not spec compliant, should be false.
              CSSStyleDeclaration: false,
              CSSValueList: false,
              ClientRectList: false,
              DOMRectList: false,
              DOMStringList: false,
              DOMTokenList: true,
              DataTransferItemList: false,
              FileList: false,
              HTMLAllCollection: false,
              HTMLCollection: false,
              HTMLFormElement: false,
              HTMLSelectElement: false,
              MediaList: true,
              // TODO: Not spec compliant, should be false.
              MimeTypeArray: false,
              NamedNodeMap: false,
              NodeList: true,
              PaintRequestList: false,
              Plugin: false,
              PluginArray: false,
              SVGLengthList: false,
              SVGNumberList: false,
              SVGPathSegList: false,
              SVGPointList: false,
              SVGStringList: false,
              SVGTransformList: false,
              SourceBufferList: false,
              StyleSheetList: true,
              // TODO: Not spec compliant, should be false.
              TextTrackCueList: false,
              TextTrackList: false,
              TouchList: false
            };

            for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
              var NAME = collections[i];
              var explicit = DOMIterables[NAME];
              var Collection = global[NAME];
              var proto = Collection && Collection.prototype;
              var key;

              if (proto) {
                if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
                if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = ArrayValues;
                if (explicit) for (key in $iterators) {
                  if (!proto[key]) redefine(proto, key, $iterators[key], true);
                }
              }
            }
          }, {
            "128": 128,
            "141": 141,
            "40": 40,
            "42": 42,
            "58": 58,
            "81": 81,
            "94": 94
          }],
          325: [function (_dereq_, module, exports) {
            var $export = _dereq_(33);

            var $task = _dereq_(113);

            $export($export.G + $export.B, {
              setImmediate: $task.set,
              clearImmediate: $task.clear
            });
          }, {
            "113": 113,
            "33": 33
          }],
          326: [function (_dereq_, module, exports) {
            // ie9- setTimeout & setInterval additional parameters fix
            var global = _dereq_(40);

            var $export = _dereq_(33);

            var invoke = _dereq_(46);

            var partial = _dereq_(88);

            var navigator = global.navigator;
            var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check

            var wrap = function wrap(set) {
              return MSIE ? function (fn, time
              /* , ...args */
              ) {
                return set(invoke(partial, [].slice.call(arguments, 2), // eslint-disable-next-line no-new-func
                typeof fn == 'function' ? fn : Function(fn)), time);
              } : set;
            };

            $export($export.G + $export.B + $export.F * MSIE, {
              setTimeout: wrap(global.setTimeout),
              setInterval: wrap(global.setInterval)
            });
          }, {
            "33": 33,
            "40": 40,
            "46": 46,
            "88": 88
          }],
          327: [function (_dereq_, module, exports) {
            _dereq_(254);

            _dereq_(191);

            _dereq_(193);

            _dereq_(192);

            _dereq_(195);

            _dereq_(197);

            _dereq_(202);

            _dereq_(196);

            _dereq_(194);

            _dereq_(204);

            _dereq_(203);

            _dereq_(199);

            _dereq_(200);

            _dereq_(198);

            _dereq_(190);

            _dereq_(201);

            _dereq_(205);

            _dereq_(206);

            _dereq_(157);

            _dereq_(159);

            _dereq_(158);

            _dereq_(208);

            _dereq_(207);

            _dereq_(178);

            _dereq_(188);

            _dereq_(189);

            _dereq_(179);

            _dereq_(180);

            _dereq_(181);

            _dereq_(182);

            _dereq_(183);

            _dereq_(184);

            _dereq_(185);

            _dereq_(186);

            _dereq_(187);

            _dereq_(161);

            _dereq_(162);

            _dereq_(163);

            _dereq_(164);

            _dereq_(165);

            _dereq_(166);

            _dereq_(167);

            _dereq_(168);

            _dereq_(169);

            _dereq_(170);

            _dereq_(171);

            _dereq_(172);

            _dereq_(173);

            _dereq_(174);

            _dereq_(175);

            _dereq_(176);

            _dereq_(177);

            _dereq_(241);

            _dereq_(246);

            _dereq_(253);

            _dereq_(244);

            _dereq_(236);

            _dereq_(237);

            _dereq_(242);

            _dereq_(247);

            _dereq_(249);

            _dereq_(232);

            _dereq_(233);

            _dereq_(234);

            _dereq_(235);

            _dereq_(238);

            _dereq_(239);

            _dereq_(240);

            _dereq_(243);

            _dereq_(245);

            _dereq_(248);

            _dereq_(250);

            _dereq_(251);

            _dereq_(252);

            _dereq_(152);

            _dereq_(154);

            _dereq_(153);

            _dereq_(156);

            _dereq_(155);

            _dereq_(140);

            _dereq_(138);

            _dereq_(145);

            _dereq_(142);

            _dereq_(148);

            _dereq_(150);

            _dereq_(137);

            _dereq_(144);

            _dereq_(134);

            _dereq_(149);

            _dereq_(132);

            _dereq_(147);

            _dereq_(146);

            _dereq_(139);

            _dereq_(143);

            _dereq_(131);

            _dereq_(133);

            _dereq_(136);

            _dereq_(135);

            _dereq_(151);

            _dereq_(141);

            _dereq_(224);

            _dereq_(230);

            _dereq_(225);

            _dereq_(226);

            _dereq_(227);

            _dereq_(228);

            _dereq_(229);

            _dereq_(209);

            _dereq_(160);

            _dereq_(231);

            _dereq_(266);

            _dereq_(267);

            _dereq_(255);

            _dereq_(256);

            _dereq_(261);

            _dereq_(264);

            _dereq_(265);

            _dereq_(259);

            _dereq_(262);

            _dereq_(260);

            _dereq_(263);

            _dereq_(257);

            _dereq_(258);

            _dereq_(210);

            _dereq_(211);

            _dereq_(212);

            _dereq_(213);

            _dereq_(214);

            _dereq_(217);

            _dereq_(215);

            _dereq_(216);

            _dereq_(218);

            _dereq_(219);

            _dereq_(220);

            _dereq_(221);

            _dereq_(223);

            _dereq_(222);

            _dereq_(270);

            _dereq_(268);

            _dereq_(269);

            _dereq_(311);

            _dereq_(314);

            _dereq_(313);

            _dereq_(315);

            _dereq_(316);

            _dereq_(312);

            _dereq_(317);

            _dereq_(318);

            _dereq_(292);

            _dereq_(295);

            _dereq_(291);

            _dereq_(289);

            _dereq_(290);

            _dereq_(293);

            _dereq_(294);

            _dereq_(276);

            _dereq_(310);

            _dereq_(275);

            _dereq_(309);

            _dereq_(321);

            _dereq_(323);

            _dereq_(274);

            _dereq_(308);

            _dereq_(320);

            _dereq_(322);

            _dereq_(273);

            _dereq_(319);

            _dereq_(272);

            _dereq_(277);

            _dereq_(278);

            _dereq_(279);

            _dereq_(280);

            _dereq_(281);

            _dereq_(283);

            _dereq_(282);

            _dereq_(284);

            _dereq_(285);

            _dereq_(286);

            _dereq_(288);

            _dereq_(287);

            _dereq_(297);

            _dereq_(298);

            _dereq_(299);

            _dereq_(300);

            _dereq_(302);

            _dereq_(301);

            _dereq_(304);

            _dereq_(303);

            _dereq_(305);

            _dereq_(306);

            _dereq_(307);

            _dereq_(271);

            _dereq_(296);

            _dereq_(326);

            _dereq_(325);

            _dereq_(324);

            module.exports = _dereq_(23);
          }, {
            "131": 131,
            "132": 132,
            "133": 133,
            "134": 134,
            "135": 135,
            "136": 136,
            "137": 137,
            "138": 138,
            "139": 139,
            "140": 140,
            "141": 141,
            "142": 142,
            "143": 143,
            "144": 144,
            "145": 145,
            "146": 146,
            "147": 147,
            "148": 148,
            "149": 149,
            "150": 150,
            "151": 151,
            "152": 152,
            "153": 153,
            "154": 154,
            "155": 155,
            "156": 156,
            "157": 157,
            "158": 158,
            "159": 159,
            "160": 160,
            "161": 161,
            "162": 162,
            "163": 163,
            "164": 164,
            "165": 165,
            "166": 166,
            "167": 167,
            "168": 168,
            "169": 169,
            "170": 170,
            "171": 171,
            "172": 172,
            "173": 173,
            "174": 174,
            "175": 175,
            "176": 176,
            "177": 177,
            "178": 178,
            "179": 179,
            "180": 180,
            "181": 181,
            "182": 182,
            "183": 183,
            "184": 184,
            "185": 185,
            "186": 186,
            "187": 187,
            "188": 188,
            "189": 189,
            "190": 190,
            "191": 191,
            "192": 192,
            "193": 193,
            "194": 194,
            "195": 195,
            "196": 196,
            "197": 197,
            "198": 198,
            "199": 199,
            "200": 200,
            "201": 201,
            "202": 202,
            "203": 203,
            "204": 204,
            "205": 205,
            "206": 206,
            "207": 207,
            "208": 208,
            "209": 209,
            "210": 210,
            "211": 211,
            "212": 212,
            "213": 213,
            "214": 214,
            "215": 215,
            "216": 216,
            "217": 217,
            "218": 218,
            "219": 219,
            "220": 220,
            "221": 221,
            "222": 222,
            "223": 223,
            "224": 224,
            "225": 225,
            "226": 226,
            "227": 227,
            "228": 228,
            "229": 229,
            "23": 23,
            "230": 230,
            "231": 231,
            "232": 232,
            "233": 233,
            "234": 234,
            "235": 235,
            "236": 236,
            "237": 237,
            "238": 238,
            "239": 239,
            "240": 240,
            "241": 241,
            "242": 242,
            "243": 243,
            "244": 244,
            "245": 245,
            "246": 246,
            "247": 247,
            "248": 248,
            "249": 249,
            "250": 250,
            "251": 251,
            "252": 252,
            "253": 253,
            "254": 254,
            "255": 255,
            "256": 256,
            "257": 257,
            "258": 258,
            "259": 259,
            "260": 260,
            "261": 261,
            "262": 262,
            "263": 263,
            "264": 264,
            "265": 265,
            "266": 266,
            "267": 267,
            "268": 268,
            "269": 269,
            "270": 270,
            "271": 271,
            "272": 272,
            "273": 273,
            "274": 274,
            "275": 275,
            "276": 276,
            "277": 277,
            "278": 278,
            "279": 279,
            "280": 280,
            "281": 281,
            "282": 282,
            "283": 283,
            "284": 284,
            "285": 285,
            "286": 286,
            "287": 287,
            "288": 288,
            "289": 289,
            "290": 290,
            "291": 291,
            "292": 292,
            "293": 293,
            "294": 294,
            "295": 295,
            "296": 296,
            "297": 297,
            "298": 298,
            "299": 299,
            "300": 300,
            "301": 301,
            "302": 302,
            "303": 303,
            "304": 304,
            "305": 305,
            "306": 306,
            "307": 307,
            "308": 308,
            "309": 309,
            "310": 310,
            "311": 311,
            "312": 312,
            "313": 313,
            "314": 314,
            "315": 315,
            "316": 316,
            "317": 317,
            "318": 318,
            "319": 319,
            "320": 320,
            "321": 321,
            "322": 322,
            "323": 323,
            "324": 324,
            "325": 325,
            "326": 326
          }],
          328: [function (_dereq_, module, exports) {
            (function (global) {
              /**
               * Copyright (c) 2014, Facebook, Inc.
               * All rights reserved.
               *
               * This source code is licensed under the BSD-style license found in the
               * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
               * additional grant of patent rights can be found in the PATENTS file in
               * the same directory.
               */
              !function (global) {
                "use strict";

                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined; // More compressible than void 0.

                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
                var inModule = _typeof2(module) === "object";
                var runtime = global.regeneratorRuntime;

                if (runtime) {
                  if (inModule) {
                    // If regeneratorRuntime is defined globally and we're in a module,
                    // make the exports object identical to regeneratorRuntime.
                    module.exports = runtime;
                  } // Don't bother evaluating the rest of this file if the runtime was
                  // already defined globally.


                  return;
                } // Define the runtime globally (as expected by generated code) as either
                // module.exports (if we're in a module) or a new, empty object.


                runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                function wrap(innerFn, outerFn, self, tryLocsList) {
                  // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                  var generator = Object.create(protoGenerator.prototype);
                  var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
                  // .throw, and .return methods.

                  generator._invoke = makeInvokeMethod(innerFn, self, context);
                  return generator;
                }

                runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
                // record like context.tryEntries[i].completion. This interface could
                // have been (and was previously) designed to take a closure to be
                // invoked without arguments, but in all the cases we care about we
                // already have an existing method we want to call, so there's no need
                // to create a new function object. We can even get away with assuming
                // the method takes exactly one argument, since that happens to be true
                // in every case, so we don't have to touch the arguments object. The
                // only additional allocation required is the completion record, which
                // has a stable shape and so hopefully should be cheap to allocate.

                function tryCatch(fn, obj, arg) {
                  try {
                    return {
                      type: "normal",
                      arg: fn.call(obj, arg)
                    };
                  } catch (err) {
                    return {
                      type: "throw",
                      arg: err
                    };
                  }
                }

                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
                // breaking out of the dispatch switch statement.

                var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
                // .constructor.prototype properties for functions that return Generator
                // objects. For full spec compliance, you may wish to configure your
                // minifier not to mangle the names of these two functions.

                function Generator() {}

                function GeneratorFunction() {}

                function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
                // don't natively support it.


                var IteratorPrototype = {};

                IteratorPrototype[iteratorSymbol] = function () {
                  return this;
                };

                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

                if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                  // This environment has a native %IteratorPrototype%; use it instead
                  // of the polyfill.
                  IteratorPrototype = NativeIteratorPrototype;
                }

                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
                // Iterator interface in terms of a single ._invoke method.

                function defineIteratorMethods(prototype) {
                  ["next", "throw", "return"].forEach(function (method) {
                    prototype[method] = function (arg) {
                      return this._invoke(method, arg);
                    };
                  });
                }

                runtime.isGeneratorFunction = function (genFun) {
                  var ctor = typeof genFun === "function" && genFun.constructor;
                  return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                  // do is to check its .name property.
                  (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                };

                runtime.mark = function (genFun) {
                  if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                  } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;

                    if (!(toStringTagSymbol in genFun)) {
                      genFun[toStringTagSymbol] = "GeneratorFunction";
                    }
                  }

                  genFun.prototype = Object.create(Gp);
                  return genFun;
                }; // Within the body of any async function, `await x` is transformed to
                // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                // `hasOwn.call(value, "__await")` to determine if the yielded value is
                // meant to be awaited.


                runtime.awrap = function (arg) {
                  return {
                    __await: arg
                  };
                };

                function AsyncIterator(generator) {
                  function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);

                    if (record.type === "throw") {
                      reject(record.arg);
                    } else {
                      var result = record.arg;
                      var value = result.value;

                      if (value && _typeof2(value) === "object" && hasOwn.call(value, "__await")) {
                        return Promise.resolve(value.__await).then(function (value) {
                          invoke("next", value, resolve, reject);
                        }, function (err) {
                          invoke("throw", err, resolve, reject);
                        });
                      }

                      return Promise.resolve(value).then(function (unwrapped) {
                        // When a yielded Promise is resolved, its final value becomes
                        // the .value of the Promise<{value,done}> result for the
                        // current iteration. If the Promise is rejected, however, the
                        // result for this iteration will be rejected with the same
                        // reason. Note that rejections of yielded Promises are not
                        // thrown back into the generator function, as is the case
                        // when an awaited Promise is rejected. This difference in
                        // behavior between yield and await is important, because it
                        // allows the consumer to decide what to do with the yielded
                        // rejection (swallow it and continue, manually .throw it back
                        // into the generator, abandon iteration, whatever). With
                        // await, by contrast, there is no opportunity to examine the
                        // rejection reason outside the generator function, so the
                        // only option is to throw it from the await expression, and
                        // let the generator function handle the exception.
                        result.value = unwrapped;
                        resolve(result);
                      }, reject);
                    }
                  }

                  if (_typeof2(global.process) === "object" && global.process.domain) {
                    invoke = global.process.domain.bind(invoke);
                  }

                  var previousPromise;

                  function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                      return new Promise(function (resolve, reject) {
                        invoke(method, arg, resolve, reject);
                      });
                    }

                    return previousPromise = // If enqueue has been called before, then we want to wait until
                    // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                  } // Define the unified helper method that is used to implement .next,
                  // .throw, and .return (see defineIteratorMethods).


                  this._invoke = enqueue;
                }

                defineIteratorMethods(AsyncIterator.prototype);

                AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                  return this;
                };

                runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
                // AsyncIterator objects; they just return a Promise for the value of
                // the final result produced by the iterator.

                runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                  var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                  return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                  : iter.next().then(function (result) {
                    return result.done ? result.value : iter.next();
                  });
                };

                function makeInvokeMethod(innerFn, self, context) {
                  var state = GenStateSuspendedStart;
                  return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                      throw new Error("Generator is already running");
                    }

                    if (state === GenStateCompleted) {
                      if (method === "throw") {
                        throw arg;
                      } // Be forgiving, per 25.3.3.3.3 of the spec:
                      // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


                      return doneResult();
                    }

                    context.method = method;
                    context.arg = arg;

                    while (true) {
                      var delegate = context.delegate;

                      if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);

                        if (delegateResult) {
                          if (delegateResult === ContinueSentinel) continue;
                          return delegateResult;
                        }
                      }

                      if (context.method === "next") {
                        // Setting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        context.sent = context._sent = context.arg;
                      } else if (context.method === "throw") {
                        if (state === GenStateSuspendedStart) {
                          state = GenStateCompleted;
                          throw context.arg;
                        }

                        context.dispatchException(context.arg);
                      } else if (context.method === "return") {
                        context.abrupt("return", context.arg);
                      }

                      state = GenStateExecuting;
                      var record = tryCatch(innerFn, self, context);

                      if (record.type === "normal") {
                        // If an exception is thrown from innerFn, we leave state ===
                        // GenStateExecuting and loop back for another invocation.
                        state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                        if (record.arg === ContinueSentinel) {
                          continue;
                        }

                        return {
                          value: record.arg,
                          done: context.done
                        };
                      } else if (record.type === "throw") {
                        state = GenStateCompleted; // Dispatch the exception by looping back around to the
                        // context.dispatchException(context.arg) call above.

                        context.method = "throw";
                        context.arg = record.arg;
                      }
                    }
                  };
                } // Call delegate.iterator[context.method](context.arg) and handle the
                // result, either by returning a { value, done } result from the
                // delegate iterator, or by modifying context.method and context.arg,
                // setting context.delegate to null, and returning the ContinueSentinel.


                function maybeInvokeDelegate(delegate, context) {
                  var method = delegate.iterator[context.method];

                  if (method === undefined) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;

                    if (context.method === "throw") {
                      if (delegate.iterator["return"]) {
                        // If the delegate iterator has a return method, give it a
                        // chance to clean up.
                        context.method = "return";
                        context.arg = undefined;
                        maybeInvokeDelegate(delegate, context);

                        if (context.method === "throw") {
                          // If maybeInvokeDelegate(context) changed context.method from
                          // "return" to "throw", let that override the TypeError below.
                          return ContinueSentinel;
                        }
                      }

                      context.method = "throw";
                      context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }

                    return ContinueSentinel;
                  }

                  var record = tryCatch(method, delegate.iterator, context.arg);

                  if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                  }

                  var info = record.arg;

                  if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                  }

                  if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

                    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.

                    if (context.method !== "return") {
                      context.method = "next";
                      context.arg = undefined;
                    }
                  } else {
                    // Re-yield the result returned by the delegate method.
                    return info;
                  } // The delegate iterator is finished, so forget it and continue with
                  // the outer generator.


                  context.delegate = null;
                  return ContinueSentinel;
                } // Define Generator.prototype.{next,throw,return} in terms of the
                // unified ._invoke helper method.


                defineIteratorMethods(Gp);
                Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
                // @@iterator function is called on it. Some browsers' implementations of the
                // iterator prototype chain incorrectly implement this, causing the Generator
                // object to not be returned from this call. This ensures that doesn't happen.
                // See https://github.com/facebook/regenerator/issues/274 for more details.

                Gp[iteratorSymbol] = function () {
                  return this;
                };

                Gp.toString = function () {
                  return "[object Generator]";
                };

                function pushTryEntry(locs) {
                  var entry = {
                    tryLoc: locs[0]
                  };

                  if (1 in locs) {
                    entry.catchLoc = locs[1];
                  }

                  if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                  }

                  this.tryEntries.push(entry);
                }

                function resetTryEntry(entry) {
                  var record = entry.completion || {};
                  record.type = "normal";
                  delete record.arg;
                  entry.completion = record;
                }

                function Context(tryLocsList) {
                  // The root entry object (effectively a try statement without a catch
                  // or a finally block) gives us a place to store values thrown from
                  // locations where there is no enclosing try statement.
                  this.tryEntries = [{
                    tryLoc: "root"
                  }];
                  tryLocsList.forEach(pushTryEntry, this);
                  this.reset(true);
                }

                runtime.keys = function (object) {
                  var keys = [];

                  for (var key in object) {
                    keys.push(key);
                  }

                  keys.reverse(); // Rather than returning an object with a next method, we keep
                  // things simple and return the next function itself.

                  return function next() {
                    while (keys.length) {
                      var key = keys.pop();

                      if (key in object) {
                        next.value = key;
                        next.done = false;
                        return next;
                      }
                    } // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.


                    next.done = true;
                    return next;
                  };
                };

                function values(iterable) {
                  if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];

                    if (iteratorMethod) {
                      return iteratorMethod.call(iterable);
                    }

                    if (typeof iterable.next === "function") {
                      return iterable;
                    }

                    if (!isNaN(iterable.length)) {
                      var i = -1,
                          next = function next() {
                        while (++i < iterable.length) {
                          if (hasOwn.call(iterable, i)) {
                            next.value = iterable[i];
                            next.done = false;
                            return next;
                          }
                        }

                        next.value = undefined;
                        next.done = true;
                        return next;
                      };

                      return next.next = next;
                    }
                  } // Return an iterator with no values.


                  return {
                    next: doneResult
                  };
                }

                runtime.values = values;

                function doneResult() {
                  return {
                    value: undefined,
                    done: true
                  };
                }

                Context.prototype = {
                  constructor: Context,
                  reset: function reset(skipTempReset) {
                    this.prev = 0;
                    this.next = 0; // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.

                    this.sent = this._sent = undefined;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined;
                    this.tryEntries.forEach(resetTryEntry);

                    if (!skipTempReset) {
                      for (var name in this) {
                        // Not sure about the optimal order of these conditions:
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                          this[name] = undefined;
                        }
                      }
                    }
                  },
                  stop: function stop() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;

                    if (rootRecord.type === "throw") {
                      throw rootRecord.arg;
                    }

                    return this.rval;
                  },
                  dispatchException: function dispatchException(exception) {
                    if (this.done) {
                      throw exception;
                    }

                    var context = this;

                    function handle(loc, caught) {
                      record.type = "throw";
                      record.arg = exception;
                      context.next = loc;

                      if (caught) {
                        // If the dispatched exception was caught by a catch block,
                        // then let that catch block handle the exception normally.
                        context.method = "next";
                        context.arg = undefined;
                      }

                      return !!caught;
                    }

                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      var record = entry.completion;

                      if (entry.tryLoc === "root") {
                        // Exception thrown outside of any try block that could handle
                        // it, so set the completion value of the entire function to
                        // throw the exception.
                        return handle("end");
                      }

                      if (entry.tryLoc <= this.prev) {
                        var hasCatch = hasOwn.call(entry, "catchLoc");
                        var hasFinally = hasOwn.call(entry, "finallyLoc");

                        if (hasCatch && hasFinally) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else if (hasCatch) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          }
                        } else if (hasFinally) {
                          if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else {
                          throw new Error("try statement without catch or finally");
                        }
                      }
                    }
                  },
                  abrupt: function abrupt(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                        var finallyEntry = entry;
                        break;
                      }
                    }

                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                      // Ignore the finally entry if control is not jumping to a
                      // location outside the try/catch block.
                      finallyEntry = null;
                    }

                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;

                    if (finallyEntry) {
                      this.method = "next";
                      this.next = finallyEntry.finallyLoc;
                      return ContinueSentinel;
                    }

                    return this.complete(record);
                  },
                  complete: function complete(record, afterLoc) {
                    if (record.type === "throw") {
                      throw record.arg;
                    }

                    if (record.type === "break" || record.type === "continue") {
                      this.next = record.arg;
                    } else if (record.type === "return") {
                      this.rval = this.arg = record.arg;
                      this.method = "return";
                      this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                      this.next = afterLoc;
                    }

                    return ContinueSentinel;
                  },
                  finish: function finish(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.finallyLoc === finallyLoc) {
                        this.complete(entry.completion, entry.afterLoc);
                        resetTryEntry(entry);
                        return ContinueSentinel;
                      }
                    }
                  },
                  "catch": function _catch(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.tryLoc === tryLoc) {
                        var record = entry.completion;

                        if (record.type === "throw") {
                          var thrown = record.arg;
                          resetTryEntry(entry);
                        }

                        return thrown;
                      }
                    } // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.


                    throw new Error("illegal catch attempt");
                  },
                  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                    this.delegate = {
                      iterator: values(iterable),
                      resultName: resultName,
                      nextLoc: nextLoc
                    };

                    if (this.method === "next") {
                      // Deliberately forget the last sent value so that we don't
                      // accidentally pass it on to the delegate.
                      this.arg = undefined;
                    }

                    return ContinueSentinel;
                  }
                };
              }( // Among the various tricks for obtaining a reference to the global
              // object, this seems to be the most reliable technique that does not
              // use indirect eval (which violates Content Security Policy).
              _typeof2(global) === "object" ? global : (typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : _typeof2(self)) === "object" ? self : this);
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
          }, {}]
        }, {}, [1]);

        ;
        browserify_shim__define__module__export__(typeof babelPolyfill != "undefined" ? babelPolyfill : window.babelPolyfill);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "babelPolyfill": [function (require, module, exports) {
    module.exports = require('+Jzwe3');
  }, {}],
  52: [function (require, module, exports) {
    (function (global) {
      "use strict";

      require("core-js/shim");

      require("regenerator-runtime/runtime");

      require("core-js/fn/regexp/escape");

      if (global._babelPolyfill) {
        throw new Error("only one instance of babel-polyfill is allowed");
      }

      global._babelPolyfill = true;
      var DEFINE_PROPERTY = "defineProperty";

      function define(O, key, value) {
        O[key] || Object[DEFINE_PROPERTY](O, key, {
          writable: true,
          configurable: true,
          value: value
        });
      }

      define(String.prototype, "padLeft", "".padStart);
      define(String.prototype, "padRight", "".padEnd);
      "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
        [][key] && define(Array, key, Function.call.bind([][key]));
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "core-js/fn/regexp/escape": 130,
    "core-js/shim": 457,
    "regenerator-runtime/runtime": 53
  }],
  53: [function (require, module, exports) {
    (function (global) {
      /**
       * Copyright (c) 2014, Facebook, Inc.
       * All rights reserved.
       *
       * This source code is licensed under the BSD-style license found in the
       * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
       * additional grant of patent rights can be found in the PATENTS file in
       * the same directory.
       */
      !function (global) {
        "use strict";

        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined; // More compressible than void 0.

        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        var inModule = _typeof2(module) === "object";
        var runtime = global.regeneratorRuntime;

        if (runtime) {
          if (inModule) {
            // If regeneratorRuntime is defined globally and we're in a module,
            // make the exports object identical to regeneratorRuntime.
            module.exports = runtime;
          } // Don't bother evaluating the rest of this file if the runtime was
          // already defined globally.


          return;
        } // Define the runtime globally (as expected by generated code) as either
        // module.exports (if we're in a module) or a new, empty object.


        runtime = global.regeneratorRuntime = inModule ? module.exports : {};

        function wrap(innerFn, outerFn, self, tryLocsList) {
          // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
          // .throw, and .return methods.

          generator._invoke = makeInvokeMethod(innerFn, self, context);
          return generator;
        }

        runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
        // record like context.tryEntries[i].completion. This interface could
        // have been (and was previously) designed to take a closure to be
        // invoked without arguments, but in all the cases we care about we
        // already have an existing method we want to call, so there's no need
        // to create a new function object. We can even get away with assuming
        // the method takes exactly one argument, since that happens to be true
        // in every case, so we don't have to touch the arguments object. The
        // only additional allocation required is the completion record, which
        // has a stable shape and so hopefully should be cheap to allocate.

        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }

        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
        // breaking out of the dispatch switch statement.

        var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
        // .constructor.prototype properties for functions that return Generator
        // objects. For full spec compliance, you may wish to configure your
        // minifier not to mangle the names of these two functions.

        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
        // don't natively support it.


        var IteratorPrototype = {};

        IteratorPrototype[iteratorSymbol] = function () {
          return this;
        };

        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          // This environment has a native %IteratorPrototype%; use it instead
          // of the polyfill.
          IteratorPrototype = NativeIteratorPrototype;
        }

        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
        // Iterator interface in terms of a single ._invoke method.

        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            prototype[method] = function (arg) {
              return this._invoke(method, arg);
            };
          });
        }

        runtime.isGeneratorFunction = function (genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };

        runtime.mark = function (genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;

            if (!(toStringTagSymbol in genFun)) {
              genFun[toStringTagSymbol] = "GeneratorFunction";
            }
          }

          genFun.prototype = Object.create(Gp);
          return genFun;
        }; // Within the body of any async function, `await x` is transformed to
        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
        // `hasOwn.call(value, "__await")` to determine if the yielded value is
        // meant to be awaited.


        runtime.awrap = function (arg) {
          return {
            __await: arg
          };
        };

        function AsyncIterator(generator) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);

            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;

              if (value && _typeof2(value) === "object" && hasOwn.call(value, "__await")) {
                return Promise.resolve(value.__await).then(function (value) {
                  invoke("next", value, resolve, reject);
                }, function (err) {
                  invoke("throw", err, resolve, reject);
                });
              }

              return Promise.resolve(value).then(function (unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration. If the Promise is rejected, however, the
                // result for this iteration will be rejected with the same
                // reason. Note that rejections of yielded Promises are not
                // thrown back into the generator function, as is the case
                // when an awaited Promise is rejected. This difference in
                // behavior between yield and await is important, because it
                // allows the consumer to decide what to do with the yielded
                // rejection (swallow it and continue, manually .throw it back
                // into the generator, abandon iteration, whatever). With
                // await, by contrast, there is no opportunity to examine the
                // rejection reason outside the generator function, so the
                // only option is to throw it from the await expression, and
                // let the generator function handle the exception.
                result.value = unwrapped;
                resolve(result);
              }, reject);
            }
          }

          if (_typeof2(global.process) === "object" && global.process.domain) {
            invoke = global.process.domain.bind(invoke);
          }

          var previousPromise;

          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new Promise(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }

            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          } // Define the unified helper method that is used to implement .next,
          // .throw, and .return (see defineIteratorMethods).


          this._invoke = enqueue;
        }

        defineIteratorMethods(AsyncIterator.prototype);

        AsyncIterator.prototype[asyncIteratorSymbol] = function () {
          return this;
        };

        runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
        // AsyncIterator objects; they just return a Promise for the value of
        // the final result produced by the iterator.

        runtime.async = function (innerFn, outerFn, self, tryLocsList) {
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
          return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
        };

        function makeInvokeMethod(innerFn, self, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }

            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              } // Be forgiving, per 25.3.3.3.3 of the spec:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


              return doneResult();
            }

            context.method = method;
            context.arg = arg;

            while (true) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if (context.method === "next") {
                // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }

                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }

              state = GenStateExecuting;
              var record = tryCatch(innerFn, self, context);

              if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                if (record.arg === ContinueSentinel) {
                  continue;
                }

                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted; // Dispatch the exception by looping back around to the
                // context.dispatchException(context.arg) call above.

                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        } // Call delegate.iterator[context.method](context.arg) and handle the
        // result, either by returning a { value, done } result from the
        // delegate iterator, or by modifying context.method and context.arg,
        // setting context.delegate to null, and returning the ContinueSentinel.


        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];

          if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;

            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);

                if (context.method === "throw") {
                  // If maybeInvokeDelegate(context) changed context.method from
                  // "return" to "throw", let that override the TypeError below.
                  return ContinueSentinel;
                }
              }

              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return ContinueSentinel;
          }

          var record = tryCatch(method, delegate.iterator, context.arg);

          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }

          var info = record.arg;

          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }

          if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

            context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.

            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined;
            }
          } else {
            // Re-yield the result returned by the delegate method.
            return info;
          } // The delegate iterator is finished, so forget it and continue with
          // the outer generator.


          context.delegate = null;
          return ContinueSentinel;
        } // Define Generator.prototype.{next,throw,return} in terms of the
        // unified ._invoke helper method.


        defineIteratorMethods(Gp);
        Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
        // @@iterator function is called on it. Some browsers' implementations of the
        // iterator prototype chain incorrectly implement this, causing the Generator
        // object to not be returned from this call. This ensures that doesn't happen.
        // See https://github.com/facebook/regenerator/issues/274 for more details.

        Gp[iteratorSymbol] = function () {
          return this;
        };

        Gp.toString = function () {
          return "[object Generator]";
        };

        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };

          if (1 in locs) {
            entry.catchLoc = locs[1];
          }

          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }

          this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }

        function Context(tryLocsList) {
          // The root entry object (effectively a try statement without a catch
          // or a finally block) gives us a place to store values thrown from
          // locations where there is no enclosing try statement.
          this.tryEntries = [{
            tryLoc: "root"
          }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }

        runtime.keys = function (object) {
          var keys = [];

          for (var key in object) {
            keys.push(key);
          }

          keys.reverse(); // Rather than returning an object with a next method, we keep
          // things simple and return the next function itself.

          return function next() {
            while (keys.length) {
              var key = keys.pop();

              if (key in object) {
                next.value = key;
                next.done = false;
                return next;
              }
            } // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.


            next.done = true;
            return next;
          };
        };

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];

            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }

            if (typeof iterable.next === "function") {
              return iterable;
            }

            if (!isNaN(iterable.length)) {
              var i = -1,
                  next = function next() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next.value = iterable[i];
                    next.done = false;
                    return next;
                  }
                }

                next.value = undefined;
                next.done = true;
                return next;
              };

              return next.next = next;
            }
          } // Return an iterator with no values.


          return {
            next: doneResult
          };
        }

        runtime.values = values;

        function doneResult() {
          return {
            value: undefined,
            done: true
          };
        }

        Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0; // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.

            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);

            if (!skipTempReset) {
              for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined;
                }
              }
            }
          },
          stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;

            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }

            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) {
              throw exception;
            }

            var context = this;

            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;

              if (caught) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                context.method = "next";
                context.arg = undefined;
              }

              return !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;

              if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
              }

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              // Ignore the finally entry if control is not jumping to a
              // location outside the try/catch block.
              finallyEntry = null;
            }

            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;

            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }

            return this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }

            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }

            return ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;

                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }

                return thrown;
              }
            } // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.


            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };

            if (this.method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              this.arg = undefined;
            }

            return ContinueSentinel;
          }
        };
      }( // Among the various tricks for obtaining a reference to the global
      // object, this seems to be the most reliable technique that does not
      // use indirect eval (which violates Content Security Policy).
      _typeof2(global) === "object" ? global : (typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : _typeof2(self)) === "object" ? self : this);
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "dVvjmL": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        /*! highlight.js v9.9.0 | BSD3 License | git.io/hljslicense */
        !function (e) {
          var t = "object" == (typeof window === "undefined" ? "undefined" : _typeof2(window)) && window || "object" == (typeof self === "undefined" ? "undefined" : _typeof2(self)) && self;
          "undefined" != typeof exports ? e(exports) : t && (t.hljs = e({}), "function" == typeof define && define.amd && define([], function () {
            return t.hljs;
          }));
        }(function (e) {
          function t(e) {
            return e.replace(/[&<>]/gm, function (e) {
              return L[e];
            });
          }

          function r(e) {
            return e.nodeName.toLowerCase();
          }

          function a(e, t) {
            var r = e && e.exec(t);
            return r && 0 === r.index;
          }

          function n(e) {
            return C.test(e);
          }

          function i(e) {
            var t,
                r,
                a,
                i,
                s = e.className + " ";
            if (s += e.parentNode ? e.parentNode.className : "", r = E.exec(s)) return y(r[1]) ? r[1] : "no-highlight";

            for (s = s.split(/\s+/), t = 0, a = s.length; a > t; t++) {
              if (i = s[t], n(i) || y(i)) return i;
            }
          }

          function s(e, t) {
            var r,
                a = {};

            for (r in e) {
              a[r] = e[r];
            }

            if (t) for (r in t) {
              a[r] = t[r];
            }
            return a;
          }

          function c(e) {
            var t = [];
            return function a(e, n) {
              for (var i = e.firstChild; i; i = i.nextSibling) {
                3 === i.nodeType ? n += i.nodeValue.length : 1 === i.nodeType && (t.push({
                  event: "start",
                  offset: n,
                  node: i
                }), n = a(i, n), r(i).match(/br|hr|img|input/) || t.push({
                  event: "stop",
                  offset: n,
                  node: i
                }));
              }

              return n;
            }(e, 0), t;
          }

          function o(e, a, n) {
            function i() {
              return e.length && a.length ? e[0].offset !== a[0].offset ? e[0].offset < a[0].offset ? e : a : "start" === a[0].event ? e : a : e.length ? e : a;
            }

            function s(e) {
              function a(e) {
                return " " + e.nodeName + '="' + t(e.value) + '"';
              }

              u += "<" + r(e) + w.map.call(e.attributes, a).join("") + ">";
            }

            function c(e) {
              u += "</" + r(e) + ">";
            }

            function o(e) {
              ("start" === e.event ? s : c)(e.node);
            }

            for (var l = 0, u = "", d = []; e.length || a.length;) {
              var b = i();

              if (u += t(n.substring(l, b[0].offset)), l = b[0].offset, b === e) {
                d.reverse().forEach(c);

                do {
                  o(b.splice(0, 1)[0]), b = i();
                } while (b === e && b.length && b[0].offset === l);

                d.reverse().forEach(s);
              } else "start" === b[0].event ? d.push(b[0].node) : d.pop(), o(b.splice(0, 1)[0]);
            }

            return u + t(n.substr(l));
          }

          function l(e) {
            function t(e) {
              return e && e.source || e;
            }

            function r(r, a) {
              return new RegExp(t(r), "m" + (e.cI ? "i" : "") + (a ? "g" : ""));
            }

            function a(n, i) {
              if (!n.compiled) {
                if (n.compiled = !0, n.k = n.k || n.bK, n.k) {
                  var c = {},
                      o = function o(t, r) {
                    e.cI && (r = r.toLowerCase()), r.split(" ").forEach(function (e) {
                      var r = e.split("|");
                      c[r[0]] = [t, r[1] ? Number(r[1]) : 1];
                    });
                  };

                  "string" == typeof n.k ? o("keyword", n.k) : N(n.k).forEach(function (e) {
                    o(e, n.k[e]);
                  }), n.k = c;
                }

                n.lR = r(n.l || /\w+/, !0), i && (n.bK && (n.b = "\\b(" + n.bK.split(" ").join("|") + ")\\b"), n.b || (n.b = /\B|\b/), n.bR = r(n.b), n.e || n.eW || (n.e = /\B|\b/), n.e && (n.eR = r(n.e)), n.tE = t(n.e) || "", n.eW && i.tE && (n.tE += (n.e ? "|" : "") + i.tE)), n.i && (n.iR = r(n.i)), null == n.r && (n.r = 1), n.c || (n.c = []);
                var l = [];
                n.c.forEach(function (e) {
                  e.v ? e.v.forEach(function (t) {
                    l.push(s(e, t));
                  }) : l.push("self" === e ? n : e);
                }), n.c = l, n.c.forEach(function (e) {
                  a(e, n);
                }), n.starts && a(n.starts, i);
                var u = n.c.map(function (e) {
                  return e.bK ? "\\.?(" + e.b + ")\\.?" : e.b;
                }).concat([n.tE, n.i]).map(t).filter(Boolean);
                n.t = u.length ? r(u.join("|"), !0) : {
                  exec: function exec() {
                    return null;
                  }
                };
              }
            }

            a(e);
          }

          function u(e, r, n, i) {
            function s(e, t) {
              var r, n;

              for (r = 0, n = t.c.length; n > r; r++) {
                if (a(t.c[r].bR, e)) return t.c[r];
              }
            }

            function c(e, t) {
              if (a(e.eR, t)) {
                for (; e.endsParent && e.parent;) {
                  e = e.parent;
                }

                return e;
              }

              return e.eW ? c(e.parent, t) : void 0;
            }

            function o(e, t) {
              return !n && a(t.iR, e);
            }

            function b(e, t) {
              var r = v.cI ? t[0].toLowerCase() : t[0];
              return e.k.hasOwnProperty(r) && e.k[r];
            }

            function p(e, t, r, a) {
              var n = a ? "" : S.classPrefix,
                  i = '<span class="' + n,
                  s = r ? "" : B;
              return i += e + '">', i + t + s;
            }

            function m() {
              var e, r, a, n;
              if (!N.k) return t(E);

              for (n = "", r = 0, N.lR.lastIndex = 0, a = N.lR.exec(E); a;) {
                n += t(E.substring(r, a.index)), e = b(N, a), e ? (M += e[1], n += p(e[0], t(a[0]))) : n += t(a[0]), r = N.lR.lastIndex, a = N.lR.exec(E);
              }

              return n + t(E.substr(r));
            }

            function f() {
              var e = "string" == typeof N.sL;
              if (e && !k[N.sL]) return t(E);
              var r = e ? u(N.sL, E, !0, x[N.sL]) : d(E, N.sL.length ? N.sL : void 0);
              return N.r > 0 && (M += r.r), e && (x[N.sL] = r.top), p(r.language, r.value, !1, !0);
            }

            function g() {
              C += null != N.sL ? f() : m(), E = "";
            }

            function _(e) {
              C += e.cN ? p(e.cN, "", !0) : "", N = Object.create(e, {
                parent: {
                  value: N
                }
              });
            }

            function h(e, t) {
              if (E += e, null == t) return g(), 0;
              var r = s(t, N);
              if (r) return r.skip ? E += t : (r.eB && (E += t), g(), r.rB || r.eB || (E = t)), _(r, t), r.rB ? 0 : t.length;
              var a = c(N, t);

              if (a) {
                var n = N;
                n.skip ? E += t : (n.rE || n.eE || (E += t), g(), n.eE && (E = t));

                do {
                  N.cN && (C += B), N.skip || (M += N.r), N = N.parent;
                } while (N !== a.parent);

                return a.starts && _(a.starts, ""), n.rE ? 0 : t.length;
              }

              if (o(t, N)) throw new Error('Illegal lexeme "' + t + '" for mode "' + (N.cN || "<unnamed>") + '"');
              return E += t, t.length || 1;
            }

            var v = y(e);
            if (!v) throw new Error('Unknown language: "' + e + '"');
            l(v);
            var w,
                N = i || v,
                x = {},
                C = "";

            for (w = N; w !== v; w = w.parent) {
              w.cN && (C = p(w.cN, "", !0) + C);
            }

            var E = "",
                M = 0;

            try {
              for (var L, R, A = 0;;) {
                if (N.t.lastIndex = A, L = N.t.exec(r), !L) break;
                R = h(r.substring(A, L.index), L[0]), A = L.index + R;
              }

              for (h(r.substr(A)), w = N; w.parent; w = w.parent) {
                w.cN && (C += B);
              }

              return {
                r: M,
                value: C,
                language: e,
                top: N
              };
            } catch ($) {
              if ($.message && -1 !== $.message.indexOf("Illegal")) return {
                r: 0,
                value: t(r)
              };
              throw $;
            }
          }

          function d(e, r) {
            r = r || S.languages || N(k);
            var a = {
              r: 0,
              value: t(e)
            },
                n = a;
            return r.filter(y).forEach(function (t) {
              var r = u(t, e, !1);
              r.language = t, r.r > n.r && (n = r), r.r > a.r && (n = a, a = r);
            }), n.language && (a.second_best = n), a;
          }

          function b(e) {
            return S.tabReplace || S.useBR ? e.replace(M, function (e, t) {
              return S.useBR && "\n" === e ? "<br>" : S.tabReplace ? t.replace(/\t/g, S.tabReplace) : void 0;
            }) : e;
          }

          function p(e, t, r) {
            var a = t ? x[t] : r,
                n = [e.trim()];
            return e.match(/\bhljs\b/) || n.push("hljs"), -1 === e.indexOf(a) && n.push(a), n.join(" ").trim();
          }

          function m(e) {
            var t,
                r,
                a,
                s,
                l,
                m = i(e);
            n(m) || (S.useBR ? (t = document.createElementNS("http://www.w3.org/1999/xhtml", "div"), t.innerHTML = e.innerHTML.replace(/\n/g, "").replace(/<br[ \/]*>/g, "\n")) : t = e, l = t.textContent, a = m ? u(m, l, !0) : d(l), r = c(t), r.length && (s = document.createElementNS("http://www.w3.org/1999/xhtml", "div"), s.innerHTML = a.value, a.value = o(r, c(s), l)), a.value = b(a.value), e.innerHTML = a.value, e.className = p(e.className, m, a.language), e.result = {
              language: a.language,
              re: a.r
            }, a.second_best && (e.second_best = {
              language: a.second_best.language,
              re: a.second_best.r
            }));
          }

          function f(e) {
            S = s(S, e);
          }

          function g() {
            if (!g.called) {
              g.called = !0;
              var e = document.querySelectorAll("pre code");
              w.forEach.call(e, m);
            }
          }

          function _() {
            addEventListener("DOMContentLoaded", g, !1), addEventListener("load", g, !1);
          }

          function h(t, r) {
            var a = k[t] = r(e);
            a.aliases && a.aliases.forEach(function (e) {
              x[e] = t;
            });
          }

          function v() {
            return N(k);
          }

          function y(e) {
            return e = (e || "").toLowerCase(), k[e] || k[x[e]];
          }

          var w = [],
              N = Object.keys,
              k = {},
              x = {},
              C = /^(no-?highlight|plain|text)$/i,
              E = /\blang(?:uage)?-([\w-]+)\b/i,
              M = /((^(<[^>]+>|\t|)+|(?:\n)))/gm,
              B = "</span>",
              S = {
            classPrefix: "hljs-",
            tabReplace: null,
            useBR: !1,
            languages: void 0
          },
              L = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;"
          };
          return e.highlight = u, e.highlightAuto = d, e.fixMarkup = b, e.highlightBlock = m, e.configure = f, e.initHighlighting = g, e.initHighlightingOnLoad = _, e.registerLanguage = h, e.listLanguages = v, e.getLanguage = y, e.inherit = s, e.IR = "[a-zA-Z]\\w*", e.UIR = "[a-zA-Z_]\\w*", e.NR = "\\b\\d+(\\.\\d+)?", e.CNR = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", e.BNR = "\\b(0b[01]+)", e.RSR = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", e.BE = {
            b: "\\\\[\\s\\S]",
            r: 0
          }, e.ASM = {
            cN: "string",
            b: "'",
            e: "'",
            i: "\\n",
            c: [e.BE]
          }, e.QSM = {
            cN: "string",
            b: '"',
            e: '"',
            i: "\\n",
            c: [e.BE]
          }, e.PWM = {
            b: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\b/
          }, e.C = function (t, r, a) {
            var n = e.inherit({
              cN: "comment",
              b: t,
              e: r,
              c: []
            }, a || {});
            return n.c.push(e.PWM), n.c.push({
              cN: "doctag",
              b: "(?:TODO|FIXME|NOTE|BUG|XXX):",
              r: 0
            }), n;
          }, e.CLCM = e.C("//", "$"), e.CBCM = e.C("/\\*", "\\*/"), e.HCM = e.C("#", "$"), e.NM = {
            cN: "number",
            b: e.NR,
            r: 0
          }, e.CNM = {
            cN: "number",
            b: e.CNR,
            r: 0
          }, e.BNM = {
            cN: "number",
            b: e.BNR,
            r: 0
          }, e.CSSNM = {
            cN: "number",
            b: e.NR + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
            r: 0
          }, e.RM = {
            cN: "regexp",
            b: /\//,
            e: /\/[gimuy]*/,
            i: /\n/,
            c: [e.BE, {
              b: /\[/,
              e: /\]/,
              r: 0,
              c: [e.BE]
            }]
          }, e.TM = {
            cN: "title",
            b: e.IR,
            r: 0
          }, e.UTM = {
            cN: "title",
            b: e.UIR,
            r: 0
          }, e.METHOD_GUARD = {
            b: "\\.\\s*" + e.UIR,
            r: 0
          }, e.registerLanguage("apache", function (e) {
            var t = {
              cN: "number",
              b: "[\\$%]\\d+"
            };
            return {
              aliases: ["apacheconf"],
              cI: !0,
              c: [e.HCM, {
                cN: "section",
                b: "</?",
                e: ">"
              }, {
                cN: "attribute",
                b: /\w+/,
                r: 0,
                k: {
                  nomarkup: "order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"
                },
                starts: {
                  e: /$/,
                  r: 0,
                  k: {
                    literal: "on off all"
                  },
                  c: [{
                    cN: "meta",
                    b: "\\s\\[",
                    e: "\\]$"
                  }, {
                    cN: "variable",
                    b: "[\\$%]\\{",
                    e: "\\}",
                    c: ["self", t]
                  }, t, e.QSM]
                }
              }],
              i: /\S/
            };
          }), e.registerLanguage("bash", function (e) {
            var t = {
              cN: "variable",
              v: [{
                b: /\$[\w\d#@][\w\d_]*/
              }, {
                b: /\$\{(.*?)}/
              }]
            },
                r = {
              cN: "string",
              b: /"/,
              e: /"/,
              c: [e.BE, t, {
                cN: "variable",
                b: /\$\(/,
                e: /\)/,
                c: [e.BE]
              }]
            },
                a = {
              cN: "string",
              b: /'/,
              e: /'/
            };
            return {
              aliases: ["sh", "zsh"],
              l: /-?[a-z\._]+/,
              k: {
                keyword: "if then else elif fi for while in do done case esac function",
                literal: "true false",
                built_in: "break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",
                _: "-ne -eq -lt -gt -f -d -e -s -l -a"
              },
              c: [{
                cN: "meta",
                b: /^#![^\n]+sh\s*$/,
                r: 10
              }, {
                cN: "function",
                b: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
                rB: !0,
                c: [e.inherit(e.TM, {
                  b: /\w[\w\d_]*/
                })],
                r: 0
              }, e.HCM, r, a, t]
            };
          }), e.registerLanguage("coffeescript", function (e) {
            var t = {
              keyword: "in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",
              literal: "true false null undefined yes no on off",
              built_in: "npm require console print module global window document"
            },
                r = "[A-Za-z$_][0-9A-Za-z$_]*",
                a = {
              cN: "subst",
              b: /#\{/,
              e: /}/,
              k: t
            },
                n = [e.BNM, e.inherit(e.CNM, {
              starts: {
                e: "(\\s*/)?",
                r: 0
              }
            }), {
              cN: "string",
              v: [{
                b: /'''/,
                e: /'''/,
                c: [e.BE]
              }, {
                b: /'/,
                e: /'/,
                c: [e.BE]
              }, {
                b: /"""/,
                e: /"""/,
                c: [e.BE, a]
              }, {
                b: /"/,
                e: /"/,
                c: [e.BE, a]
              }]
            }, {
              cN: "regexp",
              v: [{
                b: "///",
                e: "///",
                c: [a, e.HCM]
              }, {
                b: "//[gim]*",
                r: 0
              }, {
                b: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
              }]
            }, {
              b: "@" + r
            }, {
              sL: "javascript",
              eB: !0,
              eE: !0,
              v: [{
                b: "```",
                e: "```"
              }, {
                b: "`",
                e: "`"
              }]
            }];
            a.c = n;
            var i = e.inherit(e.TM, {
              b: r
            }),
                s = "(\\(.*\\))?\\s*\\B[-=]>",
                c = {
              cN: "params",
              b: "\\([^\\(]",
              rB: !0,
              c: [{
                b: /\(/,
                e: /\)/,
                k: t,
                c: ["self"].concat(n)
              }]
            };
            return {
              aliases: ["coffee", "cson", "iced"],
              k: t,
              i: /\/\*/,
              c: n.concat([e.C("###", "###"), e.HCM, {
                cN: "function",
                b: "^\\s*" + r + "\\s*=\\s*" + s,
                e: "[-=]>",
                rB: !0,
                c: [i, c]
              }, {
                b: /[:\(,=]\s*/,
                r: 0,
                c: [{
                  cN: "function",
                  b: s,
                  e: "[-=]>",
                  rB: !0,
                  c: [c]
                }]
              }, {
                cN: "class",
                bK: "class",
                e: "$",
                i: /[:="\[\]]/,
                c: [{
                  bK: "extends",
                  eW: !0,
                  i: /[:="\[\]]/,
                  c: [i]
                }, i]
              }, {
                b: r + ":",
                e: ":",
                rB: !0,
                rE: !0,
                r: 0
              }])
            };
          }), e.registerLanguage("cpp", function (e) {
            var t = {
              cN: "keyword",
              b: "\\b[a-z\\d_]*_t\\b"
            },
                r = {
              cN: "string",
              v: [{
                b: '(u8?|U)?L?"',
                e: '"',
                i: "\\n",
                c: [e.BE]
              }, {
                b: '(u8?|U)?R"',
                e: '"',
                c: [e.BE]
              }, {
                b: "'\\\\?.",
                e: "'",
                i: "."
              }]
            },
                a = {
              cN: "number",
              v: [{
                b: "\\b(0b[01']+)"
              }, {
                b: "\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"
              }, {
                b: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
              }],
              r: 0
            },
                n = {
              cN: "meta",
              b: /#\s*[a-z]+\b/,
              e: /$/,
              k: {
                "meta-keyword": "if else elif endif define undef warning error line pragma ifdef ifndef include"
              },
              c: [{
                b: /\\\n/,
                r: 0
              }, e.inherit(r, {
                cN: "meta-string"
              }), {
                cN: "meta-string",
                b: "<",
                e: ">",
                i: "\\n"
              }, e.CLCM, e.CBCM]
            },
                i = e.IR + "\\s*\\(",
                s = {
              keyword: "int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return",
              built_in: "std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",
              literal: "true false nullptr NULL"
            },
                c = [t, e.CLCM, e.CBCM, a, r];
            return {
              aliases: ["c", "cc", "h", "c++", "h++", "hpp"],
              k: s,
              i: "</",
              c: c.concat([n, {
                b: "\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
                e: ">",
                k: s,
                c: ["self", t]
              }, {
                b: e.IR + "::",
                k: s
              }, {
                v: [{
                  b: /=/,
                  e: /;/
                }, {
                  b: /\(/,
                  e: /\)/
                }, {
                  bK: "new throw return else",
                  e: /;/
                }],
                k: s,
                c: c.concat([{
                  b: /\(/,
                  e: /\)/,
                  k: s,
                  c: c.concat(["self"]),
                  r: 0
                }]),
                r: 0
              }, {
                cN: "function",
                b: "(" + e.IR + "[\\*&\\s]+)+" + i,
                rB: !0,
                e: /[{;=]/,
                eE: !0,
                k: s,
                i: /[^\w\s\*&]/,
                c: [{
                  b: i,
                  rB: !0,
                  c: [e.TM],
                  r: 0
                }, {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  k: s,
                  r: 0,
                  c: [e.CLCM, e.CBCM, r, a, t]
                }, e.CLCM, e.CBCM, n]
              }]),
              exports: {
                preprocessor: n,
                strings: r,
                k: s
              }
            };
          }), e.registerLanguage("cs", function (e) {
            var t = {
              keyword: "abstract as base bool break byte case catch char checked const continue decimal default delegate do double else enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while nameof add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield",
              literal: "null false true"
            },
                r = {
              cN: "string",
              b: '@"',
              e: '"',
              c: [{
                b: '""'
              }]
            },
                a = e.inherit(r, {
              i: /\n/
            }),
                n = {
              cN: "subst",
              b: "{",
              e: "}",
              k: t
            },
                i = e.inherit(n, {
              i: /\n/
            }),
                s = {
              cN: "string",
              b: /\$"/,
              e: '"',
              i: /\n/,
              c: [{
                b: "{{"
              }, {
                b: "}}"
              }, e.BE, i]
            },
                c = {
              cN: "string",
              b: /\$@"/,
              e: '"',
              c: [{
                b: "{{"
              }, {
                b: "}}"
              }, {
                b: '""'
              }, n]
            },
                o = e.inherit(c, {
              i: /\n/,
              c: [{
                b: "{{"
              }, {
                b: "}}"
              }, {
                b: '""'
              }, i]
            });
            n.c = [c, s, r, e.ASM, e.QSM, e.CNM, e.CBCM], i.c = [o, s, a, e.ASM, e.QSM, e.CNM, e.inherit(e.CBCM, {
              i: /\n/
            })];
            var l = {
              v: [c, s, r, e.ASM, e.QSM]
            },
                u = e.IR + "(<" + e.IR + "(\\s*,\\s*" + e.IR + ")*>)?(\\[\\])?";
            return {
              aliases: ["csharp"],
              k: t,
              i: /::/,
              c: [e.C("///", "$", {
                rB: !0,
                c: [{
                  cN: "doctag",
                  v: [{
                    b: "///",
                    r: 0
                  }, {
                    b: "<!--|-->"
                  }, {
                    b: "</?",
                    e: ">"
                  }]
                }]
              }), e.CLCM, e.CBCM, {
                cN: "meta",
                b: "#",
                e: "$",
                k: {
                  "meta-keyword": "if else elif endif define undef warning error line region endregion pragma checksum"
                }
              }, l, e.CNM, {
                bK: "class interface",
                e: /[{;=]/,
                i: /[^\s:]/,
                c: [e.TM, e.CLCM, e.CBCM]
              }, {
                bK: "namespace",
                e: /[{;=]/,
                i: /[^\s:]/,
                c: [e.inherit(e.TM, {
                  b: "[a-zA-Z](\\.?\\w)*"
                }), e.CLCM, e.CBCM]
              }, {
                bK: "new return throw await",
                r: 0
              }, {
                cN: "function",
                b: "(" + u + "\\s+)+" + e.IR + "\\s*\\(",
                rB: !0,
                e: /[{;=]/,
                eE: !0,
                k: t,
                c: [{
                  b: e.IR + "\\s*\\(",
                  rB: !0,
                  c: [e.TM],
                  r: 0
                }, {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  eB: !0,
                  eE: !0,
                  k: t,
                  r: 0,
                  c: [l, e.CNM, e.CBCM]
                }, e.CLCM, e.CBCM]
              }]
            };
          }), e.registerLanguage("css", function (e) {
            var t = "[a-zA-Z-][a-zA-Z0-9_-]*",
                r = {
              b: /[A-Z\_\.\-]+\s*:/,
              rB: !0,
              e: ";",
              eW: !0,
              c: [{
                cN: "attribute",
                b: /\S/,
                e: ":",
                eE: !0,
                starts: {
                  eW: !0,
                  eE: !0,
                  c: [{
                    b: /[\w-]+\(/,
                    rB: !0,
                    c: [{
                      cN: "built_in",
                      b: /[\w-]+/
                    }, {
                      b: /\(/,
                      e: /\)/,
                      c: [e.ASM, e.QSM]
                    }]
                  }, e.CSSNM, e.QSM, e.ASM, e.CBCM, {
                    cN: "number",
                    b: "#[0-9A-Fa-f]+"
                  }, {
                    cN: "meta",
                    b: "!important"
                  }]
                }
              }]
            };
            return {
              cI: !0,
              i: /[=\/|'\$]/,
              c: [e.CBCM, {
                cN: "selector-id",
                b: /#[A-Za-z0-9_-]+/
              }, {
                cN: "selector-class",
                b: /\.[A-Za-z0-9_-]+/
              }, {
                cN: "selector-attr",
                b: /\[/,
                e: /\]/,
                i: "$"
              }, {
                cN: "selector-pseudo",
                b: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
              }, {
                b: "@(font-face|page)",
                l: "[a-z-]+",
                k: "font-face page"
              }, {
                b: "@",
                e: "[{;]",
                i: /:/,
                c: [{
                  cN: "keyword",
                  b: /\w+/
                }, {
                  b: /\s/,
                  eW: !0,
                  eE: !0,
                  r: 0,
                  c: [e.ASM, e.QSM, e.CSSNM]
                }]
              }, {
                cN: "selector-tag",
                b: t,
                r: 0
              }, {
                b: "{",
                e: "}",
                i: /\S/,
                c: [e.CBCM, r]
              }]
            };
          }), e.registerLanguage("diff", function (e) {
            return {
              aliases: ["patch"],
              c: [{
                cN: "meta",
                r: 10,
                v: [{
                  b: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/
                }, {
                  b: /^\*\*\* +\d+,\d+ +\*\*\*\*$/
                }, {
                  b: /^\-\-\- +\d+,\d+ +\-\-\-\-$/
                }]
              }, {
                cN: "comment",
                v: [{
                  b: /Index: /,
                  e: /$/
                }, {
                  b: /={3,}/,
                  e: /$/
                }, {
                  b: /^\-{3}/,
                  e: /$/
                }, {
                  b: /^\*{3} /,
                  e: /$/
                }, {
                  b: /^\+{3}/,
                  e: /$/
                }, {
                  b: /\*{5}/,
                  e: /\*{5}$/
                }]
              }, {
                cN: "addition",
                b: "^\\+",
                e: "$"
              }, {
                cN: "deletion",
                b: "^\\-",
                e: "$"
              }, {
                cN: "addition",
                b: "^\\!",
                e: "$"
              }]
            };
          }), e.registerLanguage("http", function (e) {
            var t = "HTTP/[0-9\\.]+";
            return {
              aliases: ["https"],
              i: "\\S",
              c: [{
                b: "^" + t,
                e: "$",
                c: [{
                  cN: "number",
                  b: "\\b\\d{3}\\b"
                }]
              }, {
                b: "^[A-Z]+ (.*?) " + t + "$",
                rB: !0,
                e: "$",
                c: [{
                  cN: "string",
                  b: " ",
                  e: " ",
                  eB: !0,
                  eE: !0
                }, {
                  b: t
                }, {
                  cN: "keyword",
                  b: "[A-Z]+"
                }]
              }, {
                cN: "attribute",
                b: "^\\w",
                e: ": ",
                eE: !0,
                i: "\\n|\\s|=",
                starts: {
                  e: "$",
                  r: 0
                }
              }, {
                b: "\\n\\n",
                starts: {
                  sL: [],
                  eW: !0
                }
              }]
            };
          }), e.registerLanguage("ini", function (e) {
            var t = {
              cN: "string",
              c: [e.BE],
              v: [{
                b: "'''",
                e: "'''",
                r: 10
              }, {
                b: '"""',
                e: '"""',
                r: 10
              }, {
                b: '"',
                e: '"'
              }, {
                b: "'",
                e: "'"
              }]
            };
            return {
              aliases: ["toml"],
              cI: !0,
              i: /\S/,
              c: [e.C(";", "$"), e.HCM, {
                cN: "section",
                b: /^\s*\[+/,
                e: /\]+/
              }, {
                b: /^[a-z0-9\[\]_-]+\s*=\s*/,
                e: "$",
                rB: !0,
                c: [{
                  cN: "attr",
                  b: /[a-z0-9\[\]_-]+/
                }, {
                  b: /=/,
                  eW: !0,
                  r: 0,
                  c: [{
                    cN: "literal",
                    b: /\bon|off|true|false|yes|no\b/
                  }, {
                    cN: "variable",
                    v: [{
                      b: /\$[\w\d"][\w\d_]*/
                    }, {
                      b: /\$\{(.*?)}/
                    }]
                  }, t, {
                    cN: "number",
                    b: /([\+\-]+)?[\d]+_[\d_]+/
                  }, e.NM]
                }]
              }]
            };
          }), e.registerLanguage("java", function (e) {
            var t = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",
                r = t + "(<" + t + "(\\s*,\\s*" + t + ")*>)?",
                a = "false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",
                n = "\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",
                i = {
              cN: "number",
              b: n,
              r: 0
            };
            return {
              aliases: ["jsp"],
              k: a,
              i: /<\/|#/,
              c: [e.C("/\\*\\*", "\\*/", {
                r: 0,
                c: [{
                  b: /\w+@/,
                  r: 0
                }, {
                  cN: "doctag",
                  b: "@[A-Za-z]+"
                }]
              }), e.CLCM, e.CBCM, e.ASM, e.QSM, {
                cN: "class",
                bK: "class interface",
                e: /[{;=]/,
                eE: !0,
                k: "class interface",
                i: /[:"\[\]]/,
                c: [{
                  bK: "extends implements"
                }, e.UTM]
              }, {
                bK: "new throw return else",
                r: 0
              }, {
                cN: "function",
                b: "(" + r + "\\s+)+" + e.UIR + "\\s*\\(",
                rB: !0,
                e: /[{;=]/,
                eE: !0,
                k: a,
                c: [{
                  b: e.UIR + "\\s*\\(",
                  rB: !0,
                  r: 0,
                  c: [e.UTM]
                }, {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  k: a,
                  r: 0,
                  c: [e.ASM, e.QSM, e.CNM, e.CBCM]
                }, e.CLCM, e.CBCM]
              }, i, {
                cN: "meta",
                b: "@[A-Za-z]+"
              }]
            };
          }), e.registerLanguage("javascript", function (e) {
            var t = "[A-Za-z$_][0-9A-Za-z$_]*",
                r = {
              keyword: "in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",
              literal: "true false null undefined NaN Infinity",
              built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"
            },
                a = {
              cN: "number",
              v: [{
                b: "\\b(0[bB][01]+)"
              }, {
                b: "\\b(0[oO][0-7]+)"
              }, {
                b: e.CNR
              }],
              r: 0
            },
                n = {
              cN: "subst",
              b: "\\$\\{",
              e: "\\}",
              k: r,
              c: []
            },
                i = {
              cN: "string",
              b: "`",
              e: "`",
              c: [e.BE, n]
            };
            n.c = [e.ASM, e.QSM, i, a, e.RM];
            var s = n.c.concat([e.CBCM, e.CLCM]);
            return {
              aliases: ["js", "jsx"],
              k: r,
              c: [{
                cN: "meta",
                r: 10,
                b: /^\s*['"]use (strict|asm)['"]/
              }, {
                cN: "meta",
                b: /^#!/,
                e: /$/
              }, e.ASM, e.QSM, i, e.CLCM, e.CBCM, a, {
                b: /[{,]\s*/,
                r: 0,
                c: [{
                  b: t + "\\s*:",
                  rB: !0,
                  r: 0,
                  c: [{
                    cN: "attr",
                    b: t,
                    r: 0
                  }]
                }]
              }, {
                b: "(" + e.RSR + "|\\b(case|return|throw)\\b)\\s*",
                k: "return throw case",
                c: [e.CLCM, e.CBCM, e.RM, {
                  cN: "function",
                  b: "(\\(.*?\\)|" + t + ")\\s*=>",
                  rB: !0,
                  e: "\\s*=>",
                  c: [{
                    cN: "params",
                    v: [{
                      b: t
                    }, {
                      b: /\(\s*\)/
                    }, {
                      b: /\(/,
                      e: /\)/,
                      eB: !0,
                      eE: !0,
                      k: r,
                      c: s
                    }]
                  }]
                }, {
                  b: /</,
                  e: /(\/\w+|\w+\/)>/,
                  sL: "xml",
                  c: [{
                    b: /<\w+\s*\/>/,
                    skip: !0
                  }, {
                    b: /<\w+/,
                    e: /(\/\w+|\w+\/)>/,
                    skip: !0,
                    c: [{
                      b: /<\w+\s*\/>/,
                      skip: !0
                    }, "self"]
                  }]
                }],
                r: 0
              }, {
                cN: "function",
                bK: "function",
                e: /\{/,
                eE: !0,
                c: [e.inherit(e.TM, {
                  b: t
                }), {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  eB: !0,
                  eE: !0,
                  c: s
                }],
                i: /\[|%/
              }, {
                b: /\$[(.]/
              }, e.METHOD_GUARD, {
                cN: "class",
                bK: "class",
                e: /[{;=]/,
                eE: !0,
                i: /[:"\[\]]/,
                c: [{
                  bK: "extends"
                }, e.UTM]
              }, {
                bK: "constructor",
                e: /\{/,
                eE: !0
              }],
              i: /#(?!!)/
            };
          }), e.registerLanguage("json", function (e) {
            var t = {
              literal: "true false null"
            },
                r = [e.QSM, e.CNM],
                a = {
              e: ",",
              eW: !0,
              eE: !0,
              c: r,
              k: t
            },
                n = {
              b: "{",
              e: "}",
              c: [{
                cN: "attr",
                b: /"/,
                e: /"/,
                c: [e.BE],
                i: "\\n"
              }, e.inherit(a, {
                b: /:/
              })],
              i: "\\S"
            },
                i = {
              b: "\\[",
              e: "\\]",
              c: [e.inherit(a)],
              i: "\\S"
            };
            return r.splice(r.length, 0, n, i), {
              c: r,
              k: t,
              i: "\\S"
            };
          }), e.registerLanguage("makefile", function (e) {
            var t = {
              cN: "variable",
              b: /\$\(/,
              e: /\)/,
              c: [e.BE]
            };
            return {
              aliases: ["mk", "mak"],
              c: [e.HCM, {
                b: /^\w+\s*\W*=/,
                rB: !0,
                r: 0,
                starts: {
                  e: /\s*\W*=/,
                  eE: !0,
                  starts: {
                    e: /$/,
                    r: 0,
                    c: [t]
                  }
                }
              }, {
                cN: "section",
                b: /^[\w]+:\s*$/
              }, {
                cN: "meta",
                b: /^\.PHONY:/,
                e: /$/,
                k: {
                  "meta-keyword": ".PHONY"
                },
                l: /[\.\w]+/
              }, {
                b: /^\t+/,
                e: /$/,
                r: 0,
                c: [e.QSM, t]
              }]
            };
          }), e.registerLanguage("xml", function (e) {
            var t = "[A-Za-z0-9\\._:-]+",
                r = {
              eW: !0,
              i: /</,
              r: 0,
              c: [{
                cN: "attr",
                b: t,
                r: 0
              }, {
                b: /=\s*/,
                r: 0,
                c: [{
                  cN: "string",
                  endsParent: !0,
                  v: [{
                    b: /"/,
                    e: /"/
                  }, {
                    b: /'/,
                    e: /'/
                  }, {
                    b: /[^\s"'=<>`]+/
                  }]
                }]
              }]
            };
            return {
              aliases: ["html", "xhtml", "rss", "atom", "xjb", "xsd", "xsl", "plist"],
              cI: !0,
              c: [{
                cN: "meta",
                b: "<!DOCTYPE",
                e: ">",
                r: 10,
                c: [{
                  b: "\\[",
                  e: "\\]"
                }]
              }, e.C("<!--", "-->", {
                r: 10
              }), {
                b: "<\\!\\[CDATA\\[",
                e: "\\]\\]>",
                r: 10
              }, {
                b: /<\?(php)?/,
                e: /\?>/,
                sL: "php",
                c: [{
                  b: "/\\*",
                  e: "\\*/",
                  skip: !0
                }]
              }, {
                cN: "tag",
                b: "<style(?=\\s|>|$)",
                e: ">",
                k: {
                  name: "style"
                },
                c: [r],
                starts: {
                  e: "</style>",
                  rE: !0,
                  sL: ["css", "xml"]
                }
              }, {
                cN: "tag",
                b: "<script(?=\\s|>|$)",
                e: ">",
                k: {
                  name: "script"
                },
                c: [r],
                starts: {
                  e: "</script>",
                  rE: !0,
                  sL: ["actionscript", "javascript", "handlebars", "xml"]
                }
              }, {
                cN: "meta",
                v: [{
                  b: /<\?xml/,
                  e: /\?>/,
                  r: 10
                }, {
                  b: /<\?\w+/,
                  e: /\?>/
                }]
              }, {
                cN: "tag",
                b: "</?",
                e: "/?>",
                c: [{
                  cN: "name",
                  b: /[^\/><\s]+/,
                  r: 0
                }, r]
              }]
            };
          }), e.registerLanguage("markdown", function (e) {
            return {
              aliases: ["md", "mkdown", "mkd"],
              c: [{
                cN: "section",
                v: [{
                  b: "^#{1,6}",
                  e: "$"
                }, {
                  b: "^.+?\\n[=-]{2,}$"
                }]
              }, {
                b: "<",
                e: ">",
                sL: "xml",
                r: 0
              }, {
                cN: "bullet",
                b: "^([*+-]|(\\d+\\.))\\s+"
              }, {
                cN: "strong",
                b: "[*_]{2}.+?[*_]{2}"
              }, {
                cN: "emphasis",
                v: [{
                  b: "\\*.+?\\*"
                }, {
                  b: "_.+?_",
                  r: 0
                }]
              }, {
                cN: "quote",
                b: "^>\\s+",
                e: "$"
              }, {
                cN: "code",
                v: [{
                  b: "^```w*s*$",
                  e: "^```s*$"
                }, {
                  b: "`.+?`"
                }, {
                  b: "^( {4}|	)",
                  e: "$",
                  r: 0
                }]
              }, {
                b: "^[-\\*]{3,}",
                e: "$"
              }, {
                b: "\\[.+?\\][\\(\\[].*?[\\)\\]]",
                rB: !0,
                c: [{
                  cN: "string",
                  b: "\\[",
                  e: "\\]",
                  eB: !0,
                  rE: !0,
                  r: 0
                }, {
                  cN: "link",
                  b: "\\]\\(",
                  e: "\\)",
                  eB: !0,
                  eE: !0
                }, {
                  cN: "symbol",
                  b: "\\]\\[",
                  e: "\\]",
                  eB: !0,
                  eE: !0
                }],
                r: 10
              }, {
                b: /^\[[^\n]+\]:/,
                rB: !0,
                c: [{
                  cN: "symbol",
                  b: /\[/,
                  e: /\]/,
                  eB: !0,
                  eE: !0
                }, {
                  cN: "link",
                  b: /:\s*/,
                  e: /$/,
                  eB: !0
                }]
              }]
            };
          }), e.registerLanguage("nginx", function (e) {
            var t = {
              cN: "variable",
              v: [{
                b: /\$\d+/
              }, {
                b: /\$\{/,
                e: /}/
              }, {
                b: "[\\$\\@]" + e.UIR
              }]
            },
                r = {
              eW: !0,
              l: "[a-z/_]+",
              k: {
                literal: "on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"
              },
              r: 0,
              i: "=>",
              c: [e.HCM, {
                cN: "string",
                c: [e.BE, t],
                v: [{
                  b: /"/,
                  e: /"/
                }, {
                  b: /'/,
                  e: /'/
                }]
              }, {
                b: "([a-z]+):/",
                e: "\\s",
                eW: !0,
                eE: !0,
                c: [t]
              }, {
                cN: "regexp",
                c: [e.BE, t],
                v: [{
                  b: "\\s\\^",
                  e: "\\s|{|;",
                  rE: !0
                }, {
                  b: "~\\*?\\s+",
                  e: "\\s|{|;",
                  rE: !0
                }, {
                  b: "\\*(\\.[a-z\\-]+)+"
                }, {
                  b: "([a-z\\-]+\\.)+\\*"
                }]
              }, {
                cN: "number",
                b: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
              }, {
                cN: "number",
                b: "\\b\\d+[kKmMgGdshdwy]*\\b",
                r: 0
              }, t]
            };
            return {
              aliases: ["nginxconf"],
              c: [e.HCM, {
                b: e.UIR + "\\s+{",
                rB: !0,
                e: "{",
                c: [{
                  cN: "section",
                  b: e.UIR
                }],
                r: 0
              }, {
                b: e.UIR + "\\s",
                e: ";|{",
                rB: !0,
                c: [{
                  cN: "attribute",
                  b: e.UIR,
                  starts: r
                }],
                r: 0
              }],
              i: "[^\\s\\}]"
            };
          }), e.registerLanguage("objectivec", function (e) {
            var t = {
              cN: "built_in",
              b: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
            },
                r = {
              keyword: "int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",
              literal: "false true FALSE TRUE nil YES NO NULL",
              built_in: "BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"
            },
                a = /[a-zA-Z@][a-zA-Z0-9_]*/,
                n = "@interface @class @protocol @implementation";
            return {
              aliases: ["mm", "objc", "obj-c"],
              k: r,
              l: a,
              i: "</",
              c: [t, e.CLCM, e.CBCM, e.CNM, e.QSM, {
                cN: "string",
                v: [{
                  b: '@"',
                  e: '"',
                  i: "\\n",
                  c: [e.BE]
                }, {
                  b: "'",
                  e: "[^\\\\]'",
                  i: "[^\\\\][^']"
                }]
              }, {
                cN: "meta",
                b: "#",
                e: "$",
                c: [{
                  cN: "meta-string",
                  v: [{
                    b: '"',
                    e: '"'
                  }, {
                    b: "<",
                    e: ">"
                  }]
                }]
              }, {
                cN: "class",
                b: "(" + n.split(" ").join("|") + ")\\b",
                e: "({|$)",
                eE: !0,
                k: n,
                l: a,
                c: [e.UTM]
              }, {
                b: "\\." + e.UIR,
                r: 0
              }]
            };
          }), e.registerLanguage("perl", function (e) {
            var t = "getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",
                r = {
              cN: "subst",
              b: "[$@]\\{",
              e: "\\}",
              k: t
            },
                a = {
              b: "->{",
              e: "}"
            },
                n = {
              v: [{
                b: /\$\d/
              }, {
                b: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/
              }, {
                b: /[\$%@][^\s\w{]/,
                r: 0
              }]
            },
                i = [e.BE, r, n],
                s = [n, e.HCM, e.C("^\\=\\w", "\\=cut", {
              eW: !0
            }), a, {
              cN: "string",
              c: i,
              v: [{
                b: "q[qwxr]?\\s*\\(",
                e: "\\)",
                r: 5
              }, {
                b: "q[qwxr]?\\s*\\[",
                e: "\\]",
                r: 5
              }, {
                b: "q[qwxr]?\\s*\\{",
                e: "\\}",
                r: 5
              }, {
                b: "q[qwxr]?\\s*\\|",
                e: "\\|",
                r: 5
              }, {
                b: "q[qwxr]?\\s*\\<",
                e: "\\>",
                r: 5
              }, {
                b: "qw\\s+q",
                e: "q",
                r: 5
              }, {
                b: "'",
                e: "'",
                c: [e.BE]
              }, {
                b: '"',
                e: '"'
              }, {
                b: "`",
                e: "`",
                c: [e.BE]
              }, {
                b: "{\\w+}",
                c: [],
                r: 0
              }, {
                b: "-?\\w+\\s*\\=\\>",
                c: [],
                r: 0
              }]
            }, {
              cN: "number",
              b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
              r: 0
            }, {
              b: "(\\/\\/|" + e.RSR + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
              k: "split return print reverse grep",
              r: 0,
              c: [e.HCM, {
                cN: "regexp",
                b: "(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",
                r: 10
              }, {
                cN: "regexp",
                b: "(m|qr)?/",
                e: "/[a-z]*",
                c: [e.BE],
                r: 0
              }]
            }, {
              cN: "function",
              bK: "sub",
              e: "(\\s*\\(.*?\\))?[;{]",
              eE: !0,
              r: 5,
              c: [e.TM]
            }, {
              b: "-\\w\\b",
              r: 0
            }, {
              b: "^__DATA__$",
              e: "^__END__$",
              sL: "mojolicious",
              c: [{
                b: "^@@.*",
                e: "$",
                cN: "comment"
              }]
            }];
            return r.c = s, a.c = s, {
              aliases: ["pl", "pm"],
              l: /[\w\.]+/,
              k: t,
              c: s
            };
          }), e.registerLanguage("php", function (e) {
            var t = {
              b: "\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"
            },
                r = {
              cN: "meta",
              b: /<\?(php)?|\?>/
            },
                a = {
              cN: "string",
              c: [e.BE, r],
              v: [{
                b: 'b"',
                e: '"'
              }, {
                b: "b'",
                e: "'"
              }, e.inherit(e.ASM, {
                i: null
              }), e.inherit(e.QSM, {
                i: null
              })]
            },
                n = {
              v: [e.BNM, e.CNM]
            };
            return {
              aliases: ["php3", "php4", "php5", "php6"],
              cI: !0,
              k: "and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",
              c: [e.HCM, e.C("//", "$", {
                c: [r]
              }), e.C("/\\*", "\\*/", {
                c: [{
                  cN: "doctag",
                  b: "@[A-Za-z]+"
                }]
              }), e.C("__halt_compiler.+?;", !1, {
                eW: !0,
                k: "__halt_compiler",
                l: e.UIR
              }), {
                cN: "string",
                b: /<<<['"]?\w+['"]?$/,
                e: /^\w+;?$/,
                c: [e.BE, {
                  cN: "subst",
                  v: [{
                    b: /\$\w+/
                  }, {
                    b: /\{\$/,
                    e: /\}/
                  }]
                }]
              }, r, {
                cN: "keyword",
                b: /\$this\b/
              }, t, {
                b: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
              }, {
                cN: "function",
                bK: "function",
                e: /[;{]/,
                eE: !0,
                i: "\\$|\\[|%",
                c: [e.UTM, {
                  cN: "params",
                  b: "\\(",
                  e: "\\)",
                  c: ["self", t, e.CBCM, a, n]
                }]
              }, {
                cN: "class",
                bK: "class interface",
                e: "{",
                eE: !0,
                i: /[:\(\$"]/,
                c: [{
                  bK: "extends implements"
                }, e.UTM]
              }, {
                bK: "namespace",
                e: ";",
                i: /[\.']/,
                c: [e.UTM]
              }, {
                bK: "use",
                e: ";",
                c: [e.UTM]
              }, {
                b: "=>"
              }, a, n]
            };
          }), e.registerLanguage("python", function (e) {
            var t = {
              cN: "meta",
              b: /^(>>>|\.\.\.) /
            },
                r = {
              cN: "string",
              c: [e.BE],
              v: [{
                b: /(u|b)?r?'''/,
                e: /'''/,
                c: [t],
                r: 10
              }, {
                b: /(u|b)?r?"""/,
                e: /"""/,
                c: [t],
                r: 10
              }, {
                b: /(u|r|ur)'/,
                e: /'/,
                r: 10
              }, {
                b: /(u|r|ur)"/,
                e: /"/,
                r: 10
              }, {
                b: /(b|br)'/,
                e: /'/
              }, {
                b: /(b|br)"/,
                e: /"/
              }, e.ASM, e.QSM]
            },
                a = {
              cN: "number",
              r: 0,
              v: [{
                b: e.BNR + "[lLjJ]?"
              }, {
                b: "\\b(0o[0-7]+)[lLjJ]?"
              }, {
                b: e.CNR + "[lLjJ]?"
              }]
            },
                n = {
              cN: "params",
              b: /\(/,
              e: /\)/,
              c: ["self", t, a, r]
            };
            return {
              aliases: ["py", "gyp"],
              k: {
                keyword: "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False",
                built_in: "Ellipsis NotImplemented"
              },
              i: /(<\/|->|\?)|=>/,
              c: [t, a, r, e.HCM, {
                v: [{
                  cN: "function",
                  bK: "def"
                }, {
                  cN: "class",
                  bK: "class"
                }],
                e: /:/,
                i: /[${=;\n,]/,
                c: [e.UTM, n, {
                  b: /->/,
                  eW: !0,
                  k: "None"
                }]
              }, {
                cN: "meta",
                b: /^[\t ]*@/,
                e: /$/
              }, {
                b: /\b(print|exec)\(/
              }]
            };
          }), e.registerLanguage("ruby", function (e) {
            var t = "[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",
                r = {
              keyword: "and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",
              literal: "true false nil"
            },
                a = {
              cN: "doctag",
              b: "@[A-Za-z]+"
            },
                n = {
              b: "#<",
              e: ">"
            },
                i = [e.C("#", "$", {
              c: [a]
            }), e.C("^\\=begin", "^\\=end", {
              c: [a],
              r: 10
            }), e.C("^__END__", "\\n$")],
                s = {
              cN: "subst",
              b: "#\\{",
              e: "}",
              k: r
            },
                c = {
              cN: "string",
              c: [e.BE, s],
              v: [{
                b: /'/,
                e: /'/
              }, {
                b: /"/,
                e: /"/
              }, {
                b: /`/,
                e: /`/
              }, {
                b: "%[qQwWx]?\\(",
                e: "\\)"
              }, {
                b: "%[qQwWx]?\\[",
                e: "\\]"
              }, {
                b: "%[qQwWx]?{",
                e: "}"
              }, {
                b: "%[qQwWx]?<",
                e: ">"
              }, {
                b: "%[qQwWx]?/",
                e: "/"
              }, {
                b: "%[qQwWx]?%",
                e: "%"
              }, {
                b: "%[qQwWx]?-",
                e: "-"
              }, {
                b: "%[qQwWx]?\\|",
                e: "\\|"
              }, {
                b: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
              }, {
                b: /<<(-?)\w+$/,
                e: /^\s*\w+$/
              }]
            },
                o = {
              cN: "params",
              b: "\\(",
              e: "\\)",
              endsParent: !0,
              k: r
            },
                l = [c, n, {
              cN: "class",
              bK: "class module",
              e: "$|;",
              i: /=/,
              c: [e.inherit(e.TM, {
                b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"
              }), {
                b: "<\\s*",
                c: [{
                  b: "(" + e.IR + "::)?" + e.IR
                }]
              }].concat(i)
            }, {
              cN: "function",
              bK: "def",
              e: "$|;",
              c: [e.inherit(e.TM, {
                b: t
              }), o].concat(i)
            }, {
              b: e.IR + "::"
            }, {
              cN: "symbol",
              b: e.UIR + "(\\!|\\?)?:",
              r: 0
            }, {
              cN: "symbol",
              b: ":(?!\\s)",
              c: [c, {
                b: t
              }],
              r: 0
            }, {
              cN: "number",
              b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
              r: 0
            }, {
              b: "(\\$\\W)|((\\$|\\@\\@?)(\\w+))"
            }, {
              cN: "params",
              b: /\|/,
              e: /\|/,
              k: r
            }, {
              b: "(" + e.RSR + "|unless)\\s*",
              c: [n, {
                cN: "regexp",
                c: [e.BE, s],
                i: /\n/,
                v: [{
                  b: "/",
                  e: "/[a-z]*"
                }, {
                  b: "%r{",
                  e: "}[a-z]*"
                }, {
                  b: "%r\\(",
                  e: "\\)[a-z]*"
                }, {
                  b: "%r!",
                  e: "![a-z]*"
                }, {
                  b: "%r\\[",
                  e: "\\][a-z]*"
                }]
              }].concat(i),
              r: 0
            }].concat(i);
            s.c = l, o.c = l;
            var u = "[>?]>",
                d = "[\\w#]+\\(\\w+\\):\\d+:\\d+>",
                b = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",
                p = [{
              b: /^\s*=>/,
              starts: {
                e: "$",
                c: l
              }
            }, {
              cN: "meta",
              b: "^(" + u + "|" + d + "|" + b + ")",
              starts: {
                e: "$",
                c: l
              }
            }];
            return {
              aliases: ["rb", "gemspec", "podspec", "thor", "irb"],
              k: r,
              i: /\/\*/,
              c: i.concat(p).concat(l)
            };
          }), e.registerLanguage("sql", function (e) {
            var t = e.C("--", "$");
            return {
              cI: !0,
              i: /[<>{}*#]/,
              c: [{
                bK: "begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment",
                e: /;/,
                eW: !0,
                l: /[\w\.]+/,
                k: {
                  keyword: "abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select self sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",
                  literal: "true false null",
                  built_in: "array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text varchar varying void"
                },
                c: [{
                  cN: "string",
                  b: "'",
                  e: "'",
                  c: [e.BE, {
                    b: "''"
                  }]
                }, {
                  cN: "string",
                  b: '"',
                  e: '"',
                  c: [e.BE, {
                    b: '""'
                  }]
                }, {
                  cN: "string",
                  b: "`",
                  e: "`",
                  c: [e.BE]
                }, e.CNM, e.CBCM, t]
              }, e.CBCM, t]
            };
          }), e;
        });
        ;
        browserify_shim__define__module__export__(typeof highlight != "undefined" ? highlight : window.highlight);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "highlight": [function (require, module, exports) {
    module.exports = require('dVvjmL');
  }, {}],
  "jquery": [function (require, module, exports) {
    module.exports = require('Z0jGCa');
  }, {}],
  "Z0jGCa": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        /*! jQuery v2.1.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
        !function (a, b) {
          "object" == _typeof2(module) && "object" == _typeof2(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
            if (!a.document) throw new Error("jQuery requires a window with a document");
            return b(a);
          } : b(a);
        }("undefined" != typeof window ? window : this, function (a, b) {
          var c = [],
              d = c.slice,
              e = c.concat,
              f = c.push,
              g = c.indexOf,
              h = {},
              i = h.toString,
              j = h.hasOwnProperty,
              k = {},
              l = a.document,
              m = "2.1.1",
              n = function n(a, b) {
            return new n.fn.init(a, b);
          },
              o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
              p = /^-ms-/,
              q = /-([\da-z])/gi,
              r = function r(a, b) {
            return b.toUpperCase();
          };

          n.fn = n.prototype = {
            jquery: m,
            constructor: n,
            selector: "",
            length: 0,
            toArray: function toArray() {
              return d.call(this);
            },
            get: function get(a) {
              return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
            },
            pushStack: function pushStack(a) {
              var b = n.merge(this.constructor(), a);
              return b.prevObject = this, b.context = this.context, b;
            },
            each: function each(a, b) {
              return n.each(this, a, b);
            },
            map: function map(a) {
              return this.pushStack(n.map(this, function (b, c) {
                return a.call(b, c, b);
              }));
            },
            slice: function slice() {
              return this.pushStack(d.apply(this, arguments));
            },
            first: function first() {
              return this.eq(0);
            },
            last: function last() {
              return this.eq(-1);
            },
            eq: function eq(a) {
              var b = this.length,
                  c = +a + (0 > a ? b : 0);
              return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
            },
            end: function end() {
              return this.prevObject || this.constructor(null);
            },
            push: f,
            sort: c.sort,
            splice: c.splice
          }, n.extend = n.fn.extend = function () {
            var a,
                b,
                c,
                d,
                e,
                f,
                g = arguments[0] || {},
                h = 1,
                i = arguments.length,
                j = !1;

            for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == _typeof2(g) || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {
              if (null != (a = arguments[h])) for (b in a) {
                c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
              }
            }

            return g;
          }, n.extend({
            expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""),
            isReady: !0,
            error: function error(a) {
              throw new Error(a);
            },
            noop: function noop() {},
            isFunction: function isFunction(a) {
              return "function" === n.type(a);
            },
            isArray: Array.isArray,
            isWindow: function isWindow(a) {
              return null != a && a === a.window;
            },
            isNumeric: function isNumeric(a) {
              return !n.isArray(a) && a - parseFloat(a) >= 0;
            },
            isPlainObject: function isPlainObject(a) {
              return "object" !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, "isPrototypeOf") ? !1 : !0;
            },
            isEmptyObject: function isEmptyObject(a) {
              var b;

              for (b in a) {
                return !1;
              }

              return !0;
            },
            type: function type(a) {
              return null == a ? a + "" : "object" == _typeof2(a) || "function" == typeof a ? h[i.call(a)] || "object" : _typeof2(a);
            },
            globalEval: function globalEval(a) {
              var b,
                  c = eval;
              a = n.trim(a), a && (1 === a.indexOf("use strict") ? (b = l.createElement("script"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));
            },
            camelCase: function camelCase(a) {
              return a.replace(p, "ms-").replace(q, r);
            },
            nodeName: function nodeName(a, b) {
              return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
            },
            each: function each(a, b, c) {
              var d,
                  e = 0,
                  f = a.length,
                  g = s(a);

              if (c) {
                if (g) {
                  for (; f > e; e++) {
                    if (d = b.apply(a[e], c), d === !1) break;
                  }
                } else for (e in a) {
                  if (d = b.apply(a[e], c), d === !1) break;
                }
              } else if (g) {
                for (; f > e; e++) {
                  if (d = b.call(a[e], e, a[e]), d === !1) break;
                }
              } else for (e in a) {
                if (d = b.call(a[e], e, a[e]), d === !1) break;
              }

              return a;
            },
            trim: function trim(a) {
              return null == a ? "" : (a + "").replace(o, "");
            },
            makeArray: function makeArray(a, b) {
              var c = b || [];
              return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
            },
            inArray: function inArray(a, b, c) {
              return null == b ? -1 : g.call(b, a, c);
            },
            merge: function merge(a, b) {
              for (var c = +b.length, d = 0, e = a.length; c > d; d++) {
                a[e++] = b[d];
              }

              return a.length = e, a;
            },
            grep: function grep(a, b, c) {
              for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
                d = !b(a[f], f), d !== h && e.push(a[f]);
              }

              return e;
            },
            map: function map(a, b, c) {
              var d,
                  f = 0,
                  g = a.length,
                  h = s(a),
                  i = [];
              if (h) for (; g > f; f++) {
                d = b(a[f], f, c), null != d && i.push(d);
              } else for (f in a) {
                d = b(a[f], f, c), null != d && i.push(d);
              }
              return e.apply([], i);
            },
            guid: 1,
            proxy: function proxy(a, b) {
              var c, e, f;
              return "string" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {
                return a.apply(b || this, e.concat(d.call(arguments)));
              }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;
            },
            now: Date.now,
            support: k
          }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
            h["[object " + b + "]"] = b.toLowerCase();
          });

          function s(a) {
            var b = a.length,
                c = n.type(a);
            return "function" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
          }

          var t = function (a) {
            var b,
                c,
                d,
                e,
                f,
                g,
                h,
                i,
                j,
                k,
                l,
                m,
                n,
                o,
                p,
                q,
                r,
                s,
                t,
                u = "sizzle" + -new Date(),
                v = a.document,
                w = 0,
                x = 0,
                y = gb(),
                z = gb(),
                A = gb(),
                B = function B(a, b) {
              return a === b && (l = !0), 0;
            },
                C = "undefined",
                D = 1 << 31,
                E = {}.hasOwnProperty,
                F = [],
                G = F.pop,
                H = F.push,
                I = F.push,
                J = F.slice,
                K = F.indexOf || function (a) {
              for (var b = 0, c = this.length; c > b; b++) {
                if (this[b] === a) return b;
              }

              return -1;
            },
                L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                M = "[\\x20\\t\\r\\n\\f]",
                N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                O = N.replace("w", "w#"),
                P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]",
                Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)",
                R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
                S = new RegExp("^" + M + "*," + M + "*"),
                T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
                U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
                V = new RegExp(Q),
                W = new RegExp("^" + O + "$"),
                X = {
              ID: new RegExp("^#(" + N + ")"),
              CLASS: new RegExp("^\\.(" + N + ")"),
              TAG: new RegExp("^(" + N.replace("w", "w*") + ")"),
              ATTR: new RegExp("^" + P),
              PSEUDO: new RegExp("^" + Q),
              CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
              bool: new RegExp("^(?:" + L + ")$", "i"),
              needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
            },
                Y = /^(?:input|select|textarea|button)$/i,
                Z = /^h\d$/i,
                $ = /^[^{]+\{\s*\[native \w/,
                _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                ab = /[+~]/,
                bb = /'|\\/g,
                cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
                db = function db(a, b, c) {
              var d = "0x" + b - 65536;
              return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
            };

            try {
              I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;
            } catch (eb) {
              I = {
                apply: F.length ? function (a, b) {
                  H.apply(a, J.call(b));
                } : function (a, b) {
                  var c = a.length,
                      d = 0;

                  while (a[c++] = b[d++]) {
                    ;
                  }

                  a.length = c - 1;
                }
              };
            }

            function fb(a, b, d, e) {
              var f, h, j, k, l, o, r, s, w, x;
              if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || "string" != typeof a) return d;
              if (1 !== (k = b.nodeType) && 9 !== k) return [];

              if (p && !e) {
                if (f = _.exec(a)) if (j = f[1]) {
                  if (9 === k) {
                    if (h = b.getElementById(j), !h || !h.parentNode) return d;
                    if (h.id === j) return d.push(h), d;
                  } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
                } else {
                  if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;
                  if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;
                }

                if (c.qsa && (!q || !q.test(a))) {
                  if (s = r = u, w = b, x = 9 === k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                    o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;

                    while (l--) {
                      o[l] = s + qb(o[l]);
                    }

                    w = ab.test(a) && ob(b.parentNode) || b, x = o.join(",");
                  }

                  if (x) try {
                    return I.apply(d, w.querySelectorAll(x)), d;
                  } catch (y) {} finally {
                    r || b.removeAttribute("id");
                  }
                }
              }

              return i(a.replace(R, "$1"), b, d, e);
            }

            function gb() {
              var a = [];

              function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
              }

              return b;
            }

            function hb(a) {
              return a[u] = !0, a;
            }

            function ib(a) {
              var b = n.createElement("div");

              try {
                return !!a(b);
              } catch (c) {
                return !1;
              } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null;
              }
            }

            function jb(a, b) {
              var c = a.split("|"),
                  e = a.length;

              while (e--) {
                d.attrHandle[c[e]] = b;
              }
            }

            function kb(a, b) {
              var c = b && a,
                  d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);
              if (d) return d;
              if (c) while (c = c.nextSibling) {
                if (c === b) return -1;
              }
              return a ? 1 : -1;
            }

            function lb(a) {
              return function (b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a;
              };
            }

            function mb(a) {
              return function (b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a;
              };
            }

            function nb(a) {
              return hb(function (b) {
                return b = +b, hb(function (c, d) {
                  var e,
                      f = a([], c.length, b),
                      g = f.length;

                  while (g--) {
                    c[e = f[g]] && (c[e] = !(d[e] = c[e]));
                  }
                });
              });
            }

            function ob(a) {
              return a && _typeof2(a.getElementsByTagName) !== C && a;
            }

            c = fb.support = {}, f = fb.isXML = function (a) {
              var b = a && (a.ownerDocument || a).documentElement;
              return b ? "HTML" !== b.nodeName : !1;
            }, m = fb.setDocument = function (a) {
              var b,
                  e = a ? a.ownerDocument || a : v,
                  g = e.defaultView;
              return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function () {
                m();
              }, !1) : g.attachEvent && g.attachEvent("onunload", function () {
                m();
              })), c.attributes = ib(function (a) {
                return a.className = "i", !a.getAttribute("className");
              }), c.getElementsByTagName = ib(function (a) {
                return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length;
              }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {
                return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length;
              }), c.getById = ib(function (a) {
                return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;
              }), c.getById ? (d.find.ID = function (a, b) {
                if (_typeof2(b.getElementById) !== C && p) {
                  var c = b.getElementById(a);
                  return c && c.parentNode ? [c] : [];
                }
              }, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                  return a.getAttribute("id") === b;
                };
              }) : (delete d.find.ID, d.filter.ID = function (a) {
                var b = a.replace(cb, db);
                return function (a) {
                  var c = _typeof2(a.getAttributeNode) !== C && a.getAttributeNode("id");
                  return c && c.value === b;
                };
              }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
                return _typeof2(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;
              } : function (a, b) {
                var c,
                    d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);

                if ("*" === a) {
                  while (c = f[e++]) {
                    1 === c.nodeType && d.push(c);
                  }

                  return d;
                }

                return f;
              }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
                return _typeof2(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;
              }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {
                a.innerHTML = "<select msallowclip=''><option selected=''></option></select>", a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"), a.querySelectorAll(":checked").length || q.push(":checked");
              }), ib(function (a) {
                var b = e.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
              })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", Q);
              }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a,
                    d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
              } : function (a, b) {
                if (b) while (b = b.parentNode) {
                  if (b === a) return !0;
                }
                return !1;
              }, B = b ? function (a, b) {
                if (a === b) return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);
              } : function (a, b) {
                if (a === b) return l = !0, 0;
                var c,
                    d = 0,
                    f = a.parentNode,
                    g = b.parentNode,
                    h = [a],
                    i = [b];
                if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;
                if (f === g) return kb(a, b);
                c = a;

                while (c = c.parentNode) {
                  h.unshift(c);
                }

                c = b;

                while (c = c.parentNode) {
                  i.unshift(c);
                }

                while (h[d] === i[d]) {
                  d++;
                }

                return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
              }, e) : n;
            }, fb.matches = function (a, b) {
              return fb(a, null, null, b);
            }, fb.matchesSelector = function (a, b) {
              if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                var d = s.call(a, b);
                if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
              } catch (e) {}
              return fb(b, n, null, [a]).length > 0;
            }, fb.contains = function (a, b) {
              return (a.ownerDocument || a) !== n && m(a), t(a, b);
            }, fb.attr = function (a, b) {
              (a.ownerDocument || a) !== n && m(a);
              var e = d.attrHandle[b.toLowerCase()],
                  f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
              return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
            }, fb.error = function (a) {
              throw new Error("Syntax error, unrecognized expression: " + a);
            }, fb.uniqueSort = function (a) {
              var b,
                  d = [],
                  e = 0,
                  f = 0;

              if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                while (b = a[f++]) {
                  b === a[f] && (e = d.push(f));
                }

                while (e--) {
                  a.splice(d[e], 1);
                }
              }

              return k = null, a;
            }, e = fb.getText = function (a) {
              var b,
                  c = "",
                  d = 0,
                  f = a.nodeType;

              if (f) {
                if (1 === f || 9 === f || 11 === f) {
                  if ("string" == typeof a.textContent) return a.textContent;

                  for (a = a.firstChild; a; a = a.nextSibling) {
                    c += e(a);
                  }
                } else if (3 === f || 4 === f) return a.nodeValue;
              } else while (b = a[d++]) {
                c += e(b);
              }

              return c;
            }, d = fb.selectors = {
              cacheLength: 50,
              createPseudo: hb,
              match: X,
              attrHandle: {},
              find: {},
              relative: {
                ">": {
                  dir: "parentNode",
                  first: !0
                },
                " ": {
                  dir: "parentNode"
                },
                "+": {
                  dir: "previousSibling",
                  first: !0
                },
                "~": {
                  dir: "previousSibling"
                }
              },
              preFilter: {
                ATTR: function ATTR(a) {
                  return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
                },
                CHILD: function CHILD(a) {
                  return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && fb.error(a[0]), a;
                },
                PSEUDO: function PSEUDO(a) {
                  var b,
                      c = !a[6] && a[2];
                  return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
                }
              },
              filter: {
                TAG: function TAG(a) {
                  var b = a.replace(cb, db).toLowerCase();
                  return "*" === a ? function () {
                    return !0;
                  } : function (a) {
                    return a.nodeName && a.nodeName.toLowerCase() === b;
                  };
                },
                CLASS: function CLASS(a) {
                  var b = y[a + " "];
                  return b || (b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) && y(a, function (a) {
                    return b.test("string" == typeof a.className && a.className || _typeof2(a.getAttribute) !== C && a.getAttribute("class") || "");
                  });
                },
                ATTR: function ATTR(a, b, c) {
                  return function (d) {
                    var e = fb.attr(d, a);
                    return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;
                  };
                },
                CHILD: function CHILD(a, b, c, d, e) {
                  var f = "nth" !== a.slice(0, 3),
                      g = "last" !== a.slice(-4),
                      h = "of-type" === b;
                  return 1 === d && 0 === e ? function (a) {
                    return !!a.parentNode;
                  } : function (b, c, i) {
                    var j,
                        k,
                        l,
                        m,
                        n,
                        o,
                        p = f !== g ? "nextSibling" : "previousSibling",
                        q = b.parentNode,
                        r = h && b.nodeName.toLowerCase(),
                        s = !i && !h;

                    if (q) {
                      if (f) {
                        while (p) {
                          l = b;

                          while (l = l[p]) {
                            if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                          }

                          o = p = "only" === a && !o && "nextSibling";
                        }

                        return !0;
                      }

                      if (o = [g ? q.firstChild : q.lastChild], g && s) {
                        k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];

                        while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                          if (1 === l.nodeType && ++m && l === b) {
                            k[a] = [w, n, m];
                            break;
                          }
                        }
                      } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                        if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
                      }

                      return m -= e, m === d || m % d === 0 && m / d >= 0;
                    }
                  };
                },
                PSEUDO: function PSEUDO(a, b) {
                  var c,
                      e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);
                  return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {
                    var d,
                        f = e(a, b),
                        g = f.length;

                    while (g--) {
                      d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);
                    }
                  }) : function (a) {
                    return e(a, 0, c);
                  }) : e;
                }
              },
              pseudos: {
                not: hb(function (a) {
                  var b = [],
                      c = [],
                      d = h(a.replace(R, "$1"));
                  return d[u] ? hb(function (a, b, c, e) {
                    var f,
                        g = d(a, null, e, []),
                        h = a.length;

                    while (h--) {
                      (f = g[h]) && (a[h] = !(b[h] = f));
                    }
                  }) : function (a, e, f) {
                    return b[0] = a, d(b, null, f, c), !c.pop();
                  };
                }),
                has: hb(function (a) {
                  return function (b) {
                    return fb(a, b).length > 0;
                  };
                }),
                contains: hb(function (a) {
                  return function (b) {
                    return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                  };
                }),
                lang: hb(function (a) {
                  return W.test(a || "") || fb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), function (b) {
                    var c;

                    do {
                      if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
                    } while ((b = b.parentNode) && 1 === b.nodeType);

                    return !1;
                  };
                }),
                target: function target(b) {
                  var c = a.location && a.location.hash;
                  return c && c.slice(1) === b.id;
                },
                root: function root(a) {
                  return a === o;
                },
                focus: function focus(a) {
                  return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                },
                enabled: function enabled(a) {
                  return a.disabled === !1;
                },
                disabled: function disabled(a) {
                  return a.disabled === !0;
                },
                checked: function checked(a) {
                  var b = a.nodeName.toLowerCase();
                  return "input" === b && !!a.checked || "option" === b && !!a.selected;
                },
                selected: function selected(a) {
                  return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
                },
                empty: function empty(a) {
                  for (a = a.firstChild; a; a = a.nextSibling) {
                    if (a.nodeType < 6) return !1;
                  }

                  return !0;
                },
                parent: function parent(a) {
                  return !d.pseudos.empty(a);
                },
                header: function header(a) {
                  return Z.test(a.nodeName);
                },
                input: function input(a) {
                  return Y.test(a.nodeName);
                },
                button: function button(a) {
                  var b = a.nodeName.toLowerCase();
                  return "input" === b && "button" === a.type || "button" === b;
                },
                text: function text(a) {
                  var b;
                  return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
                },
                first: nb(function () {
                  return [0];
                }),
                last: nb(function (a, b) {
                  return [b - 1];
                }),
                eq: nb(function (a, b, c) {
                  return [0 > c ? c + b : c];
                }),
                even: nb(function (a, b) {
                  for (var c = 0; b > c; c += 2) {
                    a.push(c);
                  }

                  return a;
                }),
                odd: nb(function (a, b) {
                  for (var c = 1; b > c; c += 2) {
                    a.push(c);
                  }

                  return a;
                }),
                lt: nb(function (a, b, c) {
                  for (var d = 0 > c ? c + b : c; --d >= 0;) {
                    a.push(d);
                  }

                  return a;
                }),
                gt: nb(function (a, b, c) {
                  for (var d = 0 > c ? c + b : c; ++d < b;) {
                    a.push(d);
                  }

                  return a;
                })
              }
            }, d.pseudos.nth = d.pseudos.eq;

            for (b in {
              radio: !0,
              checkbox: !0,
              file: !0,
              password: !0,
              image: !0
            }) {
              d.pseudos[b] = lb(b);
            }

            for (b in {
              submit: !0,
              reset: !0
            }) {
              d.pseudos[b] = mb(b);
            }

            function pb() {}

            pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {
              var c,
                  e,
                  f,
                  g,
                  h,
                  i,
                  j,
                  k = z[a + " "];
              if (k) return b ? 0 : k.slice(0);
              h = a, i = [], j = d.preFilter;

              while (h) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                  value: c,
                  type: e[0].replace(R, " ")
                }), h = h.slice(c.length));

                for (g in d.filter) {
                  !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({
                    value: c,
                    type: g,
                    matches: e
                  }), h = h.slice(c.length));
                }

                if (!c) break;
              }

              return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);
            };

            function qb(a) {
              for (var b = 0, c = a.length, d = ""; c > b; b++) {
                d += a[b].value;
              }

              return d;
            }

            function rb(a, b, c) {
              var d = b.dir,
                  e = c && "parentNode" === d,
                  f = x++;
              return b.first ? function (b, c, f) {
                while (b = b[d]) {
                  if (1 === b.nodeType || e) return a(b, c, f);
                }
              } : function (b, c, g) {
                var h,
                    i,
                    j = [w, f];

                if (g) {
                  while (b = b[d]) {
                    if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
                  }
                } else while (b = b[d]) {
                  if (1 === b.nodeType || e) {
                    if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                    if (i[d] = j, j[2] = a(b, c, g)) return !0;
                  }
                }
              };
            }

            function sb(a) {
              return a.length > 1 ? function (b, c, d) {
                var e = a.length;

                while (e--) {
                  if (!a[e](b, c, d)) return !1;
                }

                return !0;
              } : a[0];
            }

            function tb(a, b, c) {
              for (var d = 0, e = b.length; e > d; d++) {
                fb(a, b[d], c);
              }

              return c;
            }

            function ub(a, b, c, d, e) {
              for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
                (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
              }

              return g;
            }

            function vb(a, b, c, d, e, f) {
              return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {
                var j,
                    k,
                    l,
                    m = [],
                    n = [],
                    o = g.length,
                    p = f || tb(b || "*", h.nodeType ? [h] : h, []),
                    q = !a || !f && b ? p : ub(p, m, a, h, i),
                    r = c ? e || (f ? a : o || d) ? [] : g : q;

                if (c && c(q, r, h, i), d) {
                  j = ub(r, n), d(j, [], h, i), k = j.length;

                  while (k--) {
                    (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                  }
                }

                if (f) {
                  if (e || a) {
                    if (e) {
                      j = [], k = r.length;

                      while (k--) {
                        (l = r[k]) && j.push(q[k] = l);
                      }

                      e(null, r = [], j, i);
                    }

                    k = r.length;

                    while (k--) {
                      (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                    }
                  }
                } else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);
              });
            }

            function wb(a) {
              for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = rb(function (a) {
                return a === b;
              }, h, !0), l = rb(function (a) {
                return K.call(b, a) > -1;
              }, h, !0), m = [function (a, c, d) {
                return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
              }]; f > i; i++) {
                if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {
                  if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                    for (e = ++i; f > e; e++) {
                      if (d.relative[a[e].type]) break;
                    }

                    return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({
                      value: " " === a[i - 2].type ? "*" : ""
                    })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));
                  }

                  m.push(c);
                }
              }

              return sb(m);
            }

            function xb(a, b) {
              var c = b.length > 0,
                  e = a.length > 0,
                  f = function f(_f, g, h, i, k) {
                var l,
                    m,
                    o,
                    p = 0,
                    q = "0",
                    r = _f && [],
                    s = [],
                    t = j,
                    u = _f || e && d.find.TAG("*", k),
                    v = w += null == t ? 1 : Math.random() || .1,
                    x = u.length;

                for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                  if (e && l) {
                    m = 0;

                    while (o = a[m++]) {
                      if (o(l, g, h)) {
                        i.push(l);
                        break;
                      }
                    }

                    k && (w = v);
                  }

                  c && ((l = !o && l) && p--, _f && r.push(l));
                }

                if (p += q, c && q !== p) {
                  m = 0;

                  while (o = b[m++]) {
                    o(r, s, g, h);
                  }

                  if (_f) {
                    if (p > 0) while (q--) {
                      r[q] || s[q] || (s[q] = G.call(i));
                    }
                    s = ub(s);
                  }

                  I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);
                }

                return k && (w = v, j = t), r;
              };

              return c ? hb(f) : f;
            }

            return h = fb.compile = function (a, b) {
              var c,
                  d = [],
                  e = [],
                  f = A[a + " "];

              if (!f) {
                b || (b = g(a)), c = b.length;

                while (c--) {
                  f = wb(b[c]), f[u] ? d.push(f) : e.push(f);
                }

                f = A(a, xb(e, d)), f.selector = a;
              }

              return f;
            }, i = fb.select = function (a, b, e, f) {
              var i,
                  j,
                  k,
                  l,
                  m,
                  n = "function" == typeof a && a,
                  o = !f && g(a = n.selector || a);

              if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                  if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;
                  n && (b = b.parentNode), a = a.slice(j.shift().value.length);
                }

                i = X.needsContext.test(a) ? 0 : j.length;

                while (i--) {
                  if (k = j[i], d.relative[l = k.type]) break;

                  if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {
                    if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;
                    break;
                  }
                }
              }

              return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;
            }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {
              return 1 & a.compareDocumentPosition(n.createElement("div"));
            }), ib(function (a) {
              return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
            }) || jb("type|href|height|width", function (a, b, c) {
              return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
            }), c.attributes && ib(function (a) {
              return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
            }) || jb("value", function (a, b, c) {
              return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
            }), ib(function (a) {
              return null == a.getAttribute("disabled");
            }) || jb(L, function (a, b, c) {
              var d;
              return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
            }), fb;
          }(a);

          n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains;
          var u = n.expr.match.needsContext,
              v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
              w = /^.[^:#\[\.,]*$/;

          function x(a, b, c) {
            if (n.isFunction(b)) return n.grep(a, function (a, d) {
              return !!b.call(a, d, a) !== c;
            });
            if (b.nodeType) return n.grep(a, function (a) {
              return a === b !== c;
            });

            if ("string" == typeof b) {
              if (w.test(b)) return n.filter(b, a, c);
              b = n.filter(b, a);
            }

            return n.grep(a, function (a) {
              return g.call(b, a) >= 0 !== c;
            });
          }

          n.filter = function (a, b, c) {
            var d = b[0];
            return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) {
              return 1 === a.nodeType;
            }));
          }, n.fn.extend({
            find: function find(a) {
              var b,
                  c = this.length,
                  d = [],
                  e = this;
              if ("string" != typeof a) return this.pushStack(n(a).filter(function () {
                for (b = 0; c > b; b++) {
                  if (n.contains(e[b], this)) return !0;
                }
              }));

              for (b = 0; c > b; b++) {
                n.find(a, e[b], d);
              }

              return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d;
            },
            filter: function filter(a) {
              return this.pushStack(x(this, a || [], !1));
            },
            not: function not(a) {
              return this.pushStack(x(this, a || [], !0));
            },
            is: function is(a) {
              return !!x(this, "string" == typeof a && u.test(a) ? n(a) : a || [], !1).length;
            }
          });

          var y,
              z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
              A = n.fn.init = function (a, b) {
            var c, d;
            if (!a) return this;

            if ("string" == typeof a) {
              if (c = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);

              if (c[1]) {
                if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) {
                  n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                }
                return this;
              }

              return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;
            }

            return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this));
          };

          A.prototype = n.fn, y = n(l);
          var B = /^(?:parents|prev(?:Until|All))/,
              C = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
          };
          n.extend({
            dir: function dir(a, b, c) {
              var d = [],
                  e = void 0 !== c;

              while ((a = a[b]) && 9 !== a.nodeType) {
                if (1 === a.nodeType) {
                  if (e && n(a).is(c)) break;
                  d.push(a);
                }
              }

              return d;
            },
            sibling: function sibling(a, b) {
              for (var c = []; a; a = a.nextSibling) {
                1 === a.nodeType && a !== b && c.push(a);
              }

              return c;
            }
          }), n.fn.extend({
            has: function has(a) {
              var b = n(a, this),
                  c = b.length;
              return this.filter(function () {
                for (var a = 0; c > a; a++) {
                  if (n.contains(this, b[a])) return !0;
                }
              });
            },
            closest: function closest(a, b) {
              for (var c, d = 0, e = this.length, f = [], g = u.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++) {
                for (c = this[d]; c && c !== b; c = c.parentNode) {
                  if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
                    f.push(c);
                    break;
                  }
                }
              }

              return this.pushStack(f.length > 1 ? n.unique(f) : f);
            },
            index: function index(a) {
              return a ? "string" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            },
            add: function add(a, b) {
              return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));
            },
            addBack: function addBack(a) {
              return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
            }
          });

          function D(a, b) {
            while ((a = a[b]) && 1 !== a.nodeType) {
              ;
            }

            return a;
          }

          n.each({
            parent: function parent(a) {
              var b = a.parentNode;
              return b && 11 !== b.nodeType ? b : null;
            },
            parents: function parents(a) {
              return n.dir(a, "parentNode");
            },
            parentsUntil: function parentsUntil(a, b, c) {
              return n.dir(a, "parentNode", c);
            },
            next: function next(a) {
              return D(a, "nextSibling");
            },
            prev: function prev(a) {
              return D(a, "previousSibling");
            },
            nextAll: function nextAll(a) {
              return n.dir(a, "nextSibling");
            },
            prevAll: function prevAll(a) {
              return n.dir(a, "previousSibling");
            },
            nextUntil: function nextUntil(a, b, c) {
              return n.dir(a, "nextSibling", c);
            },
            prevUntil: function prevUntil(a, b, c) {
              return n.dir(a, "previousSibling", c);
            },
            siblings: function siblings(a) {
              return n.sibling((a.parentNode || {}).firstChild, a);
            },
            children: function children(a) {
              return n.sibling(a.firstChild);
            },
            contents: function contents(a) {
              return a.contentDocument || n.merge([], a.childNodes);
            }
          }, function (a, b) {
            n.fn[a] = function (c, d) {
              var e = n.map(this, b, c);
              return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), this.pushStack(e);
            };
          });
          var E = /\S+/g,
              F = {};

          function G(a) {
            var b = F[a] = {};
            return n.each(a.match(E) || [], function (a, c) {
              b[c] = !0;
            }), b;
          }

          n.Callbacks = function (a) {
            a = "string" == typeof a ? F[a] || G(a) : n.extend({}, a);

            var b,
                c,
                d,
                e,
                f,
                g,
                h = [],
                i = !a.once && [],
                j = function j(l) {
              for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {
                if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                  b = !1;
                  break;
                }
              }

              d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());
            },
                k = {
              add: function add() {
                if (h) {
                  var c = h.length;
                  !function g(b) {
                    n.each(b, function (b, c) {
                      var d = n.type(c);
                      "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && g(c);
                    });
                  }(arguments), d ? f = h.length : b && (e = c, j(b));
                }

                return this;
              },
              remove: function remove() {
                return h && n.each(arguments, function (a, b) {
                  var c;

                  while ((c = n.inArray(b, h, c)) > -1) {
                    h.splice(c, 1), d && (f >= c && f--, g >= c && g--);
                  }
                }), this;
              },
              has: function has(a) {
                return a ? n.inArray(a, h) > -1 : !(!h || !h.length);
              },
              empty: function empty() {
                return h = [], f = 0, this;
              },
              disable: function disable() {
                return h = i = b = void 0, this;
              },
              disabled: function disabled() {
                return !h;
              },
              lock: function lock() {
                return i = void 0, b || k.disable(), this;
              },
              locked: function locked() {
                return !i;
              },
              fireWith: function fireWith(a, b) {
                return !h || c && !i || (b = b || [], b = [a, b.slice ? b.slice() : b], d ? i.push(b) : j(b)), this;
              },
              fire: function fire() {
                return k.fireWith(this, arguments), this;
              },
              fired: function fired() {
                return !!c;
              }
            };

            return k;
          }, n.extend({
            Deferred: function Deferred(a) {
              var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]],
                  c = "pending",
                  d = {
                state: function state() {
                  return c;
                },
                always: function always() {
                  return e.done(arguments).fail(arguments), this;
                },
                then: function then() {
                  var a = arguments;
                  return n.Deferred(function (c) {
                    n.each(b, function (b, f) {
                      var g = n.isFunction(a[b]) && a[b];
                      e[f[1]](function () {
                        var a = g && g.apply(this, arguments);
                        a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
                      });
                    }), a = null;
                  }).promise();
                },
                promise: function promise(a) {
                  return null != a ? n.extend(a, d) : d;
                }
              },
                  e = {};
              return d.pipe = d.then, n.each(b, function (a, f) {
                var g = f[2],
                    h = f[3];
                d[f[1]] = g.add, h && g.add(function () {
                  c = h;
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
                  return e[f[0] + "With"](this === e ? d : this, arguments), this;
                }, e[f[0] + "With"] = g.fireWith;
              }), d.promise(e), a && a.call(e, e), e;
            },
            when: function when(a) {
              var b = 0,
                  c = d.call(arguments),
                  e = c.length,
                  f = 1 !== e || a && n.isFunction(a.promise) ? e : 0,
                  g = 1 === f ? a : n.Deferred(),
                  h = function h(a, b, c) {
                return function (e) {
                  b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                };
              },
                  i,
                  j,
                  k;

              if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
                c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
              }
              return f || g.resolveWith(k, c), g.promise();
            }
          });
          var H;
          n.fn.ready = function (a) {
            return n.ready.promise().done(a), this;
          }, n.extend({
            isReady: !1,
            readyWait: 1,
            holdReady: function holdReady(a) {
              a ? n.readyWait++ : n.ready(!0);
            },
            ready: function ready(a) {
              (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (H.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler("ready"), n(l).off("ready"))));
            }
          });

          function I() {
            l.removeEventListener("DOMContentLoaded", I, !1), a.removeEventListener("load", I, !1), n.ready();
          }

          n.ready.promise = function (b) {
            return H || (H = n.Deferred(), "complete" === l.readyState ? setTimeout(n.ready) : (l.addEventListener("DOMContentLoaded", I, !1), a.addEventListener("load", I, !1))), H.promise(b);
          }, n.ready.promise();

          var J = n.access = function (a, b, c, d, e, f, g) {
            var h = 0,
                i = a.length,
                j = null == c;

            if ("object" === n.type(c)) {
              e = !0;

              for (h in c) {
                n.access(a, b, h, c[h], !0, f, g);
              }
            } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (_b2) {
              function b(_x, _x2, _x3) {
                return _b2.apply(this, arguments);
              }

              b.toString = function () {
                return _b2.toString();
              };

              return b;
            }(function (a, b, c) {
              return j.call(n(a), c);
            }))), b)) for (; i > h; h++) {
              b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            }

            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
          };

          n.acceptData = function (a) {
            return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
          };

          function K() {
            Object.defineProperty(this.cache = {}, 0, {
              get: function get() {
                return {};
              }
            }), this.expando = n.expando + Math.random();
          }

          K.uid = 1, K.accepts = n.acceptData, K.prototype = {
            key: function key(a) {
              if (!K.accepts(a)) return 0;
              var b = {},
                  c = a[this.expando];

              if (!c) {
                c = K.uid++;

                try {
                  b[this.expando] = {
                    value: c
                  }, Object.defineProperties(a, b);
                } catch (d) {
                  b[this.expando] = c, n.extend(a, b);
                }
              }

              return this.cache[c] || (this.cache[c] = {}), c;
            },
            set: function set(a, b, c) {
              var d,
                  e = this.key(a),
                  f = this.cache[e];
              if ("string" == typeof b) f[b] = c;else if (n.isEmptyObject(f)) n.extend(this.cache[e], b);else for (d in b) {
                f[d] = b[d];
              }
              return f;
            },
            get: function get(a, b) {
              var c = this.cache[this.key(a)];
              return void 0 === b ? c : c[b];
            },
            access: function access(a, b, c) {
              var d;
              return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b);
            },
            remove: function remove(a, b) {
              var c,
                  d,
                  e,
                  f = this.key(a),
                  g = this.cache[f];
              if (void 0 === b) this.cache[f] = {};else {
                n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(E) || [])), c = d.length;

                while (c--) {
                  delete g[d[c]];
                }
              }
            },
            hasData: function hasData(a) {
              return !n.isEmptyObject(this.cache[a[this.expando]] || {});
            },
            discard: function discard(a) {
              a[this.expando] && delete this.cache[a[this.expando]];
            }
          };
          var L = new K(),
              M = new K(),
              N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
              O = /([A-Z])/g;

          function P(a, b, c) {
            var d;
            if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(O, "-$1").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
              try {
                c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : N.test(c) ? n.parseJSON(c) : c;
              } catch (e) {}

              M.set(a, b, c);
            } else c = void 0;
            return c;
          }

          n.extend({
            hasData: function hasData(a) {
              return M.hasData(a) || L.hasData(a);
            },
            data: function data(a, b, c) {
              return M.access(a, b, c);
            },
            removeData: function removeData(a, b) {
              M.remove(a, b);
            },
            _data: function _data(a, b, c) {
              return L.access(a, b, c);
            },
            _removeData: function _removeData(a, b) {
              L.remove(a, b);
            }
          }), n.fn.extend({
            data: function data(a, b) {
              var c,
                  d,
                  e,
                  f = this[0],
                  g = f && f.attributes;

              if (void 0 === a) {
                if (this.length && (e = M.get(f), 1 === f.nodeType && !L.get(f, "hasDataAttrs"))) {
                  c = g.length;

                  while (c--) {
                    g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));
                  }

                  L.set(f, "hasDataAttrs", !0);
                }

                return e;
              }

              return "object" == _typeof2(a) ? this.each(function () {
                M.set(this, a);
              }) : J(this, function (b) {
                var c,
                    d = n.camelCase(a);

                if (f && void 0 === b) {
                  if (c = M.get(f, a), void 0 !== c) return c;
                  if (c = M.get(f, d), void 0 !== c) return c;
                  if (c = P(f, d, void 0), void 0 !== c) return c;
                } else this.each(function () {
                  var c = M.get(this, d);
                  M.set(this, d, b), -1 !== a.indexOf("-") && void 0 !== c && M.set(this, a, b);
                });
              }, null, b, arguments.length > 1, null, !0);
            },
            removeData: function removeData(a) {
              return this.each(function () {
                M.remove(this, a);
              });
            }
          }), n.extend({
            queue: function queue(a, b, c) {
              var d;
              return a ? (b = (b || "fx") + "queue", d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;
            },
            dequeue: function dequeue(a, b) {
              b = b || "fx";

              var c = n.queue(a, b),
                  d = c.length,
                  e = c.shift(),
                  f = n._queueHooks(a, b),
                  g = function g() {
                n.dequeue(a, b);
              };

              "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
            },
            _queueHooks: function _queueHooks(a, b) {
              var c = b + "queueHooks";
              return L.get(a, c) || L.access(a, c, {
                empty: n.Callbacks("once memory").add(function () {
                  L.remove(a, [b + "queue", c]);
                })
              });
            }
          }), n.fn.extend({
            queue: function queue(a, b) {
              var c = 2;
              return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () {
                var c = n.queue(this, a, b);
                n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
              });
            },
            dequeue: function dequeue(a) {
              return this.each(function () {
                n.dequeue(this, a);
              });
            },
            clearQueue: function clearQueue(a) {
              return this.queue(a || "fx", []);
            },
            promise: function promise(a, b) {
              var c,
                  d = 1,
                  e = n.Deferred(),
                  f = this,
                  g = this.length,
                  h = function h() {
                --d || e.resolveWith(f, [f]);
              };

              "string" != typeof a && (b = a, a = void 0), a = a || "fx";

              while (g--) {
                c = L.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
              }

              return h(), e.promise(b);
            }
          });

          var Q = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
              R = ["Top", "Right", "Bottom", "Left"],
              S = function S(a, b) {
            return a = b || a, "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a);
          },
              T = /^(?:checkbox|radio)$/i;

          !function () {
            var a = l.createDocumentFragment(),
                b = a.appendChild(l.createElement("div")),
                c = l.createElement("input");
            c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
          }();
          var U = "undefined";
          k.focusinBubbles = "onfocusin" in a;
          var V = /^key/,
              W = /^(?:mouse|pointer|contextmenu)|click/,
              X = /^(?:focusinfocus|focusoutblur)$/,
              Y = /^([^.]*)(?:\.(.+)|)$/;

          function Z() {
            return !0;
          }

          function $() {
            return !1;
          }

          function _() {
            try {
              return l.activeElement;
            } catch (a) {}
          }

          n.event = {
            global: {},
            add: function add(a, b, c, d, e) {
              var f,
                  g,
                  h,
                  i,
                  j,
                  k,
                  l,
                  m,
                  o,
                  p,
                  q,
                  r = L.get(a);

              if (r) {
                c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function (b) {
                  return _typeof2(n) !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;
                }), b = (b || "").match(E) || [""], j = b.length;

                while (j--) {
                  h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({
                    type: o,
                    origType: q,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && n.expr.match.needsContext.test(e),
                    namespace: p.join(".")
                  }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);
                }
              }
            },
            remove: function remove(a, b, c, d, e) {
              var f,
                  g,
                  h,
                  i,
                  j,
                  k,
                  l,
                  m,
                  o,
                  p,
                  q,
                  r = L.hasData(a) && L.get(a);

              if (r && (i = r.events)) {
                b = (b || "").match(E) || [""], j = b.length;

                while (j--) {
                  if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
                    l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;

                    while (f--) {
                      k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
                    }

                    g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);
                  } else for (o in i) {
                    n.event.remove(a, o + b[j], c, d, !0);
                  }
                }

                n.isEmptyObject(i) && (delete r.handle, L.remove(a, "events"));
              }
            },
            trigger: function trigger(b, c, d, e) {
              var f,
                  g,
                  h,
                  i,
                  k,
                  m,
                  o,
                  p = [d || l],
                  q = j.call(b, "type") ? b.type : b,
                  r = j.call(b, "namespace") ? b.namespace.split(".") : [];

              if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !X.test(q + n.event.triggered) && (q.indexOf(".") >= 0 && (r = q.split("."), q = r.shift(), r.sort()), k = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == _typeof2(b) && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {
                if (!e && !o.noBubble && !n.isWindow(d)) {
                  for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {
                    p.push(g), h = g;
                  }

                  h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);
                }

                f = 0;

                while ((g = p[f++]) && !b.isPropagationStopped()) {
                  b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, "events") || {})[b.type] && L.get(g, "handle"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result === !1 && b.preventDefault());
                }

                return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;
              }
            },
            dispatch: function dispatch(a) {
              a = n.event.fix(a);
              var b,
                  c,
                  e,
                  f,
                  g,
                  h = [],
                  i = d.call(arguments),
                  j = (L.get(this, "events") || {})[a.type] || [],
                  k = n.event.special[a.type] || {};

              if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
                h = n.event.handlers.call(this, a, j), b = 0;

                while ((f = h[b++]) && !a.isPropagationStopped()) {
                  a.currentTarget = f.elem, c = 0;

                  while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {
                    (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));
                  }
                }

                return k.postDispatch && k.postDispatch.call(this, a), a.result;
              }
            },
            handlers: function handlers(a, b) {
              var c,
                  d,
                  e,
                  f,
                  g = [],
                  h = b.delegateCount,
                  i = a.target;
              if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i !== this; i = i.parentNode || this) {
                if (i.disabled !== !0 || "click" !== a.type) {
                  for (d = [], c = 0; h > c; c++) {
                    f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);
                  }

                  d.length && g.push({
                    elem: i,
                    handlers: d
                  });
                }
              }
              return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
              }), g;
            },
            props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
            fixHooks: {},
            keyHooks: {
              props: "char charCode key keyCode".split(" "),
              filter: function filter(a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
              }
            },
            mouseHooks: {
              props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
              filter: function filter(a, b) {
                var c,
                    d,
                    e,
                    f = b.button;
                return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
              }
            },
            fix: function fix(a) {
              if (a[n.expando]) return a;
              var b,
                  c,
                  d,
                  e = a.type,
                  f = a,
                  g = this.fixHooks[e];
              g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;

              while (b--) {
                c = d[b], a[c] = f[c];
              }

              return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;
            },
            special: {
              load: {
                noBubble: !0
              },
              focus: {
                trigger: function trigger() {
                  return this !== _() && this.focus ? (this.focus(), !1) : void 0;
                },
                delegateType: "focusin"
              },
              blur: {
                trigger: function trigger() {
                  return this === _() && this.blur ? (this.blur(), !1) : void 0;
                },
                delegateType: "focusout"
              },
              click: {
                trigger: function trigger() {
                  return "checkbox" === this.type && this.click && n.nodeName(this, "input") ? (this.click(), !1) : void 0;
                },
                _default: function _default(a) {
                  return n.nodeName(a.target, "a");
                }
              },
              beforeunload: {
                postDispatch: function postDispatch(a) {
                  void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                }
              }
            },
            simulate: function simulate(a, b, c, d) {
              var e = n.extend(new n.Event(), c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
              });
              d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
            }
          }, n.removeEvent = function (a, b, c) {
            a.removeEventListener && a.removeEventListener(b, c, !1);
          }, n.Event = function (a, b) {
            return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? Z : $) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);
          }, n.Event.prototype = {
            isDefaultPrevented: $,
            isPropagationStopped: $,
            isImmediatePropagationStopped: $,
            preventDefault: function preventDefault() {
              var a = this.originalEvent;
              this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault();
            },
            stopPropagation: function stopPropagation() {
              var a = this.originalEvent;
              this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation();
            },
            stopImmediatePropagation: function stopImmediatePropagation() {
              var a = this.originalEvent;
              this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
            }
          }, n.each({
            mouseenter: "mouseover",
            mouseleave: "mouseout",
            pointerenter: "pointerover",
            pointerleave: "pointerout"
          }, function (a, b) {
            n.event.special[a] = {
              delegateType: b,
              bindType: b,
              handle: function handle(a) {
                var c,
                    d = this,
                    e = a.relatedTarget,
                    f = a.handleObj;
                return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
              }
            };
          }), k.focusinBubbles || n.each({
            focus: "focusin",
            blur: "focusout"
          }, function (a, b) {
            var c = function c(a) {
              n.event.simulate(b, a.target, n.event.fix(a), !0);
            };

            n.event.special[b] = {
              setup: function setup() {
                var d = this.ownerDocument || this,
                    e = L.access(d, b);
                e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1);
              },
              teardown: function teardown() {
                var d = this.ownerDocument || this,
                    e = L.access(d, b) - 1;
                e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b));
              }
            };
          }), n.fn.extend({
            on: function on(a, b, c, d, e) {
              var f, g;

              if ("object" == _typeof2(a)) {
                "string" != typeof b && (c = c || b, b = void 0);

                for (g in a) {
                  this.on(g, b, c, a[g], e);
                }

                return this;
              }

              if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = $;else if (!d) return this;
              return 1 === e && (f = d, d = function d(a) {
                return n().off(a), f.apply(this, arguments);
              }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function () {
                n.event.add(this, a, d, c, b);
              });
            },
            one: function one(a, b, c, d) {
              return this.on(a, b, c, d, 1);
            },
            off: function off(a, b, c) {
              var d, e;
              if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;

              if ("object" == _typeof2(a)) {
                for (e in a) {
                  this.off(e, b, a[e]);
                }

                return this;
              }

              return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = $), this.each(function () {
                n.event.remove(this, a, c, b);
              });
            },
            trigger: function trigger(a, b) {
              return this.each(function () {
                n.event.trigger(a, b, this);
              });
            },
            triggerHandler: function triggerHandler(a, b) {
              var c = this[0];
              return c ? n.event.trigger(a, b, c, !0) : void 0;
            }
          });
          var ab = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
              bb = /<([\w:]+)/,
              cb = /<|&#?\w+;/,
              db = /<(?:script|style|link)/i,
              eb = /checked\s*(?:[^=]|=\s*.checked.)/i,
              fb = /^$|\/(?:java|ecma)script/i,
              gb = /^true\/(.*)/,
              hb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
              ib = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
          };
          ib.optgroup = ib.option, ib.tbody = ib.tfoot = ib.colgroup = ib.caption = ib.thead, ib.th = ib.td;

          function jb(a, b) {
            return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
          }

          function kb(a) {
            return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
          }

          function lb(a) {
            var b = gb.exec(a.type);
            return b ? a.type = b[1] : a.removeAttribute("type"), a;
          }

          function mb(a, b) {
            for (var c = 0, d = a.length; d > c; c++) {
              L.set(a[c], "globalEval", !b || L.get(b[c], "globalEval"));
            }
          }

          function nb(a, b) {
            var c, d, e, f, g, h, i, j;

            if (1 === b.nodeType) {
              if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {
                delete g.handle, g.events = {};

                for (e in j) {
                  for (c = 0, d = j[e].length; d > c; c++) {
                    n.event.add(b, e, j[e][c]);
                  }
                }
              }

              M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i));
            }
          }

          function ob(a, b) {
            var c = a.getElementsByTagName ? a.getElementsByTagName(b || "*") : a.querySelectorAll ? a.querySelectorAll(b || "*") : [];
            return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c;
          }

          function pb(a, b) {
            var c = b.nodeName.toLowerCase();
            "input" === c && T.test(a.type) ? b.checked = a.checked : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
          }

          n.extend({
            clone: function clone(a, b, c) {
              var d,
                  e,
                  f,
                  g,
                  h = a.cloneNode(!0),
                  i = n.contains(a.ownerDocument, a);
              if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = ob(h), f = ob(a), d = 0, e = f.length; e > d; d++) {
                pb(f[d], g[d]);
              }
              if (b) if (c) for (f = f || ob(a), g = g || ob(h), d = 0, e = f.length; e > d; d++) {
                nb(f[d], g[d]);
              } else nb(a, h);
              return g = ob(h, "script"), g.length > 0 && mb(g, !i && ob(a, "script")), h;
            },
            buildFragment: function buildFragment(a, b, c, d) {
              for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {
                if (e = a[m], e || 0 === e) if ("object" === n.type(e)) n.merge(l, e.nodeType ? [e] : e);else if (cb.test(e)) {
                  f = f || k.appendChild(b.createElement("div")), g = (bb.exec(e) || ["", ""])[1].toLowerCase(), h = ib[g] || ib._default, f.innerHTML = h[1] + e.replace(ab, "<$1></$2>") + h[2], j = h[0];

                  while (j--) {
                    f = f.lastChild;
                  }

                  n.merge(l, f.childNodes), f = k.firstChild, f.textContent = "";
                } else l.push(b.createTextNode(e));
              }

              k.textContent = "", m = 0;

              while (e = l[m++]) {
                if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = ob(k.appendChild(e), "script"), i && mb(f), c)) {
                  j = 0;

                  while (e = f[j++]) {
                    fb.test(e.type || "") && c.push(e);
                  }
                }
              }

              return k;
            },
            cleanData: function cleanData(a) {
              for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
                if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {
                  if (b.events) for (d in b.events) {
                    f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
                  }
                  L.cache[e] && delete L.cache[e];
                }

                delete M.cache[c[M.expando]];
              }
            }
          }), n.fn.extend({
            text: function text(a) {
              return J(this, function (a) {
                return void 0 === a ? n.text(this) : this.empty().each(function () {
                  (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);
                });
              }, null, a, arguments.length);
            },
            append: function append() {
              return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                  var b = jb(this, a);
                  b.appendChild(a);
                }
              });
            },
            prepend: function prepend() {
              return this.domManip(arguments, function (a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                  var b = jb(this, a);
                  b.insertBefore(a, b.firstChild);
                }
              });
            },
            before: function before() {
              return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this);
              });
            },
            after: function after() {
              return this.domManip(arguments, function (a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
              });
            },
            remove: function remove(a, b) {
              for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
                b || 1 !== c.nodeType || n.cleanData(ob(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && mb(ob(c, "script")), c.parentNode.removeChild(c));
              }

              return this;
            },
            empty: function empty() {
              for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && (n.cleanData(ob(a, !1)), a.textContent = "");
              }

              return this;
            },
            clone: function clone(a, b) {
              return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
                return n.clone(this, a, b);
              });
            },
            html: function html(a) {
              return J(this, function (a) {
                var b = this[0] || {},
                    c = 0,
                    d = this.length;
                if (void 0 === a && 1 === b.nodeType) return b.innerHTML;

                if ("string" == typeof a && !db.test(a) && !ib[(bb.exec(a) || ["", ""])[1].toLowerCase()]) {
                  a = a.replace(ab, "<$1></$2>");

                  try {
                    for (; d > c; c++) {
                      b = this[c] || {}, 1 === b.nodeType && (n.cleanData(ob(b, !1)), b.innerHTML = a);
                    }

                    b = 0;
                  } catch (e) {}
                }

                b && this.empty().append(a);
              }, null, a, arguments.length);
            },
            replaceWith: function replaceWith() {
              var a = arguments[0];
              return this.domManip(arguments, function (b) {
                a = this.parentNode, n.cleanData(ob(this)), a && a.replaceChild(b, this);
              }), a && (a.length || a.nodeType) ? this : this.remove();
            },
            detach: function detach(a) {
              return this.remove(a, !0);
            },
            domManip: function domManip(a, b) {
              a = e.apply([], a);
              var c,
                  d,
                  f,
                  g,
                  h,
                  i,
                  j = 0,
                  l = this.length,
                  m = this,
                  o = l - 1,
                  p = a[0],
                  q = n.isFunction(p);
              if (q || l > 1 && "string" == typeof p && !k.checkClone && eb.test(p)) return this.each(function (c) {
                var d = m.eq(c);
                q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
              });

              if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
                for (f = n.map(ob(c, "script"), kb), g = f.length; l > j; j++) {
                  h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, ob(h, "script"))), b.call(this[j], h, j);
                }

                if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, lb), j = 0; g > j; j++) {
                  h = f[j], fb.test(h.type || "") && !L.access(h, "globalEval") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(hb, "")));
                }
              }

              return this;
            }
          }), n.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
          }, function (a, b) {
            n.fn[a] = function (a) {
              for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {
                c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
              }

              return this.pushStack(d);
            };
          });
          var qb,
              rb = {};

          function sb(b, c) {
            var d,
                e = n(c.createElement(b)).appendTo(c.body),
                f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : n.css(e[0], "display");
            return e.detach(), f;
          }

          function tb(a) {
            var b = l,
                c = rb[a];
            return c || (c = sb(a, b), "none" !== c && c || (qb = (qb || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = qb[0].contentDocument, b.write(), b.close(), c = sb(a, b), qb.detach()), rb[a] = c), c;
          }

          var ub = /^margin/,
              vb = new RegExp("^(" + Q + ")(?!px)[a-z%]+$", "i"),
              wb = function wb(a) {
            return a.ownerDocument.defaultView.getComputedStyle(a, null);
          };

          function xb(a, b, c) {
            var d,
                e,
                f,
                g,
                h = a.style;
            return c = c || wb(a), c && (g = c.getPropertyValue(b) || c[b]), c && ("" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), vb.test(g) && ub.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
          }

          function yb(a, b) {
            return {
              get: function get() {
                return a() ? void delete this.get : (this.get = b).apply(this, arguments);
              }
            };
          }

          !function () {
            var b,
                c,
                d = l.documentElement,
                e = l.createElement("div"),
                f = l.createElement("div");

            if (f.style) {
              var _g = function _g() {
                f.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", f.innerHTML = "", d.appendChild(e);
                var g = a.getComputedStyle(f, null);
                b = "1%" !== g.top, c = "4px" === g.width, d.removeChild(e);
              };

              f.style.backgroundClip = "content-box", f.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === f.style.backgroundClip, e.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", e.appendChild(f);
              a.getComputedStyle && n.extend(k, {
                pixelPosition: function pixelPosition() {
                  return _g(), b;
                },
                boxSizingReliable: function boxSizingReliable() {
                  return null == c && _g(), c;
                },
                reliableMarginRight: function reliableMarginRight() {
                  var b,
                      c = f.appendChild(l.createElement("div"));
                  return c.style.cssText = f.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", c.style.marginRight = c.style.width = "0", f.style.width = "1px", d.appendChild(e), b = !parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), b;
                }
              });
            }
          }(), n.swap = function (a, b, c, d) {
            var e,
                f,
                g = {};

            for (f in b) {
              g[f] = a.style[f], a.style[f] = b[f];
            }

            e = c.apply(a, d || []);

            for (f in b) {
              a.style[f] = g[f];
            }

            return e;
          };
          var zb = /^(none|table(?!-c[ea]).+)/,
              Ab = new RegExp("^(" + Q + ")(.*)$", "i"),
              Bb = new RegExp("^([+-])=(" + Q + ")", "i"),
              Cb = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
          },
              Db = {
            letterSpacing: "0",
            fontWeight: "400"
          },
              Eb = ["Webkit", "O", "Moz", "ms"];

          function Fb(a, b) {
            if (b in a) return b;
            var c = b[0].toUpperCase() + b.slice(1),
                d = b,
                e = Eb.length;

            while (e--) {
              if (b = Eb[e] + c, b in a) return b;
            }

            return d;
          }

          function Gb(a, b, c) {
            var d = Ab.exec(b);
            return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
          }

          function Hb(a, b, c, d, e) {
            for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) {
              "margin" === c && (g += n.css(a, c + R[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + R[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + R[f] + "Width", !0, e))) : (g += n.css(a, "padding" + R[f], !0, e), "padding" !== c && (g += n.css(a, "border" + R[f] + "Width", !0, e)));
            }

            return g;
          }

          function Ib(a, b, c) {
            var d = !0,
                e = "width" === b ? a.offsetWidth : a.offsetHeight,
                f = wb(a),
                g = "border-box" === n.css(a, "boxSizing", !1, f);

            if (0 >= e || null == e) {
              if (e = xb(a, b, f), (0 > e || null == e) && (e = a.style[b]), vb.test(e)) return e;
              d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
            }

            return e + Hb(a, b, c || (g ? "border" : "content"), d, f) + "px";
          }

          function Jb(a, b) {
            for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
              d = a[g], d.style && (f[g] = L.get(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && S(d) && (f[g] = L.access(d, "olddisplay", tb(d.nodeName)))) : (e = S(d), "none" === c && e || L.set(d, "olddisplay", e ? c : n.css(d, "display"))));
            }

            for (g = 0; h > g; g++) {
              d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
            }

            return a;
          }

          n.extend({
            cssHooks: {
              opacity: {
                get: function get(a, b) {
                  if (b) {
                    var c = xb(a, "opacity");
                    return "" === c ? "1" : c;
                  }
                }
              }
            },
            cssNumber: {
              columnCount: !0,
              fillOpacity: !0,
              flexGrow: !0,
              flexShrink: !0,
              fontWeight: !0,
              lineHeight: !0,
              opacity: !0,
              order: !0,
              orphans: !0,
              widows: !0,
              zIndex: !0,
              zoom: !0
            },
            cssProps: {
              "float": "cssFloat"
            },
            style: function style(a, b, c, d) {
              if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e,
                    f,
                    g,
                    h = n.camelCase(b),
                    i = a.style;
                return b = n.cssProps[h] || (n.cssProps[h] = Fb(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = _typeof2(c), "string" === f && (e = Bb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || n.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
              }
            },
            css: function css(a, b, c, d) {
              var e,
                  f,
                  g,
                  h = n.camelCase(b);
              return b = n.cssProps[h] || (n.cssProps[h] = Fb(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = xb(a, b, d)), "normal" === e && b in Db && (e = Db[b]), "" === c || c ? (f = parseFloat(e), c === !0 || n.isNumeric(f) ? f || 0 : e) : e;
            }
          }), n.each(["height", "width"], function (a, b) {
            n.cssHooks[b] = {
              get: function get(a, c, d) {
                return c ? zb.test(n.css(a, "display")) && 0 === a.offsetWidth ? n.swap(a, Cb, function () {
                  return Ib(a, b, d);
                }) : Ib(a, b, d) : void 0;
              },
              set: function set(a, c, d) {
                var e = d && wb(a);
                return Gb(a, c, d ? Hb(a, b, d, "border-box" === n.css(a, "boxSizing", !1, e), e) : 0);
              }
            };
          }), n.cssHooks.marginRight = yb(k.reliableMarginRight, function (a, b) {
            return b ? n.swap(a, {
              display: "inline-block"
            }, xb, [a, "marginRight"]) : void 0;
          }), n.each({
            margin: "",
            padding: "",
            border: "Width"
          }, function (a, b) {
            n.cssHooks[a + b] = {
              expand: function expand(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) {
                  e[a + R[d] + b] = f[d] || f[d - 2] || f[0];
                }

                return e;
              }
            }, ub.test(a) || (n.cssHooks[a + b].set = Gb);
          }), n.fn.extend({
            css: function css(a, b) {
              return J(this, function (a, b, c) {
                var d,
                    e,
                    f = {},
                    g = 0;

                if (n.isArray(b)) {
                  for (d = wb(a), e = b.length; e > g; g++) {
                    f[b[g]] = n.css(a, b[g], !1, d);
                  }

                  return f;
                }

                return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
              }, a, b, arguments.length > 1);
            },
            show: function show() {
              return Jb(this, !0);
            },
            hide: function hide() {
              return Jb(this);
            },
            toggle: function toggle(a) {
              return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
                S(this) ? n(this).show() : n(this).hide();
              });
            }
          });

          function Kb(a, b, c, d, e) {
            return new Kb.prototype.init(a, b, c, d, e);
          }

          n.Tween = Kb, Kb.prototype = {
            constructor: Kb,
            init: function init(a, b, c, d, e, f) {
              this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px");
            },
            cur: function cur() {
              var a = Kb.propHooks[this.prop];
              return a && a.get ? a.get(this) : Kb.propHooks._default.get(this);
            },
            run: function run(a) {
              var b,
                  c = Kb.propHooks[this.prop];
              return this.pos = b = this.options.duration ? n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Kb.propHooks._default.set(this), this;
            }
          }, Kb.prototype.init.prototype = Kb.prototype, Kb.propHooks = {
            _default: {
              get: function get(a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];
              },
              set: function set(a) {
                n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
              }
            }
          }, Kb.propHooks.scrollTop = Kb.propHooks.scrollLeft = {
            set: function set(a) {
              a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
            }
          }, n.easing = {
            linear: function linear(a) {
              return a;
            },
            swing: function swing(a) {
              return .5 - Math.cos(a * Math.PI) / 2;
            }
          }, n.fx = Kb.prototype.init, n.fx.step = {};
          var Lb,
              Mb,
              Nb = /^(?:toggle|show|hide)$/,
              Ob = new RegExp("^(?:([+-])=|)(" + Q + ")([a-z%]*)$", "i"),
              Pb = /queueHooks$/,
              Qb = [Vb],
              Rb = {
            "*": [function (a, b) {
              var c = this.createTween(a, b),
                  d = c.cur(),
                  e = Ob.exec(b),
                  f = e && e[3] || (n.cssNumber[a] ? "" : "px"),
                  g = (n.cssNumber[a] || "px" !== f && +d) && Ob.exec(n.css(c.elem, a)),
                  h = 1,
                  i = 20;

              if (g && g[3] !== f) {
                f = f || g[3], e = e || [], g = +d || 1;

                do {
                  h = h || ".5", g /= h, n.style(c.elem, a, g + f);
                } while (h !== (h = c.cur() / d) && 1 !== h && --i);
              }

              return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
            }]
          };

          function Sb() {
            return setTimeout(function () {
              Lb = void 0;
            }), Lb = n.now();
          }

          function Tb(a, b) {
            var c,
                d = 0,
                e = {
              height: a
            };

            for (b = b ? 1 : 0; 4 > d; d += 2 - b) {
              c = R[d], e["margin" + c] = e["padding" + c] = a;
            }

            return b && (e.opacity = e.width = a), e;
          }

          function Ub(a, b, c) {
            for (var d, e = (Rb[b] || []).concat(Rb["*"]), f = 0, g = e.length; g > f; f++) {
              if (d = e[f].call(c, b, a)) return d;
            }
          }

          function Vb(a, b, c) {
            var d,
                e,
                f,
                g,
                h,
                i,
                j,
                k,
                l = this,
                m = {},
                o = a.style,
                p = a.nodeType && S(a),
                q = L.get(a, "fxshow");
            c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
              h.unqueued || i();
            }), h.unqueued++, l.always(function () {
              l.always(function () {
                h.unqueued--, n.queue(a, "fx").length || h.empty.fire();
              });
            })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = n.css(a, "display"), k = "none" === j ? L.get(a, "olddisplay") || tb(a.nodeName) : j, "inline" === k && "none" === n.css(a, "float") && (o.display = "inline-block")), c.overflow && (o.overflow = "hidden", l.always(function () {
              o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
            }));

            for (d in b) {
              if (e = b[d], Nb.exec(e)) {
                if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
                  if ("show" !== e || !q || void 0 === q[d]) continue;
                  p = !0;
                }

                m[d] = q && q[d] || n.style(a, d);
              } else j = void 0;
            }

            if (n.isEmptyObject(m)) "inline" === ("none" === j ? tb(a.nodeName) : j) && (o.display = j);else {
              q ? "hidden" in q && (p = q.hidden) : q = L.access(a, "fxshow", {}), f && (q.hidden = !p), p ? n(a).show() : l.done(function () {
                n(a).hide();
              }), l.done(function () {
                var b;
                L.remove(a, "fxshow");

                for (b in m) {
                  n.style(a, b, m[b]);
                }
              });

              for (d in m) {
                g = Ub(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));
              }
            }
          }

          function Wb(a, b) {
            var c, d, e, f, g;

            for (c in a) {
              if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand" in g) {
                f = g.expand(f), delete a[d];

                for (c in f) {
                  c in a || (a[c] = f[c], b[c] = e);
                }
              } else b[d] = e;
            }
          }

          function Xb(a, b, c) {
            var d,
                e,
                f = 0,
                g = Qb.length,
                h = n.Deferred().always(function () {
              delete i.elem;
            }),
                i = function i() {
              if (e) return !1;

              for (var b = Lb || Sb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {
                j.tweens[g].run(f);
              }

              return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
            },
                j = h.promise({
              elem: a,
              props: n.extend({}, b),
              opts: n.extend(!0, {
                specialEasing: {}
              }, c),
              originalProperties: b,
              originalOptions: c,
              startTime: Lb || Sb(),
              duration: c.duration,
              tweens: [],
              createTween: function createTween(b, c) {
                var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                return j.tweens.push(d), d;
              },
              stop: function stop(b) {
                var c = 0,
                    d = b ? j.tweens.length : 0;
                if (e) return this;

                for (e = !0; d > c; c++) {
                  j.tweens[c].run(1);
                }

                return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
              }
            }),
                k = j.props;

            for (Wb(k, j.opts.specialEasing); g > f; f++) {
              if (d = Qb[f].call(j, a, k, j.opts)) return d;
            }

            return n.map(k, Ub, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, {
              elem: a,
              anim: j,
              queue: j.opts.queue
            })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
          }

          n.Animation = n.extend(Xb, {
            tweener: function tweener(a, b) {
              n.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");

              for (var c, d = 0, e = a.length; e > d; d++) {
                c = a[d], Rb[c] = Rb[c] || [], Rb[c].unshift(b);
              }
            },
            prefilter: function prefilter(a, b) {
              b ? Qb.unshift(a) : Qb.push(a);
            }
          }), n.speed = function (a, b, c) {
            var d = a && "object" == _typeof2(a) ? n.extend({}, a) : {
              complete: c || !c && b || n.isFunction(a) && a,
              duration: a,
              easing: c && b || b && !n.isFunction(b) && b
            };
            return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {
              n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue);
            }, d;
          }, n.fn.extend({
            fadeTo: function fadeTo(a, b, c, d) {
              return this.filter(S).css("opacity", 0).show().end().animate({
                opacity: b
              }, a, c, d);
            },
            animate: function animate(a, b, c, d) {
              var e = n.isEmptyObject(a),
                  f = n.speed(b, c, d),
                  g = function g() {
                var b = Xb(this, n.extend({}, a), f);
                (e || L.get(this, "finish")) && b.stop(!0);
              };

              return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
            },
            stop: function stop(a, b, c) {
              var d = function d(a) {
                var b = a.stop;
                delete a.stop, b(c);
              };

              return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
                var b = !0,
                    e = null != a && a + "queueHooks",
                    f = n.timers,
                    g = L.get(this);
                if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
                  g[e] && g[e].stop && Pb.test(e) && d(g[e]);
                }

                for (e = f.length; e--;) {
                  f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
                }

                (b || !c) && n.dequeue(this, a);
              });
            },
            finish: function finish(a) {
              return a !== !1 && (a = a || "fx"), this.each(function () {
                var b,
                    c = L.get(this),
                    d = c[a + "queue"],
                    e = c[a + "queueHooks"],
                    f = n.timers,
                    g = d ? d.length : 0;

                for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
                  f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                }

                for (b = 0; g > b; b++) {
                  d[b] && d[b].finish && d[b].finish.call(this);
                }

                delete c.finish;
              });
            }
          }), n.each(["toggle", "show", "hide"], function (a, b) {
            var c = n.fn[b];

            n.fn[b] = function (a, d, e) {
              return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(Tb(b, !0), a, d, e);
            };
          }), n.each({
            slideDown: Tb("show"),
            slideUp: Tb("hide"),
            slideToggle: Tb("toggle"),
            fadeIn: {
              opacity: "show"
            },
            fadeOut: {
              opacity: "hide"
            },
            fadeToggle: {
              opacity: "toggle"
            }
          }, function (a, b) {
            n.fn[a] = function (a, c, d) {
              return this.animate(b, a, c, d);
            };
          }), n.timers = [], n.fx.tick = function () {
            var a,
                b = 0,
                c = n.timers;

            for (Lb = n.now(); b < c.length; b++) {
              a = c[b], a() || c[b] !== a || c.splice(b--, 1);
            }

            c.length || n.fx.stop(), Lb = void 0;
          }, n.fx.timer = function (a) {
            n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
          }, n.fx.interval = 13, n.fx.start = function () {
            Mb || (Mb = setInterval(n.fx.tick, n.fx.interval));
          }, n.fx.stop = function () {
            clearInterval(Mb), Mb = null;
          }, n.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
          }, n.fn.delay = function (a, b) {
            return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
              var d = setTimeout(b, a);

              c.stop = function () {
                clearTimeout(d);
              };
            });
          }, function () {
            var a = l.createElement("input"),
                b = l.createElement("select"),
                c = b.appendChild(l.createElement("option"));
            a.type = "checkbox", k.checkOn = "" !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement("input"), a.value = "t", a.type = "radio", k.radioValue = "t" === a.value;
          }();
          var Yb,
              Zb,
              $b = n.expr.attrHandle;
          n.fn.extend({
            attr: function attr(a, b) {
              return J(this, n.attr, a, b, arguments.length > 1);
            },
            removeAttr: function removeAttr(a) {
              return this.each(function () {
                n.removeAttr(this, a);
              });
            }
          }), n.extend({
            attr: function attr(a, b, c) {
              var d,
                  e,
                  f = a.nodeType;
              if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof2(a.getAttribute) === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Zb : Yb)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b));
            },
            removeAttr: function removeAttr(a, b) {
              var c,
                  d,
                  e = 0,
                  f = b && b.match(E);
              if (f && 1 === a.nodeType) while (c = f[e++]) {
                d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);
              }
            },
            attrHooks: {
              type: {
                set: function set(a, b) {
                  if (!k.radioValue && "radio" === b && n.nodeName(a, "input")) {
                    var c = a.value;
                    return a.setAttribute("type", b), c && (a.value = c), b;
                  }
                }
              }
            }
          }), Zb = {
            set: function set(a, b, c) {
              return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;
            }
          }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
            var c = $b[b] || n.find.attr;

            $b[b] = function (a, b, d) {
              var e, f;
              return d || (f = $b[b], $b[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $b[b] = f), e;
            };
          });
          var _b = /^(?:input|select|textarea|button)$/i;
          n.fn.extend({
            prop: function prop(a, b) {
              return J(this, n.prop, a, b, arguments.length > 1);
            },
            removeProp: function removeProp(a) {
              return this.each(function () {
                delete this[n.propFix[a] || a];
              });
            }
          }), n.extend({
            propFix: {
              "for": "htmlFor",
              "class": "className"
            },
            prop: function prop(a, b, c) {
              var d,
                  e,
                  f,
                  g = a.nodeType;
              if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
            },
            propHooks: {
              tabIndex: {
                get: function get(a) {
                  return a.hasAttribute("tabindex") || _b.test(a.nodeName) || a.href ? a.tabIndex : -1;
                }
              }
            }
          }), k.optSelected || (n.propHooks.selected = {
            get: function get(a) {
              var b = a.parentNode;
              return b && b.parentNode && b.parentNode.selectedIndex, null;
            }
          }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
            n.propFix[this.toLowerCase()] = this;
          });
          var ac = /[\t\r\n\f]/g;
          n.fn.extend({
            addClass: function addClass(a) {
              var b,
                  c,
                  d,
                  e,
                  f,
                  g,
                  h = "string" == typeof a && a,
                  i = 0,
                  j = this.length;
              if (n.isFunction(a)) return this.each(function (b) {
                n(this).addClass(a.call(this, b, this.className));
              });
              if (h) for (b = (a || "").match(E) || []; j > i; i++) {
                if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : " ")) {
                  f = 0;

                  while (e = b[f++]) {
                    d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                  }

                  g = n.trim(d), c.className !== g && (c.className = g);
                }
              }
              return this;
            },
            removeClass: function removeClass(a) {
              var b,
                  c,
                  d,
                  e,
                  f,
                  g,
                  h = 0 === arguments.length || "string" == typeof a && a,
                  i = 0,
                  j = this.length;
              if (n.isFunction(a)) return this.each(function (b) {
                n(this).removeClass(a.call(this, b, this.className));
              });
              if (h) for (b = (a || "").match(E) || []; j > i; i++) {
                if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : "")) {
                  f = 0;

                  while (e = b[f++]) {
                    while (d.indexOf(" " + e + " ") >= 0) {
                      d = d.replace(" " + e + " ", " ");
                    }
                  }

                  g = a ? n.trim(d) : "", c.className !== g && (c.className = g);
                }
              }
              return this;
            },
            toggleClass: function toggleClass(a, b) {
              var c = _typeof2(a);

              return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) {
                n(this).toggleClass(a.call(this, c, this.className, b), b);
              } : function () {
                if ("string" === c) {
                  var b,
                      d = 0,
                      e = n(this),
                      f = a.match(E) || [];

                  while (b = f[d++]) {
                    e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                  }
                } else (c === U || "boolean" === c) && (this.className && L.set(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : L.get(this, "__className__") || "");
              });
            },
            hasClass: function hasClass(a) {
              for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
                if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ac, " ").indexOf(b) >= 0) return !0;
              }

              return !1;
            }
          });
          var bc = /\r/g;
          n.fn.extend({
            val: function val(a) {
              var b,
                  c,
                  d,
                  e = this[0];
              {
                if (arguments.length) return d = n.isFunction(a), this.each(function (c) {
                  var e;
                  1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) {
                    return null == a ? "" : a + "";
                  })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
                });
                if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(bc, "") : null == c ? "" : c);
              }
            }
          }), n.extend({
            valHooks: {
              option: {
                get: function get(a) {
                  var b = n.find.attr(a, "value");
                  return null != b ? b : n.trim(n.text(a));
                }
              },
              select: {
                get: function get(a) {
                  for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
                    if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) {
                      if (b = n(c).val(), f) return b;
                      g.push(b);
                    }
                  }

                  return g;
                },
                set: function set(a, b) {
                  var c,
                      d,
                      e = a.options,
                      f = n.makeArray(b),
                      g = e.length;

                  while (g--) {
                    d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);
                  }

                  return c || (a.selectedIndex = -1), f;
                }
              }
            }
          }), n.each(["radio", "checkbox"], function () {
            n.valHooks[this] = {
              set: function set(a, b) {
                return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;
              }
            }, k.checkOn || (n.valHooks[this].get = function (a) {
              return null === a.getAttribute("value") ? "on" : a.value;
            });
          }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
            n.fn[b] = function (a, c) {
              return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
            };
          }), n.fn.extend({
            hover: function hover(a, b) {
              return this.mouseenter(a).mouseleave(b || a);
            },
            bind: function bind(a, b, c) {
              return this.on(a, null, b, c);
            },
            unbind: function unbind(a, b) {
              return this.off(a, null, b);
            },
            delegate: function delegate(a, b, c, d) {
              return this.on(b, a, c, d);
            },
            undelegate: function undelegate(a, b, c) {
              return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
            }
          });
          var cc = n.now(),
              dc = /\?/;
          n.parseJSON = function (a) {
            return JSON.parse(a + "");
          }, n.parseXML = function (a) {
            var b, c;
            if (!a || "string" != typeof a) return null;

            try {
              c = new DOMParser(), b = c.parseFromString(a, "text/xml");
            } catch (d) {
              b = void 0;
            }

            return (!b || b.getElementsByTagName("parsererror").length) && n.error("Invalid XML: " + a), b;
          };
          var ec,
              fc,
              gc = /#.*$/,
              hc = /([?&])_=[^&]*/,
              ic = /^(.*?):[ \t]*([^\r\n]*)$/gm,
              jc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
              kc = /^(?:GET|HEAD)$/,
              lc = /^\/\//,
              mc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
              nc = {},
              oc = {},
              pc = "*/".concat("*");

          try {
            fc = location.href;
          } catch (qc) {
            fc = l.createElement("a"), fc.href = "", fc = fc.href;
          }

          ec = mc.exec(fc.toLowerCase()) || [];

          function rc(a) {
            return function (b, c) {
              "string" != typeof b && (c = b, b = "*");
              var d,
                  e = 0,
                  f = b.toLowerCase().match(E) || [];
              if (n.isFunction(c)) while (d = f[e++]) {
                "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
              }
            };
          }

          function sc(a, b, c, d) {
            var e = {},
                f = a === oc;

            function g(h) {
              var i;
              return e[h] = !0, n.each(a[h] || [], function (a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
              }), i;
            }

            return g(b.dataTypes[0]) || !e["*"] && g("*");
          }

          function tc(a, b) {
            var c,
                d,
                e = n.ajaxSettings.flatOptions || {};

            for (c in b) {
              void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
            }

            return d && n.extend(!0, a, d), a;
          }

          function uc(a, b, c) {
            var d,
                e,
                f,
                g,
                h = a.contents,
                i = a.dataTypes;

            while ("*" === i[0]) {
              i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
            }

            if (d) for (e in h) {
              if (h[e] && h[e].test(d)) {
                i.unshift(e);
                break;
              }
            }
            if (i[0] in c) f = i[0];else {
              for (e in c) {
                if (!i[0] || a.converters[e + " " + i[0]]) {
                  f = e;
                  break;
                }

                g || (g = e);
              }

              f = f || g;
            }
            return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
          }

          function vc(a, b, c, d) {
            var e,
                f,
                g,
                h,
                i,
                j = {},
                k = a.dataTypes.slice();
            if (k[1]) for (g in a.converters) {
              j[g.toLowerCase()] = a.converters[g];
            }
            f = k.shift();

            while (f) {
              if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
                if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
                  if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                    g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
                    break;
                  }
                }
                if (g !== !0) if (g && a["throws"]) b = g(b);else try {
                  b = g(b);
                } catch (l) {
                  return {
                    state: "parsererror",
                    error: g ? l : "No conversion from " + i + " to " + f
                  };
                }
              }
            }

            return {
              state: "success",
              data: b
            };
          }

          n.extend({
            active: 0,
            lastModified: {},
            etag: {},
            ajaxSettings: {
              url: fc,
              type: "GET",
              isLocal: jc.test(ec[1]),
              global: !0,
              processData: !0,
              async: !0,
              contentType: "application/x-www-form-urlencoded; charset=UTF-8",
              accepts: {
                "*": pc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
              },
              contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
              },
              responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
              },
              converters: {
                "* text": String,
                "text html": !0,
                "text json": n.parseJSON,
                "text xml": n.parseXML
              },
              flatOptions: {
                url: !0,
                context: !0
              }
            },
            ajaxSetup: function ajaxSetup(a, b) {
              return b ? tc(tc(a, n.ajaxSettings), b) : tc(n.ajaxSettings, a);
            },
            ajaxPrefilter: rc(nc),
            ajaxTransport: rc(oc),
            ajax: function ajax(a, b) {
              "object" == _typeof2(a) && (b = a, a = void 0), b = b || {};
              var c,
                  d,
                  e,
                  f,
                  g,
                  h,
                  i,
                  j,
                  k = n.ajaxSetup({}, b),
                  l = k.context || k,
                  m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event,
                  o = n.Deferred(),
                  p = n.Callbacks("once memory"),
                  q = k.statusCode || {},
                  r = {},
                  s = {},
                  t = 0,
                  u = "canceled",
                  v = {
                readyState: 0,
                getResponseHeader: function getResponseHeader(a) {
                  var b;

                  if (2 === t) {
                    if (!f) {
                      f = {};

                      while (b = ic.exec(e)) {
                        f[b[1].toLowerCase()] = b[2];
                      }
                    }

                    b = f[a.toLowerCase()];
                  }

                  return null == b ? null : b;
                },
                getAllResponseHeaders: function getAllResponseHeaders() {
                  return 2 === t ? e : null;
                },
                setRequestHeader: function setRequestHeader(a, b) {
                  var c = a.toLowerCase();
                  return t || (a = s[c] = s[c] || a, r[a] = b), this;
                },
                overrideMimeType: function overrideMimeType(a) {
                  return t || (k.mimeType = a), this;
                },
                statusCode: function statusCode(a) {
                  var b;
                  if (a) if (2 > t) for (b in a) {
                    q[b] = [q[b], a[b]];
                  } else v.always(a[v.status]);
                  return this;
                },
                abort: function abort(a) {
                  var b = a || u;
                  return c && c.abort(b), x(0, b), this;
                }
              };
              if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || fc) + "").replace(gc, "").replace(lc, ec[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (h = mc.exec(k.url.toLowerCase()), k.crossDomain = !(!h || h[1] === ec[1] && h[2] === ec[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (ec[3] || ("http:" === ec[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), sc(nc, k, b, v), 2 === t) return v;
              i = k.global, i && 0 === n.active++ && n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !kc.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (dc.test(d) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = hc.test(d) ? d.replace(hc, "$1_=" + cc++) : d + (dc.test(d) ? "&" : "?") + "_=" + cc++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader("If-Modified-Since", n.lastModified[d]), n.etag[d] && v.setRequestHeader("If-None-Match", n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + pc + "; q=0.01" : "") : k.accepts["*"]);

              for (j in k.headers) {
                v.setRequestHeader(j, k.headers[j]);
              }

              if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
              u = "abort";

              for (j in {
                success: 1,
                error: 1,
                complete: 1
              }) {
                v[j](k[j]);
              }

              if (c = sc(oc, k, b, v)) {
                v.readyState = 1, i && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
                  v.abort("timeout");
                }, k.timeout));

                try {
                  t = 1, c.send(r, x);
                } catch (w) {
                  if (!(2 > t)) throw w;
                  x(-1, w);
                }
              } else x(-1, "No Transport");

              function x(a, b, f, h) {
                var j,
                    r,
                    s,
                    u,
                    w,
                    x = b;
                2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = uc(k, v, f)), u = vc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[d] = w), w = v.getResponseHeader("etag"), w && (n.etag[d] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), i && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop")));
              }

              return v;
            },
            getJSON: function getJSON(a, b, c) {
              return n.get(a, b, c, "json");
            },
            getScript: function getScript(a, b) {
              return n.get(a, void 0, b, "script");
            }
          }), n.each(["get", "post"], function (a, b) {
            n[b] = function (a, c, d, e) {
              return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
              });
            };
          }), n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
            n.fn[b] = function (a) {
              return this.on(b, a);
            };
          }), n._evalUrl = function (a) {
            return n.ajax({
              url: a,
              type: "GET",
              dataType: "script",
              async: !1,
              global: !1,
              "throws": !0
            });
          }, n.fn.extend({
            wrapAll: function wrapAll(a) {
              var b;
              return n.isFunction(a) ? this.each(function (b) {
                n(this).wrapAll(a.call(this, b));
              }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
                var a = this;

                while (a.firstElementChild) {
                  a = a.firstElementChild;
                }

                return a;
              }).append(this)), this);
            },
            wrapInner: function wrapInner(a) {
              return this.each(n.isFunction(a) ? function (b) {
                n(this).wrapInner(a.call(this, b));
              } : function () {
                var b = n(this),
                    c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
              });
            },
            wrap: function wrap(a) {
              var b = n.isFunction(a);
              return this.each(function (c) {
                n(this).wrapAll(b ? a.call(this, c) : a);
              });
            },
            unwrap: function unwrap() {
              return this.parent().each(function () {
                n.nodeName(this, "body") || n(this).replaceWith(this.childNodes);
              }).end();
            }
          }), n.expr.filters.hidden = function (a) {
            return a.offsetWidth <= 0 && a.offsetHeight <= 0;
          }, n.expr.filters.visible = function (a) {
            return !n.expr.filters.hidden(a);
          };
          var wc = /%20/g,
              xc = /\[\]$/,
              yc = /\r?\n/g,
              zc = /^(?:submit|button|image|reset|file)$/i,
              Ac = /^(?:input|select|textarea|keygen)/i;

          function Bc(a, b, c, d) {
            var e;
            if (n.isArray(b)) n.each(b, function (b, e) {
              c || xc.test(a) ? d(a, e) : Bc(a + "[" + ("object" == _typeof2(e) ? b : "") + "]", e, c, d);
            });else if (c || "object" !== n.type(b)) d(a, b);else for (e in b) {
              Bc(a + "[" + e + "]", b[e], c, d);
            }
          }

          n.param = function (a, b) {
            var c,
                d = [],
                e = function e(a, b) {
              b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
            };

            if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () {
              e(this.name, this.value);
            });else for (c in a) {
              Bc(c, a[c], b, e);
            }
            return d.join("&").replace(wc, "+");
          }, n.fn.extend({
            serialize: function serialize() {
              return n.param(this.serializeArray());
            },
            serializeArray: function serializeArray() {
              return this.map(function () {
                var a = n.prop(this, "elements");
                return a ? n.makeArray(a) : this;
              }).filter(function () {
                var a = this.type;
                return this.name && !n(this).is(":disabled") && Ac.test(this.nodeName) && !zc.test(a) && (this.checked || !T.test(a));
              }).map(function (a, b) {
                var c = n(this).val();
                return null == c ? null : n.isArray(c) ? n.map(c, function (a) {
                  return {
                    name: b.name,
                    value: a.replace(yc, "\r\n")
                  };
                }) : {
                  name: b.name,
                  value: c.replace(yc, "\r\n")
                };
              }).get();
            }
          }), n.ajaxSettings.xhr = function () {
            try {
              return new XMLHttpRequest();
            } catch (a) {}
          };
          var Cc = 0,
              Dc = {},
              Ec = {
            0: 200,
            1223: 204
          },
              Fc = n.ajaxSettings.xhr();
          a.ActiveXObject && n(a).on("unload", function () {
            for (var a in Dc) {
              Dc[a]();
            }
          }), k.cors = !!Fc && "withCredentials" in Fc, k.ajax = Fc = !!Fc, n.ajaxTransport(function (a) {
            var b;
            return k.cors || Fc && !a.crossDomain ? {
              send: function send(c, d) {
                var e,
                    f = a.xhr(),
                    g = ++Cc;
                if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
                  f[e] = a.xhrFields[e];
                }
                a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");

                for (e in c) {
                  f.setRequestHeader(e, c[e]);
                }

                b = function (_b3) {
                  function b(_x4) {
                    return _b3.apply(this, arguments);
                  }

                  b.toString = function () {
                    return _b3.toString();
                  };

                  return b;
                }(function (a) {
                  return function () {
                    b && (delete Dc[g], b = f.onload = f.onerror = null, "abort" === a ? f.abort() : "error" === a ? d(f.status, f.statusText) : d(Ec[f.status] || f.status, f.statusText, "string" == typeof f.responseText ? {
                      text: f.responseText
                    } : void 0, f.getAllResponseHeaders()));
                  };
                }), f.onload = b(), f.onerror = b("error"), b = Dc[g] = b("abort");

                try {
                  f.send(a.hasContent && a.data || null);
                } catch (h) {
                  if (b) throw h;
                }
              },
              abort: function abort() {
                b && b();
              }
            } : void 0;
          }), n.ajaxSetup({
            accepts: {
              script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            },
            contents: {
              script: /(?:java|ecma)script/
            },
            converters: {
              "text script": function textScript(a) {
                return n.globalEval(a), a;
              }
            }
          }), n.ajaxPrefilter("script", function (a) {
            void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
          }), n.ajaxTransport("script", function (a) {
            if (a.crossDomain) {
              var b, _c;

              return {
                send: function send(d, e) {
                  b = n("<script>").prop({
                    async: !0,
                    charset: a.scriptCharset,
                    src: a.url
                  }).on("load error", _c = function c(a) {
                    b.remove(), _c = null, a && e("error" === a.type ? 404 : 200, a.type);
                  }), l.head.appendChild(b[0]);
                },
                abort: function abort() {
                  _c && _c();
                }
              };
            }
          });
          var Gc = [],
              Hc = /(=)\?(?=&|$)|\?\?/;
          n.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function jsonpCallback() {
              var a = Gc.pop() || n.expando + "_" + cc++;
              return this[a] = !0, a;
            }
          }), n.ajaxPrefilter("json jsonp", function (b, c, d) {
            var e,
                f,
                g,
                h = b.jsonp !== !1 && (Hc.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && Hc.test(b.data) && "data");
            return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Hc, "$1" + e) : b.jsonp !== !1 && (b.url += (dc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
              return g || n.error(e + " was not called"), g[0];
            }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
              g = arguments;
            }, d.always(function () {
              a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Gc.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;
            }), "script") : void 0;
          }), n.parseHTML = function (a, b, c) {
            if (!a || "string" != typeof a) return null;
            "boolean" == typeof b && (c = b, b = !1), b = b || l;
            var d = v.exec(a),
                e = !c && [];
            return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));
          };
          var Ic = n.fn.load;
          n.fn.load = function (a, b, c) {
            if ("string" != typeof a && Ic) return Ic.apply(this, arguments);
            var d,
                e,
                f,
                g = this,
                h = a.indexOf(" ");
            return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == _typeof2(b) && (e = "POST"), g.length > 0 && n.ajax({
              url: a,
              type: e,
              dataType: "html",
              data: b
            }).done(function (a) {
              f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
            }).complete(c && function (a, b) {
              g.each(c, f || [a.responseText, b, a]);
            }), this;
          }, n.expr.filters.animated = function (a) {
            return n.grep(n.timers, function (b) {
              return a === b.elem;
            }).length;
          };
          var Jc = a.document.documentElement;

          function Kc(a) {
            return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
          }

          n.offset = {
            setOffset: function setOffset(a, b, c) {
              var d,
                  e,
                  f,
                  g,
                  h,
                  i,
                  j,
                  k = n.css(a, "position"),
                  l = n(a),
                  m = {};
              "static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
            }
          }, n.fn.extend({
            offset: function offset(a) {
              if (arguments.length) return void 0 === a ? this : this.each(function (b) {
                n.offset.setOffset(this, a, b);
              });
              var b,
                  c,
                  d = this[0],
                  e = {
                top: 0,
                left: 0
              },
                  f = d && d.ownerDocument;
              if (f) return b = f.documentElement, n.contains(b, d) ? (_typeof2(d.getBoundingClientRect) !== U && (e = d.getBoundingClientRect()), c = Kc(f), {
                top: e.top + c.pageYOffset - b.clientTop,
                left: e.left + c.pageXOffset - b.clientLeft
              }) : e;
            },
            position: function position() {
              if (this[0]) {
                var a,
                    b,
                    c = this[0],
                    d = {
                  top: 0,
                  left: 0
                };
                return "fixed" === n.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (d = a.offset()), d.top += n.css(a[0], "borderTopWidth", !0), d.left += n.css(a[0], "borderLeftWidth", !0)), {
                  top: b.top - d.top - n.css(c, "marginTop", !0),
                  left: b.left - d.left - n.css(c, "marginLeft", !0)
                };
              }
            },
            offsetParent: function offsetParent() {
              return this.map(function () {
                var a = this.offsetParent || Jc;

                while (a && !n.nodeName(a, "html") && "static" === n.css(a, "position")) {
                  a = a.offsetParent;
                }

                return a || Jc;
              });
            }
          }), n.each({
            scrollLeft: "pageXOffset",
            scrollTop: "pageYOffset"
          }, function (b, c) {
            var d = "pageYOffset" === c;

            n.fn[b] = function (e) {
              return J(this, function (b, e, f) {
                var g = Kc(b);
                return void 0 === f ? g ? g[c] : b[e] : void (g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f);
              }, b, e, arguments.length, null);
            };
          }), n.each(["top", "left"], function (a, b) {
            n.cssHooks[b] = yb(k.pixelPosition, function (a, c) {
              return c ? (c = xb(a, b), vb.test(c) ? n(a).position()[b] + "px" : c) : void 0;
            });
          }), n.each({
            Height: "height",
            Width: "width"
          }, function (a, b) {
            n.each({
              padding: "inner" + a,
              content: b,
              "": "outer" + a
            }, function (c, d) {
              n.fn[d] = function (d, e) {
                var f = arguments.length && (c || "boolean" != typeof d),
                    g = c || (d === !0 || e === !0 ? "margin" : "border");
                return J(this, function (b, c, d) {
                  var e;
                  return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g);
                }, b, f ? d : void 0, f, null);
              };
            });
          }), n.fn.size = function () {
            return this.length;
          }, n.fn.andSelf = n.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {
            return n;
          });
          var Lc = a.jQuery,
              Mc = a.$;
          return n.noConflict = function (b) {
            return a.$ === n && (a.$ = Mc), b && a.jQuery === n && (a.jQuery = Lc), n;
          }, _typeof2(b) === U && (a.jQuery = a.$ = n), n;
        });
        ;
        browserify_shim__define__module__export__(typeof jquery != "undefined" ? jquery : window.jquery);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "modernizr": [function (require, module, exports) {
    module.exports = require('9WpgYP');
  }, {}],
  "9WpgYP": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        /*!
         * Modernizr v2.8.3
         * www.modernizr.com
         *
         * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
         * Available under the BSD and MIT licenses: www.modernizr.com/license/
         */

        /*
         * Modernizr tests which native CSS3 and HTML5 features are available in
         * the current UA and makes the results available to you in two ways:
         * as properties on a global Modernizr object, and as classes on the
         * <html> element. This information allows you to progressively enhance
         * your pages with a granular level of control over the experience.
         *
         * Modernizr has an optional (not included) conditional resource loader
         * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).
         * To get a build that includes Modernizr.load(), as well as choosing
         * which tests to include, go to www.modernizr.com/download/
         *
         * Authors        Faruk Ates, Paul Irish, Alex Sexton
         * Contributors   Ryan Seddon, Ben Alman
         */
        window.Modernizr = function (window, document, undefined) {
          var version = '2.8.3',
              Modernizr = {},

          /*>>cssclasses*/
          // option for enabling the HTML classes to be added
          enableClasses = true,

          /*>>cssclasses*/
          docElement = document.documentElement,

          /**
           * Create our "modernizr" element that we do most feature tests on.
           */
          mod = 'modernizr',
              modElem = document.createElement(mod),
              mStyle = modElem.style,

          /**
           * Create the input element for various Web Forms feature tests.
           */
          inputElem
          /*>>inputelem*/
          = document.createElement('input')
          /*>>inputelem*/
          ,

          /*>>smile*/
          smile = ':)',

          /*>>smile*/
          toString = {}.toString,
              // TODO :: make the prefixes more granular

          /*>>prefixes*/
          // List of property values to set for css tests. See ticket #21
          prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),

          /*>>prefixes*/

          /*>>domprefixes*/
          // Following spec is to expose vendor-specific style properties as:
          //   elem.style.WebkitBorderRadius
          // and the following would be incorrect:
          //   elem.style.webkitBorderRadius
          // Webkit ghosts their properties in lowercase but Opera & Moz do not.
          // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
          //   erik.eae.net/archives/2008/03/10/21.48.10/
          // More here: github.com/Modernizr/Modernizr/issues/issue/21
          omPrefixes = 'Webkit Moz O ms',
              cssomPrefixes = omPrefixes.split(' '),
              domPrefixes = omPrefixes.toLowerCase().split(' '),

          /*>>domprefixes*/

          /*>>ns*/
          ns = {
            'svg': 'http://www.w3.org/2000/svg'
          },

          /*>>ns*/
          tests = {},
              inputs = {},
              attrs = {},
              classes = [],
              slice = classes.slice,
              featureName,
              // used in testing loop

          /*>>teststyles*/
          // Inject element with style element and some CSS rules
          injectElementWithStyles = function injectElementWithStyles(rule, callback, nodes, testnames) {
            var style,
                ret,
                node,
                docOverflow,
                div = document.createElement('div'),
                // After page load injecting a fake body doesn't work so check if body exists
            body = document.body,
                // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.
            fakeBody = body || document.createElement('body');

            if (parseInt(nodes, 10)) {
              // In order not to give false positives we create a node for each test
              // This also allows the method to scale for unspecified uses
              while (nodes--) {
                node = document.createElement('div');
                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                div.appendChild(node);
              }
            } // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
            // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
            // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
            // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
            // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277


            style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
            div.id = mod; // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
            // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270

            (body ? div : fakeBody).innerHTML += style;
            fakeBody.appendChild(div);

            if (!body) {
              //avoid crashing IE8, if background image is used
              fakeBody.style.background = ''; //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible

              fakeBody.style.overflow = 'hidden';
              docOverflow = docElement.style.overflow;
              docElement.style.overflow = 'hidden';
              docElement.appendChild(fakeBody);
            }

            ret = callback(div, rule); // If this is done after page load we don't want to remove the body so check if body exists

            if (!body) {
              fakeBody.parentNode.removeChild(fakeBody);
              docElement.style.overflow = docOverflow;
            } else {
              div.parentNode.removeChild(div);
            }

            return !!ret;
          },

          /*>>teststyles*/

          /*>>mq*/
          // adapted from matchMedia polyfill
          // by Scott Jehl and Paul Irish
          // gist.github.com/786768
          testMediaQuery = function testMediaQuery(mq) {
            var matchMedia = window.matchMedia || window.msMatchMedia;

            if (matchMedia) {
              return matchMedia(mq) && matchMedia(mq).matches || false;
            }

            var bool;
            injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function (node) {
              bool = (window.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle)['position'] == 'absolute';
            });
            return bool;
          },

          /*>>mq*/

          /*>>hasevent*/
          //
          // isEventSupported determines if a given element supports the given event
          // kangax.github.com/iseventsupported/
          //
          // The following results are known incorrects:
          //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
          //   Modernizr.hasEvent("textInput") // in Webkit. github.com/Modernizr/Modernizr/issues/333
          //   ...
          isEventSupported = function () {
            var TAGNAMES = {
              'select': 'input',
              'change': 'input',
              'submit': 'form',
              'reset': 'form',
              'error': 'img',
              'load': 'img',
              'abort': 'img'
            };

            function isEventSupported(eventName, element) {
              element = element || document.createElement(TAGNAMES[eventName] || 'div');
              eventName = 'on' + eventName; // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and "resize", whereas `in` "catches" those

              var isSupported = eventName in element;

              if (!isSupported) {
                // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element
                if (!element.setAttribute) {
                  element = document.createElement('div');
                }

                if (element.setAttribute && element.removeAttribute) {
                  element.setAttribute(eventName, '');
                  isSupported = is(element[eventName], 'function'); // If property was created, "remove it" (by setting value to `undefined`)

                  if (!is(element[eventName], 'undefined')) {
                    element[eventName] = undefined;
                  }

                  element.removeAttribute(eventName);
                }
              }

              element = null;
              return isSupported;
            }

            return isEventSupported;
          }(),

          /*>>hasevent*/
          // TODO :: Add flag for hasownprop ? didn't last time
          // hasOwnProperty shim by kangax needed for Safari 2.0 support
          _hasOwnProperty = {}.hasOwnProperty,
              hasOwnProp;

          if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
            hasOwnProp = function hasOwnProp(object, property) {
              return _hasOwnProperty.call(object, property);
            };
          } else {
            hasOwnProp = function hasOwnProp(object, property) {
              /* yes, this can give false positives/negatives, but most of the time we don't care about those */
              return property in object && is(object.constructor.prototype[property], 'undefined');
            };
          } // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
          // es5.github.com/#x15.3.4.5


          if (!Function.prototype.bind) {
            Function.prototype.bind = function bind(that) {
              var target = this;

              if (typeof target != "function") {
                throw new TypeError();
              }

              var args = slice.call(arguments, 1),
                  bound = function bound() {
                if (this instanceof bound) {
                  var F = function F() {};

                  F.prototype = target.prototype;
                  var self = new F();
                  var result = target.apply(self, args.concat(slice.call(arguments)));

                  if (Object(result) === result) {
                    return result;
                  }

                  return self;
                } else {
                  return target.apply(that, args.concat(slice.call(arguments)));
                }
              };

              return bound;
            };
          }
          /**
           * setCss applies given styles to the Modernizr DOM node.
           */


          function setCss(str) {
            mStyle.cssText = str;
          }
          /**
           * setCssAll extrapolates all vendor-specific css strings.
           */


          function setCssAll(str1, str2) {
            return setCss(prefixes.join(str1 + ';') + (str2 || ''));
          }
          /**
           * is returns a boolean for if typeof obj is exactly type.
           */


          function is(obj, type) {
            return _typeof2(obj) === type;
          }
          /**
           * contains returns a boolean for if substr is found within str.
           */


          function contains(str, substr) {
            return !!~('' + str).indexOf(substr);
          }
          /*>>testprop*/
          // testProps is a generic CSS / DOM property test.
          // In testing support for a given CSS property, it's legit to test:
          //    `elem.style[styleName] !== undefined`
          // If the property is supported it will return an empty string,
          // if unsupported it will return undefined.
          // We'll take advantage of this quick test and skip setting a style
          // on our modernizr element, but instead just testing undefined vs
          // empty string.
          // Because the testing of the CSS property names (with "-", as
          // opposed to the camelCase DOM properties) is non-portable and
          // non-standard but works in WebKit and IE (but not Gecko or Opera),
          // we explicitly reject properties with dashes so that authors
          // developing in WebKit or IE first don't end up with
          // browser-specific content by accident.


          function testProps(props, prefixed) {
            for (var i in props) {
              var prop = props[i];

              if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == 'pfx' ? prop : true;
              }
            }

            return false;
          }
          /*>>testprop*/
          // TODO :: add testDOMProps

          /**
           * testDOMProps is a generic DOM property test; if a browser supports
           *   a certain property, it won't return undefined for it.
           */


          function testDOMProps(props, obj, elem) {
            for (var i in props) {
              var item = obj[props[i]];

              if (item !== undefined) {
                // return the property name as a string
                if (elem === false) return props[i]; // let's bind a function

                if (is(item, 'function')) {
                  // default to autobind unless override
                  return item.bind(elem || obj);
                } // return the unbound function or obj or value


                return item;
              }
            }

            return false;
          }
          /*>>testallprops*/

          /**
           * testPropsAll tests a list of DOM properties we want to check against.
           *   We specify literally ALL possible (known and/or likely) properties on
           *   the element including the non-vendor prefixed one, for forward-
           *   compatibility.
           */


          function testPropsAll(prop, prefixed, elem) {
            var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
                props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' '); // did they call .prefixed('boxSizing') or are we just testing a prop?

            if (is(prefixed, "string") || is(prefixed, "undefined")) {
              return testProps(props, prefixed); // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
            } else {
              props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');
              return testDOMProps(props, prefixed, elem);
            }
          }
          /*>>testallprops*/

          /**
           * Tests
           * -----
           */
          // The *new* flexbox
          // dev.w3.org/csswg/css3-flexbox


          tests['flexbox'] = function () {
            return testPropsAll('flexWrap');
          }; // The *old* flexbox
          // www.w3.org/TR/2009/WD-css3-flexbox-20090723/


          tests['flexboxlegacy'] = function () {
            return testPropsAll('boxDirection');
          }; // On the S60 and BB Storm, getContext exists, but always returns undefined
          // so we actually have to call getContext() to verify
          // github.com/Modernizr/Modernizr/issues/issue/97/


          tests['canvas'] = function () {
            var elem = document.createElement('canvas');
            return !!(elem.getContext && elem.getContext('2d'));
          };

          tests['canvastext'] = function () {
            return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
          }; // webk.it/70117 is tracking a legit WebGL feature detect proposal
          // We do a soft detect which may false positive in order to avoid
          // an expensive context creation: bugzil.la/732441


          tests['webgl'] = function () {
            return !!window.WebGLRenderingContext;
          };
          /*
           * The Modernizr.touch test only indicates if the browser supports
           *    touch events, which does not necessarily reflect a touchscreen
           *    device, as evidenced by tablets running Windows 7 or, alas,
           *    the Palm Pre / WebOS (touch) phones.
           *
           * Additionally, Chrome (desktop) used to lie about its support on this,
           *    but that has since been rectified: crbug.com/36415
           *
           * We also test for Firefox 4 Multitouch Support.
           *
           * For more info, see: modernizr.github.com/Modernizr/touch.html
           */


          tests['touch'] = function () {
            var bool;

            if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {
              bool = true;
            } else {
              injectElementWithStyles(['@media (', prefixes.join('touch-enabled),('), mod, ')', '{#modernizr{top:9px;position:absolute}}'].join(''), function (node) {
                bool = node.offsetTop === 9;
              });
            }

            return bool;
          }; // geolocation is often considered a trivial feature detect...
          // Turns out, it's quite tricky to get right:
          //
          // Using !!navigator.geolocation does two things we don't want. It:
          //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513
          //   2. Disables page caching in WebKit: webk.it/43956
          //
          // Meanwhile, in Firefox < 8, an about:config setting could expose
          // a false positive that would throw an exception: bugzil.la/688158


          tests['geolocation'] = function () {
            return 'geolocation' in navigator;
          };

          tests['postmessage'] = function () {
            return !!window.postMessage;
          }; // Chrome incognito mode used to throw an exception when using openDatabase
          // It doesn't anymore.


          tests['websqldatabase'] = function () {
            return !!window.openDatabase;
          }; // Vendors had inconsistent prefixing with the experimental Indexed DB:
          // - Webkit's implementation is accessible through webkitIndexedDB
          // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB
          // For speed, we don't test the legacy (and beta-only) indexedDB


          tests['indexedDB'] = function () {
            return !!testPropsAll("indexedDB", window);
          }; // documentMode logic from YUI to filter out IE8 Compat Mode
          //   which false positives.


          tests['hashchange'] = function () {
            return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
          }; // Per 1.6:
          // This used to be Modernizr.historymanagement but the longer
          // name has been deprecated in favor of a shorter and property-matching one.
          // The old API is still available in 1.6, but as of 2.0 will throw a warning,
          // and in the first release thereafter disappear entirely.


          tests['history'] = function () {
            return !!(window.history && history.pushState);
          };

          tests['draganddrop'] = function () {
            var div = document.createElement('div');
            return 'draggable' in div || 'ondragstart' in div && 'ondrop' in div;
          }; // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10
          // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.
          // FF10 still uses prefixes, so check for it until then.
          // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/


          tests['websockets'] = function () {
            return 'WebSocket' in window || 'MozWebSocket' in window;
          }; // css-tricks.com/rgba-browser-support/


          tests['rgba'] = function () {
            // Set an rgba() color and check the returned value
            setCss('background-color:rgba(150,255,150,.5)');
            return contains(mStyle.backgroundColor, 'rgba');
          };

          tests['hsla'] = function () {
            // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,
            //   except IE9 who retains it as hsla
            setCss('background-color:hsla(120,40%,100%,.5)');
            return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
          };

          tests['multiplebgs'] = function () {
            // Setting multiple images AND a color on the background shorthand property
            //  and then querying the style.background property value for the number of
            //  occurrences of "url(" is a reliable method for detecting ACTUAL support for this!
            setCss('background:url(https://),url(https://),red url(https://)'); // If the UA supports multiple backgrounds, there should be three occurrences
            //   of the string "url(" in the return value for elemStyle.background

            return /(url\s*\(.*?){3}/.test(mStyle.background);
          }; // this will false positive in Opera Mini
          //   github.com/Modernizr/Modernizr/issues/396


          tests['backgroundsize'] = function () {
            return testPropsAll('backgroundSize');
          };

          tests['borderimage'] = function () {
            return testPropsAll('borderImage');
          }; // Super comprehensive table about all the unique implementations of
          // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance


          tests['borderradius'] = function () {
            return testPropsAll('borderRadius');
          }; // WebOS unfortunately false positives on this test.


          tests['boxshadow'] = function () {
            return testPropsAll('boxShadow');
          }; // FF3.0 will false positive on this test


          tests['textshadow'] = function () {
            return document.createElement('div').style.textShadow === '';
          };

          tests['opacity'] = function () {
            // Browsers that actually have CSS Opacity implemented have done so
            //  according to spec, which means their return values are within the
            //  range of [0.0,1.0] - including the leading zero.
            setCssAll('opacity:.55'); // The non-literal . in this regex is intentional:
            //   German Chrome returns this value as 0,55
            // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632

            return /^0.55$/.test(mStyle.opacity);
          }; // Note, Android < 4 will pass this test, but can only animate
          //   a single property at a time
          //   goo.gl/v3V4Gp


          tests['cssanimations'] = function () {
            return testPropsAll('animationName');
          };

          tests['csscolumns'] = function () {
            return testPropsAll('columnCount');
          };

          tests['cssgradients'] = function () {
            /**
             * For CSS Gradients syntax, please see:
             * webkit.org/blog/175/introducing-css-gradients/
             * developer.mozilla.org/en/CSS/-moz-linear-gradient
             * developer.mozilla.org/en/CSS/-moz-radial-gradient
             * dev.w3.org/csswg/css3-images/#gradients-
             */
            var str1 = 'background-image:',
                str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
                str3 = 'linear-gradient(left top,#9f9, white);';
            setCss( // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
            (str1 + '-webkit- '.split(' ').join(str2 + str1) + // standard syntax             // trailing 'background-image:'
            prefixes.join(str3 + str1)).slice(0, -str1.length));
            return contains(mStyle.backgroundImage, 'gradient');
          };

          tests['cssreflections'] = function () {
            return testPropsAll('boxReflect');
          };

          tests['csstransforms'] = function () {
            return !!testPropsAll('transform');
          };

          tests['csstransforms3d'] = function () {
            var ret = !!testPropsAll('perspective'); // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
            //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
            //   some conditions. As a result, Webkit typically recognizes the syntax but
            //   will sometimes throw a false positive, thus we must do a more thorough check:

            if (ret && 'webkitPerspective' in docElement.style) {
              // Webkit allows this media query to succeed only if the feature is enabled.
              // `@media (transform-3d),(-webkit-transform-3d){ ... }`
              injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node, rule) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
              });
            }

            return ret;
          };

          tests['csstransitions'] = function () {
            return testPropsAll('transition');
          };
          /*>>fontface*/
          // @font-face detection routine by Diego Perini
          // javascript.nwbox.com/CSSSupport/
          // false positives:
          //   WebOS github.com/Modernizr/Modernizr/issues/342
          //   WP7   github.com/Modernizr/Modernizr/issues/538


          tests['fontface'] = function () {
            var bool;
            injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function (node, rule) {
              var style = document.getElementById('smodernizr'),
                  sheet = style.sheet || style.styleSheet,
                  cssText = sheet ? sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '' : '';
              bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;
            });
            return bool;
          };
          /*>>fontface*/
          // CSS generated content detection


          tests['generatedcontent'] = function () {
            var bool;
            injectElementWithStyles(['#', mod, '{font:0/0 a}#', mod, ':after{content:"', smile, '";visibility:hidden;font:3px/1 a}'].join(''), function (node) {
              bool = node.offsetHeight >= 3;
            });
            return bool;
          }; // These tests evaluate support of the video/audio elements, as well as
          // testing what types of content they support.
          //
          // We're using the Boolean constructor here, so that we can extend the value
          // e.g.  Modernizr.video     // true
          //       Modernizr.video.ogg // 'probably'
          //
          // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845
          //                     thx to NielsLeenheer and zcorpan
          // Note: in some older browsers, "no" was a return value instead of empty string.
          //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2
          //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5


          tests['video'] = function () {
            var elem = document.createElement('video'),
                bool = false; // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224

            try {
              if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, ''); // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546

                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, '');
                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '');
              }
            } catch (e) {}

            return bool;
          };

          tests['audio'] = function () {
            var elem = document.createElement('audio'),
                bool = false;

            try {
              if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '');
                bool.mp3 = elem.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Mimetypes accepted:
                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
                //   bit.ly/iphoneoscodecs

                bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '');
                bool.m4a = (elem.canPlayType('audio/x-m4a;') || elem.canPlayType('audio/aac;')).replace(/^no$/, '');
              }
            } catch (e) {}

            return bool;
          }; // In FF4, if disabled, window.localStorage should === null.
          // Normally, we could not test that directly and need to do a
          //   `('localStorage' in window) && ` test first because otherwise Firefox will
          //   throw bugzil.la/365772 if cookies are disabled
          // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
          // will throw the exception:
          //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.
          // Peculiarly, getItem and removeItem calls do not throw.
          // Because we are forced to try/catch this, we'll go aggressive.
          // Just FWIW: IE8 Compat mode supports these features completely:
          //   www.quirksmode.org/dom/html5.html
          // But IE8 doesn't support either with local files


          tests['localstorage'] = function () {
            try {
              localStorage.setItem(mod, mod);
              localStorage.removeItem(mod);
              return true;
            } catch (e) {
              return false;
            }
          };

          tests['sessionstorage'] = function () {
            try {
              sessionStorage.setItem(mod, mod);
              sessionStorage.removeItem(mod);
              return true;
            } catch (e) {
              return false;
            }
          };

          tests['webworkers'] = function () {
            return !!window.Worker;
          };

          tests['applicationcache'] = function () {
            return !!window.applicationCache;
          }; // Thanks to Erik Dahlstrom


          tests['svg'] = function () {
            return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
          }; // specifically for SVG inline in HTML, not within XHTML
          // test page: paulirish.com/demo/inline-svg


          tests['inlinesvg'] = function () {
            var div = document.createElement('div');
            div.innerHTML = '<svg/>';
            return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
          }; // SVG SMIL animation


          tests['smil'] = function () {
            return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
          }; // This test is only for clip paths in SVG proper, not clip paths on HTML content
          // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg
          // However read the comments to dig into applying SVG clippaths to HTML content here:
          //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491


          tests['svgclippaths'] = function () {
            return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
          };
          /*>>webforms*/
          // input features and input types go directly onto the ret object, bypassing the tests loop.
          // Hold this guy to execute in a moment.


          function webforms() {
            /*>>input*/
            // Run through HTML5's new input attributes to see if the UA understands any.
            // We're using f which is the <input> element created early on
            // Mike Taylr has created a comprehensive resource for testing these attributes
            //   when applied to all input types:
            //   miketaylr.com/code/input-type-attr.html
            // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
            // Only input placeholder is tested while textarea's placeholder is not.
            // Currently Safari 4 and Opera 11 have support only for the input placeholder
            // Both tests are available in feature-detects/forms-placeholder.js
            Modernizr['input'] = function (props) {
              for (var i = 0, len = props.length; i < len; i++) {
                attrs[props[i]] = !!(props[i] in inputElem);
              }

              if (attrs.list) {
                // safari false positive's on datalist: webk.it/74252
                // see also github.com/Modernizr/Modernizr/issues/146
                attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);
              }

              return attrs;
            }('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
            /*>>input*/

            /*>>inputtypes*/
            // Run through HTML5's new input types to see if the UA understands any.
            //   This is put behind the tests runloop because it doesn't return a
            //   true/false like all the other tests; instead, it returns an object
            //   containing each input type with its corresponding true/false value
            // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/


            Modernizr['inputtypes'] = function (props) {
              for (var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++) {
                inputElem.setAttribute('type', inputElemType = props[i]);
                bool = inputElem.type !== 'text'; // We first check to see if the type we give it sticks..
                // If the type does, we feed it a textual value, which shouldn't be valid.
                // If the value doesn't stick, we know there's input sanitization which infers a custom UI

                if (bool) {
                  inputElem.value = smile;
                  inputElem.style.cssText = 'position:absolute;visibility:hidden;';

                  if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {
                    docElement.appendChild(inputElem);
                    defaultView = document.defaultView; // Safari 2-4 allows the smiley as a value, despite making a slider

                    bool = defaultView.getComputedStyle && defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' && // Mobile android web browser has false positive, so must
                    // check the height to see if the widget is actually there.
                    inputElem.offsetHeight !== 0;
                    docElement.removeChild(inputElem);
                  } else if (/^(search|tel)$/.test(inputElemType)) {// Spec doesn't define any special parsing or detectable UI
                    //   behaviors so we pass these through as true
                    // Interestingly, opera fails the earlier test, so it doesn't
                    //  even make it here.
                  } else if (/^(url|email)$/.test(inputElemType)) {
                    // Real url and email support comes with prebaked validation.
                    bool = inputElem.checkValidity && inputElem.checkValidity() === false;
                  } else {
                    // If the upgraded input compontent rejects the :) text, we got a winner
                    bool = inputElem.value != smile;
                  }
                }

                inputs[props[i]] = !!bool;
              }

              return inputs;
            }('search tel url email datetime date month week time datetime-local number range color'.split(' '));
            /*>>inputtypes*/

          }
          /*>>webforms*/
          // End of test definitions
          // -----------------------
          // Run through all tests and detect their support in the current UA.
          // todo: hypothetically we could be doing an array of tests and use a basic loop here.


          for (var feature in tests) {
            if (hasOwnProp(tests, feature)) {
              // run the test, throw the return value into the Modernizr,
              //   then based on that boolean, define an appropriate className
              //   and push it into an array of classes we'll join later.
              featureName = feature.toLowerCase();
              Modernizr[featureName] = tests[feature]();
              classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
            }
          }
          /*>>webforms*/
          // input tests need to run.


          Modernizr.input || webforms();
          /*>>webforms*/

          /**
           * addTest allows the user to define their own feature tests
           * the result will be added onto the Modernizr object,
           * as well as an appropriate className set on the html element
           *
           * @param feature - String naming the feature
           * @param test - Function returning true if feature is supported, false if not
           */

          Modernizr.addTest = function (feature, test) {
            if (_typeof2(feature) == 'object') {
              for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                  Modernizr.addTest(key, feature[key]);
                }
              }
            } else {
              feature = feature.toLowerCase();

              if (Modernizr[feature] !== undefined) {
                // we're going to quit if you're trying to overwrite an existing test
                // if we were to allow it, we'd do this:
                //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
                //   docElement.className = docElement.className.replace( re, '' );
                // but, no rly, stuff 'em.
                return Modernizr;
              }

              test = typeof test == 'function' ? test() : test;

              if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += ' ' + (test ? '' : 'no-') + feature;
              }

              Modernizr[feature] = test;
            }

            return Modernizr; // allow chaining.
          }; // Reset modElem.cssText to nothing to reduce memory footprint.


          setCss('');
          modElem = inputElem = null;
          /*>>shiv*/

          /**
           * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
           */

          ;

          (function (window, document) {
            /*jshint evil:true */

            /** version */
            var version = '3.7.0';
            /** Preset options */

            var options = window.html5 || {};
            /** Used to skip problem elements */

            var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
            /** Not all elements can be cloned in IE **/

            var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
            /** Detect whether the browser supports default html5 styles */

            var supportsHtml5Styles;
            /** Name of the expando, to work with multiple documents or to re-shiv one document */

            var expando = '_html5shiv';
            /** The id for the the documents expando */

            var expanID = 0;
            /** Cached data for each document */

            var expandoData = {};
            /** Detect whether the browser supports unknown elements */

            var supportsUnknownElements;

            (function () {
              try {
                var a = document.createElement('a');
                a.innerHTML = '<xyz></xyz>'; //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles

                supportsHtml5Styles = 'hidden' in a;

                supportsUnknownElements = a.childNodes.length == 1 || function () {
                  // assign a false positive if unable to shiv
                  document.createElement('a');
                  var frag = document.createDocumentFragment();
                  return typeof frag.cloneNode == 'undefined' || typeof frag.createDocumentFragment == 'undefined' || typeof frag.createElement == 'undefined';
                }();
              } catch (e) {
                // assign a false positive if detection fails => unable to shiv
                supportsHtml5Styles = true;
                supportsUnknownElements = true;
              }
            })();
            /*--------------------------------------------------------------------------*/

            /**
             * Creates a style sheet with the given CSS text and adds it to the document.
             * @private
             * @param {Document} ownerDocument The document.
             * @param {String} cssText The CSS text.
             * @returns {StyleSheet} The style element.
             */


            function addStyleSheet(ownerDocument, cssText) {
              var p = ownerDocument.createElement('p'),
                  parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;
              p.innerHTML = 'x<style>' + cssText + '</style>';
              return parent.insertBefore(p.lastChild, parent.firstChild);
            }
            /**
             * Returns the value of `html5.elements` as an array.
             * @private
             * @returns {Array} An array of shived element node names.
             */


            function getElements() {
              var elements = html5.elements;
              return typeof elements == 'string' ? elements.split(' ') : elements;
            }
            /**
             * Returns the data associated to the given document
             * @private
             * @param {Document} ownerDocument The document.
             * @returns {Object} An object of data.
             */


            function getExpandoData(ownerDocument) {
              var data = expandoData[ownerDocument[expando]];

              if (!data) {
                data = {};
                expanID++;
                ownerDocument[expando] = expanID;
                expandoData[expanID] = data;
              }

              return data;
            }
            /**
             * returns a shived element for the given nodeName and document
             * @memberOf html5
             * @param {String} nodeName name of the element
             * @param {Document} ownerDocument The context document.
             * @returns {Object} The shived element.
             */


            function createElement(nodeName, ownerDocument, data) {
              if (!ownerDocument) {
                ownerDocument = document;
              }

              if (supportsUnknownElements) {
                return ownerDocument.createElement(nodeName);
              }

              if (!data) {
                data = getExpandoData(ownerDocument);
              }

              var node;

              if (data.cache[nodeName]) {
                node = data.cache[nodeName].cloneNode();
              } else if (saveClones.test(nodeName)) {
                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
              } else {
                node = data.createElem(nodeName);
              } // Avoid adding some elements to fragments in IE < 9 because
              // * Attributes like `name` or `type` cannot be set/changed once an element
              //   is inserted into a document/fragment
              // * Link elements with `src` attributes that are inaccessible, as with
              //   a 403 response, will cause the tab/window to crash
              // * Script elements appended to fragments will execute when their `src`
              //   or `text` property is set


              return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
            }
            /**
             * returns a shived DocumentFragment for the given document
             * @memberOf html5
             * @param {Document} ownerDocument The context document.
             * @returns {Object} The shived DocumentFragment.
             */


            function createDocumentFragment(ownerDocument, data) {
              if (!ownerDocument) {
                ownerDocument = document;
              }

              if (supportsUnknownElements) {
                return ownerDocument.createDocumentFragment();
              }

              data = data || getExpandoData(ownerDocument);
              var clone = data.frag.cloneNode(),
                  i = 0,
                  elems = getElements(),
                  l = elems.length;

              for (; i < l; i++) {
                clone.createElement(elems[i]);
              }

              return clone;
            }
            /**
             * Shivs the `createElement` and `createDocumentFragment` methods of the document.
             * @private
             * @param {Document|DocumentFragment} ownerDocument The document.
             * @param {Object} data of the document.
             */


            function shivMethods(ownerDocument, data) {
              if (!data.cache) {
                data.cache = {};
                data.createElem = ownerDocument.createElement;
                data.createFrag = ownerDocument.createDocumentFragment;
                data.frag = data.createFrag();
              }

              ownerDocument.createElement = function (nodeName) {
                //abort shiv
                if (!html5.shivMethods) {
                  return data.createElem(nodeName);
                }

                return createElement(nodeName, ownerDocument, data);
              };

              ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' + 'var n=f.cloneNode(),c=n.createElement;' + 'h.shivMethods&&(' + // unroll the `createElement` calls
              getElements().join().replace(/[\w\-]+/g, function (nodeName) {
                data.createElem(nodeName);
                data.frag.createElement(nodeName);
                return 'c("' + nodeName + '")';
              }) + ');return n}')(html5, data.frag);
            }
            /*--------------------------------------------------------------------------*/

            /**
             * Shivs the given document.
             * @memberOf html5
             * @param {Document} ownerDocument The document to shiv.
             * @returns {Document} The shived document.
             */


            function shivDocument(ownerDocument) {
              if (!ownerDocument) {
                ownerDocument = document;
              }

              var data = getExpandoData(ownerDocument);

              if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
                data.hasCSS = !!addStyleSheet(ownerDocument, // corrects block display not defined in IE6/7/8/9
                'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' + // adds styling not present in IE6/7/8/9
                'mark{background:#FF0;color:#000}' + // hides non-rendered elements
                'template{display:none}');
              }

              if (!supportsUnknownElements) {
                shivMethods(ownerDocument, data);
              }

              return ownerDocument;
            }
            /*--------------------------------------------------------------------------*/

            /**
             * The `html5` object is exposed so that more elements can be shived and
             * existing shiving can be detected on iframes.
             * @type Object
             * @example
             *
             * // options can be changed before the script is included
             * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
             */


            var html5 = {
              /**
               * An array or space separated string of node names of the elements to shiv.
               * @memberOf html5
               * @type Array|String
               */
              'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',

              /**
               * current version of html5shiv
               */
              'version': version,

              /**
               * A flag to indicate that the HTML5 style sheet should be inserted.
               * @memberOf html5
               * @type Boolean
               */
              'shivCSS': options.shivCSS !== false,

              /**
               * Is equal to true if a browser supports creating unknown/HTML5 elements
               * @memberOf html5
               * @type boolean
               */
              'supportsUnknownElements': supportsUnknownElements,

              /**
               * A flag to indicate that the document's `createElement` and `createDocumentFragment`
               * methods should be overwritten.
               * @memberOf html5
               * @type Boolean
               */
              'shivMethods': options.shivMethods !== false,

              /**
               * A string to describe the type of `html5` object ("default" or "default print").
               * @memberOf html5
               * @type String
               */
              'type': 'default',
              // shivs the document according to the specified `html5` object options
              'shivDocument': shivDocument,
              //creates a shived element
              createElement: createElement,
              //creates a shived documentFragment
              createDocumentFragment: createDocumentFragment
            };
            /*--------------------------------------------------------------------------*/
            // expose html5

            window.html5 = html5; // shiv the document

            shivDocument(document);
          })(this, document);
          /*>>shiv*/
          // Assign private properties to the return object with prefix


          Modernizr._version = version; // expose these for the plugin API. Look in the source for how to join() them against your input

          /*>>prefixes*/

          Modernizr._prefixes = prefixes;
          /*>>prefixes*/

          /*>>domprefixes*/

          Modernizr._domPrefixes = domPrefixes;
          Modernizr._cssomPrefixes = cssomPrefixes;
          /*>>domprefixes*/

          /*>>mq*/
          // Modernizr.mq tests a given media query, live against the current state of the window
          // A few important notes:
          //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false
          //   * A max-width or orientation query will be evaluated against the current state, which may change later.
          //   * You must specify values. Eg. If you are testing support for the min-width media query use:
          //       Modernizr.mq('(min-width:0)')
          // usage:
          // Modernizr.mq('only screen and (max-width:768)')

          Modernizr.mq = testMediaQuery;
          /*>>mq*/

          /*>>hasevent*/
          // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
          // Modernizr.hasEvent('gesturestart', elem)

          Modernizr.hasEvent = isEventSupported;
          /*>>hasevent*/

          /*>>testprop*/
          // Modernizr.testProp() investigates whether a given style property is recognized
          // Note that the property names must be provided in the camelCase variant.
          // Modernizr.testProp('pointerEvents')

          Modernizr.testProp = function (prop) {
            return testProps([prop]);
          };
          /*>>testprop*/

          /*>>testallprops*/
          // Modernizr.testAllProps() investigates whether a given style property,
          //   or any of its vendor-prefixed variants, is recognized
          // Note that the property names must be provided in the camelCase variant.
          // Modernizr.testAllProps('boxSizing')


          Modernizr.testAllProps = testPropsAll;
          /*>>testallprops*/

          /*>>teststyles*/
          // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards
          // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })

          Modernizr.testStyles = injectElementWithStyles;
          /*>>teststyles*/

          /*>>prefixed*/
          // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input
          // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'
          // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.
          // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:
          //
          //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');
          // If you're trying to ascertain which transition end event to bind to, you might do something like...
          //
          //     var transEndEventNames = {
          //       'WebkitTransition' : 'webkitTransitionEnd',
          //       'MozTransition'    : 'transitionend',
          //       'OTransition'      : 'oTransitionEnd',
          //       'msTransition'     : 'MSTransitionEnd',
          //       'transition'       : 'transitionend'
          //     },
          //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];

          Modernizr.prefixed = function (prop, obj, elem) {
            if (!obj) {
              return testPropsAll(prop, 'pfx');
            } else {
              // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
              return testPropsAll(prop, obj, elem);
            }
          };
          /*>>prefixed*/

          /*>>cssclasses*/
          // Remove "no-js" class from <html> element, if it exists:


          docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') + ( // Add the new classes to the <html> element.
          enableClasses ? ' js ' + classes.join(' ') : '');
          /*>>cssclasses*/

          return Modernizr;
        }(this, this.document);

        ;
        browserify_shim__define__module__export__(typeof modernizr != "undefined" ? modernizr : window.modernizr);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "bootstrapSlider": [function (require, module, exports) {
    module.exports = require('LeygW/');
  }, {}],
  "LeygW/": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        ;
        global.jquery = require("jquery");
        global.modernizr = require("modernizr");
        global.highlight = require("highlight");
        /*! =======================================================
                              VERSION  10.6.1              
        ========================================================= */

        "use strict";

        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
          return _typeof2(obj);
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
        /*! =========================================================
         * bootstrap-slider.js
         *
         * Maintainers:
         *		Kyle Kemp
         *			- Twitter: @seiyria
         *			- Github:  seiyria
         *		Rohit Kalkur
         *			- Twitter: @Rovolutionary
         *			- Github:  rovolution
         *
         * =========================================================
         *
         * bootstrap-slider is released under the MIT License
         * Copyright (c) 2019 Kyle Kemp, Rohit Kalkur, and contributors
         *
         * Permission is hereby granted, free of charge, to any person
         * obtaining a copy of this software and associated documentation
         * files (the "Software"), to deal in the Software without
         * restriction, including without limitation the rights to use,
         * copy, modify, merge, publish, distribute, sublicense, and/or sell
         * copies of the Software, and to permit persons to whom the
         * Software is furnished to do so, subject to the following
         * conditions:
         *
         * The above copyright notice and this permission notice shall be
         * included in all copies or substantial portions of the Software.
         *
         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
         * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
         * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
         * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
         * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
         * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
         * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
         * OTHER DEALINGS IN THE SOFTWARE.
         *
         * ========================================================= */

        /**
         * Bridget makes jQuery widgets
         * v1.0.1
         * MIT license
         */


        var windowIsDefined = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object";

        (function (factory) {
          if (typeof define === "function" && define.amd) {
            define(["jquery"], factory);
          } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
            var jQuery;

            try {
              jQuery = require("jquery");
            } catch (err) {
              jQuery = null;
            }

            module.exports = factory(jQuery);
          } else if (window) {
            window.Slider = factory(window.jQuery);
          }
        })(function ($) {
          // Constants
          var NAMESPACE_MAIN = 'slider';
          var NAMESPACE_ALTERNATE = 'bootstrapSlider'; // Polyfill console methods

          if (windowIsDefined && !window.console) {
            window.console = {};
          }

          if (windowIsDefined && !window.console.log) {
            window.console.log = function () {};
          }

          if (windowIsDefined && !window.console.warn) {
            window.console.warn = function () {};
          } // Reference to Slider constructor


          var Slider;

          (function ($) {
            'use strict'; // -------------------------- utils -------------------------- //

            var slice = Array.prototype.slice;

            function noop() {} // -------------------------- definition -------------------------- //


            function defineBridget($) {
              // bail if no jQuery
              if (!$) {
                return;
              } // -------------------------- addOptionMethod -------------------------- //

              /**
               * adds option method -> $().plugin('option', {...})
               * @param {Function} PluginClass - constructor class
               */


              function addOptionMethod(PluginClass) {
                // don't overwrite original option method
                if (PluginClass.prototype.option) {
                  return;
                } // option setter


                PluginClass.prototype.option = function (opts) {
                  // bail out if not an object
                  if (!$.isPlainObject(opts)) {
                    return;
                  }

                  this.options = $.extend(true, this.options, opts);
                };
              } // -------------------------- plugin bridge -------------------------- //
              // helper function for logging errors
              // $.error breaks jQuery chaining


              var logError = typeof console === 'undefined' ? noop : function (message) {
                console.error(message);
              };
              /**
               * jQuery plugin bridge, access methods like $elem.plugin('method')
               * @param {String} namespace - plugin name
               * @param {Function} PluginClass - constructor class
               */

              function bridge(namespace, PluginClass) {
                // add to jQuery fn namespace
                $.fn[namespace] = function (options) {
                  if (typeof options === 'string') {
                    // call plugin method when first argument is a string
                    // get arguments for method
                    var args = slice.call(arguments, 1);

                    for (var i = 0, len = this.length; i < len; i++) {
                      var elem = this[i];
                      var instance = $.data(elem, namespace);

                      if (!instance) {
                        logError("cannot call methods on " + namespace + " prior to initialization; " + "attempted to call '" + options + "'");
                        continue;
                      }

                      if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {
                        logError("no such method '" + options + "' for " + namespace + " instance");
                        continue;
                      } // trigger method with arguments


                      var returnValue = instance[options].apply(instance, args); // break look and return first value if provided

                      if (returnValue !== undefined && returnValue !== instance) {
                        return returnValue;
                      }
                    } // return this if no return value


                    return this;
                  } else {
                    var objects = this.map(function () {
                      var instance = $.data(this, namespace);

                      if (instance) {
                        // apply options & init
                        instance.option(options);

                        instance._init();
                      } else {
                        // initialize new instance
                        instance = new PluginClass(this, options);
                        $.data(this, namespace, instance);
                      }

                      return $(this);
                    });

                    if (!objects || objects.length > 1) {
                      return objects;
                    } else {
                      return objects[0];
                    }
                  }
                };
              } // -------------------------- bridget -------------------------- //

              /**
               * converts a Prototypical class into a proper jQuery plugin
               *   the class must have a ._init method
               * @param {String} namespace - plugin name, used in $().pluginName
               * @param {Function} PluginClass - constructor class
               */


              $.bridget = function (namespace, PluginClass) {
                addOptionMethod(PluginClass);
                bridge(namespace, PluginClass);
              };

              return $.bridget;
            } // get jquery from browser global


            defineBridget($);
          })($);
          /*************************************************
          			BOOTSTRAP-SLIDER SOURCE CODE
          	**************************************************/


          (function ($) {
            var autoRegisterNamespace = void 0;
            var ErrorMsgs = {
              formatInvalidInputErrorMsg: function formatInvalidInputErrorMsg(input) {
                return "Invalid input value '" + input + "' passed in";
              },
              callingContextNotSliderInstance: "Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method"
            };
            var SliderScale = {
              linear: {
                getValue: function getValue(value, options) {
                  if (value < options.min) {
                    return options.min;
                  } else if (value > options.max) {
                    return options.max;
                  } else {
                    return value;
                  }
                },
                toValue: function toValue(percentage) {
                  var rawValue = percentage / 100 * (this.options.max - this.options.min);
                  var shouldAdjustWithBase = true;

                  if (this.options.ticks_positions.length > 0) {
                    var minv,
                        maxv,
                        minp,
                        maxp = 0;

                    for (var i = 1; i < this.options.ticks_positions.length; i++) {
                      if (percentage <= this.options.ticks_positions[i]) {
                        minv = this.options.ticks[i - 1];
                        minp = this.options.ticks_positions[i - 1];
                        maxv = this.options.ticks[i];
                        maxp = this.options.ticks_positions[i];
                        break;
                      }
                    }

                    var partialPercentage = (percentage - minp) / (maxp - minp);
                    rawValue = minv + partialPercentage * (maxv - minv);
                    shouldAdjustWithBase = false;
                  }

                  var adjustment = shouldAdjustWithBase ? this.options.min : 0;
                  var value = adjustment + Math.round(rawValue / this.options.step) * this.options.step;
                  return SliderScale.linear.getValue(value, this.options);
                },
                toPercentage: function toPercentage(value) {
                  if (this.options.max === this.options.min) {
                    return 0;
                  }

                  if (this.options.ticks_positions.length > 0) {
                    var minv,
                        maxv,
                        minp,
                        maxp = 0;

                    for (var i = 0; i < this.options.ticks.length; i++) {
                      if (value <= this.options.ticks[i]) {
                        minv = i > 0 ? this.options.ticks[i - 1] : 0;
                        minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;
                        maxv = this.options.ticks[i];
                        maxp = this.options.ticks_positions[i];
                        break;
                      }
                    }

                    if (i > 0) {
                      var partialPercentage = (value - minv) / (maxv - minv);
                      return minp + partialPercentage * (maxp - minp);
                    }
                  }

                  return 100 * (value - this.options.min) / (this.options.max - this.options.min);
                }
              },
              logarithmic: {
                /* Based on http://stackoverflow.com/questions/846221/logarithmic-slider */
                toValue: function toValue(percentage) {
                  var offset = 1 - this.options.min;
                  var min = Math.log(this.options.min + offset);
                  var max = Math.log(this.options.max + offset);
                  var value = Math.exp(min + (max - min) * percentage / 100) - offset;

                  if (Math.round(value) === max) {
                    return max;
                  }

                  value = this.options.min + Math.round((value - this.options.min) / this.options.step) * this.options.step;
                  /* Rounding to the nearest step could exceed the min or
                   * max, so clip to those values. */

                  return SliderScale.linear.getValue(value, this.options);
                },
                toPercentage: function toPercentage(value) {
                  if (this.options.max === this.options.min) {
                    return 0;
                  } else {
                    var offset = 1 - this.options.min;
                    var max = Math.log(this.options.max + offset);
                    var min = Math.log(this.options.min + offset);
                    var v = Math.log(value + offset);
                    return 100 * (v - min) / (max - min);
                  }
                }
              }
            };
            /*************************************************
            						CONSTRUCTOR
            	**************************************************/

            Slider = function Slider(element, options) {
              createNewSlider.call(this, element, options);
              return this;
            };

            function createNewSlider(element, options) {
              /*
              	The internal state object is used to store data about the current 'state' of slider.
              	This includes values such as the `value`, `enabled`, etc...
              */
              this._state = {
                value: null,
                enabled: null,
                offset: null,
                size: null,
                percentage: null,
                inDrag: false,
                over: false,
                tickIndex: null
              }; // The objects used to store the reference to the tick methods if ticks_tooltip is on

              this.ticksCallbackMap = {};
              this.handleCallbackMap = {};

              if (typeof element === "string") {
                this.element = document.querySelector(element);
              } else if (element instanceof HTMLElement) {
                this.element = element;
              }
              /*************************************************
              					Process Options
              	**************************************************/


              options = options ? options : {};
              var optionTypes = Object.keys(this.defaultOptions);
              var isMinSet = options.hasOwnProperty('min');
              var isMaxSet = options.hasOwnProperty('max');

              for (var i = 0; i < optionTypes.length; i++) {
                var optName = optionTypes[i]; // First check if an option was passed in via the constructor

                var val = options[optName]; // If no data attrib, then check data atrributes

                val = typeof val !== 'undefined' ? val : getDataAttrib(this.element, optName); // Finally, if nothing was specified, use the defaults

                val = val !== null ? val : this.defaultOptions[optName]; // Set all options on the instance of the Slider

                if (!this.options) {
                  this.options = {};
                }

                this.options[optName] = val;
              }

              this.ticksAreValid = Array.isArray(this.options.ticks) && this.options.ticks.length > 0; // Lock to ticks only when ticks[] is defined and set

              if (!this.ticksAreValid) {
                this.options.lock_to_ticks = false;
              } // Check options.rtl


              if (this.options.rtl === 'auto') {
                var computedStyle = window.getComputedStyle(this.element);

                if (computedStyle != null) {
                  this.options.rtl = computedStyle.direction === 'rtl';
                } else {
                  // Fix for Firefox bug in versions less than 62:
                  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397
                  // https://bugzilla.mozilla.org/show_bug.cgi?id=1467722
                  this.options.rtl = this.element.style.direction === 'rtl';
                }
              }
              /*
              	Validate `tooltip_position` against 'orientation`
              	- if `tooltip_position` is incompatible with orientation, swith it to a default compatible with specified `orientation`
              		-- default for "vertical" -> "right", "left" if rtl
              		-- default for "horizontal" -> "top"
              */


              if (this.options.orientation === "vertical" && (this.options.tooltip_position === "top" || this.options.tooltip_position === "bottom")) {
                if (this.options.rtl) {
                  this.options.tooltip_position = "left";
                } else {
                  this.options.tooltip_position = "right";
                }
              } else if (this.options.orientation === "horizontal" && (this.options.tooltip_position === "left" || this.options.tooltip_position === "right")) {
                this.options.tooltip_position = "top";
              }

              function getDataAttrib(element, optName) {
                var dataName = "data-slider-" + optName.replace(/_/g, '-');
                var dataValString = element.getAttribute(dataName);

                try {
                  return JSON.parse(dataValString);
                } catch (err) {
                  return dataValString;
                }
              }
              /*************************************************
              					Create Markup
              	**************************************************/


              var origWidth = this.element.style.width;
              var updateSlider = false;
              var parent = this.element.parentNode;
              var sliderTrackSelection;
              var sliderTrackLow, sliderTrackHigh;
              var sliderMinHandle;
              var sliderMaxHandle;

              if (this.sliderElem) {
                updateSlider = true;
              } else {
                /* Create elements needed for slider */
                this.sliderElem = document.createElement("div");
                this.sliderElem.className = "slider";
                /* Create slider track elements */

                var sliderTrack = document.createElement("div");
                sliderTrack.className = "slider-track";
                sliderTrackLow = document.createElement("div");
                sliderTrackLow.className = "slider-track-low";
                sliderTrackSelection = document.createElement("div");
                sliderTrackSelection.className = "slider-selection";
                sliderTrackHigh = document.createElement("div");
                sliderTrackHigh.className = "slider-track-high";
                sliderMinHandle = document.createElement("div");
                sliderMinHandle.className = "slider-handle min-slider-handle";
                sliderMinHandle.setAttribute('role', 'slider');
                sliderMinHandle.setAttribute('aria-valuemin', this.options.min);
                sliderMinHandle.setAttribute('aria-valuemax', this.options.max);
                sliderMaxHandle = document.createElement("div");
                sliderMaxHandle.className = "slider-handle max-slider-handle";
                sliderMaxHandle.setAttribute('role', 'slider');
                sliderMaxHandle.setAttribute('aria-valuemin', this.options.min);
                sliderMaxHandle.setAttribute('aria-valuemax', this.options.max);
                sliderTrack.appendChild(sliderTrackLow);
                sliderTrack.appendChild(sliderTrackSelection);
                sliderTrack.appendChild(sliderTrackHigh);
                /* Create highlight range elements */

                this.rangeHighlightElements = [];
                var rangeHighlightsOpts = this.options.rangeHighlights;

                if (Array.isArray(rangeHighlightsOpts) && rangeHighlightsOpts.length > 0) {
                  for (var j = 0; j < rangeHighlightsOpts.length; j++) {
                    var rangeHighlightElement = document.createElement("div");
                    var customClassString = rangeHighlightsOpts[j]["class"] || "";
                    rangeHighlightElement.className = "slider-rangeHighlight slider-selection " + customClassString;
                    this.rangeHighlightElements.push(rangeHighlightElement);
                    sliderTrack.appendChild(rangeHighlightElement);
                  }
                }
                /* Add aria-labelledby to handle's */


                var isLabelledbyArray = Array.isArray(this.options.labelledby);

                if (isLabelledbyArray && this.options.labelledby[0]) {
                  sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby[0]);
                }

                if (isLabelledbyArray && this.options.labelledby[1]) {
                  sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby[1]);
                }

                if (!isLabelledbyArray && this.options.labelledby) {
                  sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby);
                  sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby);
                }
                /* Create ticks */


                this.ticks = [];

                if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
                  this.ticksContainer = document.createElement('div');
                  this.ticksContainer.className = 'slider-tick-container';

                  for (i = 0; i < this.options.ticks.length; i++) {
                    var tick = document.createElement('div');
                    tick.className = 'slider-tick';

                    if (this.options.ticks_tooltip) {
                      var tickListenerReference = this._addTickListener();

                      var enterCallback = tickListenerReference.addMouseEnter(this, tick, i);
                      var leaveCallback = tickListenerReference.addMouseLeave(this, tick);
                      this.ticksCallbackMap[i] = {
                        mouseEnter: enterCallback,
                        mouseLeave: leaveCallback
                      };
                    }

                    this.ticks.push(tick);
                    this.ticksContainer.appendChild(tick);
                  }

                  sliderTrackSelection.className += " tick-slider-selection";
                }

                this.tickLabels = [];

                if (Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) {
                  this.tickLabelContainer = document.createElement('div');
                  this.tickLabelContainer.className = 'slider-tick-label-container';

                  for (i = 0; i < this.options.ticks_labels.length; i++) {
                    var label = document.createElement('div');
                    var noTickPositionsSpecified = this.options.ticks_positions.length === 0;
                    var tickLabelsIndex = this.options.reversed && noTickPositionsSpecified ? this.options.ticks_labels.length - (i + 1) : i;
                    label.className = 'slider-tick-label';
                    label.innerHTML = this.options.ticks_labels[tickLabelsIndex];
                    this.tickLabels.push(label);
                    this.tickLabelContainer.appendChild(label);
                  }
                }

                var createAndAppendTooltipSubElements = function createAndAppendTooltipSubElements(tooltipElem) {
                  var arrow = document.createElement("div");
                  arrow.className = "tooltip-arrow";
                  var inner = document.createElement("div");
                  inner.className = "tooltip-inner";
                  tooltipElem.appendChild(arrow);
                  tooltipElem.appendChild(inner);
                };
                /* Create tooltip elements */


                var sliderTooltip = document.createElement("div");
                sliderTooltip.className = "tooltip tooltip-main";
                sliderTooltip.setAttribute('role', 'presentation');
                createAndAppendTooltipSubElements(sliderTooltip);
                var sliderTooltipMin = document.createElement("div");
                sliderTooltipMin.className = "tooltip tooltip-min";
                sliderTooltipMin.setAttribute('role', 'presentation');
                createAndAppendTooltipSubElements(sliderTooltipMin);
                var sliderTooltipMax = document.createElement("div");
                sliderTooltipMax.className = "tooltip tooltip-max";
                sliderTooltipMax.setAttribute('role', 'presentation');
                createAndAppendTooltipSubElements(sliderTooltipMax);
                /* Append components to sliderElem */

                this.sliderElem.appendChild(sliderTrack);
                this.sliderElem.appendChild(sliderTooltip);
                this.sliderElem.appendChild(sliderTooltipMin);
                this.sliderElem.appendChild(sliderTooltipMax);

                if (this.tickLabelContainer) {
                  this.sliderElem.appendChild(this.tickLabelContainer);
                }

                if (this.ticksContainer) {
                  this.sliderElem.appendChild(this.ticksContainer);
                }

                this.sliderElem.appendChild(sliderMinHandle);
                this.sliderElem.appendChild(sliderMaxHandle);
                /* Append slider element to parent container, right before the original <input> element */

                parent.insertBefore(this.sliderElem, this.element);
                /* Hide original <input> element */

                this.element.style.display = "none";
              }
              /* If JQuery exists, cache JQ references */


              if ($) {
                this.$element = $(this.element);
                this.$sliderElem = $(this.sliderElem);
              }
              /*************************************************
              						Setup
              	**************************************************/


              this.eventToCallbackMap = {};
              this.sliderElem.id = this.options.id;
              this.touchCapable = 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch;
              this.touchX = 0;
              this.touchY = 0;
              this.tooltip = this.sliderElem.querySelector('.tooltip-main');
              this.tooltipInner = this.tooltip.querySelector('.tooltip-inner');
              this.tooltip_min = this.sliderElem.querySelector('.tooltip-min');
              this.tooltipInner_min = this.tooltip_min.querySelector('.tooltip-inner');
              this.tooltip_max = this.sliderElem.querySelector('.tooltip-max');
              this.tooltipInner_max = this.tooltip_max.querySelector('.tooltip-inner');

              if (SliderScale[this.options.scale]) {
                this.options.scale = SliderScale[this.options.scale];
              }

              if (updateSlider === true) {
                // Reset classes
                this._removeClass(this.sliderElem, 'slider-horizontal');

                this._removeClass(this.sliderElem, 'slider-vertical');

                this._removeClass(this.sliderElem, 'slider-rtl');

                this._removeClass(this.tooltip, 'hide');

                this._removeClass(this.tooltip_min, 'hide');

                this._removeClass(this.tooltip_max, 'hide'); // Undo existing inline styles for track


                ["left", "right", "top", "width", "height"].forEach(function (prop) {
                  this._removeProperty(this.trackLow, prop);

                  this._removeProperty(this.trackSelection, prop);

                  this._removeProperty(this.trackHigh, prop);
                }, this); // Undo inline styles on handles

                [this.handle1, this.handle2].forEach(function (handle) {
                  this._removeProperty(handle, 'left');

                  this._removeProperty(handle, 'right');

                  this._removeProperty(handle, 'top');
                }, this); // Undo inline styles and classes on tooltips

                [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (tooltip) {
                  this._removeProperty(tooltip, 'left');

                  this._removeProperty(tooltip, 'right');

                  this._removeProperty(tooltip, 'top');

                  this._removeClass(tooltip, 'right');

                  this._removeClass(tooltip, 'left');

                  this._removeClass(tooltip, 'top');
                }, this);
              }

              if (this.options.orientation === 'vertical') {
                this._addClass(this.sliderElem, 'slider-vertical');

                this.stylePos = 'top';
                this.mousePos = 'pageY';
                this.sizePos = 'offsetHeight';
              } else {
                this._addClass(this.sliderElem, 'slider-horizontal');

                this.sliderElem.style.width = origWidth;
                this.options.orientation = 'horizontal';

                if (this.options.rtl) {
                  this.stylePos = 'right';
                } else {
                  this.stylePos = 'left';
                }

                this.mousePos = 'clientX';
                this.sizePos = 'offsetWidth';
              } // specific rtl class


              if (this.options.rtl) {
                this._addClass(this.sliderElem, 'slider-rtl');
              }

              this._setTooltipPosition();
              /* In case ticks are specified, overwrite the min and max bounds */


              if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
                if (!isMaxSet) {
                  this.options.max = Math.max.apply(Math, this.options.ticks);
                }

                if (!isMinSet) {
                  this.options.min = Math.min.apply(Math, this.options.ticks);
                }
              }

              if (Array.isArray(this.options.value)) {
                this.options.range = true;
                this._state.value = this.options.value;
              } else if (this.options.range) {
                // User wants a range, but value is not an array
                this._state.value = [this.options.value, this.options.max];
              } else {
                this._state.value = this.options.value;
              }

              this.trackLow = sliderTrackLow || this.trackLow;
              this.trackSelection = sliderTrackSelection || this.trackSelection;
              this.trackHigh = sliderTrackHigh || this.trackHigh;

              if (this.options.selection === 'none') {
                this._addClass(this.trackLow, 'hide');

                this._addClass(this.trackSelection, 'hide');

                this._addClass(this.trackHigh, 'hide');
              } else if (this.options.selection === 'after' || this.options.selection === 'before') {
                this._removeClass(this.trackLow, 'hide');

                this._removeClass(this.trackSelection, 'hide');

                this._removeClass(this.trackHigh, 'hide');
              }

              this.handle1 = sliderMinHandle || this.handle1;
              this.handle2 = sliderMaxHandle || this.handle2;

              if (updateSlider === true) {
                // Reset classes
                this._removeClass(this.handle1, 'round triangle');

                this._removeClass(this.handle2, 'round triangle hide');

                for (i = 0; i < this.ticks.length; i++) {
                  this._removeClass(this.ticks[i], 'round triangle hide');
                }
              }

              var availableHandleModifiers = ['round', 'triangle', 'custom'];
              var isValidHandleType = availableHandleModifiers.indexOf(this.options.handle) !== -1;

              if (isValidHandleType) {
                this._addClass(this.handle1, this.options.handle);

                this._addClass(this.handle2, this.options.handle);

                for (i = 0; i < this.ticks.length; i++) {
                  this._addClass(this.ticks[i], this.options.handle);
                }
              }

              this._state.offset = this._offset(this.sliderElem);
              this._state.size = this.sliderElem[this.sizePos];
              this.setValue(this._state.value);
              /******************************************
              				Bind Event Listeners
              	******************************************/
              // Bind keyboard handlers

              this.handle1Keydown = this._keydown.bind(this, 0);
              this.handle1.addEventListener("keydown", this.handle1Keydown, false);
              this.handle2Keydown = this._keydown.bind(this, 1);
              this.handle2.addEventListener("keydown", this.handle2Keydown, false);
              this.mousedown = this._mousedown.bind(this);
              this.touchstart = this._touchstart.bind(this);
              this.touchmove = this._touchmove.bind(this);

              if (this.touchCapable) {
                this.sliderElem.addEventListener("touchstart", this.touchstart, false);
                this.sliderElem.addEventListener("touchmove", this.touchmove, false);
              }

              this.sliderElem.addEventListener("mousedown", this.mousedown, false); // Bind window handlers

              this.resize = this._resize.bind(this);
              window.addEventListener("resize", this.resize, false); // Bind tooltip-related handlers

              if (this.options.tooltip === 'hide') {
                this._addClass(this.tooltip, 'hide');

                this._addClass(this.tooltip_min, 'hide');

                this._addClass(this.tooltip_max, 'hide');
              } else if (this.options.tooltip === 'always') {
                this._showTooltip();

                this._alwaysShowTooltip = true;
              } else {
                this.showTooltip = this._showTooltip.bind(this);
                this.hideTooltip = this._hideTooltip.bind(this);

                if (this.options.ticks_tooltip) {
                  var callbackHandle = this._addTickListener(); //create handle1 listeners and store references in map


                  var mouseEnter = callbackHandle.addMouseEnter(this, this.handle1);
                  var mouseLeave = callbackHandle.addMouseLeave(this, this.handle1);
                  this.handleCallbackMap.handle1 = {
                    mouseEnter: mouseEnter,
                    mouseLeave: mouseLeave
                  }; //create handle2 listeners and store references in map

                  mouseEnter = callbackHandle.addMouseEnter(this, this.handle2);
                  mouseLeave = callbackHandle.addMouseLeave(this, this.handle2);
                  this.handleCallbackMap.handle2 = {
                    mouseEnter: mouseEnter,
                    mouseLeave: mouseLeave
                  };
                } else {
                  this.sliderElem.addEventListener("mouseenter", this.showTooltip, false);
                  this.sliderElem.addEventListener("mouseleave", this.hideTooltip, false);

                  if (this.touchCapable) {
                    this.sliderElem.addEventListener("touchstart", this.showTooltip, false);
                    this.sliderElem.addEventListener("touchmove", this.showTooltip, false);
                    this.sliderElem.addEventListener("touchend", this.hideTooltip, false);
                  }
                }

                this.handle1.addEventListener("focus", this.showTooltip, false);
                this.handle1.addEventListener("blur", this.hideTooltip, false);
                this.handle2.addEventListener("focus", this.showTooltip, false);
                this.handle2.addEventListener("blur", this.hideTooltip, false);

                if (this.touchCapable) {
                  this.handle1.addEventListener("touchstart", this.showTooltip, false);
                  this.handle1.addEventListener("touchmove", this.showTooltip, false);
                  this.handle1.addEventListener("touchend", this.hideTooltip, false);
                  this.handle2.addEventListener("touchstart", this.showTooltip, false);
                  this.handle2.addEventListener("touchmove", this.showTooltip, false);
                  this.handle2.addEventListener("touchend", this.hideTooltip, false);
                }
              }

              if (this.options.enabled) {
                this.enable();
              } else {
                this.disable();
              }
            }
            /*************************************************
            				INSTANCE PROPERTIES/METHODS
            	- Any methods bound to the prototype are considered
            part of the plugin's `public` interface
            	**************************************************/


            Slider.prototype = {
              _init: function _init() {},
              // NOTE: Must exist to support bridget
              constructor: Slider,
              defaultOptions: {
                id: "",
                min: 0,
                max: 10,
                step: 1,
                precision: 0,
                orientation: 'horizontal',
                value: 5,
                range: false,
                selection: 'before',
                tooltip: 'show',
                tooltip_split: false,
                lock_to_ticks: false,
                handle: 'round',
                reversed: false,
                rtl: 'auto',
                enabled: true,
                formatter: function formatter(val) {
                  if (Array.isArray(val)) {
                    return val[0] + " : " + val[1];
                  } else {
                    return val;
                  }
                },
                natural_arrow_keys: false,
                ticks: [],
                ticks_positions: [],
                ticks_labels: [],
                ticks_snap_bounds: 0,
                ticks_tooltip: false,
                scale: 'linear',
                focus: false,
                tooltip_position: null,
                labelledby: null,
                rangeHighlights: []
              },
              getElement: function getElement() {
                return this.sliderElem;
              },
              getValue: function getValue() {
                if (this.options.range) {
                  return this._state.value;
                } else {
                  return this._state.value[0];
                }
              },
              setValue: function setValue(val, triggerSlideEvent, triggerChangeEvent) {
                if (!val) {
                  val = 0;
                }

                var oldValue = this.getValue();
                this._state.value = this._validateInputValue(val);

                var applyPrecision = this._applyPrecision.bind(this);

                if (this.options.range) {
                  this._state.value[0] = applyPrecision(this._state.value[0]);
                  this._state.value[1] = applyPrecision(this._state.value[1]);

                  if (this.ticksAreValid && this.options.lock_to_ticks) {
                    this._state.value[0] = this.options.ticks[this._getClosestTickIndex(this._state.value[0])];
                    this._state.value[1] = this.options.ticks[this._getClosestTickIndex(this._state.value[1])];
                  }

                  this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0]));
                  this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]));
                } else {
                  this._state.value = applyPrecision(this._state.value);

                  if (this.ticksAreValid && this.options.lock_to_ticks) {
                    this._state.value = this.options.ticks[this._getClosestTickIndex(this._state.value)];
                  }

                  this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))];

                  this._addClass(this.handle2, 'hide');

                  if (this.options.selection === 'after') {
                    this._state.value[1] = this.options.max;
                  } else {
                    this._state.value[1] = this.options.min;
                  }
                } // Determine which ticks the handle(s) are set at (if applicable)


                this._setTickIndex();

                if (this.options.max > this.options.min) {
                  this._state.percentage = [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), this.options.step * 100 / (this.options.max - this.options.min)];
                } else {
                  this._state.percentage = [0, 0, 100];
                }

                this._layout();

                var newValue = this.options.range ? this._state.value : this._state.value[0];

                this._setDataVal(newValue);

                if (triggerSlideEvent === true) {
                  this._trigger('slide', newValue);
                }

                var hasChanged = false;

                if (Array.isArray(newValue)) {
                  hasChanged = oldValue[0] !== newValue[0] || oldValue[1] !== newValue[1];
                } else {
                  hasChanged = oldValue !== newValue;
                }

                if (hasChanged && triggerChangeEvent === true) {
                  this._trigger('change', {
                    oldValue: oldValue,
                    newValue: newValue
                  });
                }

                return this;
              },
              destroy: function destroy() {
                // Remove event handlers on slider elements
                this._removeSliderEventHandlers(); // Remove the slider from the DOM


                this.sliderElem.parentNode.removeChild(this.sliderElem);
                /* Show original <input> element */

                this.element.style.display = ""; // Clear out custom event bindings

                this._cleanUpEventCallbacksMap(); // Remove data values


                this.element.removeAttribute("data"); // Remove JQuery handlers/data

                if ($) {
                  this._unbindJQueryEventHandlers();

                  if (autoRegisterNamespace === NAMESPACE_MAIN) {
                    this.$element.removeData(autoRegisterNamespace);
                  }

                  this.$element.removeData(NAMESPACE_ALTERNATE);
                }
              },
              disable: function disable() {
                this._state.enabled = false;
                this.handle1.removeAttribute("tabindex");
                this.handle2.removeAttribute("tabindex");

                this._addClass(this.sliderElem, 'slider-disabled');

                this._trigger('slideDisabled');

                return this;
              },
              enable: function enable() {
                this._state.enabled = true;
                this.handle1.setAttribute("tabindex", 0);
                this.handle2.setAttribute("tabindex", 0);

                this._removeClass(this.sliderElem, 'slider-disabled');

                this._trigger('slideEnabled');

                return this;
              },
              toggle: function toggle() {
                if (this._state.enabled) {
                  this.disable();
                } else {
                  this.enable();
                }

                return this;
              },
              isEnabled: function isEnabled() {
                return this._state.enabled;
              },
              on: function on(evt, callback) {
                this._bindNonQueryEventHandler(evt, callback);

                return this;
              },
              off: function off(evt, callback) {
                if ($) {
                  this.$element.off(evt, callback);
                  this.$sliderElem.off(evt, callback);
                } else {
                  this._unbindNonQueryEventHandler(evt, callback);
                }
              },
              getAttribute: function getAttribute(attribute) {
                if (attribute) {
                  return this.options[attribute];
                } else {
                  return this.options;
                }
              },
              setAttribute: function setAttribute(attribute, value) {
                this.options[attribute] = value;
                return this;
              },
              refresh: function refresh(options) {
                var currentValue = this.getValue();

                this._removeSliderEventHandlers();

                createNewSlider.call(this, this.element, this.options); // Don't reset slider's value on refresh if `useCurrentValue` is true

                if (options && options.useCurrentValue === true) {
                  this.setValue(currentValue);
                }

                if ($) {
                  // Bind new instance of slider to the element
                  if (autoRegisterNamespace === NAMESPACE_MAIN) {
                    $.data(this.element, NAMESPACE_MAIN, this);
                    $.data(this.element, NAMESPACE_ALTERNATE, this);
                  } else {
                    $.data(this.element, NAMESPACE_ALTERNATE, this);
                  }
                }

                return this;
              },
              relayout: function relayout() {
                this._resize();

                return this;
              },

              /******************************+
              				HELPERS
              	- Any method that is not part of the public interface.
              - Place it underneath this comment block and write its signature like so:
              		_fnName : function() {...}
              	********************************/
              _removeTooltipListener: function _removeTooltipListener(event, handler) {
                this.handle1.removeEventListener(event, handler, false);
                this.handle2.removeEventListener(event, handler, false);
              },
              _removeSliderEventHandlers: function _removeSliderEventHandlers() {
                // Remove keydown event listeners
                this.handle1.removeEventListener("keydown", this.handle1Keydown, false);
                this.handle2.removeEventListener("keydown", this.handle2Keydown, false); //remove the listeners from the ticks and handles if they had their own listeners

                if (this.options.ticks_tooltip) {
                  var ticks = this.ticksContainer.getElementsByClassName('slider-tick');

                  for (var i = 0; i < ticks.length; i++) {
                    ticks[i].removeEventListener('mouseenter', this.ticksCallbackMap[i].mouseEnter, false);
                    ticks[i].removeEventListener('mouseleave', this.ticksCallbackMap[i].mouseLeave, false);
                  }

                  if (this.handleCallbackMap.handle1 && this.handleCallbackMap.handle2) {
                    this.handle1.removeEventListener('mouseenter', this.handleCallbackMap.handle1.mouseEnter, false);
                    this.handle2.removeEventListener('mouseenter', this.handleCallbackMap.handle2.mouseEnter, false);
                    this.handle1.removeEventListener('mouseleave', this.handleCallbackMap.handle1.mouseLeave, false);
                    this.handle2.removeEventListener('mouseleave', this.handleCallbackMap.handle2.mouseLeave, false);
                  }
                }

                this.handleCallbackMap = null;
                this.ticksCallbackMap = null;

                if (this.showTooltip) {
                  this._removeTooltipListener("focus", this.showTooltip);
                }

                if (this.hideTooltip) {
                  this._removeTooltipListener("blur", this.hideTooltip);
                } // Remove event listeners from sliderElem


                if (this.showTooltip) {
                  this.sliderElem.removeEventListener("mouseenter", this.showTooltip, false);
                }

                if (this.hideTooltip) {
                  this.sliderElem.removeEventListener("mouseleave", this.hideTooltip, false);
                }

                this.sliderElem.removeEventListener("mousedown", this.mousedown, false);

                if (this.touchCapable) {
                  // Remove touch event listeners from handles
                  if (this.showTooltip) {
                    this.handle1.removeEventListener("touchstart", this.showTooltip, false);
                    this.handle1.removeEventListener("touchmove", this.showTooltip, false);
                    this.handle2.removeEventListener("touchstart", this.showTooltip, false);
                    this.handle2.removeEventListener("touchmove", this.showTooltip, false);
                  }

                  if (this.hideTooltip) {
                    this.handle1.removeEventListener("touchend", this.hideTooltip, false);
                    this.handle2.removeEventListener("touchend", this.hideTooltip, false);
                  } // Remove event listeners from sliderElem


                  if (this.showTooltip) {
                    this.sliderElem.removeEventListener("touchstart", this.showTooltip, false);
                    this.sliderElem.removeEventListener("touchmove", this.showTooltip, false);
                  }

                  if (this.hideTooltip) {
                    this.sliderElem.removeEventListener("touchend", this.hideTooltip, false);
                  }

                  this.sliderElem.removeEventListener("touchstart", this.touchstart, false);
                  this.sliderElem.removeEventListener("touchmove", this.touchmove, false);
                } // Remove window event listener


                window.removeEventListener("resize", this.resize, false);
              },
              _bindNonQueryEventHandler: function _bindNonQueryEventHandler(evt, callback) {
                if (this.eventToCallbackMap[evt] === undefined) {
                  this.eventToCallbackMap[evt] = [];
                }

                this.eventToCallbackMap[evt].push(callback);
              },
              _unbindNonQueryEventHandler: function _unbindNonQueryEventHandler(evt, callback) {
                var callbacks = this.eventToCallbackMap[evt];

                if (callbacks !== undefined) {
                  for (var i = 0; i < callbacks.length; i++) {
                    if (callbacks[i] === callback) {
                      callbacks.splice(i, 1);
                      break;
                    }
                  }
                }
              },
              _cleanUpEventCallbacksMap: function _cleanUpEventCallbacksMap() {
                var eventNames = Object.keys(this.eventToCallbackMap);

                for (var i = 0; i < eventNames.length; i++) {
                  var eventName = eventNames[i];
                  delete this.eventToCallbackMap[eventName];
                }
              },
              _showTooltip: function _showTooltip() {
                if (this.options.tooltip_split === false) {
                  this._addClass(this.tooltip, 'in');

                  this.tooltip_min.style.display = 'none';
                  this.tooltip_max.style.display = 'none';
                } else {
                  this._addClass(this.tooltip_min, 'in');

                  this._addClass(this.tooltip_max, 'in');

                  this.tooltip.style.display = 'none';
                }

                this._state.over = true;
              },
              _hideTooltip: function _hideTooltip() {
                if (this._state.inDrag === false && this._alwaysShowTooltip !== true) {
                  this._removeClass(this.tooltip, 'in');

                  this._removeClass(this.tooltip_min, 'in');

                  this._removeClass(this.tooltip_max, 'in');
                }

                this._state.over = false;
              },
              _setToolTipOnMouseOver: function _setToolTipOnMouseOver(tempState) {
                var self = this;
                var formattedTooltipVal = this.options.formatter(!tempState ? this._state.value[0] : tempState.value[0]);
                var positionPercentages = !tempState ? getPositionPercentages(this._state, this.options.reversed) : getPositionPercentages(tempState, this.options.reversed);

                this._setText(this.tooltipInner, formattedTooltipVal);

                this.tooltip.style[this.stylePos] = positionPercentages[0] + "%";

                function getPositionPercentages(state, reversed) {
                  if (reversed) {
                    return [100 - state.percentage[0], self.options.range ? 100 - state.percentage[1] : state.percentage[1]];
                  }

                  return [state.percentage[0], state.percentage[1]];
                }
              },
              _copyState: function _copyState() {
                return {
                  value: [this._state.value[0], this._state.value[1]],
                  enabled: this._state.enabled,
                  offset: this._state.offset,
                  size: this._state.size,
                  percentage: [this._state.percentage[0], this._state.percentage[1], this._state.percentage[2]],
                  inDrag: this._state.inDrag,
                  over: this._state.over,
                  // deleted or null'd keys
                  dragged: this._state.dragged,
                  keyCtrl: this._state.keyCtrl
                };
              },
              _addTickListener: function _addTickListener() {
                return {
                  addMouseEnter: function addMouseEnter(reference, element, index) {
                    var enter = function enter() {
                      var tempState = reference._copyState(); // Which handle is being hovered over?


                      var val = element === reference.handle1 ? tempState.value[0] : tempState.value[1];
                      var per = void 0; // Setup value and percentage for tick's 'mouseenter'

                      if (index !== undefined) {
                        val = reference.options.ticks[index];
                        per = reference.options.ticks_positions.length > 0 && reference.options.ticks_positions[index] || reference._toPercentage(reference.options.ticks[index]);
                      } else {
                        per = reference._toPercentage(val);
                      }

                      tempState.value[0] = val;
                      tempState.percentage[0] = per;

                      reference._setToolTipOnMouseOver(tempState);

                      reference._showTooltip();
                    };

                    element.addEventListener("mouseenter", enter, false);
                    return enter;
                  },
                  addMouseLeave: function addMouseLeave(reference, element) {
                    var leave = function leave() {
                      reference._hideTooltip();
                    };

                    element.addEventListener("mouseleave", leave, false);
                    return leave;
                  }
                };
              },
              _layout: function _layout() {
                var positionPercentages;
                var formattedValue;

                if (this.options.reversed) {
                  positionPercentages = [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]];
                } else {
                  positionPercentages = [this._state.percentage[0], this._state.percentage[1]];
                }

                this.handle1.style[this.stylePos] = positionPercentages[0] + "%";
                this.handle1.setAttribute('aria-valuenow', this._state.value[0]);
                formattedValue = this.options.formatter(this._state.value[0]);

                if (isNaN(formattedValue)) {
                  this.handle1.setAttribute('aria-valuetext', formattedValue);
                } else {
                  this.handle1.removeAttribute('aria-valuetext');
                }

                this.handle2.style[this.stylePos] = positionPercentages[1] + "%";
                this.handle2.setAttribute('aria-valuenow', this._state.value[1]);
                formattedValue = this.options.formatter(this._state.value[1]);

                if (isNaN(formattedValue)) {
                  this.handle2.setAttribute('aria-valuetext', formattedValue);
                } else {
                  this.handle2.removeAttribute('aria-valuetext');
                }
                /* Position highlight range elements */


                if (this.rangeHighlightElements.length > 0 && Array.isArray(this.options.rangeHighlights) && this.options.rangeHighlights.length > 0) {
                  for (var _i = 0; _i < this.options.rangeHighlights.length; _i++) {
                    var startPercent = this._toPercentage(this.options.rangeHighlights[_i].start);

                    var endPercent = this._toPercentage(this.options.rangeHighlights[_i].end);

                    if (this.options.reversed) {
                      var sp = 100 - endPercent;
                      endPercent = 100 - startPercent;
                      startPercent = sp;
                    }

                    var currentRange = this._createHighlightRange(startPercent, endPercent);

                    if (currentRange) {
                      if (this.options.orientation === 'vertical') {
                        this.rangeHighlightElements[_i].style.top = currentRange.start + "%";
                        this.rangeHighlightElements[_i].style.height = currentRange.size + "%";
                      } else {
                        if (this.options.rtl) {
                          this.rangeHighlightElements[_i].style.right = currentRange.start + "%";
                        } else {
                          this.rangeHighlightElements[_i].style.left = currentRange.start + "%";
                        }

                        this.rangeHighlightElements[_i].style.width = currentRange.size + "%";
                      }
                    } else {
                      this.rangeHighlightElements[_i].style.display = "none";
                    }
                  }
                }
                /* Position ticks and labels */


                if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
                  var styleSize = this.options.orientation === 'vertical' ? 'height' : 'width';
                  var styleMargin;

                  if (this.options.orientation === 'vertical') {
                    styleMargin = 'marginTop';
                  } else {
                    if (this.options.rtl) {
                      styleMargin = 'marginRight';
                    } else {
                      styleMargin = 'marginLeft';
                    }
                  }

                  var labelSize = this._state.size / (this.options.ticks.length - 1);

                  if (this.tickLabelContainer) {
                    var extraMargin = 0;

                    if (this.options.ticks_positions.length === 0) {
                      if (this.options.orientation !== 'vertical') {
                        this.tickLabelContainer.style[styleMargin] = -labelSize / 2 + "px";
                      }

                      extraMargin = this.tickLabelContainer.offsetHeight;
                    } else {
                      /* Chidren are position absolute, calculate height by finding the max offsetHeight of a child */
                      for (i = 0; i < this.tickLabelContainer.childNodes.length; i++) {
                        if (this.tickLabelContainer.childNodes[i].offsetHeight > extraMargin) {
                          extraMargin = this.tickLabelContainer.childNodes[i].offsetHeight;
                        }
                      }
                    }

                    if (this.options.orientation === 'horizontal') {
                      this.sliderElem.style.marginBottom = extraMargin + "px";
                    }
                  }

                  for (var i = 0; i < this.options.ticks.length; i++) {
                    var percentage = this.options.ticks_positions[i] || this._toPercentage(this.options.ticks[i]);

                    if (this.options.reversed) {
                      percentage = 100 - percentage;
                    }

                    this.ticks[i].style[this.stylePos] = percentage + "%";
                    /* Set class labels to denote whether ticks are in the selection */

                    this._removeClass(this.ticks[i], 'in-selection');

                    if (!this.options.range) {
                      if (this.options.selection === 'after' && percentage >= positionPercentages[0]) {
                        this._addClass(this.ticks[i], 'in-selection');
                      } else if (this.options.selection === 'before' && percentage <= positionPercentages[0]) {
                        this._addClass(this.ticks[i], 'in-selection');
                      }
                    } else if (percentage >= positionPercentages[0] && percentage <= positionPercentages[1]) {
                      this._addClass(this.ticks[i], 'in-selection');
                    }

                    if (this.tickLabels[i]) {
                      this.tickLabels[i].style[styleSize] = labelSize + "px";

                      if (this.options.orientation !== 'vertical' && this.options.ticks_positions[i] !== undefined) {
                        this.tickLabels[i].style.position = 'absolute';
                        this.tickLabels[i].style[this.stylePos] = percentage + "%";
                        this.tickLabels[i].style[styleMargin] = -labelSize / 2 + 'px';
                      } else if (this.options.orientation === 'vertical') {
                        if (this.options.rtl) {
                          this.tickLabels[i].style['marginRight'] = this.sliderElem.offsetWidth + "px";
                        } else {
                          this.tickLabels[i].style['marginLeft'] = this.sliderElem.offsetWidth + "px";
                        }

                        this.tickLabelContainer.style[styleMargin] = this.sliderElem.offsetWidth / 2 * -1 + 'px';
                      }
                      /* Set class labels to indicate tick labels are in the selection or selected */


                      this._removeClass(this.tickLabels[i], 'label-in-selection label-is-selection');

                      if (!this.options.range) {
                        if (this.options.selection === 'after' && percentage >= positionPercentages[0]) {
                          this._addClass(this.tickLabels[i], 'label-in-selection');
                        } else if (this.options.selection === 'before' && percentage <= positionPercentages[0]) {
                          this._addClass(this.tickLabels[i], 'label-in-selection');
                        }

                        if (percentage === positionPercentages[0]) {
                          this._addClass(this.tickLabels[i], 'label-is-selection');
                        }
                      } else if (percentage >= positionPercentages[0] && percentage <= positionPercentages[1]) {
                        this._addClass(this.tickLabels[i], 'label-in-selection');

                        if (percentage === positionPercentages[0] || positionPercentages[1]) {
                          this._addClass(this.tickLabels[i], 'label-is-selection');
                        }
                      }
                    }
                  }
                }

                var formattedTooltipVal;

                if (this.options.range) {
                  formattedTooltipVal = this.options.formatter(this._state.value);

                  this._setText(this.tooltipInner, formattedTooltipVal);

                  this.tooltip.style[this.stylePos] = (positionPercentages[1] + positionPercentages[0]) / 2 + "%";
                  var innerTooltipMinText = this.options.formatter(this._state.value[0]);

                  this._setText(this.tooltipInner_min, innerTooltipMinText);

                  var innerTooltipMaxText = this.options.formatter(this._state.value[1]);

                  this._setText(this.tooltipInner_max, innerTooltipMaxText);

                  this.tooltip_min.style[this.stylePos] = positionPercentages[0] + "%";
                  this.tooltip_max.style[this.stylePos] = positionPercentages[1] + "%";
                } else {
                  formattedTooltipVal = this.options.formatter(this._state.value[0]);

                  this._setText(this.tooltipInner, formattedTooltipVal);

                  this.tooltip.style[this.stylePos] = positionPercentages[0] + "%";
                }

                if (this.options.orientation === 'vertical') {
                  this.trackLow.style.top = '0';
                  this.trackLow.style.height = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                  this.trackSelection.style.top = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                  this.trackSelection.style.height = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
                  this.trackHigh.style.bottom = '0';
                  this.trackHigh.style.height = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
                } else {
                  if (this.stylePos === 'right') {
                    this.trackLow.style.right = '0';
                  } else {
                    this.trackLow.style.left = '0';
                  }

                  this.trackLow.style.width = Math.min(positionPercentages[0], positionPercentages[1]) + '%';

                  if (this.stylePos === 'right') {
                    this.trackSelection.style.right = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                  } else {
                    this.trackSelection.style.left = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                  }

                  this.trackSelection.style.width = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';

                  if (this.stylePos === 'right') {
                    this.trackHigh.style.left = '0';
                  } else {
                    this.trackHigh.style.right = '0';
                  }

                  this.trackHigh.style.width = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
                  var offset_min = this.tooltip_min.getBoundingClientRect();
                  var offset_max = this.tooltip_max.getBoundingClientRect();

                  if (this.options.tooltip_position === 'bottom') {
                    if (offset_min.right > offset_max.left) {
                      this._removeClass(this.tooltip_max, 'bottom');

                      this._addClass(this.tooltip_max, 'top');

                      this.tooltip_max.style.top = '';
                      this.tooltip_max.style.bottom = 22 + 'px';
                    } else {
                      this._removeClass(this.tooltip_max, 'top');

                      this._addClass(this.tooltip_max, 'bottom');

                      this.tooltip_max.style.top = this.tooltip_min.style.top;
                      this.tooltip_max.style.bottom = '';
                    }
                  } else {
                    if (offset_min.right > offset_max.left) {
                      this._removeClass(this.tooltip_max, 'top');

                      this._addClass(this.tooltip_max, 'bottom');

                      this.tooltip_max.style.top = 18 + 'px';
                    } else {
                      this._removeClass(this.tooltip_max, 'bottom');

                      this._addClass(this.tooltip_max, 'top');

                      this.tooltip_max.style.top = this.tooltip_min.style.top;
                    }
                  }
                }
              },
              _createHighlightRange: function _createHighlightRange(start, end) {
                if (this._isHighlightRange(start, end)) {
                  if (start > end) {
                    return {
                      'start': end,
                      'size': start - end
                    };
                  }

                  return {
                    'start': start,
                    'size': end - start
                  };
                }

                return null;
              },
              _isHighlightRange: function _isHighlightRange(start, end) {
                if (0 <= start && start <= 100 && 0 <= end && end <= 100) {
                  return true;
                } else {
                  return false;
                }
              },
              _resize: function _resize(ev) {
                /*jshint unused:false*/
                this._state.offset = this._offset(this.sliderElem);
                this._state.size = this.sliderElem[this.sizePos];

                this._layout();
              },
              _removeProperty: function _removeProperty(element, prop) {
                if (element.style.removeProperty) {
                  element.style.removeProperty(prop);
                } else {
                  element.style.removeAttribute(prop);
                }
              },
              _mousedown: function _mousedown(ev) {
                if (!this._state.enabled) {
                  return false;
                }

                if (ev.preventDefault) {
                  ev.preventDefault();
                }

                this._state.offset = this._offset(this.sliderElem);
                this._state.size = this.sliderElem[this.sizePos];

                var percentage = this._getPercentage(ev);

                if (this.options.range) {
                  var diff1 = Math.abs(this._state.percentage[0] - percentage);
                  var diff2 = Math.abs(this._state.percentage[1] - percentage);
                  this._state.dragged = diff1 < diff2 ? 0 : 1;

                  this._adjustPercentageForRangeSliders(percentage);
                } else {
                  this._state.dragged = 0;
                }

                this._state.percentage[this._state.dragged] = percentage;

                if (this.touchCapable) {
                  document.removeEventListener("touchmove", this.mousemove, false);
                  document.removeEventListener("touchend", this.mouseup, false);
                }

                if (this.mousemove) {
                  document.removeEventListener("mousemove", this.mousemove, false);
                }

                if (this.mouseup) {
                  document.removeEventListener("mouseup", this.mouseup, false);
                }

                this.mousemove = this._mousemove.bind(this);
                this.mouseup = this._mouseup.bind(this);

                if (this.touchCapable) {
                  // Touch: Bind touch events:
                  document.addEventListener("touchmove", this.mousemove, false);
                  document.addEventListener("touchend", this.mouseup, false);
                } // Bind mouse events:


                document.addEventListener("mousemove", this.mousemove, false);
                document.addEventListener("mouseup", this.mouseup, false);
                this._state.inDrag = true;

                var newValue = this._calculateValue();

                this._trigger('slideStart', newValue);

                this.setValue(newValue, false, true);
                ev.returnValue = false;

                if (this.options.focus) {
                  this._triggerFocusOnHandle(this._state.dragged);
                }

                return true;
              },
              _touchstart: function _touchstart(ev) {
                this._mousedown(ev);
              },
              _triggerFocusOnHandle: function _triggerFocusOnHandle(handleIdx) {
                if (handleIdx === 0) {
                  this.handle1.focus();
                }

                if (handleIdx === 1) {
                  this.handle2.focus();
                }
              },
              _keydown: function _keydown(handleIdx, ev) {
                if (!this._state.enabled) {
                  return false;
                }

                var dir;

                switch (ev.keyCode) {
                  case 37: // left

                  case 40:
                    // down
                    dir = -1;
                    break;

                  case 39: // right

                  case 38:
                    // up
                    dir = 1;
                    break;
                }

                if (!dir) {
                  return;
                } // use natural arrow keys instead of from min to max


                if (this.options.natural_arrow_keys) {
                  var isHorizontal = this.options.orientation === 'horizontal';
                  var isVertical = this.options.orientation === 'vertical';
                  var isRTL = this.options.rtl;
                  var isReversed = this.options.reversed;

                  if (isHorizontal) {
                    if (isRTL) {
                      if (!isReversed) {
                        dir = -dir;
                      }
                    } else {
                      if (isReversed) {
                        dir = -dir;
                      }
                    }
                  } else if (isVertical) {
                    if (!isReversed) {
                      dir = -dir;
                    }
                  }
                }

                var val;

                if (this.ticksAreValid && this.options.lock_to_ticks) {
                  var index = void 0; // Find tick index that handle 1/2 is currently on

                  index = this.options.ticks.indexOf(this._state.value[handleIdx]);

                  if (index === -1) {
                    // Set default to first tick
                    index = 0;
                    window.console.warn('(lock_to_ticks) _keydown: index should not be -1');
                  }

                  index += dir;
                  index = Math.max(0, Math.min(this.options.ticks.length - 1, index));
                  val = this.options.ticks[index];
                } else {
                  val = this._state.value[handleIdx] + dir * this.options.step;
                }

                var percentage = this._toPercentage(val);

                this._state.keyCtrl = handleIdx;

                if (this.options.range) {
                  this._adjustPercentageForRangeSliders(percentage);

                  var val1 = !this._state.keyCtrl ? val : this._state.value[0];
                  var val2 = this._state.keyCtrl ? val : this._state.value[1]; // Restrict values within limits

                  val = [Math.max(this.options.min, Math.min(this.options.max, val1)), Math.max(this.options.min, Math.min(this.options.max, val2))];
                } else {
                  val = Math.max(this.options.min, Math.min(this.options.max, val));
                }

                this._trigger('slideStart', val);

                this.setValue(val, true, true);

                this._trigger('slideStop', val);

                this._pauseEvent(ev);

                delete this._state.keyCtrl;
                return false;
              },
              _pauseEvent: function _pauseEvent(ev) {
                if (ev.stopPropagation) {
                  ev.stopPropagation();
                }

                if (ev.preventDefault) {
                  ev.preventDefault();
                }

                ev.cancelBubble = true;
                ev.returnValue = false;
              },
              _mousemove: function _mousemove(ev) {
                if (!this._state.enabled) {
                  return false;
                }

                var percentage = this._getPercentage(ev);

                this._adjustPercentageForRangeSliders(percentage);

                this._state.percentage[this._state.dragged] = percentage;

                var val = this._calculateValue(true);

                this.setValue(val, true, true);
                return false;
              },
              _touchmove: function _touchmove(ev) {
                if (ev.changedTouches === undefined) {
                  return;
                } // Prevent page from scrolling and only drag the slider


                if (ev.preventDefault) {
                  ev.preventDefault();
                }
              },
              _adjustPercentageForRangeSliders: function _adjustPercentageForRangeSliders(percentage) {
                if (this.options.range) {
                  var precision = this._getNumDigitsAfterDecimalPlace(percentage);

                  precision = precision ? precision - 1 : 0;

                  var percentageWithAdjustedPrecision = this._applyToFixedAndParseFloat(percentage, precision);

                  if (this._state.dragged === 0 && this._applyToFixedAndParseFloat(this._state.percentage[1], precision) < percentageWithAdjustedPrecision) {
                    this._state.percentage[0] = this._state.percentage[1];
                    this._state.dragged = 1;
                  } else if (this._state.dragged === 1 && this._applyToFixedAndParseFloat(this._state.percentage[0], precision) > percentageWithAdjustedPrecision) {
                    this._state.percentage[1] = this._state.percentage[0];
                    this._state.dragged = 0;
                  } else if (this._state.keyCtrl === 0 && this._toPercentage(this._state.value[1]) < percentage) {
                    this._state.percentage[0] = this._state.percentage[1];
                    this._state.keyCtrl = 1;
                    this.handle2.focus();
                  } else if (this._state.keyCtrl === 1 && this._toPercentage(this._state.value[0]) > percentage) {
                    this._state.percentage[1] = this._state.percentage[0];
                    this._state.keyCtrl = 0;
                    this.handle1.focus();
                  }
                }
              },
              _mouseup: function _mouseup(ev) {
                if (!this._state.enabled) {
                  return false;
                }

                var percentage = this._getPercentage(ev);

                this._adjustPercentageForRangeSliders(percentage);

                this._state.percentage[this._state.dragged] = percentage;

                if (this.touchCapable) {
                  // Touch: Unbind touch event handlers:
                  document.removeEventListener("touchmove", this.mousemove, false);
                  document.removeEventListener("touchend", this.mouseup, false);
                } // Unbind mouse event handlers:


                document.removeEventListener("mousemove", this.mousemove, false);
                document.removeEventListener("mouseup", this.mouseup, false);
                this._state.inDrag = false;

                if (this._state.over === false) {
                  this._hideTooltip();
                }

                var val = this._calculateValue(true);

                this.setValue(val, false, true);

                this._trigger('slideStop', val); // No longer need 'dragged' after mouse up


                this._state.dragged = null;
                return false;
              },
              _setValues: function _setValues(index, val) {
                var comp = 0 === index ? 0 : 100;

                if (this._state.percentage[index] !== comp) {
                  val.data[index] = this._toValue(this._state.percentage[index]);
                  val.data[index] = this._applyPrecision(val.data[index]);
                }
              },
              _calculateValue: function _calculateValue(snapToClosestTick) {
                var val = {};

                if (this.options.range) {
                  val.data = [this.options.min, this.options.max];

                  this._setValues(0, val);

                  this._setValues(1, val);

                  if (snapToClosestTick) {
                    val.data[0] = this._snapToClosestTick(val.data[0]);
                    val.data[1] = this._snapToClosestTick(val.data[1]);
                  }
                } else {
                  val.data = this._toValue(this._state.percentage[0]);
                  val.data = parseFloat(val.data);
                  val.data = this._applyPrecision(val.data);

                  if (snapToClosestTick) {
                    val.data = this._snapToClosestTick(val.data);
                  }
                }

                return val.data;
              },
              _snapToClosestTick: function _snapToClosestTick(val) {
                var min = [val, Infinity];

                for (var i = 0; i < this.options.ticks.length; i++) {
                  var diff = Math.abs(this.options.ticks[i] - val);

                  if (diff <= min[1]) {
                    min = [this.options.ticks[i], diff];
                  }
                }

                if (min[1] <= this.options.ticks_snap_bounds) {
                  return min[0];
                }

                return val;
              },
              _applyPrecision: function _applyPrecision(val) {
                var precision = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);

                return this._applyToFixedAndParseFloat(val, precision);
              },
              _getNumDigitsAfterDecimalPlace: function _getNumDigitsAfterDecimalPlace(num) {
                var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);

                if (!match) {
                  return 0;
                }

                return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
              },
              _applyToFixedAndParseFloat: function _applyToFixedAndParseFloat(num, toFixedInput) {
                var truncatedNum = num.toFixed(toFixedInput);
                return parseFloat(truncatedNum);
              },

              /*
              	Credits to Mike Samuel for the following method!
              	Source: http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number
              */
              _getPercentage: function _getPercentage(ev) {
                if (this.touchCapable && (ev.type === 'touchstart' || ev.type === 'touchmove' || ev.type === 'touchend')) {
                  ev = ev.changedTouches[0];
                }

                var eventPosition = ev[this.mousePos];
                var sliderOffset = this._state.offset[this.stylePos];
                var distanceToSlide = eventPosition - sliderOffset;

                if (this.stylePos === 'right') {
                  distanceToSlide = -distanceToSlide;
                } // Calculate what percent of the length the slider handle has slid


                var percentage = distanceToSlide / this._state.size * 100;
                percentage = Math.round(percentage / this._state.percentage[2]) * this._state.percentage[2];

                if (this.options.reversed) {
                  percentage = 100 - percentage;
                } // Make sure the percent is within the bounds of the slider.
                // 0% corresponds to the 'min' value of the slide
                // 100% corresponds to the 'max' value of the slide


                return Math.max(0, Math.min(100, percentage));
              },
              _validateInputValue: function _validateInputValue(val) {
                if (!isNaN(+val)) {
                  return +val;
                } else if (Array.isArray(val)) {
                  this._validateArray(val);

                  return val;
                } else {
                  throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(val));
                }
              },
              _validateArray: function _validateArray(val) {
                for (var i = 0; i < val.length; i++) {
                  var input = val[i];

                  if (typeof input !== 'number') {
                    throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(input));
                  }
                }
              },
              _setDataVal: function _setDataVal(val) {
                this.element.setAttribute('data-value', val);
                this.element.setAttribute('value', val);
                this.element.value = val;
              },
              _trigger: function _trigger(evt, val) {
                val = val || val === 0 ? val : undefined;
                var callbackFnArray = this.eventToCallbackMap[evt];

                if (callbackFnArray && callbackFnArray.length) {
                  for (var i = 0; i < callbackFnArray.length; i++) {
                    var callbackFn = callbackFnArray[i];
                    callbackFn(val);
                  }
                }
                /* If JQuery exists, trigger JQuery events */


                if ($) {
                  this._triggerJQueryEvent(evt, val);
                }
              },
              _triggerJQueryEvent: function _triggerJQueryEvent(evt, val) {
                var eventData = {
                  type: evt,
                  value: val
                };
                this.$element.trigger(eventData);
                this.$sliderElem.trigger(eventData);
              },
              _unbindJQueryEventHandlers: function _unbindJQueryEventHandlers() {
                this.$element.off();
                this.$sliderElem.off();
              },
              _setText: function _setText(element, text) {
                if (typeof element.textContent !== "undefined") {
                  element.textContent = text;
                } else if (typeof element.innerText !== "undefined") {
                  element.innerText = text;
                }
              },
              _removeClass: function _removeClass(element, classString) {
                var classes = classString.split(" ");
                var newClasses = element.className;

                for (var i = 0; i < classes.length; i++) {
                  var classTag = classes[i];
                  var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
                  newClasses = newClasses.replace(regex, " ");
                }

                element.className = newClasses.trim();
              },
              _addClass: function _addClass(element, classString) {
                var classes = classString.split(" ");
                var newClasses = element.className;

                for (var i = 0; i < classes.length; i++) {
                  var classTag = classes[i];
                  var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
                  var ifClassExists = regex.test(newClasses);

                  if (!ifClassExists) {
                    newClasses += " " + classTag;
                  }
                }

                element.className = newClasses.trim();
              },
              _offsetLeft: function _offsetLeft(obj) {
                return obj.getBoundingClientRect().left;
              },
              _offsetRight: function _offsetRight(obj) {
                return obj.getBoundingClientRect().right;
              },
              _offsetTop: function _offsetTop(obj) {
                var offsetTop = obj.offsetTop;

                while ((obj = obj.offsetParent) && !isNaN(obj.offsetTop)) {
                  offsetTop += obj.offsetTop;

                  if (obj.tagName !== 'BODY') {
                    offsetTop -= obj.scrollTop;
                  }
                }

                return offsetTop;
              },
              _offset: function _offset(obj) {
                return {
                  left: this._offsetLeft(obj),
                  right: this._offsetRight(obj),
                  top: this._offsetTop(obj)
                };
              },
              _css: function _css(elementRef, styleName, value) {
                if ($) {
                  $.style(elementRef, styleName, value);
                } else {
                  var style = styleName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (all, letter) {
                    return letter.toUpperCase();
                  });
                  elementRef.style[style] = value;
                }
              },
              _toValue: function _toValue(percentage) {
                return this.options.scale.toValue.apply(this, [percentage]);
              },
              _toPercentage: function _toPercentage(value) {
                return this.options.scale.toPercentage.apply(this, [value]);
              },
              _setTooltipPosition: function _setTooltipPosition() {
                var tooltips = [this.tooltip, this.tooltip_min, this.tooltip_max];

                if (this.options.orientation === 'vertical') {
                  var tooltipPos;

                  if (this.options.tooltip_position) {
                    tooltipPos = this.options.tooltip_position;
                  } else {
                    if (this.options.rtl) {
                      tooltipPos = 'left';
                    } else {
                      tooltipPos = 'right';
                    }
                  }

                  var oppositeSide = tooltipPos === 'left' ? 'right' : 'left';
                  tooltips.forEach(function (tooltip) {
                    this._addClass(tooltip, tooltipPos);

                    tooltip.style[oppositeSide] = '100%';
                  }.bind(this));
                } else if (this.options.tooltip_position === 'bottom') {
                  tooltips.forEach(function (tooltip) {
                    this._addClass(tooltip, 'bottom');

                    tooltip.style.top = 22 + 'px';
                  }.bind(this));
                } else {
                  tooltips.forEach(function (tooltip) {
                    this._addClass(tooltip, 'top');

                    tooltip.style.top = -this.tooltip.outerHeight - 14 + 'px';
                  }.bind(this));
                }
              },
              _getClosestTickIndex: function _getClosestTickIndex(val) {
                var difference = Math.abs(val - this.options.ticks[0]);
                var index = 0;

                for (var i = 0; i < this.options.ticks.length; ++i) {
                  var d = Math.abs(val - this.options.ticks[i]);

                  if (d < difference) {
                    difference = d;
                    index = i;
                  }
                }

                return index;
              },

              /**
               * Attempts to find the index in `ticks[]` the slider values are set at.
               * The indexes can be -1 to indicate the slider value is not set at a value in `ticks[]`.
               */
              _setTickIndex: function _setTickIndex() {
                if (this.ticksAreValid) {
                  this._state.tickIndex = [this.options.ticks.indexOf(this._state.value[0]), this.options.ticks.indexOf(this._state.value[1])];
                }
              }
            };
            /*********************************
            		Attach to global namespace
            	*********************************/

            if ($ && $.fn) {
              if (!$.fn.slider) {
                $.bridget(NAMESPACE_MAIN, Slider);
                autoRegisterNamespace = NAMESPACE_MAIN;
              } else {
                if (windowIsDefined) {
                  window.console.warn("bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead.");
                }

                autoRegisterNamespace = NAMESPACE_ALTERNATE;
              }

              $.bridget(NAMESPACE_ALTERNATE, Slider); // Auto-Register data-provide="slider" Elements

              $(function () {
                $("input[data-provide=slider]")[autoRegisterNamespace]();
              });
            }
          })($);

          return Slider;
        });

        ;
        browserify_shim__define__module__export__(typeof bootstrapSlider != "undefined" ? bootstrapSlider : window.bootstrapSlider);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "highlight": "dVvjmL",
    "jquery": "Z0jGCa",
    "modernizr": "9WpgYP"
  }],
  "bootstrap": [function (require, module, exports) {
    module.exports = require('s7b+G+');
  }, {}],
  "s7b+G+": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        ;
        global.jquery = require("jquery");
        /*!
         * Bootstrap v3.4.1 (https://getbootstrap.com/)
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under the MIT license
         */

        if (typeof jQuery === 'undefined') {
          throw new Error('Bootstrap\'s JavaScript requires jQuery');
        }

        +function ($) {
          'use strict';

          var version = $.fn.jquery.split(' ')[0].split('.');

          if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
            throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
          }
        }(jQuery);
        /* ========================================================================
         * Bootstrap: transition.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#transitions
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)
          // ============================================================

          function transitionEnd() {
            var el = document.createElement('bootstrap');
            var transEndEventNames = {
              WebkitTransition: 'webkitTransitionEnd',
              MozTransition: 'transitionend',
              OTransition: 'oTransitionEnd otransitionend',
              transition: 'transitionend'
            };

            for (var name in transEndEventNames) {
              if (el.style[name] !== undefined) {
                return {
                  end: transEndEventNames[name]
                };
              }
            }

            return false; // explicit for ie8 (  ._.)
          } // https://blog.alexmaccaw.com/css-transitions


          $.fn.emulateTransitionEnd = function (duration) {
            var called = false;
            var $el = this;
            $(this).one('bsTransitionEnd', function () {
              called = true;
            });

            var callback = function callback() {
              if (!called) $($el).trigger($.support.transition.end);
            };

            setTimeout(callback, duration);
            return this;
          };

          $(function () {
            $.support.transition = transitionEnd();
            if (!$.support.transition) return;
            $.event.special.bsTransitionEnd = {
              bindType: $.support.transition.end,
              delegateType: $.support.transition.end,
              handle: function handle(e) {
                if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
              }
            };
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: alert.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#alerts
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // ALERT CLASS DEFINITION
          // ======================

          var dismiss = '[data-dismiss="alert"]';

          var Alert = function Alert(el) {
            $(el).on('click', dismiss, this.close);
          };

          Alert.VERSION = '3.4.1';
          Alert.TRANSITION_DURATION = 150;

          Alert.prototype.close = function (e) {
            var $this = $(this);
            var selector = $this.attr('data-target');

            if (!selector) {
              selector = $this.attr('href');
              selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
            }

            selector = selector === '#' ? [] : selector;
            var $parent = $(document).find(selector);
            if (e) e.preventDefault();

            if (!$parent.length) {
              $parent = $this.closest('.alert');
            }

            $parent.trigger(e = $.Event('close.bs.alert'));
            if (e.isDefaultPrevented()) return;
            $parent.removeClass('in');

            function removeElement() {
              // detach from parent, fire event then clean up data
              $parent.detach().trigger('closed.bs.alert').remove();
            }

            $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
          }; // ALERT PLUGIN DEFINITION
          // =======================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.alert');
              if (!data) $this.data('bs.alert', data = new Alert(this));
              if (typeof option == 'string') data[option].call($this);
            });
          }

          var old = $.fn.alert;
          $.fn.alert = Plugin;
          $.fn.alert.Constructor = Alert; // ALERT NO CONFLICT
          // =================

          $.fn.alert.noConflict = function () {
            $.fn.alert = old;
            return this;
          }; // ALERT DATA-API
          // ==============


          $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
        }(jQuery);
        /* ========================================================================
         * Bootstrap: button.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#buttons
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // BUTTON PUBLIC CLASS DEFINITION
          // ==============================

          var Button = function Button(element, options) {
            this.$element = $(element);
            this.options = $.extend({}, Button.DEFAULTS, options);
            this.isLoading = false;
          };

          Button.VERSION = '3.4.1';
          Button.DEFAULTS = {
            loadingText: 'loading...'
          };

          Button.prototype.setState = function (state) {
            var d = 'disabled';
            var $el = this.$element;
            var val = $el.is('input') ? 'val' : 'html';
            var data = $el.data();
            state += 'Text';
            if (data.resetText == null) $el.data('resetText', $el[val]()); // push to event loop to allow forms to submit

            setTimeout($.proxy(function () {
              $el[val](data[state] == null ? this.options[state] : data[state]);

              if (state == 'loadingText') {
                this.isLoading = true;
                $el.addClass(d).attr(d, d).prop(d, true);
              } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d).prop(d, false);
              }
            }, this), 0);
          };

          Button.prototype.toggle = function () {
            var changed = true;
            var $parent = this.$element.closest('[data-toggle="buttons"]');

            if ($parent.length) {
              var $input = this.$element.find('input');

              if ($input.prop('type') == 'radio') {
                if ($input.prop('checked')) changed = false;
                $parent.find('.active').removeClass('active');
                this.$element.addClass('active');
              } else if ($input.prop('type') == 'checkbox') {
                if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
                this.$element.toggleClass('active');
              }

              $input.prop('checked', this.$element.hasClass('active'));
              if (changed) $input.trigger('change');
            } else {
              this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
              this.$element.toggleClass('active');
            }
          }; // BUTTON PLUGIN DEFINITION
          // ========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.button');
              var options = _typeof2(option) == 'object' && option;
              if (!data) $this.data('bs.button', data = new Button(this, options));
              if (option == 'toggle') data.toggle();else if (option) data.setState(option);
            });
          }

          var old = $.fn.button;
          $.fn.button = Plugin;
          $.fn.button.Constructor = Button; // BUTTON NO CONFLICT
          // ==================

          $.fn.button.noConflict = function () {
            $.fn.button = old;
            return this;
          }; // BUTTON DATA-API
          // ===============


          $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            var $btn = $(e.target).closest('.btn');
            Plugin.call($btn, 'toggle');

            if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
              // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
              e.preventDefault(); // The target component still receive the focus

              if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');
            }
          }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
            $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: carousel.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#carousel
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // CAROUSEL CLASS DEFINITION
          // =========================

          var Carousel = function Carousel(element, options) {
            this.$element = $(element);
            this.$indicators = this.$element.find('.carousel-indicators');
            this.options = options;
            this.paused = null;
            this.sliding = null;
            this.interval = null;
            this.$active = null;
            this.$items = null;
            this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));
            this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
          };

          Carousel.VERSION = '3.4.1';
          Carousel.TRANSITION_DURATION = 600;
          Carousel.DEFAULTS = {
            interval: 5000,
            pause: 'hover',
            wrap: true,
            keyboard: true
          };

          Carousel.prototype.keydown = function (e) {
            if (/input|textarea/i.test(e.target.tagName)) return;

            switch (e.which) {
              case 37:
                this.prev();
                break;

              case 39:
                this.next();
                break;

              default:
                return;
            }

            e.preventDefault();
          };

          Carousel.prototype.cycle = function (e) {
            e || (this.paused = false);
            this.interval && clearInterval(this.interval);
            this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
            return this;
          };

          Carousel.prototype.getItemIndex = function (item) {
            this.$items = item.parent().children('.item');
            return this.$items.index(item || this.$active);
          };

          Carousel.prototype.getItemForDirection = function (direction, active) {
            var activeIndex = this.getItemIndex(active);
            var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
            if (willWrap && !this.options.wrap) return active;
            var delta = direction == 'prev' ? -1 : 1;
            var itemIndex = (activeIndex + delta) % this.$items.length;
            return this.$items.eq(itemIndex);
          };

          Carousel.prototype.to = function (pos) {
            var that = this;
            var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));
            if (pos > this.$items.length - 1 || pos < 0) return;
            if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
              that.to(pos);
            }); // yes, "slid"

            if (activeIndex == pos) return this.pause().cycle();
            return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
          };

          Carousel.prototype.pause = function (e) {
            e || (this.paused = true);

            if (this.$element.find('.next, .prev').length && $.support.transition) {
              this.$element.trigger($.support.transition.end);
              this.cycle(true);
            }

            this.interval = clearInterval(this.interval);
            return this;
          };

          Carousel.prototype.next = function () {
            if (this.sliding) return;
            return this.slide('next');
          };

          Carousel.prototype.prev = function () {
            if (this.sliding) return;
            return this.slide('prev');
          };

          Carousel.prototype.slide = function (type, next) {
            var $active = this.$element.find('.item.active');
            var $next = next || this.getItemForDirection(type, $active);
            var isCycling = this.interval;
            var direction = type == 'next' ? 'left' : 'right';
            var that = this;
            if ($next.hasClass('active')) return this.sliding = false;
            var relatedTarget = $next[0];
            var slideEvent = $.Event('slide.bs.carousel', {
              relatedTarget: relatedTarget,
              direction: direction
            });
            this.$element.trigger(slideEvent);
            if (slideEvent.isDefaultPrevented()) return;
            this.sliding = true;
            isCycling && this.pause();

            if (this.$indicators.length) {
              this.$indicators.find('.active').removeClass('active');
              var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
              $nextIndicator && $nextIndicator.addClass('active');
            }

            var slidEvent = $.Event('slid.bs.carousel', {
              relatedTarget: relatedTarget,
              direction: direction
            }); // yes, "slid"

            if ($.support.transition && this.$element.hasClass('slide')) {
              $next.addClass(type);

              if (_typeof2($next) === 'object' && $next.length) {
                $next[0].offsetWidth; // force reflow
              }

              $active.addClass(direction);
              $next.addClass(direction);
              $active.one('bsTransitionEnd', function () {
                $next.removeClass([type, direction].join(' ')).addClass('active');
                $active.removeClass(['active', direction].join(' '));
                that.sliding = false;
                setTimeout(function () {
                  that.$element.trigger(slidEvent);
                }, 0);
              }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
            } else {
              $active.removeClass('active');
              $next.addClass('active');
              this.sliding = false;
              this.$element.trigger(slidEvent);
            }

            isCycling && this.cycle();
            return this;
          }; // CAROUSEL PLUGIN DEFINITION
          // ==========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.carousel');
              var options = $.extend({}, Carousel.DEFAULTS, $this.data(), _typeof2(option) == 'object' && option);
              var action = typeof option == 'string' ? option : options.slide;
              if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
              if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
            });
          }

          var old = $.fn.carousel;
          $.fn.carousel = Plugin;
          $.fn.carousel.Constructor = Carousel; // CAROUSEL NO CONFLICT
          // ====================

          $.fn.carousel.noConflict = function () {
            $.fn.carousel = old;
            return this;
          }; // CAROUSEL DATA-API
          // =================


          var clickHandler = function clickHandler(e) {
            var $this = $(this);
            var href = $this.attr('href');

            if (href) {
              href = href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7
            }

            var target = $this.attr('data-target') || href;
            var $target = $(document).find(target);
            if (!$target.hasClass('carousel')) return;
            var options = $.extend({}, $target.data(), $this.data());
            var slideIndex = $this.attr('data-slide-to');
            if (slideIndex) options.interval = false;
            Plugin.call($target, options);

            if (slideIndex) {
              $target.data('bs.carousel').to(slideIndex);
            }

            e.preventDefault();
          };

          $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);
          $(window).on('load', function () {
            $('[data-ride="carousel"]').each(function () {
              var $carousel = $(this);
              Plugin.call($carousel, $carousel.data());
            });
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: collapse.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#collapse
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        /* jshint latedef: false */

        +function ($) {
          'use strict'; // COLLAPSE PUBLIC CLASS DEFINITION
          // ================================

          var Collapse = function Collapse(element, options) {
            this.$element = $(element);
            this.options = $.extend({}, Collapse.DEFAULTS, options);
            this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
            this.transitioning = null;

            if (this.options.parent) {
              this.$parent = this.getParent();
            } else {
              this.addAriaAndCollapsedClass(this.$element, this.$trigger);
            }

            if (this.options.toggle) this.toggle();
          };

          Collapse.VERSION = '3.4.1';
          Collapse.TRANSITION_DURATION = 350;
          Collapse.DEFAULTS = {
            toggle: true
          };

          Collapse.prototype.dimension = function () {
            var hasWidth = this.$element.hasClass('width');
            return hasWidth ? 'width' : 'height';
          };

          Collapse.prototype.show = function () {
            if (this.transitioning || this.$element.hasClass('in')) return;
            var activesData;
            var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

            if (actives && actives.length) {
              activesData = actives.data('bs.collapse');
              if (activesData && activesData.transitioning) return;
            }

            var startEvent = $.Event('show.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented()) return;

            if (actives && actives.length) {
              Plugin.call(actives, 'hide');
              activesData || actives.data('bs.collapse', null);
            }

            var dimension = this.dimension();
            this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);
            this.$trigger.removeClass('collapsed').attr('aria-expanded', true);
            this.transitioning = 1;

            var complete = function complete() {
              this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
              this.transitioning = 0;
              this.$element.trigger('shown.bs.collapse');
            };

            if (!$.support.transition) return complete.call(this);
            var scrollSize = $.camelCase(['scroll', dimension].join('-'));
            this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
          };

          Collapse.prototype.hide = function () {
            if (this.transitioning || !this.$element.hasClass('in')) return;
            var startEvent = $.Event('hide.bs.collapse');
            this.$element.trigger(startEvent);
            if (startEvent.isDefaultPrevented()) return;
            var dimension = this.dimension();
            this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
            this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);
            this.$trigger.addClass('collapsed').attr('aria-expanded', false);
            this.transitioning = 1;

            var complete = function complete() {
              this.transitioning = 0;
              this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
            };

            if (!$.support.transition) return complete.call(this);
            this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
          };

          Collapse.prototype.toggle = function () {
            this[this.$element.hasClass('in') ? 'hide' : 'show']();
          };

          Collapse.prototype.getParent = function () {
            return $(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
              var $element = $(element);
              this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
            }, this)).end();
          };

          Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
            var isOpen = $element.hasClass('in');
            $element.attr('aria-expanded', isOpen);
            $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
          };

          function getTargetFromTrigger($trigger) {
            var href;
            var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

            return $(document).find(target);
          } // COLLAPSE PLUGIN DEFINITION
          // ==========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.collapse');
              var options = $.extend({}, Collapse.DEFAULTS, $this.data(), _typeof2(option) == 'object' && option);
              if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
              if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.collapse;
          $.fn.collapse = Plugin;
          $.fn.collapse.Constructor = Collapse; // COLLAPSE NO CONFLICT
          // ====================

          $.fn.collapse.noConflict = function () {
            $.fn.collapse = old;
            return this;
          }; // COLLAPSE DATA-API
          // =================


          $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
            var $this = $(this);
            if (!$this.attr('data-target')) e.preventDefault();
            var $target = getTargetFromTrigger($this);
            var data = $target.data('bs.collapse');
            var option = data ? 'toggle' : $this.data();
            Plugin.call($target, option);
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: dropdown.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#dropdowns
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // DROPDOWN CLASS DEFINITION
          // =========================

          var backdrop = '.dropdown-backdrop';
          var toggle = '[data-toggle="dropdown"]';

          var Dropdown = function Dropdown(element) {
            $(element).on('click.bs.dropdown', this.toggle);
          };

          Dropdown.VERSION = '3.4.1';

          function getParent($this) {
            var selector = $this.attr('data-target');

            if (!selector) {
              selector = $this.attr('href');
              selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
            }

            var $parent = selector !== '#' ? $(document).find(selector) : null;
            return $parent && $parent.length ? $parent : $this.parent();
          }

          function clearMenus(e) {
            if (e && e.which === 3) return;
            $(backdrop).remove();
            $(toggle).each(function () {
              var $this = $(this);
              var $parent = getParent($this);
              var relatedTarget = {
                relatedTarget: this
              };
              if (!$parent.hasClass('open')) return;
              if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;
              $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
              if (e.isDefaultPrevented()) return;
              $this.attr('aria-expanded', 'false');
              $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
            });
          }

          Dropdown.prototype.toggle = function (e) {
            var $this = $(this);
            if ($this.is('.disabled, :disabled')) return;
            var $parent = getParent($this);
            var isActive = $parent.hasClass('open');
            clearMenus();

            if (!isActive) {
              if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
                // if mobile we use a backdrop because click events don't delegate
                $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
              }

              var relatedTarget = {
                relatedTarget: this
              };
              $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));
              if (e.isDefaultPrevented()) return;
              $this.trigger('focus').attr('aria-expanded', 'true');
              $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
            }

            return false;
          };

          Dropdown.prototype.keydown = function (e) {
            if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;
            var $this = $(this);
            e.preventDefault();
            e.stopPropagation();
            if ($this.is('.disabled, :disabled')) return;
            var $parent = getParent($this);
            var isActive = $parent.hasClass('open');

            if (!isActive && e.which != 27 || isActive && e.which == 27) {
              if (e.which == 27) $parent.find(toggle).trigger('focus');
              return $this.trigger('click');
            }

            var desc = ' li:not(.disabled):visible a';
            var $items = $parent.find('.dropdown-menu' + desc);
            if (!$items.length) return;
            var index = $items.index(e.target);
            if (e.which == 38 && index > 0) index--; // up

            if (e.which == 40 && index < $items.length - 1) index++; // down

            if (!~index) index = 0;
            $items.eq(index).trigger('focus');
          }; // DROPDOWN PLUGIN DEFINITION
          // ==========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.dropdown');
              if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
              if (typeof option == 'string') data[option].call($this);
            });
          }

          var old = $.fn.dropdown;
          $.fn.dropdown = Plugin;
          $.fn.dropdown.Constructor = Dropdown; // DROPDOWN NO CONFLICT
          // ====================

          $.fn.dropdown.noConflict = function () {
            $.fn.dropdown = old;
            return this;
          }; // APPLY TO STANDARD DROPDOWN ELEMENTS
          // ===================================


          $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
            e.stopPropagation();
          }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
        }(jQuery);
        /* ========================================================================
         * Bootstrap: modal.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#modals
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // MODAL CLASS DEFINITION
          // ======================

          var Modal = function Modal(element, options) {
            this.options = options;
            this.$body = $(document.body);
            this.$element = $(element);
            this.$dialog = this.$element.find('.modal-dialog');
            this.$backdrop = null;
            this.isShown = null;
            this.originalBodyPad = null;
            this.scrollbarWidth = 0;
            this.ignoreBackdropClick = false;
            this.fixedContent = '.navbar-fixed-top, .navbar-fixed-bottom';

            if (this.options.remote) {
              this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
                this.$element.trigger('loaded.bs.modal');
              }, this));
            }
          };

          Modal.VERSION = '3.4.1';
          Modal.TRANSITION_DURATION = 300;
          Modal.BACKDROP_TRANSITION_DURATION = 150;
          Modal.DEFAULTS = {
            backdrop: true,
            keyboard: true,
            show: true
          };

          Modal.prototype.toggle = function (_relatedTarget) {
            return this.isShown ? this.hide() : this.show(_relatedTarget);
          };

          Modal.prototype.show = function (_relatedTarget) {
            var that = this;
            var e = $.Event('show.bs.modal', {
              relatedTarget: _relatedTarget
            });
            this.$element.trigger(e);
            if (this.isShown || e.isDefaultPrevented()) return;
            this.isShown = true;
            this.checkScrollbar();
            this.setScrollbar();
            this.$body.addClass('modal-open');
            this.escape();
            this.resize();
            this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
            this.$dialog.on('mousedown.dismiss.bs.modal', function () {
              that.$element.one('mouseup.dismiss.bs.modal', function (e) {
                if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
              });
            });
            this.backdrop(function () {
              var transition = $.support.transition && that.$element.hasClass('fade');

              if (!that.$element.parent().length) {
                that.$element.appendTo(that.$body); // don't move modals dom position
              }

              that.$element.show().scrollTop(0);
              that.adjustDialog();

              if (transition) {
                that.$element[0].offsetWidth; // force reflow
              }

              that.$element.addClass('in');
              that.enforceFocus();
              var e = $.Event('shown.bs.modal', {
                relatedTarget: _relatedTarget
              });
              transition ? that.$dialog // wait for modal to slide in
              .one('bsTransitionEnd', function () {
                that.$element.trigger('focus').trigger(e);
              }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
            });
          };

          Modal.prototype.hide = function (e) {
            if (e) e.preventDefault();
            e = $.Event('hide.bs.modal');
            this.$element.trigger(e);
            if (!this.isShown || e.isDefaultPrevented()) return;
            this.isShown = false;
            this.escape();
            this.resize();
            $(document).off('focusin.bs.modal');
            this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');
            this.$dialog.off('mousedown.dismiss.bs.modal');
            $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
          };

          Modal.prototype.enforceFocus = function () {
            $(document).off('focusin.bs.modal') // guard against infinite focus loop
            .on('focusin.bs.modal', $.proxy(function (e) {
              if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.trigger('focus');
              }
            }, this));
          };

          Modal.prototype.escape = function () {
            if (this.isShown && this.options.keyboard) {
              this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
                e.which == 27 && this.hide();
              }, this));
            } else if (!this.isShown) {
              this.$element.off('keydown.dismiss.bs.modal');
            }
          };

          Modal.prototype.resize = function () {
            if (this.isShown) {
              $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
            } else {
              $(window).off('resize.bs.modal');
            }
          };

          Modal.prototype.hideModal = function () {
            var that = this;
            this.$element.hide();
            this.backdrop(function () {
              that.$body.removeClass('modal-open');
              that.resetAdjustments();
              that.resetScrollbar();
              that.$element.trigger('hidden.bs.modal');
            });
          };

          Modal.prototype.removeBackdrop = function () {
            this.$backdrop && this.$backdrop.remove();
            this.$backdrop = null;
          };

          Modal.prototype.backdrop = function (callback) {
            var that = this;
            var animate = this.$element.hasClass('fade') ? 'fade' : '';

            if (this.isShown && this.options.backdrop) {
              var doAnimate = $.support.transition && animate;
              this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);
              this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
                if (this.ignoreBackdropClick) {
                  this.ignoreBackdropClick = false;
                  return;
                }

                if (e.target !== e.currentTarget) return;
                this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
              }, this));
              if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

              this.$backdrop.addClass('in');
              if (!callback) return;
              doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
            } else if (!this.isShown && this.$backdrop) {
              this.$backdrop.removeClass('in');

              var callbackRemove = function callbackRemove() {
                that.removeBackdrop();
                callback && callback();
              };

              $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
            } else if (callback) {
              callback();
            }
          }; // these following methods are used to handle overflowing modals


          Modal.prototype.handleUpdate = function () {
            this.adjustDialog();
          };

          Modal.prototype.adjustDialog = function () {
            var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
            this.$element.css({
              paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
              paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
            });
          };

          Modal.prototype.resetAdjustments = function () {
            this.$element.css({
              paddingLeft: '',
              paddingRight: ''
            });
          };

          Modal.prototype.checkScrollbar = function () {
            var fullWindowWidth = window.innerWidth;

            if (!fullWindowWidth) {
              // workaround for missing window.innerWidth in IE8
              var documentElementRect = document.documentElement.getBoundingClientRect();
              fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
            }

            this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
            this.scrollbarWidth = this.measureScrollbar();
          };

          Modal.prototype.setScrollbar = function () {
            var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
            this.originalBodyPad = document.body.style.paddingRight || '';
            var scrollbarWidth = this.scrollbarWidth;

            if (this.bodyIsOverflowing) {
              this.$body.css('padding-right', bodyPad + scrollbarWidth);
              $(this.fixedContent).each(function (index, element) {
                var actualPadding = element.style.paddingRight;
                var calculatedPadding = $(element).css('padding-right');
                $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + scrollbarWidth + 'px');
              });
            }
          };

          Modal.prototype.resetScrollbar = function () {
            this.$body.css('padding-right', this.originalBodyPad);
            $(this.fixedContent).each(function (index, element) {
              var padding = $(element).data('padding-right');
              $(element).removeData('padding-right');
              element.style.paddingRight = padding ? padding : '';
            });
          };

          Modal.prototype.measureScrollbar = function () {
            // thx walsh
            var scrollDiv = document.createElement('div');
            scrollDiv.className = 'modal-scrollbar-measure';
            this.$body.append(scrollDiv);
            var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            this.$body[0].removeChild(scrollDiv);
            return scrollbarWidth;
          }; // MODAL PLUGIN DEFINITION
          // =======================


          function Plugin(option, _relatedTarget) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.modal');
              var options = $.extend({}, Modal.DEFAULTS, $this.data(), _typeof2(option) == 'object' && option);
              if (!data) $this.data('bs.modal', data = new Modal(this, options));
              if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
            });
          }

          var old = $.fn.modal;
          $.fn.modal = Plugin;
          $.fn.modal.Constructor = Modal; // MODAL NO CONFLICT
          // =================

          $.fn.modal.noConflict = function () {
            $.fn.modal = old;
            return this;
          }; // MODAL DATA-API
          // ==============


          $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
            var $this = $(this);
            var href = $this.attr('href');
            var target = $this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

            var $target = $(document).find(target);
            var option = $target.data('bs.modal') ? 'toggle' : $.extend({
              remote: !/#/.test(href) && href
            }, $target.data(), $this.data());
            if ($this.is('a')) e.preventDefault();
            $target.one('show.bs.modal', function (showEvent) {
              if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown

              $target.one('hidden.bs.modal', function () {
                $this.is(':visible') && $this.trigger('focus');
              });
            });
            Plugin.call($target, option, this);
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: tooltip.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#tooltip
         * Inspired by the original jQuery.tipsy by Jason Frame
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict';

          var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
          var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
          var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
          var DefaultWhitelist = {
            // Global attributes allowed on any supplied element below.
            '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
            a: ['target', 'href', 'title', 'rel'],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ['src', 'alt', 'title', 'width', 'height'],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: []
            /**
             * A pattern that recognizes a commonly useful subset of URLs that are safe.
             *
             * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
             */

          };
          var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
          /**
           * A pattern that matches safe data URLs. Only matches image, video and audio types.
           *
           * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
           */

          var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

          function allowedAttribute(attr, allowedAttributeList) {
            var attrName = attr.nodeName.toLowerCase();

            if ($.inArray(attrName, allowedAttributeList) !== -1) {
              if ($.inArray(attrName, uriAttrs) !== -1) {
                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
              }

              return true;
            }

            var regExp = $(allowedAttributeList).filter(function (index, value) {
              return value instanceof RegExp;
            }); // Check if a regular expression validates the attribute.

            for (var i = 0, l = regExp.length; i < l; i++) {
              if (attrName.match(regExp[i])) {
                return true;
              }
            }

            return false;
          }

          function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
            if (unsafeHtml.length === 0) {
              return unsafeHtml;
            }

            if (sanitizeFn && typeof sanitizeFn === 'function') {
              return sanitizeFn(unsafeHtml);
            } // IE 8 and below don't support createHTMLDocument


            if (!document.implementation || !document.implementation.createHTMLDocument) {
              return unsafeHtml;
            }

            var createdDocument = document.implementation.createHTMLDocument('sanitization');
            createdDocument.body.innerHTML = unsafeHtml;
            var whitelistKeys = $.map(whiteList, function (el, i) {
              return i;
            });
            var elements = $(createdDocument.body).find('*');

            for (var i = 0, len = elements.length; i < len; i++) {
              var el = elements[i];
              var elName = el.nodeName.toLowerCase();

              if ($.inArray(elName, whitelistKeys) === -1) {
                el.parentNode.removeChild(el);
                continue;
              }

              var attributeList = $.map(el.attributes, function (el) {
                return el;
              });
              var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);

              for (var j = 0, len2 = attributeList.length; j < len2; j++) {
                if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {
                  el.removeAttribute(attributeList[j].nodeName);
                }
              }
            }

            return createdDocument.body.innerHTML;
          } // TOOLTIP PUBLIC CLASS DEFINITION
          // ===============================


          var Tooltip = function Tooltip(element, options) {
            this.type = null;
            this.options = null;
            this.enabled = null;
            this.timeout = null;
            this.hoverState = null;
            this.$element = null;
            this.inState = null;
            this.init('tooltip', element, options);
          };

          Tooltip.VERSION = '3.4.1';
          Tooltip.TRANSITION_DURATION = 150;
          Tooltip.DEFAULTS = {
            animation: true,
            placement: 'top',
            selector: false,
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: 'hover focus',
            title: '',
            delay: 0,
            html: false,
            container: false,
            viewport: {
              selector: 'body',
              padding: 0
            },
            sanitize: true,
            sanitizeFn: null,
            whiteList: DefaultWhitelist
          };

          Tooltip.prototype.init = function (type, element, options) {
            this.enabled = true;
            this.type = type;
            this.$element = $(element);
            this.options = this.getOptions(options);
            this.$viewport = this.options.viewport && $(document).find($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
            this.inState = {
              click: false,
              hover: false,
              focus: false
            };

            if (this.$element[0] instanceof document.constructor && !this.options.selector) {
              throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
            }

            var triggers = this.options.trigger.split(' ');

            for (var i = triggers.length; i--;) {
              var trigger = triggers[i];

              if (trigger == 'click') {
                this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
              } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
                this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
              }
            }

            this.options.selector ? this._options = $.extend({}, this.options, {
              trigger: 'manual',
              selector: ''
            }) : this.fixTitle();
          };

          Tooltip.prototype.getDefaults = function () {
            return Tooltip.DEFAULTS;
          };

          Tooltip.prototype.getOptions = function (options) {
            var dataAttributes = this.$element.data();

            for (var dataAttr in dataAttributes) {
              if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {
                delete dataAttributes[dataAttr];
              }
            }

            options = $.extend({}, this.getDefaults(), dataAttributes, options);

            if (options.delay && typeof options.delay == 'number') {
              options.delay = {
                show: options.delay,
                hide: options.delay
              };
            }

            if (options.sanitize) {
              options.template = sanitizeHtml(options.template, options.whiteList, options.sanitizeFn);
            }

            return options;
          };

          Tooltip.prototype.getDelegateOptions = function () {
            var options = {};
            var defaults = this.getDefaults();
            this._options && $.each(this._options, function (key, value) {
              if (defaults[key] != value) options[key] = value;
            });
            return options;
          };

          Tooltip.prototype.enter = function (obj) {
            var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

            if (!self) {
              self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
              $(obj.currentTarget).data('bs.' + this.type, self);
            }

            if (obj instanceof $.Event) {
              self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
            }

            if (self.tip().hasClass('in') || self.hoverState == 'in') {
              self.hoverState = 'in';
              return;
            }

            clearTimeout(self.timeout);
            self.hoverState = 'in';
            if (!self.options.delay || !self.options.delay.show) return self.show();
            self.timeout = setTimeout(function () {
              if (self.hoverState == 'in') self.show();
            }, self.options.delay.show);
          };

          Tooltip.prototype.isInStateTrue = function () {
            for (var key in this.inState) {
              if (this.inState[key]) return true;
            }

            return false;
          };

          Tooltip.prototype.leave = function (obj) {
            var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

            if (!self) {
              self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
              $(obj.currentTarget).data('bs.' + this.type, self);
            }

            if (obj instanceof $.Event) {
              self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
            }

            if (self.isInStateTrue()) return;
            clearTimeout(self.timeout);
            self.hoverState = 'out';
            if (!self.options.delay || !self.options.delay.hide) return self.hide();
            self.timeout = setTimeout(function () {
              if (self.hoverState == 'out') self.hide();
            }, self.options.delay.hide);
          };

          Tooltip.prototype.show = function () {
            var e = $.Event('show.bs.' + this.type);

            if (this.hasContent() && this.enabled) {
              this.$element.trigger(e);
              var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
              if (e.isDefaultPrevented() || !inDom) return;
              var that = this;
              var $tip = this.tip();
              var tipId = this.getUID(this.type);
              this.setContent();
              $tip.attr('id', tipId);
              this.$element.attr('aria-describedby', tipId);
              if (this.options.animation) $tip.addClass('fade');
              var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
              var autoToken = /\s?auto?\s?/i;
              var autoPlace = autoToken.test(placement);
              if (autoPlace) placement = placement.replace(autoToken, '') || 'top';
              $tip.detach().css({
                top: 0,
                left: 0,
                display: 'block'
              }).addClass(placement).data('bs.' + this.type, this);
              this.options.container ? $tip.appendTo($(document).find(this.options.container)) : $tip.insertAfter(this.$element);
              this.$element.trigger('inserted.bs.' + this.type);
              var pos = this.getPosition();
              var actualWidth = $tip[0].offsetWidth;
              var actualHeight = $tip[0].offsetHeight;

              if (autoPlace) {
                var orgPlacement = placement;
                var viewportDim = this.getPosition(this.$viewport);
                placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
              }

              var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
              this.applyPlacement(calculatedOffset, placement);

              var complete = function complete() {
                var prevHoverState = that.hoverState;
                that.$element.trigger('shown.bs.' + that.type);
                that.hoverState = null;
                if (prevHoverState == 'out') that.leave(that);
              };

              $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
            }
          };

          Tooltip.prototype.applyPlacement = function (offset, placement) {
            var $tip = this.tip();
            var width = $tip[0].offsetWidth;
            var height = $tip[0].offsetHeight; // manually read margins because getBoundingClientRect includes difference

            var marginTop = parseInt($tip.css('margin-top'), 10);
            var marginLeft = parseInt($tip.css('margin-left'), 10); // we must check for NaN for ie 8/9

            if (isNaN(marginTop)) marginTop = 0;
            if (isNaN(marginLeft)) marginLeft = 0;
            offset.top += marginTop;
            offset.left += marginLeft; // $.fn.offset doesn't round pixel values
            // so we use setOffset directly with our own function B-0

            $.offset.setOffset($tip[0], $.extend({
              using: function using(props) {
                $tip.css({
                  top: Math.round(props.top),
                  left: Math.round(props.left)
                });
              }
            }, offset), 0);
            $tip.addClass('in'); // check to see if placing tip in new offset caused the tip to resize itself

            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;

            if (placement == 'top' && actualHeight != height) {
              offset.top = offset.top + height - actualHeight;
            }

            var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
            if (delta.left) offset.left += delta.left;else offset.top += delta.top;
            var isVertical = /top|bottom/.test(placement);
            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';
            $tip.offset(offset);
            this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
          };

          Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
            this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
          };

          Tooltip.prototype.setContent = function () {
            var $tip = this.tip();
            var title = this.getTitle();

            if (this.options.html) {
              if (this.options.sanitize) {
                title = sanitizeHtml(title, this.options.whiteList, this.options.sanitizeFn);
              }

              $tip.find('.tooltip-inner').html(title);
            } else {
              $tip.find('.tooltip-inner').text(title);
            }

            $tip.removeClass('fade in top bottom left right');
          };

          Tooltip.prototype.hide = function (callback) {
            var that = this;
            var $tip = $(this.$tip);
            var e = $.Event('hide.bs.' + this.type);

            function complete() {
              if (that.hoverState != 'in') $tip.detach();

              if (that.$element) {
                // TODO: Check whether guarding this code with this `if` is really necessary.
                that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
              }

              callback && callback();
            }

            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $tip.removeClass('in');
            $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
            this.hoverState = null;
            return this;
          };

          Tooltip.prototype.fixTitle = function () {
            var $e = this.$element;

            if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
              $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
            }
          };

          Tooltip.prototype.hasContent = function () {
            return this.getTitle();
          };

          Tooltip.prototype.getPosition = function ($element) {
            $element = $element || this.$element;
            var el = $element[0];
            var isBody = el.tagName == 'BODY';
            var elRect = el.getBoundingClientRect();

            if (elRect.width == null) {
              // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
              elRect = $.extend({}, elRect, {
                width: elRect.right - elRect.left,
                height: elRect.bottom - elRect.top
              });
            }

            var isSvg = window.SVGElement && el instanceof window.SVGElement; // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
            // See https://github.com/twbs/bootstrap/issues/20280

            var elOffset = isBody ? {
              top: 0,
              left: 0
            } : isSvg ? null : $element.offset();
            var scroll = {
              scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
            };
            var outerDims = isBody ? {
              width: $(window).width(),
              height: $(window).height()
            } : null;
            return $.extend({}, elRect, scroll, outerDims, elOffset);
          };

          Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
            return placement == 'bottom' ? {
              top: pos.top + pos.height,
              left: pos.left + pos.width / 2 - actualWidth / 2
            } : placement == 'top' ? {
              top: pos.top - actualHeight,
              left: pos.left + pos.width / 2 - actualWidth / 2
            } : placement == 'left' ? {
              top: pos.top + pos.height / 2 - actualHeight / 2,
              left: pos.left - actualWidth
            } :
            /* placement == 'right' */
            {
              top: pos.top + pos.height / 2 - actualHeight / 2,
              left: pos.left + pos.width
            };
          };

          Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
            var delta = {
              top: 0,
              left: 0
            };
            if (!this.$viewport) return delta;
            var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
            var viewportDimensions = this.getPosition(this.$viewport);

            if (/right|left/.test(placement)) {
              var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
              var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;

              if (topEdgeOffset < viewportDimensions.top) {
                // top overflow
                delta.top = viewportDimensions.top - topEdgeOffset;
              } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
                // bottom overflow
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
              }
            } else {
              var leftEdgeOffset = pos.left - viewportPadding;
              var rightEdgeOffset = pos.left + viewportPadding + actualWidth;

              if (leftEdgeOffset < viewportDimensions.left) {
                // left overflow
                delta.left = viewportDimensions.left - leftEdgeOffset;
              } else if (rightEdgeOffset > viewportDimensions.right) {
                // right overflow
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
              }
            }

            return delta;
          };

          Tooltip.prototype.getTitle = function () {
            var title;
            var $e = this.$element;
            var o = this.options;
            title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
            return title;
          };

          Tooltip.prototype.getUID = function (prefix) {
            do {
              prefix += ~~(Math.random() * 1000000);
            } while (document.getElementById(prefix));

            return prefix;
          };

          Tooltip.prototype.tip = function () {
            if (!this.$tip) {
              this.$tip = $(this.options.template);

              if (this.$tip.length != 1) {
                throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
              }
            }

            return this.$tip;
          };

          Tooltip.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
          };

          Tooltip.prototype.enable = function () {
            this.enabled = true;
          };

          Tooltip.prototype.disable = function () {
            this.enabled = false;
          };

          Tooltip.prototype.toggleEnabled = function () {
            this.enabled = !this.enabled;
          };

          Tooltip.prototype.toggle = function (e) {
            var self = this;

            if (e) {
              self = $(e.currentTarget).data('bs.' + this.type);

              if (!self) {
                self = new this.constructor(e.currentTarget, this.getDelegateOptions());
                $(e.currentTarget).data('bs.' + this.type, self);
              }
            }

            if (e) {
              self.inState.click = !self.inState.click;
              if (self.isInStateTrue()) self.enter(self);else self.leave(self);
            } else {
              self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
            }
          };

          Tooltip.prototype.destroy = function () {
            var that = this;
            clearTimeout(this.timeout);
            this.hide(function () {
              that.$element.off('.' + that.type).removeData('bs.' + that.type);

              if (that.$tip) {
                that.$tip.detach();
              }

              that.$tip = null;
              that.$arrow = null;
              that.$viewport = null;
              that.$element = null;
            });
          };

          Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {
            return sanitizeHtml(unsafeHtml, this.options.whiteList, this.options.sanitizeFn);
          }; // TOOLTIP PLUGIN DEFINITION
          // =========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.tooltip');
              var options = _typeof2(option) == 'object' && option;
              if (!data && /destroy|hide/.test(option)) return;
              if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.tooltip;
          $.fn.tooltip = Plugin;
          $.fn.tooltip.Constructor = Tooltip; // TOOLTIP NO CONFLICT
          // ===================

          $.fn.tooltip.noConflict = function () {
            $.fn.tooltip = old;
            return this;
          };
        }(jQuery);
        /* ========================================================================
         * Bootstrap: popover.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#popovers
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // POPOVER PUBLIC CLASS DEFINITION
          // ===============================

          var Popover = function Popover(element, options) {
            this.init('popover', element, options);
          };

          if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');
          Popover.VERSION = '3.4.1';
          Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
            placement: 'right',
            trigger: 'click',
            content: '',
            template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
          }); // NOTE: POPOVER EXTENDS tooltip.js
          // ================================

          Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
          Popover.prototype.constructor = Popover;

          Popover.prototype.getDefaults = function () {
            return Popover.DEFAULTS;
          };

          Popover.prototype.setContent = function () {
            var $tip = this.tip();
            var title = this.getTitle();
            var content = this.getContent();

            if (this.options.html) {
              var typeContent = _typeof2(content);

              if (this.options.sanitize) {
                title = this.sanitizeHtml(title);

                if (typeContent === 'string') {
                  content = this.sanitizeHtml(content);
                }
              }

              $tip.find('.popover-title').html(title);
              $tip.find('.popover-content').children().detach().end()[typeContent === 'string' ? 'html' : 'append'](content);
            } else {
              $tip.find('.popover-title').text(title);
              $tip.find('.popover-content').children().detach().end().text(content);
            }

            $tip.removeClass('fade top bottom left right in'); // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
            // this manually by checking the contents.

            if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
          };

          Popover.prototype.hasContent = function () {
            return this.getTitle() || this.getContent();
          };

          Popover.prototype.getContent = function () {
            var $e = this.$element;
            var o = this.options;
            return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
          };

          Popover.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.arrow');
          }; // POPOVER PLUGIN DEFINITION
          // =========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.popover');
              var options = _typeof2(option) == 'object' && option;
              if (!data && /destroy|hide/.test(option)) return;
              if (!data) $this.data('bs.popover', data = new Popover(this, options));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.popover;
          $.fn.popover = Plugin;
          $.fn.popover.Constructor = Popover; // POPOVER NO CONFLICT
          // ===================

          $.fn.popover.noConflict = function () {
            $.fn.popover = old;
            return this;
          };
        }(jQuery);
        /* ========================================================================
         * Bootstrap: scrollspy.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#scrollspy
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // SCROLLSPY CLASS DEFINITION
          // ==========================

          function ScrollSpy(element, options) {
            this.$body = $(document.body);
            this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
            this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
            this.selector = (this.options.target || '') + ' .nav li > a';
            this.offsets = [];
            this.targets = [];
            this.activeTarget = null;
            this.scrollHeight = 0;
            this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
            this.refresh();
            this.process();
          }

          ScrollSpy.VERSION = '3.4.1';
          ScrollSpy.DEFAULTS = {
            offset: 10
          };

          ScrollSpy.prototype.getScrollHeight = function () {
            return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
          };

          ScrollSpy.prototype.refresh = function () {
            var that = this;
            var offsetMethod = 'offset';
            var offsetBase = 0;
            this.offsets = [];
            this.targets = [];
            this.scrollHeight = this.getScrollHeight();

            if (!$.isWindow(this.$scrollElement[0])) {
              offsetMethod = 'position';
              offsetBase = this.$scrollElement.scrollTop();
            }

            this.$body.find(this.selector).map(function () {
              var $el = $(this);
              var href = $el.data('target') || $el.attr('href');
              var $href = /^#./.test(href) && $(href);
              return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
            }).sort(function (a, b) {
              return a[0] - b[0];
            }).each(function () {
              that.offsets.push(this[0]);
              that.targets.push(this[1]);
            });
          };

          ScrollSpy.prototype.process = function () {
            var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
            var scrollHeight = this.getScrollHeight();
            var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
            var offsets = this.offsets;
            var targets = this.targets;
            var activeTarget = this.activeTarget;
            var i;

            if (this.scrollHeight != scrollHeight) {
              this.refresh();
            }

            if (scrollTop >= maxScroll) {
              return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
            }

            if (activeTarget && scrollTop < offsets[0]) {
              this.activeTarget = null;
              return this.clear();
            }

            for (i = offsets.length; i--;) {
              activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
            }
          };

          ScrollSpy.prototype.activate = function (target) {
            this.activeTarget = target;
            this.clear();
            var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
            var active = $(selector).parents('li').addClass('active');

            if (active.parent('.dropdown-menu').length) {
              active = active.closest('li.dropdown').addClass('active');
            }

            active.trigger('activate.bs.scrollspy');
          };

          ScrollSpy.prototype.clear = function () {
            $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
          }; // SCROLLSPY PLUGIN DEFINITION
          // ===========================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.scrollspy');
              var options = _typeof2(option) == 'object' && option;
              if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.scrollspy;
          $.fn.scrollspy = Plugin;
          $.fn.scrollspy.Constructor = ScrollSpy; // SCROLLSPY NO CONFLICT
          // =====================

          $.fn.scrollspy.noConflict = function () {
            $.fn.scrollspy = old;
            return this;
          }; // SCROLLSPY DATA-API
          // ==================


          $(window).on('load.bs.scrollspy.data-api', function () {
            $('[data-spy="scroll"]').each(function () {
              var $spy = $(this);
              Plugin.call($spy, $spy.data());
            });
          });
        }(jQuery);
        /* ========================================================================
         * Bootstrap: tab.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#tabs
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // TAB CLASS DEFINITION
          // ====================

          var Tab = function Tab(element) {
            // jscs:disable requireDollarBeforejQueryAssignment
            this.element = $(element); // jscs:enable requireDollarBeforejQueryAssignment
          };

          Tab.VERSION = '3.4.1';
          Tab.TRANSITION_DURATION = 150;

          Tab.prototype.show = function () {
            var $this = this.element;
            var $ul = $this.closest('ul:not(.dropdown-menu)');
            var selector = $this.data('target');

            if (!selector) {
              selector = $this.attr('href');
              selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
            }

            if ($this.parent('li').hasClass('active')) return;
            var $previous = $ul.find('.active:last a');
            var hideEvent = $.Event('hide.bs.tab', {
              relatedTarget: $this[0]
            });
            var showEvent = $.Event('show.bs.tab', {
              relatedTarget: $previous[0]
            });
            $previous.trigger(hideEvent);
            $this.trigger(showEvent);
            if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;
            var $target = $(document).find(selector);
            this.activate($this.closest('li'), $ul);
            this.activate($target, $target.parent(), function () {
              $previous.trigger({
                type: 'hidden.bs.tab',
                relatedTarget: $this[0]
              });
              $this.trigger({
                type: 'shown.bs.tab',
                relatedTarget: $previous[0]
              });
            });
          };

          Tab.prototype.activate = function (element, container, callback) {
            var $active = container.find('> .active');
            var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

            function next() {
              $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);
              element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

              if (transition) {
                element[0].offsetWidth; // reflow for transition

                element.addClass('in');
              } else {
                element.removeClass('fade');
              }

              if (element.parent('.dropdown-menu').length) {
                element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
              }

              callback && callback();
            }

            $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
            $active.removeClass('in');
          }; // TAB PLUGIN DEFINITION
          // =====================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.tab');
              if (!data) $this.data('bs.tab', data = new Tab(this));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.tab;
          $.fn.tab = Plugin;
          $.fn.tab.Constructor = Tab; // TAB NO CONFLICT
          // ===============

          $.fn.tab.noConflict = function () {
            $.fn.tab = old;
            return this;
          }; // TAB DATA-API
          // ============


          var clickHandler = function clickHandler(e) {
            e.preventDefault();
            Plugin.call($(this), 'show');
          };

          $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
        }(jQuery);
        /* ========================================================================
         * Bootstrap: affix.js v3.4.1
         * https://getbootstrap.com/docs/3.4/javascript/#affix
         * ========================================================================
         * Copyright 2011-2019 Twitter, Inc.
         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
         * ======================================================================== */

        +function ($) {
          'use strict'; // AFFIX CLASS DEFINITION
          // ======================

          var Affix = function Affix(element, options) {
            this.options = $.extend({}, Affix.DEFAULTS, options);
            var target = this.options.target === Affix.DEFAULTS.target ? $(this.options.target) : $(document).find(this.options.target);
            this.$target = target.on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));
            this.$element = $(element);
            this.affixed = null;
            this.unpin = null;
            this.pinnedOffset = null;
            this.checkPosition();
          };

          Affix.VERSION = '3.4.1';
          Affix.RESET = 'affix affix-top affix-bottom';
          Affix.DEFAULTS = {
            offset: 0,
            target: window
          };

          Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
            var scrollTop = this.$target.scrollTop();
            var position = this.$element.offset();
            var targetHeight = this.$target.height();
            if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

            if (this.affixed == 'bottom') {
              if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
              return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
            }

            var initializing = this.affixed == null;
            var colliderTop = initializing ? scrollTop : position.top;
            var colliderHeight = initializing ? targetHeight : height;
            if (offsetTop != null && scrollTop <= offsetTop) return 'top';
            if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';
            return false;
          };

          Affix.prototype.getPinnedOffset = function () {
            if (this.pinnedOffset) return this.pinnedOffset;
            this.$element.removeClass(Affix.RESET).addClass('affix');
            var scrollTop = this.$target.scrollTop();
            var position = this.$element.offset();
            return this.pinnedOffset = position.top - scrollTop;
          };

          Affix.prototype.checkPositionWithEventLoop = function () {
            setTimeout($.proxy(this.checkPosition, this), 1);
          };

          Affix.prototype.checkPosition = function () {
            if (!this.$element.is(':visible')) return;
            var height = this.$element.height();
            var offset = this.options.offset;
            var offsetTop = offset.top;
            var offsetBottom = offset.bottom;
            var scrollHeight = Math.max($(document).height(), $(document.body).height());
            if (_typeof2(offset) != 'object') offsetBottom = offsetTop = offset;
            if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
            if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);
            var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

            if (this.affixed != affix) {
              if (this.unpin != null) this.$element.css('top', '');
              var affixType = 'affix' + (affix ? '-' + affix : '');
              var e = $.Event(affixType + '.bs.affix');
              this.$element.trigger(e);
              if (e.isDefaultPrevented()) return;
              this.affixed = affix;
              this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;
              this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
            }

            if (affix == 'bottom') {
              this.$element.offset({
                top: scrollHeight - height - offsetBottom
              });
            }
          }; // AFFIX PLUGIN DEFINITION
          // =======================


          function Plugin(option) {
            return this.each(function () {
              var $this = $(this);
              var data = $this.data('bs.affix');
              var options = _typeof2(option) == 'object' && option;
              if (!data) $this.data('bs.affix', data = new Affix(this, options));
              if (typeof option == 'string') data[option]();
            });
          }

          var old = $.fn.affix;
          $.fn.affix = Plugin;
          $.fn.affix.Constructor = Affix; // AFFIX NO CONFLICT
          // =================

          $.fn.affix.noConflict = function () {
            $.fn.affix = old;
            return this;
          }; // AFFIX DATA-API
          // ==============


          $(window).on('load', function () {
            $('[data-spy="affix"]').each(function () {
              var $spy = $(this);
              var data = $spy.data();
              data.offset = data.offset || {};
              if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
              if (data.offsetTop != null) data.offset.top = data.offsetTop;
              Plugin.call($spy, data);
            });
          });
        }(jQuery);
        ;
        browserify_shim__define__module__export__(typeof bootstrap != "undefined" ? bootstrap : window.bootstrap);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "jquery": "Z0jGCa"
  }],
  64: [function (require, module, exports) {}, {}],
  65: [function (require, module, exports) {
    (function (global) {
      /*! http://mths.be/punycode v1.2.4 by @mathias */
      ;

      (function (root) {
        /** Detect free variables */
        var freeExports = _typeof2(exports) == 'object' && exports;
        var freeModule = _typeof2(module) == 'object' && module && module.exports == freeExports && module;
        var freeGlobal = _typeof2(global) == 'object' && global;

        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
          root = freeGlobal;
        }
        /**
         * The `punycode` object.
         * @name punycode
         * @type Object
         */


        var punycode,

        /** Highest positive signed 32-bit float value */
        maxInt = 2147483647,
            // aka. 0x7FFFFFFF or 2^31-1

        /** Bootstring parameters */
        base = 36,
            tMin = 1,
            tMax = 26,
            skew = 38,
            damp = 700,
            initialBias = 72,
            initialN = 128,
            // 0x80
        delimiter = '-',
            // '\x2D'

        /** Regular expressions */
        regexPunycode = /^xn--/,
            regexNonASCII = /[^ -~]/,
            // unprintable ASCII chars + non-ASCII chars
        regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g,
            // RFC 3490 separators

        /** Error messages */
        errors = {
          'overflow': 'Overflow: input needs wider integers to process',
          'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
          'invalid-input': 'Invalid input'
        },

        /** Convenience shortcuts */
        baseMinusTMin = base - tMin,
            floor = Math.floor,
            stringFromCharCode = String.fromCharCode,

        /** Temporary variable */
        key;
        /*--------------------------------------------------------------------------*/

        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */

        function error(type) {
          throw RangeError(errors[type]);
        }
        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */


        function map(array, fn) {
          var length = array.length;

          while (length--) {
            array[length] = fn(array[length]);
          }

          return array;
        }
        /**
         * A simple `Array#map`-like wrapper to work with domain name strings.
         * @private
         * @param {String} domain The domain name.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */


        function mapDomain(string, fn) {
          return map(string.split(regexSeparators), fn).join('.');
        }
        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <http://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */


        function ucs2decode(string) {
          var output = [],
              counter = 0,
              length = string.length,
              value,
              extra;

          while (counter < length) {
            value = string.charCodeAt(counter++);

            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);

              if ((extra & 0xFC00) == 0xDC00) {
                // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }

          return output;
        }
        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */


        function ucs2encode(array) {
          return map(array, function (value) {
            var output = '';

            if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
            }

            output += stringFromCharCode(value);
            return output;
          }).join('');
        }
        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */


        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }

          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }

          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }

          return base;
        }
        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */


        function digitToBasic(digit, flag) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * http://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */


        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);

          for (;
          /* no initialization */
          delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }

          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */


        function decode(input) {
          // Don't use UCS-2
          var output = [],
              inputLength = input.length,
              out,
              i = 0,
              n = initialN,
              bias = initialBias,
              basic,
              j,
              index,
              oldi,
              w,
              k,
              digit,
              t,

          /** Cached calculation results */
          baseMinusT; // Handle the basic code points: let `basic` be the number of input code
          // points before the last delimiter, or `0` if there is none, then copy
          // the first basic code points to the output.

          basic = input.lastIndexOf(delimiter);

          if (basic < 0) {
            basic = 0;
          }

          for (j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
              error('not-basic');
            }

            output.push(input.charCodeAt(j));
          } // Main decoding loop: start just after the last delimiter if any basic code
          // points were copied; start at the beginning otherwise.


          for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
          /* no final expression */
          {
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for (oldi = i, w = 1, k = base;;
            /* no condition */
            k += base) {
              if (index >= inputLength) {
                error('invalid-input');
              }

              digit = basicToDigit(input.charCodeAt(index++));

              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error('overflow');
              }

              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (digit < t) {
                break;
              }

              baseMinusT = base - t;

              if (w > floor(maxInt / baseMinusT)) {
                error('overflow');
              }

              w *= baseMinusT;
            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:

            if (floor(i / out) > maxInt - n) {
              error('overflow');
            }

            n += floor(i / out);
            i %= out; // Insert `n` at position `i` of the output

            output.splice(i++, 0, n);
          }

          return ucs2encode(output);
        }
        /**
         * Converts a string of Unicode symbols to a Punycode string of ASCII-only
         * symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */


        function encode(input) {
          var n,
              delta,
              handledCPCount,
              basicLength,
              bias,
              j,
              m,
              q,
              k,
              t,
              currentValue,
              output = [],

          /** `inputLength` will hold the number of code points in `input`. */
          inputLength,

          /** Cached calculation results */
          handledCPCountPlusOne,
              baseMinusT,
              qMinusT; // Convert the input in UCS-2 to Unicode

          input = ucs2decode(input); // Cache the length

          inputLength = input.length; // Initialize the state

          n = initialN;
          delta = 0;
          bias = initialBias; // Handle the basic code points

          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];

            if (currentValue < 0x80) {
              output.push(stringFromCharCode(currentValue));
            }
          }

          handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
          // `basicLength` is the number of basic code points.
          // Finish the basic string - if it is not empty - with a delimiter

          if (basicLength) {
            output.push(delimiter);
          } // Main encoding loop:


          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow


            handledCPCountPlusOne = handledCPCount + 1;

            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error('overflow');
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < n && ++delta > maxInt) {
                error('overflow');
              }

              if (currentValue == n) {
                // Represent delta as a generalized variable-length integer
                for (q = delta, k = base;;
                /* no condition */
                k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                  if (q < t) {
                    break;
                  }

                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                  q = floor(qMinusT / baseMinusT);
                }

                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }

            ++delta;
            ++n;
          }

          return output.join('');
        }
        /**
         * Converts a Punycode string representing a domain name to Unicode. Only the
         * Punycoded parts of the domain name will be converted, i.e. it doesn't
         * matter if you call it on a string that has already been converted to
         * Unicode.
         * @memberOf punycode
         * @param {String} domain The Punycode domain name to convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */


        function toUnicode(domain) {
          return mapDomain(domain, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        }
        /**
         * Converts a Unicode string representing a domain name to Punycode. Only the
         * non-ASCII parts of the domain name will be converted, i.e. it doesn't
         * matter if you call it with a domain that's already in ASCII.
         * @memberOf punycode
         * @param {String} domain The domain name to convert, as a Unicode string.
         * @returns {String} The Punycode representation of the given domain name.
         */


        function toASCII(domain) {
          return mapDomain(domain, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
          });
        }
        /*--------------------------------------------------------------------------*/

        /** Define the public API */


        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          'version': '1.2.4',

          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <http://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
          },
          'decode': decode,
          'encode': encode,
          'toASCII': toASCII,
          'toUnicode': toUnicode
        };
        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:

        if (typeof define == 'function' && _typeof2(define.amd) == 'object' && define.amd) {
          define('punycode', function () {
            return punycode;
          });
        } else if (freeExports && !freeExports.nodeType) {
          if (freeModule) {
            // in Node.js or RingoJS v0.8.0+
            freeModule.exports = punycode;
          } else {
            // in Narwhal or RingoJS v0.7.0-
            for (key in punycode) {
              punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
          }
        } else {
          // in Rhino or a web browser
          root.punycode = punycode;
        }
      })(this);
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "KUSO1n": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        ;
        global.jQueryUniform = require("jQueryUniform");
        /**
         * bxSlider v4.2.1d
         * Copyright 2013-2017 Steven Wanderski
         * Written while drinking Belgian ales and listening to jazz
         * Licensed under MIT (http://opensource.org/licenses/MIT)
         */

        ;

        (function ($) {
          var defaults = {
            // GENERAL
            mode: 'horizontal',
            slideSelector: '',
            infiniteLoop: true,
            hideControlOnEnd: false,
            speed: 500,
            easing: null,
            slideMargin: 0,
            startSlide: 0,
            randomStart: false,
            captions: false,
            ticker: false,
            tickerHover: false,
            adaptiveHeight: false,
            adaptiveHeightSpeed: 500,
            video: false,
            useCSS: true,
            preloadImages: 'visible',
            responsive: true,
            slideZIndex: 50,
            wrapperClass: 'bx-wrapper',
            // TOUCH
            touchEnabled: true,
            swipeThreshold: 50,
            oneToOneTouch: true,
            preventDefaultSwipeX: true,
            preventDefaultSwipeY: false,
            // ACCESSIBILITY
            ariaLive: true,
            ariaHidden: true,
            // KEYBOARD
            keyboardEnabled: false,
            // PAGER
            pager: true,
            pagerType: 'full',
            pagerShortSeparator: ' / ',
            pagerSelector: null,
            buildPager: null,
            pagerCustom: null,
            // CONTROLS
            controls: true,
            nextText: 'Next',
            prevText: 'Prev',
            nextSelector: null,
            prevSelector: null,
            autoControls: false,
            startText: 'Start',
            stopText: 'Stop',
            autoControlsCombine: false,
            autoControlsSelector: null,
            // AUTO
            auto: false,
            pause: 4000,
            autoStart: true,
            autoDirection: 'next',
            stopAutoOnClick: false,
            autoHover: false,
            autoDelay: 0,
            autoSlideForOnePage: false,
            // CAROUSEL
            minSlides: 1,
            maxSlides: 1,
            moveSlides: 0,
            slideWidth: 0,
            shrinkItems: false,
            // CALLBACKS
            onSliderLoad: function onSliderLoad() {
              return true;
            },
            onSlideBefore: function onSlideBefore() {
              return true;
            },
            onSlideAfter: function onSlideAfter() {
              return true;
            },
            onSlideNext: function onSlideNext() {
              return true;
            },
            onSlidePrev: function onSlidePrev() {
              return true;
            },
            onSliderResize: function onSliderResize() {
              return true;
            },
            onAutoChange: function onAutoChange() {
              return true;
            } //calls when auto slides starts and stops

          };

          $.fn.bxSlider = function (options) {
            if (this.length === 0) {
              return this;
            } // support multiple elements


            if (this.length > 1) {
              this.each(function () {
                $(this).bxSlider(options);
              });
              return this;
            } // create a namespace to be used throughout the plugin


            var slider = {},
                // set a reference to our slider element
            el = this,
                // get the original window dimens (thanks a lot IE)
            windowWidth = $(window).width(),
                windowHeight = $(window).height(); // Return if slider is already initialized

            if ($(el).data('bxSlider')) {
              return;
            }
            /**
             * ===================================================================================
             * = PRIVATE FUNCTIONS
             * ===================================================================================
             */

            /**
             * Initializes namespace settings to be used throughout plugin
             */


            var init = function init() {
              // Return if slider is already initialized
              if ($(el).data('bxSlider')) {
                return;
              } // merge user-supplied options with the defaults


              slider.settings = $.extend({}, defaults, options); // parse slideWidth setting

              slider.settings.slideWidth = parseInt(slider.settings.slideWidth); // store the original children

              slider.children = el.children(slider.settings.slideSelector); // check if actual number of slides is less than minSlides / maxSlides

              if (slider.children.length < slider.settings.minSlides) {
                slider.settings.minSlides = slider.children.length;
              }

              if (slider.children.length < slider.settings.maxSlides) {
                slider.settings.maxSlides = slider.children.length;
              } // if random start, set the startSlide setting to random number


              if (slider.settings.randomStart) {
                slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);
              } // store active slide information


              slider.active = {
                index: slider.settings.startSlide
              }; // store if the slider is in carousel mode (displaying / moving multiple slides)

              slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1; // if carousel, force preloadImages = 'all'

              if (slider.carousel) {
                slider.settings.preloadImages = 'all';
              } // calculate the min / max width thresholds based on min / max number of slides
              // used to setup and update carousel slides dimensions


              slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin;
              slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin; // store the current state of the slider (if currently animating, working is true)

              slider.working = false; // initialize the controls object

              slider.controls = {}; // initialize an auto interval

              slider.interval = null; // determine which property to use for transitions

              slider.animProp = slider.settings.mode === 'vertical' ? 'top' : 'left'; // determine if hardware acceleration can be used

              slider.usingCSS = slider.settings.useCSS && slider.settings.mode !== 'fade' && function () {
                // create our test div element
                var div = document.createElement('div'),
                    // css transition properties
                props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']; // test for each property

                for (var i = 0; i < props.length; i++) {
                  if (div.style[props[i]] !== undefined) {
                    slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
                    slider.animProp = '-' + slider.cssPrefix + '-transform';
                    return true;
                  }
                }

                return false;
              }(); // if vertical mode always make maxSlides and minSlides equal


              if (slider.settings.mode === 'vertical') {
                slider.settings.maxSlides = slider.settings.minSlides;
              } // save original style data


              el.data('origStyle', el.attr('style'));
              el.children(slider.settings.slideSelector).each(function () {
                $(this).data('origStyle', $(this).attr('style'));
              }); // perform all DOM / CSS modifications

              setup();
            };
            /**
             * Performs all DOM and CSS modifications
             */


            var setup = function setup() {
              var preloadSelector = slider.children.eq(slider.settings.startSlide); // set the default preload selector (visible)
              // wrap el in a wrapper

              el.wrap('<div class="' + slider.settings.wrapperClass + '"><div class="bx-viewport"></div></div>'); // store a namespace reference to .bx-viewport

              slider.viewport = el.parent(); // add aria-live if the setting is enabled and ticker mode is disabled

              if (slider.settings.ariaLive && !slider.settings.ticker) {
                slider.viewport.attr('aria-live', 'polite');
              } // add a loading div to display while images are loading


              slider.loader = $('<div class="bx-loading" />');
              slider.viewport.prepend(slider.loader); // set el to a massive width, to hold any needed slides
              // also strip any margin and padding from el

              el.css({
                width: slider.settings.mode === 'horizontal' ? slider.children.length * 1000 + 215 + '%' : 'auto',
                position: 'relative'
              }); // if using CSS, add the easing property

              if (slider.usingCSS && slider.settings.easing) {
                el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing); // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
              } else if (!slider.settings.easing) {
                slider.settings.easing = 'swing';
              } // make modifications to the viewport (.bx-viewport)


              slider.viewport.css({
                width: '100%',
                overflow: 'hidden',
                position: 'relative'
              });
              slider.viewport.parent().css({
                maxWidth: getViewportMaxWidth()
              }); // apply css to all slider children

              slider.children.css({
                // the float attribute is a reserved word in compressors like YUI compressor and need to be quoted #48
                'float': slider.settings.mode === 'horizontal' ? 'left' : 'none',
                listStyle: 'none',
                position: 'relative'
              }); // apply the calculated width after the float is applied to prevent scrollbar interference

              slider.children.css('width', getSlideWidth()); // if slideMargin is supplied, add the css

              if (slider.settings.mode === 'horizontal' && slider.settings.slideMargin > 0) {
                slider.children.css('marginRight', slider.settings.slideMargin);
              }

              if (slider.settings.mode === 'vertical' && slider.settings.slideMargin > 0) {
                slider.children.css('marginBottom', slider.settings.slideMargin);
              } // if "fade" mode, add positioning and z-index CSS


              if (slider.settings.mode === 'fade') {
                slider.children.css({
                  position: 'absolute',
                  zIndex: 0,
                  display: 'none'
                }); // prepare the z-index on the showing element

                slider.children.eq(slider.settings.startSlide).css({
                  zIndex: slider.settings.slideZIndex,
                  display: 'block'
                });
              } // create an element to contain all slider controls (pager, start / stop, etc)


              slider.controls.el = $('<div class="bx-controls" />'); // if captions are requested, add them

              if (slider.settings.captions) {
                appendCaptions();
              } // check if startSlide is last slide


              slider.active.last = slider.settings.startSlide === getPagerQty() - 1; // if video is true, set up the fitVids plugin

              if (slider.settings.video) {
                el.fitVids();
              } //preloadImages


              if (slider.settings.preloadImages === 'none') {
                preloadSelector = null;
              } else if (slider.settings.preloadImages === 'all' || slider.settings.ticker) {
                preloadSelector = slider.children;
              } // only check for control addition if not in "ticker" mode


              if (!slider.settings.ticker) {
                // if controls are requested, add them
                if (slider.settings.controls) {
                  appendControls();
                } // if auto is true, and auto controls are requested, add them


                if (slider.settings.auto && slider.settings.autoControls) {
                  appendControlsAuto();
                } // if pager is requested, add it


                if (slider.settings.pager) {
                  appendPager();
                } // if any control option is requested, add the controls wrapper


                if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) {
                  slider.viewport.after(slider.controls.el);
                } // if ticker mode, do not allow a pager

              } else {
                slider.settings.pager = false;
              }

              if (preloadSelector === null) {
                start();
              } else {
                loadElements(preloadSelector, start);
              }
            };

            var loadElements = function loadElements(selector, callback) {
              var total = selector.find('img:not([src=""]), iframe').length,
                  count = 0;

              if (total === 0) {
                callback();
                return;
              }

              selector.find('img:not([src=""]), iframe').each(function () {
                $(this).one('load error', function () {
                  if (++count === total) {
                    callback();
                  }
                }).each(function () {
                  if (this.complete || this.src == '') {
                    $(this).trigger('load');
                  }
                });
              });
            };
            /**
             * Start the slider
             */


            var start = function start() {
              // if infinite loop, prepare additional slides
              if (slider.settings.infiniteLoop && slider.settings.mode !== 'fade' && !slider.settings.ticker) {
                var slice = slider.settings.mode === 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides,
                    sliceAppend = slider.children.slice(0, slice).clone(true).addClass('bx-clone'),
                    slicePrepend = slider.children.slice(-slice).clone(true).addClass('bx-clone');

                if (slider.settings.ariaHidden) {
                  sliceAppend.attr('aria-hidden', true);
                  slicePrepend.attr('aria-hidden', true);
                }

                el.append(sliceAppend).prepend(slicePrepend);
              } // remove the loading DOM element


              slider.loader.remove(); // set the left / top position of "el"

              setSlidePosition(); // if "vertical" mode, always use adaptiveHeight to prevent odd behavior

              if (slider.settings.mode === 'vertical') {
                slider.settings.adaptiveHeight = true;
              } // set the viewport height


              slider.viewport.height(getViewportHeight()); // make sure everything is positioned just right (same as a window resize)

              el.redrawSlider(); // onSliderLoad callback

              slider.settings.onSliderLoad.call(el, slider.active.index); // slider has been fully initialized

              slider.initialized = true; // add the resize call to the window

              if (slider.settings.responsive) {
                $(window).on('resize', resizeWindow);
              } // if auto is true and has more than 1 page, start the show


              if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) {
                initAuto();
              } // if ticker is true, start the ticker


              if (slider.settings.ticker) {
                initTicker();
              } // if pager is requested, make the appropriate pager link active


              if (slider.settings.pager) {
                updatePagerActive(slider.settings.startSlide);
              } // check for any updates to the controls (like hideControlOnEnd updates)


              if (slider.settings.controls) {
                updateDirectionControls();
              } // if touchEnabled is true, setup the touch events


              if (slider.settings.touchEnabled && !slider.settings.ticker) {
                initTouch();
              } // if keyboardEnabled is true, setup the keyboard events


              if (slider.settings.keyboardEnabled && !slider.settings.ticker) {
                $(document).keydown(keyPress);
              }
            };
            /**
             * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
             */


            var getViewportHeight = function getViewportHeight() {
              var height = 0; // first determine which children (slides) should be used in our height calculation

              var children = $(); // if mode is not "vertical" and adaptiveHeight is false, include all children

              if (slider.settings.mode !== 'vertical' && !slider.settings.adaptiveHeight) {
                children = slider.children;
              } else {
                // if not carousel, return the single active child
                if (!slider.carousel) {
                  children = slider.children.eq(slider.active.index); // if carousel, return a slice of children
                } else {
                  // get the individual slide index
                  var currentIndex = slider.settings.moveSlides === 1 ? slider.active.index : slider.active.index * getMoveBy(); // add the current slide to the children

                  children = slider.children.eq(currentIndex); // cycle through the remaining "showing" slides

                  for (i = 1; i <= slider.settings.maxSlides - 1; i++) {
                    // if looped back to the start
                    if (currentIndex + i >= slider.children.length) {
                      children = children.add(slider.children.eq(i - 1));
                    } else {
                      children = children.add(slider.children.eq(currentIndex + i));
                    }
                  }
                }
              } // if "vertical" mode, calculate the sum of the heights of the children


              if (slider.settings.mode === 'vertical') {
                children.each(function (index) {
                  height += $(this).outerHeight();
                }); // add user-supplied margins

                if (slider.settings.slideMargin > 0) {
                  height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
                } // if not "vertical" mode, calculate the max height of the children

              } else {
                height = Math.max.apply(Math, children.map(function () {
                  return $(this).outerHeight(false);
                }).get());
              }

              if (slider.viewport.css('box-sizing') === 'border-box') {
                height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) + parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));
              } else if (slider.viewport.css('box-sizing') === 'padding-box') {
                height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));
              }

              return height;
            };
            /**
             * Returns the calculated width to be used for the outer wrapper / viewport
             */


            var getViewportMaxWidth = function getViewportMaxWidth() {
              var width = '100%';

              if (slider.settings.slideWidth > 0) {
                if (slider.settings.mode === 'horizontal') {
                  width = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;
                } else {
                  width = slider.settings.slideWidth;
                }
              }

              return width;
            };
            /**
             * Returns the calculated width to be applied to each slide
             */


            var getSlideWidth = function getSlideWidth() {
              var newElWidth = slider.settings.slideWidth,
                  // start with any user-supplied slide width
              wrapWidth = slider.viewport.width(); // get the current viewport width
              // if slide width was not supplied, or is larger than the viewport use the viewport width

              if (slider.settings.slideWidth === 0 || slider.settings.slideWidth > wrapWidth && !slider.carousel || slider.settings.mode === 'vertical') {
                newElWidth = wrapWidth; // if carousel, use the thresholds to determine the width
              } else if (slider.settings.maxSlides > 1 && slider.settings.mode === 'horizontal') {
                if (wrapWidth > slider.maxThreshold) {
                  return newElWidth;
                } else if (wrapWidth < slider.minThreshold) {
                  newElWidth = (wrapWidth - slider.settings.slideMargin * (slider.settings.minSlides - 1)) / slider.settings.minSlides;
                } else if (slider.settings.shrinkItems) {
                  newElWidth = Math.floor((wrapWidth + slider.settings.slideMargin) / Math.ceil((wrapWidth + slider.settings.slideMargin) / (newElWidth + slider.settings.slideMargin)) - slider.settings.slideMargin);
                }
              }

              return newElWidth;
            };
            /**
             * Returns the number of slides currently visible in the viewport (includes partially visible slides)
             */


            var getNumberSlidesShowing = function getNumberSlidesShowing() {
              var slidesShowing = 1,
                  childWidth = null;

              if (slider.settings.mode === 'horizontal' && slider.settings.slideWidth > 0) {
                // if viewport is smaller than minThreshold, return minSlides
                if (slider.viewport.width() < slider.minThreshold) {
                  slidesShowing = slider.settings.minSlides; // if viewport is larger than maxThreshold, return maxSlides
                } else if (slider.viewport.width() > slider.maxThreshold) {
                  slidesShowing = slider.settings.maxSlides; // if viewport is between min / max thresholds, divide viewport width by first child width
                } else {
                  childWidth = slider.children.first().width() + slider.settings.slideMargin;
                  slidesShowing = Math.floor((slider.viewport.width() + slider.settings.slideMargin) / childWidth) || 1;
                } // if "vertical" mode, slides showing will always be minSlides

              } else if (slider.settings.mode === 'vertical') {
                slidesShowing = slider.settings.minSlides;
              }

              return slidesShowing;
            };
            /**
             * Returns the number of pages (one full viewport of slides is one "page")
             */


            var getPagerQty = function getPagerQty() {
              var pagerQty = 0,
                  breakPoint = 0,
                  counter = 0; // if moveSlides is specified by the user

              if (slider.settings.moveSlides > 0) {
                if (slider.settings.infiniteLoop) {
                  pagerQty = Math.ceil(slider.children.length / getMoveBy());
                } else {
                  // when breakpoint goes above children length, counter is the number of pages
                  while (breakPoint < slider.children.length) {
                    ++pagerQty;
                    breakPoint = counter + getNumberSlidesShowing();
                    counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
                  }

                  return counter;
                } // if moveSlides is 0 (auto) divide children length by sides showing, then round up

              } else {
                pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
              }

              return pagerQty;
            };
            /**
             * Returns the number of individual slides by which to shift the slider
             */


            var getMoveBy = function getMoveBy() {
              // if moveSlides was set by the user and moveSlides is less than number of slides showing
              if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {
                return slider.settings.moveSlides;
              } // if moveSlides is 0 (auto)


              return getNumberSlidesShowing();
            };
            /**
             * Sets the slider's (el) left or top position
             */


            var setSlidePosition = function setSlidePosition() {
              var position, lastChild, lastShowingIndex; // if last slide, not infinite loop, and number of children is larger than specified maxSlides

              if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
                if (slider.settings.mode === 'horizontal') {
                  // get the last child's position
                  lastChild = slider.children.last();
                  position = lastChild.position(); // set the left position

                  setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);
                } else if (slider.settings.mode === 'vertical') {
                  // get the last showing index's position
                  lastShowingIndex = slider.children.length - slider.settings.minSlides;
                  position = slider.children.eq(lastShowingIndex).position(); // set the top position

                  setPositionProperty(-position.top, 'reset', 0);
                } // if not last slide

              } else {
                // get the position of the first showing slide
                position = slider.children.eq(slider.active.index * getMoveBy()).position(); // check for last slide

                if (slider.active.index === getPagerQty() - 1) {
                  slider.active.last = true;
                } // set the respective position


                if (position !== undefined) {
                  if (slider.settings.mode === 'horizontal') {
                    setPositionProperty(-position.left, 'reset', 0);
                  } else if (slider.settings.mode === 'vertical') {
                    setPositionProperty(-position.top, 'reset', 0);
                  }
                }
              }
            };
            /**
             * Sets the el's animating property position (which in turn will sometimes animate el).
             * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
             *
             * @param value (int)
             *  - the animating property's value
             *
             * @param type (string) 'slide', 'reset', 'ticker'
             *  - the type of instance for which the function is being
             *
             * @param duration (int)
             *  - the amount of time (in ms) the transition should occupy
             *
             * @param params (array) optional
             *  - an optional parameter containing any variables that need to be passed in
             */


            var setPositionProperty = function setPositionProperty(value, type, duration, params) {
              var animateObj, propValue; // use CSS transform

              if (slider.usingCSS) {
                // determine the translate3d value
                propValue = slider.settings.mode === 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)'; // add the CSS transition-duration

                el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');

                if (type === 'slide') {
                  // set the property value
                  el.css(slider.animProp, propValue);

                  if (duration !== 0) {
                    // add a callback method - executes when CSS transition completes
                    el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {
                      //make sure it's the correct one
                      if (!$(e.target).is(el)) {
                        return;
                      } // remove the callback


                      el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
                      updateAfterSlideTransition();
                    });
                  } else {
                    //duration = 0
                    updateAfterSlideTransition();
                  }
                } else if (type === 'reset') {
                  el.css(slider.animProp, propValue);
                } else if (type === 'ticker') {
                  // make the transition use 'linear'
                  el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
                  el.css(slider.animProp, propValue);

                  if (duration !== 0) {
                    el.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {
                      //make sure it's the correct one
                      if (!$(e.target).is(el)) {
                        return;
                      } // remove the callback


                      el.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'); // reset the position

                      setPositionProperty(params.resetValue, 'reset', 0); // start the loop again

                      tickerLoop();
                    });
                  } else {
                    //duration = 0
                    setPositionProperty(params.resetValue, 'reset', 0);
                    tickerLoop();
                  }
                } // use JS animate

              } else {
                animateObj = {};
                animateObj[slider.animProp] = value;

                if (type === 'slide') {
                  el.animate(animateObj, duration, slider.settings.easing, function () {
                    updateAfterSlideTransition();
                  });
                } else if (type === 'reset') {
                  el.css(slider.animProp, value);
                } else if (type === 'ticker') {
                  el.animate(animateObj, duration, 'linear', function () {
                    setPositionProperty(params.resetValue, 'reset', 0); // run the recursive loop after animation

                    tickerLoop();
                  });
                }
              }
            };
            /**
             * Populates the pager with proper amount of pages
             */


            var populatePager = function populatePager() {
              var pagerHtml = '',
                  linkContent = '',
                  pagerQty = getPagerQty(); // loop through each pager item

              for (var i = 0; i < pagerQty; i++) {
                linkContent = ''; // if a buildPager function is supplied, use it to get pager link value, else use index + 1

                if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager) || slider.settings.pagerCustom) {
                  linkContent = slider.settings.buildPager(i);
                  slider.pagerEl.addClass('bx-custom-pager');
                } else {
                  linkContent = i + 1;
                  slider.pagerEl.addClass('bx-default-pager');
                } // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
                // add the markup to the string


                pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
              } // populate the pager element with pager links


              slider.pagerEl.html(pagerHtml);
            };
            /**
             * Appends the pager to the controls element
             */


            var appendPager = function appendPager() {
              if (!slider.settings.pagerCustom) {
                // create the pager DOM element
                slider.pagerEl = $('<div class="bx-pager" />'); // if a pager selector was supplied, populate it with the pager

                if (slider.settings.pagerSelector) {
                  $(slider.settings.pagerSelector).html(slider.pagerEl); // if no pager selector was supplied, add it after the wrapper
                } else {
                  slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
                } // populate the pager


                populatePager();
              } else {
                slider.pagerEl = $(slider.settings.pagerCustom);
              } // assign the pager click binding


              slider.pagerEl.on('click touchend', 'a', clickPagerBind);
            };
            /**
             * Appends prev / next controls to the controls element
             */


            var appendControls = function appendControls() {
              slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
              slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>'); // add click actions to the controls

              slider.controls.next.on('click touchend', clickNextBind);
              slider.controls.prev.on('click touchend', clickPrevBind); // if nextSelector was supplied, populate it

              if (slider.settings.nextSelector) {
                $(slider.settings.nextSelector).append(slider.controls.next);
              } // if prevSelector was supplied, populate it


              if (slider.settings.prevSelector) {
                $(slider.settings.prevSelector).append(slider.controls.prev);
              } // if no custom selectors were supplied


              if (!slider.settings.nextSelector && !slider.settings.prevSelector) {
                // add the controls to the DOM
                slider.controls.directionEl = $('<div class="bx-controls-direction" />'); // add the control elements to the directionEl

                slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next); // slider.viewport.append(slider.controls.directionEl);

                slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
              }
            };
            /**
             * Appends start / stop auto controls to the controls element
             */


            var appendControlsAuto = function appendControlsAuto() {
              slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
              slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>'); // add the controls to the DOM

              slider.controls.autoEl = $('<div class="bx-controls-auto" />'); // on click actions to the controls

              slider.controls.autoEl.on('click', '.bx-start', clickStartBind);
              slider.controls.autoEl.on('click', '.bx-stop', clickStopBind); // if autoControlsCombine, insert only the "start" control

              if (slider.settings.autoControlsCombine) {
                slider.controls.autoEl.append(slider.controls.start); // if autoControlsCombine is false, insert both controls
              } else {
                slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
              } // if auto controls selector was supplied, populate it with the controls


              if (slider.settings.autoControlsSelector) {
                $(slider.settings.autoControlsSelector).html(slider.controls.autoEl); // if auto controls selector was not supplied, add it after the wrapper
              } else {
                slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
              } // update the auto controls


              updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
            };
            /**
             * Appends image captions to the DOM
             */


            var appendCaptions = function appendCaptions() {
              // cycle through each child
              slider.children.each(function (index) {
                // get the image title attribute
                var title = $(this).find('img:first').attr('title'); // append the caption

                if (title !== undefined && ('' + title).length) {
                  $(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
                }
              });
            };
            /**
             * Click next binding
             *
             * @param e (event)
             *  - DOM event object
             */


            var clickNextBind = function clickNextBind(e) {
              e.preventDefault();

              if (slider.controls.el.hasClass('disabled')) {
                return;
              } // if auto show is running, stop it


              if (slider.settings.auto && slider.settings.stopAutoOnClick) {
                el.stopAuto();
              }

              el.goToNextSlide();
            };
            /**
             * Click prev binding
             *
             * @param e (event)
             *  - DOM event object
             */


            var clickPrevBind = function clickPrevBind(e) {
              e.preventDefault();

              if (slider.controls.el.hasClass('disabled')) {
                return;
              } // if auto show is running, stop it


              if (slider.settings.auto && slider.settings.stopAutoOnClick) {
                el.stopAuto();
              }

              el.goToPrevSlide();
            };
            /**
             * Click start binding
             *
             * @param e (event)
             *  - DOM event object
             */


            var clickStartBind = function clickStartBind(e) {
              el.startAuto();
              e.preventDefault();
            };
            /**
             * Click stop binding
             *
             * @param e (event)
             *  - DOM event object
             */


            var clickStopBind = function clickStopBind(e) {
              el.stopAuto();
              e.preventDefault();
            };
            /**
             * Click pager binding
             *
             * @param e (event)
             *  - DOM event object
             */


            var clickPagerBind = function clickPagerBind(e) {
              var pagerLink, pagerIndex;
              e.preventDefault();

              if (slider.controls.el.hasClass('disabled')) {
                return;
              } // if auto show is running, stop it


              if (slider.settings.auto && slider.settings.stopAutoOnClick) {
                el.stopAuto();
              }

              pagerLink = $(e.currentTarget);

              if (pagerLink.attr('data-slide-index') !== undefined) {
                pagerIndex = parseInt(pagerLink.attr('data-slide-index')); // if clicked pager link is not active, continue with the goToSlide call

                if (pagerIndex !== slider.active.index) {
                  el.goToSlide(pagerIndex);
                }
              }
            };
            /**
             * Updates the pager links with an active class
             *
             * @param slideIndex (int)
             *  - index of slide to make active
             */


            var updatePagerActive = function updatePagerActive(slideIndex) {
              // if "short" pager type
              var len = slider.children.length; // nb of children

              if (slider.settings.pagerType === 'short') {
                if (slider.settings.maxSlides > 1) {
                  len = Math.ceil(slider.children.length / slider.settings.maxSlides);
                }

                slider.pagerEl.html(slideIndex + 1 + slider.settings.pagerShortSeparator + len);
                return;
              } // remove all pager active classes


              slider.pagerEl.find('a').removeClass('active'); // apply the active class for all pagers

              slider.pagerEl.each(function (i, el) {
                $(el).find('a').eq(slideIndex).addClass('active');
              });
            };
            /**
             * Performs needed actions after a slide transition
             */


            var updateAfterSlideTransition = function updateAfterSlideTransition() {
              // if infinite loop is true
              if (slider.settings.infiniteLoop) {
                var position = ''; // first slide

                if (slider.active.index === 0) {
                  // set the new position
                  position = slider.children.eq(0).position(); // carousel, last slide
                } else if (slider.active.index === getPagerQty() - 1 && slider.carousel) {
                  position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position(); // last slide
                } else if (slider.active.index === slider.children.length - 1) {
                  position = slider.children.eq(slider.children.length - 1).position();
                }

                if (position) {
                  if (slider.settings.mode === 'horizontal') {
                    setPositionProperty(-position.left, 'reset', 0);
                  } else if (slider.settings.mode === 'vertical') {
                    setPositionProperty(-position.top, 'reset', 0);
                  }
                }
              } // declare that the transition is complete


              slider.working = false; // onSlideAfter callback

              slider.settings.onSlideAfter.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
            };
            /**
             * Updates the auto controls state (either active, or combined switch)
             *
             * @param state (string) "start", "stop"
             *  - the new state of the auto show
             */


            var updateAutoControls = function updateAutoControls(state) {
              // if autoControlsCombine is true, replace the current control with the new state
              if (slider.settings.autoControlsCombine) {
                slider.controls.autoEl.html(slider.controls[state]); // if autoControlsCombine is false, apply the "active" class to the appropriate control
              } else {
                slider.controls.autoEl.find('a').removeClass('active');
                slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
              }
            };
            /**
             * Updates the direction controls (checks if either should be hidden)
             */


            var updateDirectionControls = function updateDirectionControls() {
              if (getPagerQty() === 1) {
                slider.controls.prev.addClass('disabled');
                slider.controls.next.addClass('disabled');
              } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {
                // if first slide
                if (slider.active.index === 0) {
                  slider.controls.prev.addClass('disabled');
                  slider.controls.next.removeClass('disabled'); // if last slide
                } else if (slider.active.index === getPagerQty() - 1) {
                  slider.controls.next.addClass('disabled');
                  slider.controls.prev.removeClass('disabled'); // if any slide in the middle
                } else {
                  slider.controls.prev.removeClass('disabled');
                  slider.controls.next.removeClass('disabled');
                }
              }
            };
            /* auto start and stop functions */


            var windowFocusHandler = function windowFocusHandler() {
              el.startAuto();
            };

            var windowBlurHandler = function windowBlurHandler() {
              el.stopAuto();
            };
            /**
             * Initializes the auto process
             */


            var initAuto = function initAuto() {
              // if autoDelay was supplied, launch the auto show using a setTimeout() call
              if (slider.settings.autoDelay > 0) {
                setTimeout(el.startAuto, slider.settings.autoDelay); // if autoDelay was not supplied, start the auto show normally
              } else {
                el.startAuto(); //add focus and blur events to ensure its running if timeout gets paused

                $(window).focus(windowFocusHandler).blur(windowBlurHandler);
              } // if autoHover is requested


              if (slider.settings.autoHover) {
                // on el hover
                el.hover(function () {
                  // if the auto show is currently playing (has an active interval)
                  if (slider.interval) {
                    // stop the auto show and pass true argument which will prevent control update
                    el.stopAuto(true); // create a new autoPaused value which will be used by the relative "mouseout" event

                    slider.autoPaused = true;
                  }
                }, function () {
                  // if the autoPaused value was created be the prior "mouseover" event
                  if (slider.autoPaused) {
                    // start the auto show and pass true argument which will prevent control update
                    el.startAuto(true); // reset the autoPaused value

                    slider.autoPaused = null;
                  }
                });
              }
            };
            /**
             * Initializes the ticker process
             */


            var initTicker = function initTicker() {
              var startPosition = 0,
                  position,
                  transform,
                  value,
                  idx,
                  ratio,
                  property,
                  newSpeed,
                  totalDimens; // if autoDirection is "next", append a clone of the entire slider

              if (slider.settings.autoDirection === 'next') {
                el.append(slider.children.clone().addClass('bx-clone')); // if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
              } else {
                el.prepend(slider.children.clone().addClass('bx-clone'));
                position = slider.children.first().position();
                startPosition = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
              }

              setPositionProperty(startPosition, 'reset', 0); // do not allow controls in ticker mode

              slider.settings.pager = false;
              slider.settings.controls = false;
              slider.settings.autoControls = false; // if autoHover is requested

              if (slider.settings.tickerHover) {
                if (slider.usingCSS) {
                  idx = slider.settings.mode === 'horizontal' ? 4 : 5;
                  slider.viewport.hover(function () {
                    transform = el.css('-' + slider.cssPrefix + '-transform');
                    value = parseFloat(transform.split(',')[idx]);
                    setPositionProperty(value, 'reset', 0);
                  }, function () {
                    totalDimens = 0;
                    slider.children.each(function (index) {
                      totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
                    }); // calculate the speed ratio (used to determine the new speed to finish the paused animation)

                    ratio = slider.settings.speed / totalDimens; // determine which property to use

                    property = slider.settings.mode === 'horizontal' ? 'left' : 'top'; // calculate the new speed

                    newSpeed = ratio * (totalDimens - Math.abs(parseInt(value)));
                    tickerLoop(newSpeed);
                  });
                } else {
                  // on el hover
                  slider.viewport.hover(function () {
                    el.stop();
                  }, function () {
                    // calculate the total width of children (used to calculate the speed ratio)
                    totalDimens = 0;
                    slider.children.each(function (index) {
                      totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
                    }); // calculate the speed ratio (used to determine the new speed to finish the paused animation)

                    ratio = slider.settings.speed / totalDimens; // determine which property to use

                    property = slider.settings.mode === 'horizontal' ? 'left' : 'top'; // calculate the new speed

                    newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))));
                    tickerLoop(newSpeed);
                  });
                }
              } // start the ticker loop


              tickerLoop();
            };
            /**
             * Runs a continuous loop, news ticker-style
             */


            var tickerLoop = function tickerLoop(resumeSpeed) {
              var speed = resumeSpeed ? resumeSpeed : slider.settings.speed,
                  position = {
                left: 0,
                top: 0
              },
                  reset = {
                left: 0,
                top: 0
              },
                  animateProperty,
                  resetValue,
                  params; // if "next" animate left position to last child, then reset left to 0

              if (slider.settings.autoDirection === 'next') {
                position = el.find('.bx-clone').first().position(); // if "prev" animate left position to 0, then reset left to first non-clone child
              } else {
                reset = slider.children.first().position();
              }

              animateProperty = slider.settings.mode === 'horizontal' ? -position.left : -position.top;
              resetValue = slider.settings.mode === 'horizontal' ? -reset.left : -reset.top;
              params = {
                resetValue: resetValue
              };
              setPositionProperty(animateProperty, 'ticker', speed, params);
            };
            /**
             * Check if el is on screen
             */


            var isOnScreen = function isOnScreen(el) {
              var win = $(window),
                  viewport = {
                top: win.scrollTop(),
                left: win.scrollLeft()
              },
                  bounds = el.offset();
              viewport.right = viewport.left + win.width();
              viewport.bottom = viewport.top + win.height();
              bounds.right = bounds.left + el.outerWidth();
              bounds.bottom = bounds.top + el.outerHeight();
              return !(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom);
            };
            /**
             * Initializes keyboard events
             */


            var keyPress = function keyPress(e) {
              var activeElementTag = document.activeElement.tagName.toLowerCase(),
                  tagFilters = 'input|textarea',
                  p = new RegExp(activeElementTag, ['i']),
                  result = p.exec(tagFilters);

              if (result == null && isOnScreen(el)) {
                if (e.keyCode === 39) {
                  clickNextBind(e);
                  return false;
                } else if (e.keyCode === 37) {
                  clickPrevBind(e);
                  return false;
                }
              }
            };
            /**
             * Initializes touch events
             */


            var initTouch = function initTouch() {
              // initialize object to contain all touch values
              slider.touch = {
                start: {
                  x: 0,
                  y: 0
                },
                end: {
                  x: 0,
                  y: 0
                }
              };
              slider.viewport.on('touchstart MSPointerDown pointerdown', onTouchStart); //for browsers that have implemented pointer events and fire a click after
              //every pointerup regardless of whether pointerup is on same screen location as pointerdown or not

              slider.viewport.on('click', '.bxslider a', function (e) {
                if (slider.viewport.hasClass('click-disabled')) {
                  e.preventDefault();
                  slider.viewport.removeClass('click-disabled');
                }
              });
            };
            /**
             * Event handler for "touchstart"
             *
             * @param e (event)
             *  - DOM event object
             */


            var onTouchStart = function onTouchStart(e) {
              // watch only for left mouse, touch contact and pen contact
              // touchstart event object doesn`t have button property
              if (e.type !== 'touchstart' && e.button !== 0) {
                return;
              }

              e.preventDefault(); //disable slider controls while user is interacting with slides to avoid slider freeze that happens on touch devices when a slide swipe happens immediately after interacting with slider controls

              slider.controls.el.addClass('disabled');

              if (slider.working) {
                slider.controls.el.removeClass('disabled');
              } else {
                // record the original position when touch starts
                slider.touch.originalPos = el.position();
                var orig = e.originalEvent,
                    touchPoints = typeof orig.changedTouches !== 'undefined' ? orig.changedTouches : [orig];
                var chromePointerEvents = typeof PointerEvent === 'function';

                if (chromePointerEvents) {
                  if (orig.pointerId === undefined) {
                    return;
                  }
                } // record the starting touch x, y coordinates


                slider.touch.start.x = touchPoints[0].pageX;
                slider.touch.start.y = touchPoints[0].pageY;

                if (slider.viewport.get(0).setPointerCapture) {
                  slider.pointerId = orig.pointerId;
                  slider.viewport.get(0).setPointerCapture(slider.pointerId);
                } // store original event data for click fixation


                slider.originalClickTarget = orig.originalTarget || orig.target;
                slider.originalClickButton = orig.button;
                slider.originalClickButtons = orig.buttons;
                slider.originalEventType = orig.type; // at this moment we don`t know what it is click or swipe

                slider.hasMove = false; // on a "touchmove" event to the viewport

                slider.viewport.on('touchmove MSPointerMove pointermove', onTouchMove); // on a "touchend" event to the viewport

                slider.viewport.on('touchend MSPointerUp pointerup', onTouchEnd);
                slider.viewport.on('MSPointerCancel pointercancel', onPointerCancel);
              }
            };
            /**
             * Cancel Pointer for Windows Phone
             *
             * @param e (event)
             *  - DOM event object
             */


            var onPointerCancel = function onPointerCancel(e) {
              e.preventDefault();
              /* onPointerCancel handler is needed to deal with situations when a touchend
              doesn't fire after a touchstart (this happens on windows phones only) */

              setPositionProperty(slider.touch.originalPos.left, 'reset', 0); //remove handlers

              slider.controls.el.removeClass('disabled');
              slider.viewport.off('MSPointerCancel pointercancel', onPointerCancel);
              slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove);
              slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd);

              if (slider.viewport.get(0).releasePointerCapture) {
                slider.viewport.get(0).releasePointerCapture(slider.pointerId);
              }
            };
            /**
             * Event handler for "touchmove"
             *
             * @param e (event)
             *  - DOM event object
             */


            var onTouchMove = function onTouchMove(e) {
              var orig = e.originalEvent,
                  touchPoints = typeof orig.changedTouches !== 'undefined' ? orig.changedTouches : [orig],
                  // if scrolling on y axis, do not prevent default
              xMovement = Math.abs(touchPoints[0].pageX - slider.touch.start.x),
                  yMovement = Math.abs(touchPoints[0].pageY - slider.touch.start.y),
                  value = 0,
                  change = 0; // this is swipe

              slider.hasMove = true; // x axis swipe

              if (xMovement * 3 > yMovement && slider.settings.preventDefaultSwipeX) {
                e.preventDefault(); // y axis swipe
              } else if (yMovement * 3 > xMovement && slider.settings.preventDefaultSwipeY) {
                e.preventDefault();
              }

              if (e.type !== 'touchmove') {
                e.preventDefault();
              }

              if (slider.settings.mode !== 'fade' && slider.settings.oneToOneTouch) {
                // if horizontal, drag along x axis
                if (slider.settings.mode === 'horizontal') {
                  change = touchPoints[0].pageX - slider.touch.start.x;
                  value = slider.touch.originalPos.left + change; // if vertical, drag along y axis
                } else {
                  change = touchPoints[0].pageY - slider.touch.start.y;
                  value = slider.touch.originalPos.top + change;
                }

                setPositionProperty(value, 'reset', 0);
              }
            };
            /**
             * Event handler for "touchend"
             *
             * @param e (event)
             *  - DOM event object
             */


            var onTouchEnd = function onTouchEnd(e) {
              e.preventDefault();
              slider.viewport.off('touchmove MSPointerMove pointermove', onTouchMove); //enable slider controls as soon as user stops interacing with slides

              slider.controls.el.removeClass('disabled');
              var orig = e.originalEvent,
                  touchPoints = typeof orig.changedTouches !== 'undefined' ? orig.changedTouches : [orig],
                  value = 0,
                  distance = 0; // record end x, y positions

              slider.touch.end.x = touchPoints[0].pageX;
              slider.touch.end.y = touchPoints[0].pageY; // if fade mode, check if absolute x distance clears the threshold

              if (slider.settings.mode === 'fade') {
                distance = Math.abs(slider.touch.start.x - slider.touch.end.x);

                if (distance >= slider.settings.swipeThreshold) {
                  if (slider.touch.start.x > slider.touch.end.x) {
                    el.goToNextSlide();
                  } else {
                    el.goToPrevSlide();
                  }

                  el.stopAuto();
                } // not fade mode

              } else {
                // calculate distance and el's animate property
                if (slider.settings.mode === 'horizontal') {
                  distance = slider.touch.end.x - slider.touch.start.x;
                  value = slider.touch.originalPos.left;
                } else {
                  distance = slider.touch.end.y - slider.touch.start.y;
                  value = slider.touch.originalPos.top;
                } // if not infinite loop and first / last slide, do not attempt a slide transition


                if (!slider.settings.infiniteLoop && (slider.active.index === 0 && distance > 0 || slider.active.last && distance < 0)) {
                  setPositionProperty(value, 'reset', 200);
                } else {
                  // check if distance clears threshold
                  if (Math.abs(distance) >= slider.settings.swipeThreshold) {
                    if (distance < 0) {
                      el.goToNextSlide();
                    } else {
                      el.goToPrevSlide();
                    }

                    el.stopAuto();
                  } else {
                    // el.animate(property, 200);
                    setPositionProperty(value, 'reset', 200);
                  }
                }
              }

              slider.viewport.off('touchend MSPointerUp pointerup', onTouchEnd);

              if (slider.viewport.get(0).releasePointerCapture) {
                slider.viewport.get(0).releasePointerCapture(slider.pointerId);
              } // if slider had swipe with left mouse, touch contact and pen contact


              if (slider.hasMove === false && (slider.originalClickButton === 0 || slider.originalEventType === 'touchstart')) {
                // trigger click event (fix for Firefox59 and PointerEvent standard compatibility)
                $(slider.originalClickTarget).trigger({
                  type: 'click',
                  button: slider.originalClickButton,
                  buttons: slider.originalClickButtons
                });
              }
            };
            /**
             * Window resize event callback
             */


            var resizeWindow = function resizeWindow(e) {
              // don't do anything if slider isn't initialized.
              if (!slider.initialized) {
                return;
              } // Delay if slider working.


              if (slider.working) {
                window.setTimeout(resizeWindow, 10);
              } else {
                // get the new window dimens (again, thank you IE)
                var windowWidthNew = $(window).width(),
                    windowHeightNew = $(window).height(); // make sure that it is a true window resize
                // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
                // are resized. Can you just die already?*

                if (windowWidth !== windowWidthNew || windowHeight !== windowHeightNew) {
                  // set the new window dimens
                  windowWidth = windowWidthNew;
                  windowHeight = windowHeightNew; // update all dynamic elements

                  el.redrawSlider(); // Call user resize handler

                  slider.settings.onSliderResize.call(el, slider.active.index);
                }
              }
            };
            /**
             * Adds an aria-hidden=true attribute to each element
             *
             * @param startVisibleIndex (int)
             *  - the first visible element's index
             */


            var applyAriaHiddenAttributes = function applyAriaHiddenAttributes(startVisibleIndex) {
              var numberOfSlidesShowing = getNumberSlidesShowing(); // only apply attributes if the setting is enabled and not in ticker mode

              if (slider.settings.ariaHidden && !slider.settings.ticker) {
                // add aria-hidden=true to all elements
                slider.children.attr('aria-hidden', 'true'); // get the visible elements and change to aria-hidden=false

                slider.children.slice(startVisibleIndex, startVisibleIndex + numberOfSlidesShowing).attr('aria-hidden', 'false');
              }
            };
            /**
             * Returns index according to present page range
             *
             * @param slideOndex (int)
             *  - the desired slide index
             */


            var setSlideIndex = function setSlideIndex(slideIndex) {
              if (slideIndex < 0) {
                if (slider.settings.infiniteLoop) {
                  return getPagerQty() - 1;
                } else {
                  //we don't go to undefined slides
                  return slider.active.index;
                } // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)

              } else if (slideIndex >= getPagerQty()) {
                if (slider.settings.infiniteLoop) {
                  return 0;
                } else {
                  //we don't move to undefined pages
                  return slider.active.index;
                } // set active index to requested slide

              } else {
                return slideIndex;
              }
            };
            /**
             * ===================================================================================
             * = PUBLIC FUNCTIONS
             * ===================================================================================
             */

            /**
             * Performs slide transition to the specified slide
             *
             * @param slideIndex (int)
             *  - the destination slide's index (zero-based)
             *
             * @param direction (string)
             *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
             */


            el.goToSlide = function (slideIndex, direction) {
              // onSlideBefore, onSlideNext, onSlidePrev callbacks
              // Allow transition canceling based on returned value
              var performTransition = true,
                  moveBy = 0,
                  position = {
                left: 0,
                top: 0
              },
                  lastChild = null,
                  lastShowingIndex,
                  eq,
                  value,
                  requestEl; // store the old index

              slider.oldIndex = slider.active.index; //set new index

              slider.active.index = setSlideIndex(slideIndex); // if plugin is currently in motion, ignore request

              if (slider.working || slider.active.index === slider.oldIndex) {
                return;
              } // declare that plugin is in motion


              slider.working = true;
              performTransition = slider.settings.onSlideBefore.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index); // If transitions canceled, reset and return

              if (typeof performTransition !== 'undefined' && !performTransition) {
                slider.active.index = slider.oldIndex; // restore old index

                slider.working = false; // is not in motion

                return;
              }

              if (direction === 'next') {
                // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
                if (!slider.settings.onSlideNext.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
                  performTransition = false;
                }
              } else if (direction === 'prev') {
                // Prevent canceling in future functions or lack there-of from negating previous commands to cancel
                if (!slider.settings.onSlidePrev.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {
                  performTransition = false;
                }
              } // check if last slide


              slider.active.last = slider.active.index >= getPagerQty() - 1; // update the pager with active class

              if (slider.settings.pager || slider.settings.pagerCustom) {
                updatePagerActive(slider.active.index);
              } // // check for direction control update


              if (slider.settings.controls) {
                updateDirectionControls();
              } // if slider is set to mode: "fade"


              if (slider.settings.mode === 'fade') {
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
                  slider.viewport.animate({
                    height: getViewportHeight()
                  }, slider.settings.adaptiveHeightSpeed);
                } // fade out the visible child and reset its z-index value


                slider.children.filter(':visible').fadeOut(slider.settings.speed).css({
                  zIndex: 0
                }); // fade in the newly requested slide

                slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function () {
                  $(this).css('zIndex', slider.settings.slideZIndex);
                  updateAfterSlideTransition();
                }); // slider mode is not "fade"
              } else {
                // if adaptiveHeight is true and next height is different from current height, animate to the new height
                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {
                  slider.viewport.animate({
                    height: getViewportHeight()
                  }, slider.settings.adaptiveHeightSpeed);
                } // if carousel and not infinite loop


                if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {
                  if (slider.settings.mode === 'horizontal') {
                    // get the last child position
                    lastChild = slider.children.eq(slider.children.length - 1);
                    position = lastChild.position(); // calculate the position of the last slide

                    moveBy = slider.viewport.width() - lastChild.outerWidth();
                  } else {
                    // get last showing index position
                    lastShowingIndex = slider.children.length - slider.settings.minSlides;
                    position = slider.children.eq(lastShowingIndex).position();
                  } // horizontal carousel, going previous while on first slide (infiniteLoop mode)

                } else if (slider.carousel && slider.active.last && direction === 'prev') {
                  // get the last child position
                  eq = slider.settings.moveSlides === 1 ? slider.settings.maxSlides - getMoveBy() : (getPagerQty() - 1) * getMoveBy() - (slider.children.length - slider.settings.maxSlides);
                  lastChild = el.children('.bx-clone').eq(eq);
                  position = lastChild.position(); // if infinite loop and "Next" is clicked on the last slide
                } else if (direction === 'next' && slider.active.index === 0) {
                  // get the last clone position
                  position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
                  slider.active.last = false; // normal non-zero requests
                } else if (slideIndex >= 0) {
                  //parseInt is applied to allow floats for slides/page
                  requestEl = slideIndex * parseInt(getMoveBy());
                  position = slider.children.eq(requestEl).position();
                }
                /* If the position doesn't exist
                 * (e.g. if you destroy the slider on a next click),
                 * it doesn't throw an error.
                 */


                if (typeof position !== 'undefined') {
                  value = slider.settings.mode === 'horizontal' ? -(position.left - moveBy) : -position.top; // plugin values to be animated

                  setPositionProperty(value, 'slide', slider.settings.speed);
                }

                slider.working = false;
              }

              if (slider.settings.ariaHidden) {
                applyAriaHiddenAttributes(slider.active.index * getMoveBy());
              }
            };
            /**
             * Transitions to the next slide in the show
             */


            el.goToNextSlide = function () {
              // if infiniteLoop is false and last page is showing, disregard call
              if (!slider.settings.infiniteLoop && slider.active.last) {
                return;
              }

              if (slider.working === true) {
                return;
              }

              var pagerIndex = parseInt(slider.active.index) + 1;
              el.goToSlide(pagerIndex, 'next');
            };
            /**
             * Transitions to the prev slide in the show
             */


            el.goToPrevSlide = function () {
              // if infiniteLoop is false and last page is showing, disregard call
              if (!slider.settings.infiniteLoop && slider.active.index === 0) {
                return;
              }

              if (slider.working === true) {
                return;
              }

              var pagerIndex = parseInt(slider.active.index) - 1;
              el.goToSlide(pagerIndex, 'prev');
            };
            /**
             * Starts the auto show
             *
             * @param preventControlUpdate (boolean)
             *  - if true, auto controls state will not be updated
             */


            el.startAuto = function (preventControlUpdate) {
              // if an interval already exists, disregard call
              if (slider.interval) {
                return;
              } // create an interval


              slider.interval = setInterval(function () {
                if (slider.settings.autoDirection === 'next') {
                  el.goToNextSlide();
                } else {
                  el.goToPrevSlide();
                }
              }, slider.settings.pause); //allback for when the auto rotate status changes

              slider.settings.onAutoChange.call(el, true); // if auto controls are displayed and preventControlUpdate is not true

              if (slider.settings.autoControls && preventControlUpdate !== true) {
                updateAutoControls('stop');
              }
            };
            /**
             * Stops the auto show
             *
             * @param preventControlUpdate (boolean)
             *  - if true, auto controls state will not be updated
             */


            el.stopAuto = function (preventControlUpdate) {
              // if slider is auto paused, just clear that state
              if (slider.autoPaused) slider.autoPaused = false; // if no interval exists, disregard call

              if (!slider.interval) {
                return;
              } // clear the interval


              clearInterval(slider.interval);
              slider.interval = null; //allback for when the auto rotate status changes

              slider.settings.onAutoChange.call(el, false); // if auto controls are displayed and preventControlUpdate is not true

              if (slider.settings.autoControls && preventControlUpdate !== true) {
                updateAutoControls('start');
              }
            };
            /**
             * Returns current slide index (zero-based)
             */


            el.getCurrentSlide = function () {
              return slider.active.index;
            };
            /**
             * Returns current slide element
             */


            el.getCurrentSlideElement = function () {
              return slider.children.eq(slider.active.index);
            };
            /**
             * Returns a slide element
             * @param index (int)
             *  - The index (zero-based) of the element you want returned.
             */


            el.getSlideElement = function (index) {
              return slider.children.eq(index);
            };
            /**
             * Returns number of slides in show
             */


            el.getSlideCount = function () {
              return slider.children.length;
            };
            /**
             * Return slider.working variable
             */


            el.isWorking = function () {
              return slider.working;
            };
            /**
             * Update all dynamic slider elements
             */


            el.redrawSlider = function () {
              // resize all children in ratio to new screen size
              slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth()); // adjust the height

              slider.viewport.css('height', getViewportHeight()); // update the slide position

              if (!slider.settings.ticker) {
                setSlidePosition();
              } // if active.last was true before the screen resize, we want
              // to keep it last no matter what screen size we end on


              if (slider.active.last) {
                slider.active.index = getPagerQty() - 1;
              } // if the active index (page) no longer exists due to the resize, simply set the index as last


              if (slider.active.index >= getPagerQty()) {
                slider.active.last = true;
              } // if a pager is being displayed and a custom pager is not being used, update it


              if (slider.settings.pager && !slider.settings.pagerCustom) {
                populatePager();
                updatePagerActive(slider.active.index);
              }

              if (slider.settings.ariaHidden) {
                applyAriaHiddenAttributes(slider.active.index * getMoveBy());
              }
            };
            /**
             * Destroy the current instance of the slider (revert everything back to original state)
             */


            el.destroySlider = function () {
              // don't do anything if slider has already been destroyed
              if (!slider.initialized) {
                return;
              }

              slider.initialized = false;
              $('.bx-clone', this).remove();
              slider.children.each(function () {
                if ($(this).data('origStyle') !== undefined) {
                  $(this).attr('style', $(this).data('origStyle'));
                } else {
                  $(this).removeAttr('style');
                }
              });

              if ($(this).data('origStyle') !== undefined) {
                this.attr('style', $(this).data('origStyle'));
              } else {
                $(this).removeAttr('style');
              }

              $(this).unwrap().unwrap();

              if (slider.controls.el) {
                slider.controls.el.remove();
              }

              if (slider.controls.next) {
                slider.controls.next.remove();
              }

              if (slider.controls.prev) {
                slider.controls.prev.remove();
              }

              if (slider.pagerEl && slider.settings.controls && !slider.settings.pagerCustom) {
                slider.pagerEl.remove();
              }

              $('.bx-caption', this).remove();

              if (slider.controls.autoEl) {
                slider.controls.autoEl.remove();
              }

              clearInterval(slider.interval);

              if (slider.settings.responsive) {
                $(window).off('resize', resizeWindow);
              }

              if (slider.settings.keyboardEnabled) {
                $(document).off('keydown', keyPress);
              } //remove self reference in data


              $(this).removeData('bxSlider'); // remove global window handlers

              $(window).off('blur', windowBlurHandler).off('focus', windowFocusHandler);
            };
            /**
             * Reload the slider (revert all DOM changes, and re-initialize)
             */


            el.reloadSlider = function (settings) {
              if (settings !== undefined) {
                options = settings;
              }

              el.destroySlider();
              init(); //store reference to self in order to access public functions later

              $(el).data('bxSlider', this);
            };

            init();
            $(el).data('bxSlider', this); // returns the current jQuery object

            return this;
          };
        })(jQuery);

        ;
        browserify_shim__define__module__export__(typeof bxSlider != "undefined" ? bxSlider : window.bxSlider);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "jQueryUniform": "GtKU1F"
  }],
  "bxSlider": [function (require, module, exports) {
    module.exports = require('KUSO1n');
  }, {}],
  "chart": [function (require, module, exports) {
    module.exports = require('3rA/w8');
  }, {}],
  "3rA/w8": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        /*!
         * Chart.js
         * http://chartjs.org/
         * Version: 2.7.3
         *
         * Copyright 2018 Chart.js Contributors
         * Released under the MIT license
         * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
         */
        !function (t) {
          if ("object" == _typeof2(exports) && "undefined" != typeof module) module.exports = t();else if ("function" == typeof define && define.amd) define([], t);else {
            ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).Chart = t();
          }
        }(function () {
          return function o(r, s, l) {
            function u(e, t) {
              if (!s[e]) {
                if (!r[e]) {
                  var i = "function" == typeof require && require;
                  if (!t && i) return i(e, !0);
                  if (d) return d(e, !0);
                  var n = new Error("Cannot find module '" + e + "'");
                  throw n.code = "MODULE_NOT_FOUND", n;
                }

                var a = s[e] = {
                  exports: {}
                };
                r[e][0].call(a.exports, function (t) {
                  return u(r[e][1][t] || t);
                }, a, a.exports, o, r, s, l);
              }

              return s[e].exports;
            }

            for (var d = "function" == typeof require && require, t = 0; t < l.length; t++) {
              u(l[t]);
            }

            return u;
          }({
            1: [function (t, e, i) {}, {}],
            2: [function (t, e, i) {
              var o = t(6);

              function n(t) {
                if (t) {
                  var e = [0, 0, 0],
                      i = 1,
                      n = t.match(/^#([a-fA-F0-9]{3})$/i);

                  if (n) {
                    n = n[1];

                    for (var a = 0; a < e.length; a++) {
                      e[a] = parseInt(n[a] + n[a], 16);
                    }
                  } else if (n = t.match(/^#([a-fA-F0-9]{6})$/i)) {
                    n = n[1];

                    for (a = 0; a < e.length; a++) {
                      e[a] = parseInt(n.slice(2 * a, 2 * a + 2), 16);
                    }
                  } else if (n = t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)) {
                    for (a = 0; a < e.length; a++) {
                      e[a] = parseInt(n[a + 1]);
                    }

                    i = parseFloat(n[4]);
                  } else if (n = t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)) {
                    for (a = 0; a < e.length; a++) {
                      e[a] = Math.round(2.55 * parseFloat(n[a + 1]));
                    }

                    i = parseFloat(n[4]);
                  } else if (n = t.match(/(\w+)/)) {
                    if ("transparent" == n[1]) return [0, 0, 0, 0];
                    if (!(e = o[n[1]])) return;
                  }

                  for (a = 0; a < e.length; a++) {
                    e[a] = d(e[a], 0, 255);
                  }

                  return i = i || 0 == i ? d(i, 0, 1) : 1, e[3] = i, e;
                }
              }

              function a(t) {
                if (t) {
                  var e = t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);

                  if (e) {
                    var i = parseFloat(e[4]);
                    return [d(parseInt(e[1]), 0, 360), d(parseFloat(e[2]), 0, 100), d(parseFloat(e[3]), 0, 100), d(isNaN(i) ? 1 : i, 0, 1)];
                  }
                }
              }

              function r(t) {
                if (t) {
                  var e = t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);

                  if (e) {
                    var i = parseFloat(e[4]);
                    return [d(parseInt(e[1]), 0, 360), d(parseFloat(e[2]), 0, 100), d(parseFloat(e[3]), 0, 100), d(isNaN(i) ? 1 : i, 0, 1)];
                  }
                }
              }

              function s(t, e) {
                return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), "rgba(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + e + ")";
              }

              function l(t, e) {
                return "rgba(" + Math.round(t[0] / 255 * 100) + "%, " + Math.round(t[1] / 255 * 100) + "%, " + Math.round(t[2] / 255 * 100) + "%, " + (e || t[3] || 1) + ")";
              }

              function u(t, e) {
                return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), "hsla(" + t[0] + ", " + t[1] + "%, " + t[2] + "%, " + e + ")";
              }

              function d(t, e, i) {
                return Math.min(Math.max(e, t), i);
              }

              function c(t) {
                var e = t.toString(16).toUpperCase();
                return e.length < 2 ? "0" + e : e;
              }

              e.exports = {
                getRgba: n,
                getHsla: a,
                getRgb: function getRgb(t) {
                  var e = n(t);
                  return e && e.slice(0, 3);
                },
                getHsl: function getHsl(t) {
                  var e = a(t);
                  return e && e.slice(0, 3);
                },
                getHwb: r,
                getAlpha: function getAlpha(t) {
                  var e = n(t);
                  {
                    if (e) return e[3];
                    if (e = a(t)) return e[3];
                    if (e = r(t)) return e[3];
                  }
                },
                hexString: function hexString(t) {
                  return "#" + c(t[0]) + c(t[1]) + c(t[2]);
                },
                rgbString: function rgbString(t, e) {
                  if (e < 1 || t[3] && t[3] < 1) return s(t, e);
                  return "rgb(" + t[0] + ", " + t[1] + ", " + t[2] + ")";
                },
                rgbaString: s,
                percentString: function percentString(t, e) {
                  if (e < 1 || t[3] && t[3] < 1) return l(t, e);
                  var i = Math.round(t[0] / 255 * 100),
                      n = Math.round(t[1] / 255 * 100),
                      a = Math.round(t[2] / 255 * 100);
                  return "rgb(" + i + "%, " + n + "%, " + a + "%)";
                },
                percentaString: l,
                hslString: function hslString(t, e) {
                  if (e < 1 || t[3] && t[3] < 1) return u(t, e);
                  return "hsl(" + t[0] + ", " + t[1] + "%, " + t[2] + "%)";
                },
                hslaString: u,
                hwbString: function hwbString(t, e) {
                  void 0 === e && (e = void 0 !== t[3] ? t[3] : 1);
                  return "hwb(" + t[0] + ", " + t[1] + "%, " + t[2] + "%" + (void 0 !== e && 1 !== e ? ", " + e : "") + ")";
                },
                keyword: function keyword(t) {
                  return h[t.slice(0, 3)];
                }
              };
              var h = {};

              for (var f in o) {
                h[o[f]] = f;
              }
            }, {
              6: 6
            }],
            3: [function (t, e, i) {
              var d = t(5),
                  n = t(2),
                  r = function r(t) {
                return t instanceof r ? t : this instanceof r ? (this.valid = !1, this.values = {
                  rgb: [0, 0, 0],
                  hsl: [0, 0, 0],
                  hsv: [0, 0, 0],
                  hwb: [0, 0, 0],
                  cmyk: [0, 0, 0, 0],
                  alpha: 1
                }, void ("string" == typeof t ? (e = n.getRgba(t)) ? this.setValues("rgb", e) : (e = n.getHsla(t)) ? this.setValues("hsl", e) : (e = n.getHwb(t)) && this.setValues("hwb", e) : "object" == _typeof2(t) && (void 0 !== (e = t).r || void 0 !== e.red ? this.setValues("rgb", e) : void 0 !== e.l || void 0 !== e.lightness ? this.setValues("hsl", e) : void 0 !== e.v || void 0 !== e.value ? this.setValues("hsv", e) : void 0 !== e.w || void 0 !== e.whiteness ? this.setValues("hwb", e) : void 0 === e.c && void 0 === e.cyan || this.setValues("cmyk", e)))) : new r(t);
                var e;
              };

              r.prototype = {
                isValid: function isValid() {
                  return this.valid;
                },
                rgb: function rgb() {
                  return this.setSpace("rgb", arguments);
                },
                hsl: function hsl() {
                  return this.setSpace("hsl", arguments);
                },
                hsv: function hsv() {
                  return this.setSpace("hsv", arguments);
                },
                hwb: function hwb() {
                  return this.setSpace("hwb", arguments);
                },
                cmyk: function cmyk() {
                  return this.setSpace("cmyk", arguments);
                },
                rgbArray: function rgbArray() {
                  return this.values.rgb;
                },
                hslArray: function hslArray() {
                  return this.values.hsl;
                },
                hsvArray: function hsvArray() {
                  return this.values.hsv;
                },
                hwbArray: function hwbArray() {
                  var t = this.values;
                  return 1 !== t.alpha ? t.hwb.concat([t.alpha]) : t.hwb;
                },
                cmykArray: function cmykArray() {
                  return this.values.cmyk;
                },
                rgbaArray: function rgbaArray() {
                  var t = this.values;
                  return t.rgb.concat([t.alpha]);
                },
                hslaArray: function hslaArray() {
                  var t = this.values;
                  return t.hsl.concat([t.alpha]);
                },
                alpha: function alpha(t) {
                  return void 0 === t ? this.values.alpha : (this.setValues("alpha", t), this);
                },
                red: function red(t) {
                  return this.setChannel("rgb", 0, t);
                },
                green: function green(t) {
                  return this.setChannel("rgb", 1, t);
                },
                blue: function blue(t) {
                  return this.setChannel("rgb", 2, t);
                },
                hue: function hue(t) {
                  return t && (t = (t %= 360) < 0 ? 360 + t : t), this.setChannel("hsl", 0, t);
                },
                saturation: function saturation(t) {
                  return this.setChannel("hsl", 1, t);
                },
                lightness: function lightness(t) {
                  return this.setChannel("hsl", 2, t);
                },
                saturationv: function saturationv(t) {
                  return this.setChannel("hsv", 1, t);
                },
                whiteness: function whiteness(t) {
                  return this.setChannel("hwb", 1, t);
                },
                blackness: function blackness(t) {
                  return this.setChannel("hwb", 2, t);
                },
                value: function value(t) {
                  return this.setChannel("hsv", 2, t);
                },
                cyan: function cyan(t) {
                  return this.setChannel("cmyk", 0, t);
                },
                magenta: function magenta(t) {
                  return this.setChannel("cmyk", 1, t);
                },
                yellow: function yellow(t) {
                  return this.setChannel("cmyk", 2, t);
                },
                black: function black(t) {
                  return this.setChannel("cmyk", 3, t);
                },
                hexString: function hexString() {
                  return n.hexString(this.values.rgb);
                },
                rgbString: function rgbString() {
                  return n.rgbString(this.values.rgb, this.values.alpha);
                },
                rgbaString: function rgbaString() {
                  return n.rgbaString(this.values.rgb, this.values.alpha);
                },
                percentString: function percentString() {
                  return n.percentString(this.values.rgb, this.values.alpha);
                },
                hslString: function hslString() {
                  return n.hslString(this.values.hsl, this.values.alpha);
                },
                hslaString: function hslaString() {
                  return n.hslaString(this.values.hsl, this.values.alpha);
                },
                hwbString: function hwbString() {
                  return n.hwbString(this.values.hwb, this.values.alpha);
                },
                keyword: function keyword() {
                  return n.keyword(this.values.rgb, this.values.alpha);
                },
                rgbNumber: function rgbNumber() {
                  var t = this.values.rgb;
                  return t[0] << 16 | t[1] << 8 | t[2];
                },
                luminosity: function luminosity() {
                  for (var t = this.values.rgb, e = [], i = 0; i < t.length; i++) {
                    var n = t[i] / 255;
                    e[i] = n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4);
                  }

                  return .2126 * e[0] + .7152 * e[1] + .0722 * e[2];
                },
                contrast: function contrast(t) {
                  var e = this.luminosity(),
                      i = t.luminosity();
                  return i < e ? (e + .05) / (i + .05) : (i + .05) / (e + .05);
                },
                level: function level(t) {
                  var e = this.contrast(t);
                  return 7.1 <= e ? "AAA" : 4.5 <= e ? "AA" : "";
                },
                dark: function dark() {
                  var t = this.values.rgb;
                  return (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3 < 128;
                },
                light: function light() {
                  return !this.dark();
                },
                negate: function negate() {
                  for (var t = [], e = 0; e < 3; e++) {
                    t[e] = 255 - this.values.rgb[e];
                  }

                  return this.setValues("rgb", t), this;
                },
                lighten: function lighten(t) {
                  var e = this.values.hsl;
                  return e[2] += e[2] * t, this.setValues("hsl", e), this;
                },
                darken: function darken(t) {
                  var e = this.values.hsl;
                  return e[2] -= e[2] * t, this.setValues("hsl", e), this;
                },
                saturate: function saturate(t) {
                  var e = this.values.hsl;
                  return e[1] += e[1] * t, this.setValues("hsl", e), this;
                },
                desaturate: function desaturate(t) {
                  var e = this.values.hsl;
                  return e[1] -= e[1] * t, this.setValues("hsl", e), this;
                },
                whiten: function whiten(t) {
                  var e = this.values.hwb;
                  return e[1] += e[1] * t, this.setValues("hwb", e), this;
                },
                blacken: function blacken(t) {
                  var e = this.values.hwb;
                  return e[2] += e[2] * t, this.setValues("hwb", e), this;
                },
                greyscale: function greyscale() {
                  var t = this.values.rgb,
                      e = .3 * t[0] + .59 * t[1] + .11 * t[2];
                  return this.setValues("rgb", [e, e, e]), this;
                },
                clearer: function clearer(t) {
                  var e = this.values.alpha;
                  return this.setValues("alpha", e - e * t), this;
                },
                opaquer: function opaquer(t) {
                  var e = this.values.alpha;
                  return this.setValues("alpha", e + e * t), this;
                },
                rotate: function rotate(t) {
                  var e = this.values.hsl,
                      i = (e[0] + t) % 360;
                  return e[0] = i < 0 ? 360 + i : i, this.setValues("hsl", e), this;
                },
                mix: function mix(t, e) {
                  var i = this,
                      n = t,
                      a = void 0 === e ? .5 : e,
                      o = 2 * a - 1,
                      r = i.alpha() - n.alpha(),
                      s = ((o * r == -1 ? o : (o + r) / (1 + o * r)) + 1) / 2,
                      l = 1 - s;
                  return this.rgb(s * i.red() + l * n.red(), s * i.green() + l * n.green(), s * i.blue() + l * n.blue()).alpha(i.alpha() * a + n.alpha() * (1 - a));
                },
                toJSON: function toJSON() {
                  return this.rgb();
                },
                clone: function clone() {
                  var t,
                      e,
                      i = new r(),
                      n = this.values,
                      a = i.values;

                  for (var o in n) {
                    n.hasOwnProperty(o) && (t = n[o], "[object Array]" === (e = {}.toString.call(t)) ? a[o] = t.slice(0) : "[object Number]" === e ? a[o] = t : console.error("unexpected color value:", t));
                  }

                  return i;
                }
              }, r.prototype.spaces = {
                rgb: ["red", "green", "blue"],
                hsl: ["hue", "saturation", "lightness"],
                hsv: ["hue", "saturation", "value"],
                hwb: ["hue", "whiteness", "blackness"],
                cmyk: ["cyan", "magenta", "yellow", "black"]
              }, r.prototype.maxes = {
                rgb: [255, 255, 255],
                hsl: [360, 100, 100],
                hsv: [360, 100, 100],
                hwb: [360, 100, 100],
                cmyk: [100, 100, 100, 100]
              }, r.prototype.getValues = function (t) {
                for (var e = this.values, i = {}, n = 0; n < t.length; n++) {
                  i[t.charAt(n)] = e[t][n];
                }

                return 1 !== e.alpha && (i.a = e.alpha), i;
              }, r.prototype.setValues = function (t, e) {
                var i,
                    n,
                    a = this.values,
                    o = this.spaces,
                    r = this.maxes,
                    s = 1;
                if (this.valid = !0, "alpha" === t) s = e;else if (e.length) a[t] = e.slice(0, t.length), s = e[t.length];else if (void 0 !== e[t.charAt(0)]) {
                  for (i = 0; i < t.length; i++) {
                    a[t][i] = e[t.charAt(i)];
                  }

                  s = e.a;
                } else if (void 0 !== e[o[t][0]]) {
                  var l = o[t];

                  for (i = 0; i < t.length; i++) {
                    a[t][i] = e[l[i]];
                  }

                  s = e.alpha;
                }
                if (a.alpha = Math.max(0, Math.min(1, void 0 === s ? a.alpha : s)), "alpha" === t) return !1;

                for (i = 0; i < t.length; i++) {
                  n = Math.max(0, Math.min(r[t][i], a[t][i])), a[t][i] = Math.round(n);
                }

                for (var u in o) {
                  u !== t && (a[u] = d[t][u](a[t]));
                }

                return !0;
              }, r.prototype.setSpace = function (t, e) {
                var i = e[0];
                return void 0 === i ? this.getValues(t) : ("number" == typeof i && (i = Array.prototype.slice.call(e)), this.setValues(t, i), this);
              }, r.prototype.setChannel = function (t, e, i) {
                var n = this.values[t];
                return void 0 === i ? n[e] : (i === n[e] || (n[e] = i, this.setValues(t, n)), this);
              }, "undefined" != typeof window && (window.Color = r), e.exports = r;
            }, {
              2: 2,
              5: 5
            }],
            4: [function (t, e, i) {
              function a(t) {
                var e,
                    i,
                    n = t[0] / 255,
                    a = t[1] / 255,
                    o = t[2] / 255,
                    r = Math.min(n, a, o),
                    s = Math.max(n, a, o),
                    l = s - r;
                return s == r ? e = 0 : n == s ? e = (a - o) / l : a == s ? e = 2 + (o - n) / l : o == s && (e = 4 + (n - a) / l), (e = Math.min(60 * e, 360)) < 0 && (e += 360), i = (r + s) / 2, [e, 100 * (s == r ? 0 : i <= .5 ? l / (s + r) : l / (2 - s - r)), 100 * i];
              }

              function n(t) {
                var e,
                    i,
                    n = t[0],
                    a = t[1],
                    o = t[2],
                    r = Math.min(n, a, o),
                    s = Math.max(n, a, o),
                    l = s - r;
                return i = 0 == s ? 0 : l / s * 1e3 / 10, s == r ? e = 0 : n == s ? e = (a - o) / l : a == s ? e = 2 + (o - n) / l : o == s && (e = 4 + (n - a) / l), (e = Math.min(60 * e, 360)) < 0 && (e += 360), [e, i, s / 255 * 1e3 / 10];
              }

              function o(t) {
                var e = t[0],
                    i = t[1],
                    n = t[2];
                return [a(t)[0], 100 * (1 / 255 * Math.min(e, Math.min(i, n))), 100 * (n = 1 - 1 / 255 * Math.max(e, Math.max(i, n)))];
              }

              function s(t) {
                var e,
                    i = t[0] / 255,
                    n = t[1] / 255,
                    a = t[2] / 255;
                return [100 * ((1 - i - (e = Math.min(1 - i, 1 - n, 1 - a))) / (1 - e) || 0), 100 * ((1 - n - e) / (1 - e) || 0), 100 * ((1 - a - e) / (1 - e) || 0), 100 * e];
              }

              function l(t) {
                return S[JSON.stringify(t)];
              }

              function u(t) {
                var e = t[0] / 255,
                    i = t[1] / 255,
                    n = t[2] / 255;
                return [100 * (.4124 * (e = .04045 < e ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92) + .3576 * (i = .04045 < i ? Math.pow((i + .055) / 1.055, 2.4) : i / 12.92) + .1805 * (n = .04045 < n ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92)), 100 * (.2126 * e + .7152 * i + .0722 * n), 100 * (.0193 * e + .1192 * i + .9505 * n)];
              }

              function d(t) {
                var e = u(t),
                    i = e[0],
                    n = e[1],
                    a = e[2];
                return n /= 100, a /= 108.883, i = .008856 < (i /= 95.047) ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116, [116 * (n = .008856 < n ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116) - 16, 500 * (i - n), 200 * (n - (a = .008856 < a ? Math.pow(a, 1 / 3) : 7.787 * a + 16 / 116))];
              }

              function c(t) {
                var e,
                    i,
                    n,
                    a,
                    o,
                    r = t[0] / 360,
                    s = t[1] / 100,
                    l = t[2] / 100;
                if (0 == s) return [o = 255 * l, o, o];
                e = 2 * l - (i = l < .5 ? l * (1 + s) : l + s - l * s), a = [0, 0, 0];

                for (var u = 0; u < 3; u++) {
                  (n = r + 1 / 3 * -(u - 1)) < 0 && n++, 1 < n && n--, o = 6 * n < 1 ? e + 6 * (i - e) * n : 2 * n < 1 ? i : 3 * n < 2 ? e + (i - e) * (2 / 3 - n) * 6 : e, a[u] = 255 * o;
                }

                return a;
              }

              function h(t) {
                var e = t[0] / 60,
                    i = t[1] / 100,
                    n = t[2] / 100,
                    a = Math.floor(e) % 6,
                    o = e - Math.floor(e),
                    r = 255 * n * (1 - i),
                    s = 255 * n * (1 - i * o),
                    l = 255 * n * (1 - i * (1 - o));
                n *= 255;

                switch (a) {
                  case 0:
                    return [n, l, r];

                  case 1:
                    return [s, n, r];

                  case 2:
                    return [r, n, l];

                  case 3:
                    return [r, s, n];

                  case 4:
                    return [l, r, n];

                  case 5:
                    return [n, r, s];
                }
              }

              function f(t) {
                var e,
                    i,
                    n,
                    a,
                    o = t[0] / 360,
                    s = t[1] / 100,
                    l = t[2] / 100,
                    u = s + l;

                switch (1 < u && (s /= u, l /= u), n = 6 * o - (e = Math.floor(6 * o)), 0 != (1 & e) && (n = 1 - n), a = s + n * ((i = 1 - l) - s), e) {
                  default:
                  case 6:
                  case 0:
                    r = i, g = a, b = s;
                    break;

                  case 1:
                    r = a, g = i, b = s;
                    break;

                  case 2:
                    r = s, g = i, b = a;
                    break;

                  case 3:
                    r = s, g = a, b = i;
                    break;

                  case 4:
                    r = a, g = s, b = i;
                    break;

                  case 5:
                    r = i, g = s, b = a;
                }

                return [255 * r, 255 * g, 255 * b];
              }

              function p(t) {
                var e = t[0] / 100,
                    i = t[1] / 100,
                    n = t[2] / 100,
                    a = t[3] / 100;
                return [255 * (1 - Math.min(1, e * (1 - a) + a)), 255 * (1 - Math.min(1, i * (1 - a) + a)), 255 * (1 - Math.min(1, n * (1 - a) + a))];
              }

              function m(t) {
                var e,
                    i,
                    n,
                    a = t[0] / 100,
                    o = t[1] / 100,
                    r = t[2] / 100;
                return i = -.9689 * a + 1.8758 * o + .0415 * r, n = .0557 * a + -.204 * o + 1.057 * r, e = .0031308 < (e = 3.2406 * a + -1.5372 * o + -.4986 * r) ? 1.055 * Math.pow(e, 1 / 2.4) - .055 : e *= 12.92, i = .0031308 < i ? 1.055 * Math.pow(i, 1 / 2.4) - .055 : i *= 12.92, n = .0031308 < n ? 1.055 * Math.pow(n, 1 / 2.4) - .055 : n *= 12.92, [255 * (e = Math.min(Math.max(0, e), 1)), 255 * (i = Math.min(Math.max(0, i), 1)), 255 * (n = Math.min(Math.max(0, n), 1))];
              }

              function v(t) {
                var e = t[0],
                    i = t[1],
                    n = t[2];
                return i /= 100, n /= 108.883, e = .008856 < (e /= 95.047) ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, [116 * (i = .008856 < i ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116) - 16, 500 * (e - i), 200 * (i - (n = .008856 < n ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116))];
              }

              function x(t) {
                var e,
                    i,
                    n,
                    a,
                    o = t[0],
                    r = t[1],
                    s = t[2];
                return a = o <= 8 ? (i = 100 * o / 903.3) / 100 * 7.787 + 16 / 116 : (i = 100 * Math.pow((o + 16) / 116, 3), Math.pow(i / 100, 1 / 3)), [e = e / 95.047 <= .008856 ? e = 95.047 * (r / 500 + a - 16 / 116) / 7.787 : 95.047 * Math.pow(r / 500 + a, 3), i, n = n / 108.883 <= .008859 ? n = 108.883 * (a - s / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(a - s / 200, 3)];
              }

              function y(t) {
                var e,
                    i = t[0],
                    n = t[1],
                    a = t[2];
                return (e = 360 * Math.atan2(a, n) / 2 / Math.PI) < 0 && (e += 360), [i, Math.sqrt(n * n + a * a), e];
              }

              function k(t) {
                return m(x(t));
              }

              function M(t) {
                var e,
                    i = t[0],
                    n = t[1];
                return e = t[2] / 360 * 2 * Math.PI, [i, n * Math.cos(e), n * Math.sin(e)];
              }

              function w(t) {
                return C[t];
              }

              e.exports = {
                rgb2hsl: a,
                rgb2hsv: n,
                rgb2hwb: o,
                rgb2cmyk: s,
                rgb2keyword: l,
                rgb2xyz: u,
                rgb2lab: d,
                rgb2lch: function rgb2lch(t) {
                  return y(d(t));
                },
                hsl2rgb: c,
                hsl2hsv: function hsl2hsv(t) {
                  var e = t[0],
                      i = t[1] / 100,
                      n = t[2] / 100;
                  return 0 !== n ? [e, 100 * (2 * (i *= (n *= 2) <= 1 ? n : 2 - n) / (n + i)), 100 * ((n + i) / 2)] : [0, 0, 0];
                },
                hsl2hwb: function hsl2hwb(t) {
                  return o(c(t));
                },
                hsl2cmyk: function hsl2cmyk(t) {
                  return s(c(t));
                },
                hsl2keyword: function hsl2keyword(t) {
                  return l(c(t));
                },
                hsv2rgb: h,
                hsv2hsl: function hsv2hsl(t) {
                  var e,
                      i,
                      n = t[0],
                      a = t[1] / 100,
                      o = t[2] / 100;
                  return e = a * o, [n, 100 * (e = (e /= (i = (2 - a) * o) <= 1 ? i : 2 - i) || 0), 100 * (i /= 2)];
                },
                hsv2hwb: function hsv2hwb(t) {
                  return o(h(t));
                },
                hsv2cmyk: function hsv2cmyk(t) {
                  return s(h(t));
                },
                hsv2keyword: function hsv2keyword(t) {
                  return l(h(t));
                },
                hwb2rgb: f,
                hwb2hsl: function hwb2hsl(t) {
                  return a(f(t));
                },
                hwb2hsv: function hwb2hsv(t) {
                  return n(f(t));
                },
                hwb2cmyk: function hwb2cmyk(t) {
                  return s(f(t));
                },
                hwb2keyword: function hwb2keyword(t) {
                  return l(f(t));
                },
                cmyk2rgb: p,
                cmyk2hsl: function cmyk2hsl(t) {
                  return a(p(t));
                },
                cmyk2hsv: function cmyk2hsv(t) {
                  return n(p(t));
                },
                cmyk2hwb: function cmyk2hwb(t) {
                  return o(p(t));
                },
                cmyk2keyword: function cmyk2keyword(t) {
                  return l(p(t));
                },
                keyword2rgb: w,
                keyword2hsl: function keyword2hsl(t) {
                  return a(w(t));
                },
                keyword2hsv: function keyword2hsv(t) {
                  return n(w(t));
                },
                keyword2hwb: function keyword2hwb(t) {
                  return o(w(t));
                },
                keyword2cmyk: function keyword2cmyk(t) {
                  return s(w(t));
                },
                keyword2lab: function keyword2lab(t) {
                  return d(w(t));
                },
                keyword2xyz: function keyword2xyz(t) {
                  return u(w(t));
                },
                xyz2rgb: m,
                xyz2lab: v,
                xyz2lch: function xyz2lch(t) {
                  return y(v(t));
                },
                lab2xyz: x,
                lab2rgb: k,
                lab2lch: y,
                lch2lab: M,
                lch2xyz: function lch2xyz(t) {
                  return x(M(t));
                },
                lch2rgb: function lch2rgb(t) {
                  return k(M(t));
                }
              };
              var C = {
                aliceblue: [240, 248, 255],
                antiquewhite: [250, 235, 215],
                aqua: [0, 255, 255],
                aquamarine: [127, 255, 212],
                azure: [240, 255, 255],
                beige: [245, 245, 220],
                bisque: [255, 228, 196],
                black: [0, 0, 0],
                blanchedalmond: [255, 235, 205],
                blue: [0, 0, 255],
                blueviolet: [138, 43, 226],
                brown: [165, 42, 42],
                burlywood: [222, 184, 135],
                cadetblue: [95, 158, 160],
                chartreuse: [127, 255, 0],
                chocolate: [210, 105, 30],
                coral: [255, 127, 80],
                cornflowerblue: [100, 149, 237],
                cornsilk: [255, 248, 220],
                crimson: [220, 20, 60],
                cyan: [0, 255, 255],
                darkblue: [0, 0, 139],
                darkcyan: [0, 139, 139],
                darkgoldenrod: [184, 134, 11],
                darkgray: [169, 169, 169],
                darkgreen: [0, 100, 0],
                darkgrey: [169, 169, 169],
                darkkhaki: [189, 183, 107],
                darkmagenta: [139, 0, 139],
                darkolivegreen: [85, 107, 47],
                darkorange: [255, 140, 0],
                darkorchid: [153, 50, 204],
                darkred: [139, 0, 0],
                darksalmon: [233, 150, 122],
                darkseagreen: [143, 188, 143],
                darkslateblue: [72, 61, 139],
                darkslategray: [47, 79, 79],
                darkslategrey: [47, 79, 79],
                darkturquoise: [0, 206, 209],
                darkviolet: [148, 0, 211],
                deeppink: [255, 20, 147],
                deepskyblue: [0, 191, 255],
                dimgray: [105, 105, 105],
                dimgrey: [105, 105, 105],
                dodgerblue: [30, 144, 255],
                firebrick: [178, 34, 34],
                floralwhite: [255, 250, 240],
                forestgreen: [34, 139, 34],
                fuchsia: [255, 0, 255],
                gainsboro: [220, 220, 220],
                ghostwhite: [248, 248, 255],
                gold: [255, 215, 0],
                goldenrod: [218, 165, 32],
                gray: [128, 128, 128],
                green: [0, 128, 0],
                greenyellow: [173, 255, 47],
                grey: [128, 128, 128],
                honeydew: [240, 255, 240],
                hotpink: [255, 105, 180],
                indianred: [205, 92, 92],
                indigo: [75, 0, 130],
                ivory: [255, 255, 240],
                khaki: [240, 230, 140],
                lavender: [230, 230, 250],
                lavenderblush: [255, 240, 245],
                lawngreen: [124, 252, 0],
                lemonchiffon: [255, 250, 205],
                lightblue: [173, 216, 230],
                lightcoral: [240, 128, 128],
                lightcyan: [224, 255, 255],
                lightgoldenrodyellow: [250, 250, 210],
                lightgray: [211, 211, 211],
                lightgreen: [144, 238, 144],
                lightgrey: [211, 211, 211],
                lightpink: [255, 182, 193],
                lightsalmon: [255, 160, 122],
                lightseagreen: [32, 178, 170],
                lightskyblue: [135, 206, 250],
                lightslategray: [119, 136, 153],
                lightslategrey: [119, 136, 153],
                lightsteelblue: [176, 196, 222],
                lightyellow: [255, 255, 224],
                lime: [0, 255, 0],
                limegreen: [50, 205, 50],
                linen: [250, 240, 230],
                magenta: [255, 0, 255],
                maroon: [128, 0, 0],
                mediumaquamarine: [102, 205, 170],
                mediumblue: [0, 0, 205],
                mediumorchid: [186, 85, 211],
                mediumpurple: [147, 112, 219],
                mediumseagreen: [60, 179, 113],
                mediumslateblue: [123, 104, 238],
                mediumspringgreen: [0, 250, 154],
                mediumturquoise: [72, 209, 204],
                mediumvioletred: [199, 21, 133],
                midnightblue: [25, 25, 112],
                mintcream: [245, 255, 250],
                mistyrose: [255, 228, 225],
                moccasin: [255, 228, 181],
                navajowhite: [255, 222, 173],
                navy: [0, 0, 128],
                oldlace: [253, 245, 230],
                olive: [128, 128, 0],
                olivedrab: [107, 142, 35],
                orange: [255, 165, 0],
                orangered: [255, 69, 0],
                orchid: [218, 112, 214],
                palegoldenrod: [238, 232, 170],
                palegreen: [152, 251, 152],
                paleturquoise: [175, 238, 238],
                palevioletred: [219, 112, 147],
                papayawhip: [255, 239, 213],
                peachpuff: [255, 218, 185],
                peru: [205, 133, 63],
                pink: [255, 192, 203],
                plum: [221, 160, 221],
                powderblue: [176, 224, 230],
                purple: [128, 0, 128],
                rebeccapurple: [102, 51, 153],
                red: [255, 0, 0],
                rosybrown: [188, 143, 143],
                royalblue: [65, 105, 225],
                saddlebrown: [139, 69, 19],
                salmon: [250, 128, 114],
                sandybrown: [244, 164, 96],
                seagreen: [46, 139, 87],
                seashell: [255, 245, 238],
                sienna: [160, 82, 45],
                silver: [192, 192, 192],
                skyblue: [135, 206, 235],
                slateblue: [106, 90, 205],
                slategray: [112, 128, 144],
                slategrey: [112, 128, 144],
                snow: [255, 250, 250],
                springgreen: [0, 255, 127],
                steelblue: [70, 130, 180],
                tan: [210, 180, 140],
                teal: [0, 128, 128],
                thistle: [216, 191, 216],
                tomato: [255, 99, 71],
                turquoise: [64, 224, 208],
                violet: [238, 130, 238],
                wheat: [245, 222, 179],
                white: [255, 255, 255],
                whitesmoke: [245, 245, 245],
                yellow: [255, 255, 0],
                yellowgreen: [154, 205, 50]
              },
                  S = {};

              for (var _ in C) {
                S[JSON.stringify(C[_])] = _;
              }
            }, {}],
            5: [function (t, e, i) {
              var a = t(4),
                  o = function o() {
                return new u();
              };

              for (var n in a) {
                o[n + "Raw"] = function (e) {
                  return function (t) {
                    return "number" == typeof t && (t = Array.prototype.slice.call(arguments)), a[e](t);
                  };
                }(n);

                var r = /(\w+)2(\w+)/.exec(n),
                    s = r[1],
                    l = r[2];

                (o[s] = o[s] || {})[l] = o[n] = function (n) {
                  return function (t) {
                    "number" == typeof t && (t = Array.prototype.slice.call(arguments));
                    var e = a[n](t);
                    if ("string" == typeof e || void 0 === e) return e;

                    for (var i = 0; i < e.length; i++) {
                      e[i] = Math.round(e[i]);
                    }

                    return e;
                  };
                }(n);
              }

              var u = function u() {
                this.convs = {};
              };

              u.prototype.routeSpace = function (t, e) {
                var i = e[0];
                return void 0 === i ? this.getValues(t) : ("number" == typeof i && (i = Array.prototype.slice.call(e)), this.setValues(t, i));
              }, u.prototype.setValues = function (t, e) {
                return this.space = t, this.convs = {}, this.convs[t] = e, this;
              }, u.prototype.getValues = function (t) {
                var e = this.convs[t];

                if (!e) {
                  var i = this.space,
                      n = this.convs[i];
                  e = o[i][t](n), this.convs[t] = e;
                }

                return e;
              }, ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (e) {
                u.prototype[e] = function (t) {
                  return this.routeSpace(e, arguments);
                };
              }), e.exports = o;
            }, {
              4: 4
            }],
            6: [function (t, e, i) {
              "use strict";

              e.exports = {
                aliceblue: [240, 248, 255],
                antiquewhite: [250, 235, 215],
                aqua: [0, 255, 255],
                aquamarine: [127, 255, 212],
                azure: [240, 255, 255],
                beige: [245, 245, 220],
                bisque: [255, 228, 196],
                black: [0, 0, 0],
                blanchedalmond: [255, 235, 205],
                blue: [0, 0, 255],
                blueviolet: [138, 43, 226],
                brown: [165, 42, 42],
                burlywood: [222, 184, 135],
                cadetblue: [95, 158, 160],
                chartreuse: [127, 255, 0],
                chocolate: [210, 105, 30],
                coral: [255, 127, 80],
                cornflowerblue: [100, 149, 237],
                cornsilk: [255, 248, 220],
                crimson: [220, 20, 60],
                cyan: [0, 255, 255],
                darkblue: [0, 0, 139],
                darkcyan: [0, 139, 139],
                darkgoldenrod: [184, 134, 11],
                darkgray: [169, 169, 169],
                darkgreen: [0, 100, 0],
                darkgrey: [169, 169, 169],
                darkkhaki: [189, 183, 107],
                darkmagenta: [139, 0, 139],
                darkolivegreen: [85, 107, 47],
                darkorange: [255, 140, 0],
                darkorchid: [153, 50, 204],
                darkred: [139, 0, 0],
                darksalmon: [233, 150, 122],
                darkseagreen: [143, 188, 143],
                darkslateblue: [72, 61, 139],
                darkslategray: [47, 79, 79],
                darkslategrey: [47, 79, 79],
                darkturquoise: [0, 206, 209],
                darkviolet: [148, 0, 211],
                deeppink: [255, 20, 147],
                deepskyblue: [0, 191, 255],
                dimgray: [105, 105, 105],
                dimgrey: [105, 105, 105],
                dodgerblue: [30, 144, 255],
                firebrick: [178, 34, 34],
                floralwhite: [255, 250, 240],
                forestgreen: [34, 139, 34],
                fuchsia: [255, 0, 255],
                gainsboro: [220, 220, 220],
                ghostwhite: [248, 248, 255],
                gold: [255, 215, 0],
                goldenrod: [218, 165, 32],
                gray: [128, 128, 128],
                green: [0, 128, 0],
                greenyellow: [173, 255, 47],
                grey: [128, 128, 128],
                honeydew: [240, 255, 240],
                hotpink: [255, 105, 180],
                indianred: [205, 92, 92],
                indigo: [75, 0, 130],
                ivory: [255, 255, 240],
                khaki: [240, 230, 140],
                lavender: [230, 230, 250],
                lavenderblush: [255, 240, 245],
                lawngreen: [124, 252, 0],
                lemonchiffon: [255, 250, 205],
                lightblue: [173, 216, 230],
                lightcoral: [240, 128, 128],
                lightcyan: [224, 255, 255],
                lightgoldenrodyellow: [250, 250, 210],
                lightgray: [211, 211, 211],
                lightgreen: [144, 238, 144],
                lightgrey: [211, 211, 211],
                lightpink: [255, 182, 193],
                lightsalmon: [255, 160, 122],
                lightseagreen: [32, 178, 170],
                lightskyblue: [135, 206, 250],
                lightslategray: [119, 136, 153],
                lightslategrey: [119, 136, 153],
                lightsteelblue: [176, 196, 222],
                lightyellow: [255, 255, 224],
                lime: [0, 255, 0],
                limegreen: [50, 205, 50],
                linen: [250, 240, 230],
                magenta: [255, 0, 255],
                maroon: [128, 0, 0],
                mediumaquamarine: [102, 205, 170],
                mediumblue: [0, 0, 205],
                mediumorchid: [186, 85, 211],
                mediumpurple: [147, 112, 219],
                mediumseagreen: [60, 179, 113],
                mediumslateblue: [123, 104, 238],
                mediumspringgreen: [0, 250, 154],
                mediumturquoise: [72, 209, 204],
                mediumvioletred: [199, 21, 133],
                midnightblue: [25, 25, 112],
                mintcream: [245, 255, 250],
                mistyrose: [255, 228, 225],
                moccasin: [255, 228, 181],
                navajowhite: [255, 222, 173],
                navy: [0, 0, 128],
                oldlace: [253, 245, 230],
                olive: [128, 128, 0],
                olivedrab: [107, 142, 35],
                orange: [255, 165, 0],
                orangered: [255, 69, 0],
                orchid: [218, 112, 214],
                palegoldenrod: [238, 232, 170],
                palegreen: [152, 251, 152],
                paleturquoise: [175, 238, 238],
                palevioletred: [219, 112, 147],
                papayawhip: [255, 239, 213],
                peachpuff: [255, 218, 185],
                peru: [205, 133, 63],
                pink: [255, 192, 203],
                plum: [221, 160, 221],
                powderblue: [176, 224, 230],
                purple: [128, 0, 128],
                rebeccapurple: [102, 51, 153],
                red: [255, 0, 0],
                rosybrown: [188, 143, 143],
                royalblue: [65, 105, 225],
                saddlebrown: [139, 69, 19],
                salmon: [250, 128, 114],
                sandybrown: [244, 164, 96],
                seagreen: [46, 139, 87],
                seashell: [255, 245, 238],
                sienna: [160, 82, 45],
                silver: [192, 192, 192],
                skyblue: [135, 206, 235],
                slateblue: [106, 90, 205],
                slategray: [112, 128, 144],
                slategrey: [112, 128, 144],
                snow: [255, 250, 250],
                springgreen: [0, 255, 127],
                steelblue: [70, 130, 180],
                tan: [210, 180, 140],
                teal: [0, 128, 128],
                thistle: [216, 191, 216],
                tomato: [255, 99, 71],
                turquoise: [64, 224, 208],
                violet: [238, 130, 238],
                wheat: [245, 222, 179],
                white: [255, 255, 255],
                whitesmoke: [245, 245, 245],
                yellow: [255, 255, 0],
                yellowgreen: [154, 205, 50]
              };
            }, {}],
            7: [function (t, e, i) {
              var n = t(30)();
              n.helpers = t(46), t(28)(n), n.Animation = t(22), n.animationService = t(23), n.defaults = t(26), n.Element = t(27), n.elements = t(41), n.Interaction = t(29), n.layouts = t(31), n.platform = t(49), n.plugins = t(32), n.Scale = t(33), n.scaleService = t(34), n.Ticks = t(35), n.Tooltip = t(36), t(24)(n), t(25)(n), t(56)(n), t(54)(n), t(55)(n), t(57)(n), t(58)(n), t(59)(n), t(15)(n), t(16)(n), t(17)(n), t(18)(n), t(19)(n), t(20)(n), t(21)(n), t(8)(n), t(9)(n), t(10)(n), t(11)(n), t(12)(n), t(13)(n), t(14)(n);
              var a = t(50);

              for (var o in a) {
                a.hasOwnProperty(o) && n.plugins.register(a[o]);
              }

              n.platform.initialize(), e.exports = n, "undefined" != typeof window && (window.Chart = n), n.Legend = a.legend._element, n.Title = a.title._element, n.pluginService = n.plugins, n.PluginBase = n.Element.extend({}), n.canvasHelpers = n.helpers.canvas, n.layoutService = n.layouts;
            }, {
              10: 10,
              11: 11,
              12: 12,
              13: 13,
              14: 14,
              15: 15,
              16: 16,
              17: 17,
              18: 18,
              19: 19,
              20: 20,
              21: 21,
              22: 22,
              23: 23,
              24: 24,
              25: 25,
              26: 26,
              27: 27,
              28: 28,
              29: 29,
              30: 30,
              31: 31,
              32: 32,
              33: 33,
              34: 34,
              35: 35,
              36: 36,
              41: 41,
              46: 46,
              49: 49,
              50: 50,
              54: 54,
              55: 55,
              56: 56,
              57: 57,
              58: 58,
              59: 59,
              8: 8,
              9: 9
            }],
            8: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Bar = function (t, e) {
                  return e.type = "bar", new i(t, e);
                };
              };
            }, {}],
            9: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Bubble = function (t, e) {
                  return e.type = "bubble", new i(t, e);
                };
              };
            }, {}],
            10: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Doughnut = function (t, e) {
                  return e.type = "doughnut", new i(t, e);
                };
              };
            }, {}],
            11: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Line = function (t, e) {
                  return e.type = "line", new i(t, e);
                };
              };
            }, {}],
            12: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.PolarArea = function (t, e) {
                  return e.type = "polarArea", new i(t, e);
                };
              };
            }, {}],
            13: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Radar = function (t, e) {
                  return e.type = "radar", new i(t, e);
                };
              };
            }, {}],
            14: [function (t, e, i) {
              "use strict";

              e.exports = function (i) {
                i.Scatter = function (t, e) {
                  return e.type = "scatter", new i(t, e);
                };
              };
            }, {}],
            15: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  S = t(46);
              n._set("bar", {
                hover: {
                  mode: "label"
                },
                scales: {
                  xAxes: [{
                    type: "category",
                    categoryPercentage: .8,
                    barPercentage: .9,
                    offset: !0,
                    gridLines: {
                      offsetGridLines: !0
                    }
                  }],
                  yAxes: [{
                    type: "linear"
                  }]
                }
              }), n._set("horizontalBar", {
                hover: {
                  mode: "index",
                  axis: "y"
                },
                scales: {
                  xAxes: [{
                    type: "linear",
                    position: "bottom"
                  }],
                  yAxes: [{
                    position: "left",
                    type: "category",
                    categoryPercentage: .8,
                    barPercentage: .9,
                    offset: !0,
                    gridLines: {
                      offsetGridLines: !0
                    }
                  }]
                },
                elements: {
                  rectangle: {
                    borderSkipped: "left"
                  }
                },
                tooltips: {
                  callbacks: {
                    title: function title(t, e) {
                      var i = "";
                      return 0 < t.length && (t[0].yLabel ? i = t[0].yLabel : 0 < e.labels.length && t[0].index < e.labels.length && (i = e.labels[t[0].index])), i;
                    },
                    label: function label(t, e) {
                      return (e.datasets[t.datasetIndex].label || "") + ": " + t.xLabel;
                    }
                  },
                  mode: "index",
                  axis: "y"
                }
              }), e.exports = function (e) {
                e.controllers.bar = e.DatasetController.extend({
                  dataElementType: a.Rectangle,
                  initialize: function initialize() {
                    var t;
                    e.DatasetController.prototype.initialize.apply(this, arguments), (t = this.getMeta()).stack = this.getDataset().stack, t.bar = !0;
                  },
                  update: function update(t) {
                    var e,
                        i,
                        n = this.getMeta().data;

                    for (this._ruler = this.getRuler(), e = 0, i = n.length; e < i; ++e) {
                      this.updateElement(n[e], e, t);
                    }
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n = this,
                        a = n.chart,
                        o = n.getMeta(),
                        r = n.getDataset(),
                        s = t.custom || {},
                        l = a.options.elements.rectangle;
                    t._xScale = n.getScaleForId(o.xAxisID), t._yScale = n.getScaleForId(o.yAxisID), t._datasetIndex = n.index, t._index = e, t._model = {
                      datasetLabel: r.label,
                      label: a.data.labels[e],
                      borderSkipped: s.borderSkipped ? s.borderSkipped : l.borderSkipped,
                      backgroundColor: s.backgroundColor ? s.backgroundColor : S.valueAtIndexOrDefault(r.backgroundColor, e, l.backgroundColor),
                      borderColor: s.borderColor ? s.borderColor : S.valueAtIndexOrDefault(r.borderColor, e, l.borderColor),
                      borderWidth: s.borderWidth ? s.borderWidth : S.valueAtIndexOrDefault(r.borderWidth, e, l.borderWidth)
                    }, n.updateElementGeometry(t, e, i), t.pivot();
                  },
                  updateElementGeometry: function updateElementGeometry(t, e, i) {
                    var n = this,
                        a = t._model,
                        o = n.getValueScale(),
                        r = o.getBasePixel(),
                        s = o.isHorizontal(),
                        l = n._ruler || n.getRuler(),
                        u = n.calculateBarValuePixels(n.index, e),
                        d = n.calculateBarIndexPixels(n.index, e, l);
                    a.horizontal = s, a.base = i ? r : u.base, a.x = s ? i ? r : u.head : d.center, a.y = s ? d.center : i ? r : u.head, a.height = s ? d.size : void 0, a.width = s ? void 0 : d.size;
                  },
                  getValueScaleId: function getValueScaleId() {
                    return this.getMeta().yAxisID;
                  },
                  getIndexScaleId: function getIndexScaleId() {
                    return this.getMeta().xAxisID;
                  },
                  getValueScale: function getValueScale() {
                    return this.getScaleForId(this.getValueScaleId());
                  },
                  getIndexScale: function getIndexScale() {
                    return this.getScaleForId(this.getIndexScaleId());
                  },
                  _getStacks: function _getStacks(t) {
                    var e,
                        i,
                        n = this.chart,
                        a = this.getIndexScale().options.stacked,
                        o = void 0 === t ? n.data.datasets.length : t + 1,
                        r = [];

                    for (e = 0; e < o; ++e) {
                      (i = n.getDatasetMeta(e)).bar && n.isDatasetVisible(e) && (!1 === a || !0 === a && -1 === r.indexOf(i.stack) || void 0 === a && (void 0 === i.stack || -1 === r.indexOf(i.stack))) && r.push(i.stack);
                    }

                    return r;
                  },
                  getStackCount: function getStackCount() {
                    return this._getStacks().length;
                  },
                  getStackIndex: function getStackIndex(t, e) {
                    var i = this._getStacks(t),
                        n = void 0 !== e ? i.indexOf(e) : -1;

                    return -1 === n ? i.length - 1 : n;
                  },
                  getRuler: function getRuler() {
                    var t,
                        e,
                        i = this.getIndexScale(),
                        n = this.getStackCount(),
                        a = this.index,
                        o = i.isHorizontal(),
                        r = o ? i.left : i.top,
                        s = r + (o ? i.width : i.height),
                        l = [];

                    for (t = 0, e = this.getMeta().data.length; t < e; ++t) {
                      l.push(i.getPixelForValue(null, t, a));
                    }

                    return {
                      min: S.isNullOrUndef(i.options.barThickness) ? function (t, e) {
                        var i,
                            n,
                            a,
                            o,
                            r = t.isHorizontal() ? t.width : t.height,
                            s = t.getTicks();

                        for (a = 1, o = e.length; a < o; ++a) {
                          r = Math.min(r, e[a] - e[a - 1]);
                        }

                        for (a = 0, o = s.length; a < o; ++a) {
                          n = t.getPixelForTick(a), r = 0 < a ? Math.min(r, n - i) : r, i = n;
                        }

                        return r;
                      }(i, l) : -1,
                      pixels: l,
                      start: r,
                      end: s,
                      stackCount: n,
                      scale: i
                    };
                  },
                  calculateBarValuePixels: function calculateBarValuePixels(t, e) {
                    var i,
                        n,
                        a,
                        o,
                        r,
                        s,
                        l = this.chart,
                        u = this.getMeta(),
                        d = this.getValueScale(),
                        c = l.data.datasets,
                        h = d.getRightValue(c[t].data[e]),
                        f = d.options.stacked,
                        g = u.stack,
                        p = 0;
                    if (f || void 0 === f && void 0 !== g) for (i = 0; i < t; ++i) {
                      (n = l.getDatasetMeta(i)).bar && n.stack === g && n.controller.getValueScaleId() === d.id && l.isDatasetVisible(i) && (a = d.getRightValue(c[i].data[e]), (h < 0 && a < 0 || 0 <= h && 0 < a) && (p += a));
                    }
                    return o = d.getPixelForValue(p), {
                      size: s = ((r = d.getPixelForValue(p + h)) - o) / 2,
                      base: o,
                      head: r,
                      center: r + s / 2
                    };
                  },
                  calculateBarIndexPixels: function calculateBarIndexPixels(t, e, i) {
                    var n,
                        a,
                        o,
                        r,
                        s,
                        l,
                        u,
                        d,
                        c,
                        h,
                        f,
                        g,
                        p,
                        m,
                        v,
                        b,
                        x,
                        y = i.scale.options,
                        k = "flex" === y.barThickness ? (c = e, f = y, p = (h = i).pixels, m = p[c], v = 0 < c ? p[c - 1] : null, b = c < p.length - 1 ? p[c + 1] : null, x = f.categoryPercentage, null === v && (v = m - (null === b ? h.end - m : b - m)), null === b && (b = m + m - v), g = m - (m - v) / 2 * x, {
                      chunk: (b - v) / 2 * x / h.stackCount,
                      ratio: f.barPercentage,
                      start: g
                    }) : (n = e, a = i, l = (o = y).barThickness, u = a.stackCount, d = a.pixels[n], s = S.isNullOrUndef(l) ? (r = a.min * o.categoryPercentage, o.barPercentage) : (r = l * u, 1), {
                      chunk: r / u,
                      ratio: s,
                      start: d - r / 2
                    }),
                        M = this.getStackIndex(t, this.getMeta().stack),
                        w = k.start + k.chunk * M + k.chunk / 2,
                        C = Math.min(S.valueOrDefault(y.maxBarThickness, 1 / 0), k.chunk * k.ratio);
                    return {
                      base: w - C / 2,
                      head: w + C / 2,
                      center: w,
                      size: C
                    };
                  },
                  draw: function draw() {
                    var t = this.chart,
                        e = this.getValueScale(),
                        i = this.getMeta().data,
                        n = this.getDataset(),
                        a = i.length,
                        o = 0;

                    for (S.canvas.clipArea(t.ctx, t.chartArea); o < a; ++o) {
                      isNaN(e.getRightValue(n.data[o])) || i[o].draw();
                    }

                    S.canvas.unclipArea(t.ctx);
                  }
                }), e.controllers.horizontalBar = e.controllers.bar.extend({
                  getValueScaleId: function getValueScaleId() {
                    return this.getMeta().xAxisID;
                  },
                  getIndexScaleId: function getIndexScaleId() {
                    return this.getMeta().yAxisID;
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            16: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  g = t(46);
              n._set("bubble", {
                hover: {
                  mode: "single"
                },
                scales: {
                  xAxes: [{
                    type: "linear",
                    position: "bottom",
                    id: "x-axis-0"
                  }],
                  yAxes: [{
                    type: "linear",
                    position: "left",
                    id: "y-axis-0"
                  }]
                },
                tooltips: {
                  callbacks: {
                    title: function title() {
                      return "";
                    },
                    label: function label(t, e) {
                      var i = e.datasets[t.datasetIndex].label || "",
                          n = e.datasets[t.datasetIndex].data[t.index];
                      return i + ": (" + t.xLabel + ", " + t.yLabel + ", " + n.r + ")";
                    }
                  }
                }
              }), e.exports = function (t) {
                t.controllers.bubble = t.DatasetController.extend({
                  dataElementType: a.Point,
                  update: function update(i) {
                    var n = this,
                        t = n.getMeta().data;
                    g.each(t, function (t, e) {
                      n.updateElement(t, e, i);
                    });
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n = this,
                        a = n.getMeta(),
                        o = t.custom || {},
                        r = n.getScaleForId(a.xAxisID),
                        s = n.getScaleForId(a.yAxisID),
                        l = n._resolveElementOptions(t, e),
                        u = n.getDataset().data[e],
                        d = n.index,
                        c = i ? r.getPixelForDecimal(.5) : r.getPixelForValue("object" == _typeof2(u) ? u : NaN, e, d),
                        h = i ? s.getBasePixel() : s.getPixelForValue(u, e, d);

                    t._xScale = r, t._yScale = s, t._options = l, t._datasetIndex = d, t._index = e, t._model = {
                      backgroundColor: l.backgroundColor,
                      borderColor: l.borderColor,
                      borderWidth: l.borderWidth,
                      hitRadius: l.hitRadius,
                      pointStyle: l.pointStyle,
                      rotation: l.rotation,
                      radius: i ? 0 : l.radius,
                      skip: o.skip || isNaN(c) || isNaN(h),
                      x: c,
                      y: h
                    }, t.pivot();
                  },
                  setHoverStyle: function setHoverStyle(t) {
                    var e = t._model,
                        i = t._options;
                    t.$previousStyle = {
                      backgroundColor: e.backgroundColor,
                      borderColor: e.borderColor,
                      borderWidth: e.borderWidth,
                      radius: e.radius
                    }, e.backgroundColor = g.valueOrDefault(i.hoverBackgroundColor, g.getHoverColor(i.backgroundColor)), e.borderColor = g.valueOrDefault(i.hoverBorderColor, g.getHoverColor(i.borderColor)), e.borderWidth = g.valueOrDefault(i.hoverBorderWidth, i.borderWidth), e.radius = i.radius + i.hoverRadius;
                  },
                  _resolveElementOptions: function _resolveElementOptions(t, e) {
                    var i,
                        n,
                        a,
                        o = this.chart,
                        r = o.data.datasets[this.index],
                        s = t.custom || {},
                        l = o.options.elements.point,
                        u = g.options.resolve,
                        d = r.data[e],
                        c = {},
                        h = {
                      chart: o,
                      dataIndex: e,
                      dataset: r,
                      datasetIndex: this.index
                    },
                        f = ["backgroundColor", "borderColor", "borderWidth", "hoverBackgroundColor", "hoverBorderColor", "hoverBorderWidth", "hoverRadius", "hitRadius", "pointStyle", "rotation"];

                    for (i = 0, n = f.length; i < n; ++i) {
                      c[a = f[i]] = u([s[a], r[a], l[a]], h, e);
                    }

                    return c.radius = u([s.radius, d ? d.r : void 0, r.radius, l.radius], h, e), c;
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            17: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  A = t(46);
              n._set("doughnut", {
                animation: {
                  animateRotate: !0,
                  animateScale: !1
                },
                hover: {
                  mode: "single"
                },
                legendCallback: function legendCallback(t) {
                  var e = [];
                  e.push('<ul class="' + t.id + '-legend">');
                  var i = t.data,
                      n = i.datasets,
                      a = i.labels;
                  if (n.length) for (var o = 0; o < n[0].data.length; ++o) {
                    e.push('<li><span style="background-color:' + n[0].backgroundColor[o] + '"></span>'), a[o] && e.push(a[o]), e.push("</li>");
                  }
                  return e.push("</ul>"), e.join("");
                },
                legend: {
                  labels: {
                    generateLabels: function generateLabels(l) {
                      var u = l.data;
                      return u.labels.length && u.datasets.length ? u.labels.map(function (t, e) {
                        var i = l.getDatasetMeta(0),
                            n = u.datasets[0],
                            a = i.data[e],
                            o = a && a.custom || {},
                            r = A.valueAtIndexOrDefault,
                            s = l.options.elements.arc;
                        return {
                          text: t,
                          fillStyle: o.backgroundColor ? o.backgroundColor : r(n.backgroundColor, e, s.backgroundColor),
                          strokeStyle: o.borderColor ? o.borderColor : r(n.borderColor, e, s.borderColor),
                          lineWidth: o.borderWidth ? o.borderWidth : r(n.borderWidth, e, s.borderWidth),
                          hidden: isNaN(n.data[e]) || i.data[e].hidden,
                          index: e
                        };
                      }) : [];
                    }
                  },
                  onClick: function onClick(t, e) {
                    var i,
                        n,
                        a,
                        o = e.index,
                        r = this.chart;

                    for (i = 0, n = (r.data.datasets || []).length; i < n; ++i) {
                      (a = r.getDatasetMeta(i)).data[o] && (a.data[o].hidden = !a.data[o].hidden);
                    }

                    r.update();
                  }
                },
                cutoutPercentage: 50,
                rotation: -.5 * Math.PI,
                circumference: 2 * Math.PI,
                tooltips: {
                  callbacks: {
                    title: function title() {
                      return "";
                    },
                    label: function label(t, e) {
                      var i = e.labels[t.index],
                          n = ": " + e.datasets[t.datasetIndex].data[t.index];
                      return A.isArray(i) ? (i = i.slice())[0] += n : i += n, i;
                    }
                  }
                }
              }), n._set("pie", A.clone(n.doughnut)), n._set("pie", {
                cutoutPercentage: 0
              }), e.exports = function (t) {
                t.controllers.doughnut = t.controllers.pie = t.DatasetController.extend({
                  dataElementType: a.Arc,
                  linkScales: A.noop,
                  getRingIndex: function getRingIndex(t) {
                    for (var e = 0, i = 0; i < t; ++i) {
                      this.chart.isDatasetVisible(i) && ++e;
                    }

                    return e;
                  },
                  update: function update(i) {
                    var n = this,
                        t = n.chart,
                        e = t.chartArea,
                        a = t.options,
                        o = a.elements.arc,
                        r = e.right - e.left - o.borderWidth,
                        s = e.bottom - e.top - o.borderWidth,
                        l = Math.min(r, s),
                        u = {
                      x: 0,
                      y: 0
                    },
                        d = n.getMeta(),
                        c = a.cutoutPercentage,
                        h = a.circumference;

                    if (h < 2 * Math.PI) {
                      var f = a.rotation % (2 * Math.PI),
                          g = (f += 2 * Math.PI * (f >= Math.PI ? -1 : f < -Math.PI ? 1 : 0)) + h,
                          p = Math.cos(f),
                          m = Math.sin(f),
                          v = Math.cos(g),
                          b = Math.sin(g),
                          x = f <= 0 && 0 <= g || f <= 2 * Math.PI && 2 * Math.PI <= g,
                          y = f <= .5 * Math.PI && .5 * Math.PI <= g || f <= 2.5 * Math.PI && 2.5 * Math.PI <= g,
                          k = f <= -Math.PI && -Math.PI <= g || f <= Math.PI && Math.PI <= g,
                          M = f <= .5 * -Math.PI && .5 * -Math.PI <= g || f <= 1.5 * Math.PI && 1.5 * Math.PI <= g,
                          w = c / 100,
                          C = k ? -1 : Math.min(p * (p < 0 ? 1 : w), v * (v < 0 ? 1 : w)),
                          S = M ? -1 : Math.min(m * (m < 0 ? 1 : w), b * (b < 0 ? 1 : w)),
                          _ = x ? 1 : Math.max(p * (0 < p ? 1 : w), v * (0 < v ? 1 : w)),
                          D = y ? 1 : Math.max(m * (0 < m ? 1 : w), b * (0 < b ? 1 : w)),
                          P = .5 * (_ - C),
                          I = .5 * (D - S);

                      l = Math.min(r / P, s / I), u = {
                        x: -.5 * (_ + C),
                        y: -.5 * (D + S)
                      };
                    }

                    t.borderWidth = n.getMaxBorderWidth(d.data), t.outerRadius = Math.max((l - t.borderWidth) / 2, 0), t.innerRadius = Math.max(c ? t.outerRadius / 100 * c : 0, 0), t.radiusLength = (t.outerRadius - t.innerRadius) / t.getVisibleDatasetCount(), t.offsetX = u.x * t.outerRadius, t.offsetY = u.y * t.outerRadius, d.total = n.calculateTotal(), n.outerRadius = t.outerRadius - t.radiusLength * n.getRingIndex(n.index), n.innerRadius = Math.max(n.outerRadius - t.radiusLength, 0), A.each(d.data, function (t, e) {
                      n.updateElement(t, e, i);
                    });
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n = this,
                        a = n.chart,
                        o = a.chartArea,
                        r = a.options,
                        s = r.animation,
                        l = (o.left + o.right) / 2,
                        u = (o.top + o.bottom) / 2,
                        d = r.rotation,
                        c = r.rotation,
                        h = n.getDataset(),
                        f = i && s.animateRotate ? 0 : t.hidden ? 0 : n.calculateCircumference(h.data[e]) * (r.circumference / (2 * Math.PI)),
                        g = i && s.animateScale ? 0 : n.innerRadius,
                        p = i && s.animateScale ? 0 : n.outerRadius,
                        m = A.valueAtIndexOrDefault;
                    A.extend(t, {
                      _datasetIndex: n.index,
                      _index: e,
                      _model: {
                        x: l + a.offsetX,
                        y: u + a.offsetY,
                        startAngle: d,
                        endAngle: c,
                        circumference: f,
                        outerRadius: p,
                        innerRadius: g,
                        label: m(h.label, e, a.data.labels[e])
                      }
                    });
                    var v = t._model,
                        b = t.custom || {},
                        x = A.valueAtIndexOrDefault,
                        y = this.chart.options.elements.arc;
                    v.backgroundColor = b.backgroundColor ? b.backgroundColor : x(h.backgroundColor, e, y.backgroundColor), v.borderColor = b.borderColor ? b.borderColor : x(h.borderColor, e, y.borderColor), v.borderWidth = b.borderWidth ? b.borderWidth : x(h.borderWidth, e, y.borderWidth), i && s.animateRotate || (v.startAngle = 0 === e ? r.rotation : n.getMeta().data[e - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();
                  },
                  calculateTotal: function calculateTotal() {
                    var i,
                        n = this.getDataset(),
                        t = this.getMeta(),
                        a = 0;
                    return A.each(t.data, function (t, e) {
                      i = n.data[e], isNaN(i) || t.hidden || (a += Math.abs(i));
                    }), a;
                  },
                  calculateCircumference: function calculateCircumference(t) {
                    var e = this.getMeta().total;
                    return 0 < e && !isNaN(t) ? 2 * Math.PI * (Math.abs(t) / e) : 0;
                  },
                  getMaxBorderWidth: function getMaxBorderWidth(t) {
                    for (var e, i, n = 0, a = this.index, o = t.length, r = 0; r < o; r++) {
                      n = (n = n < (e = t[r]._model ? t[r]._model.borderWidth : 0) ? e : n) < (i = t[r]._chart ? t[r]._chart.config.data.datasets[a].hoverBorderWidth : 0) ? i : n;
                    }

                    return n;
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            18: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  g = t(46);
              n._set("line", {
                showLines: !0,
                spanGaps: !1,
                hover: {
                  mode: "label"
                },
                scales: {
                  xAxes: [{
                    type: "category",
                    id: "x-axis-0"
                  }],
                  yAxes: [{
                    type: "linear",
                    id: "y-axis-0"
                  }]
                }
              }), e.exports = function (t) {
                function f(t, e) {
                  return g.valueOrDefault(t.showLine, e.showLines);
                }

                t.controllers.line = t.DatasetController.extend({
                  datasetElementType: a.Line,
                  dataElementType: a.Point,
                  update: function update(t) {
                    var e,
                        i,
                        n,
                        a = this,
                        o = a.getMeta(),
                        r = o.dataset,
                        s = o.data || [],
                        l = a.chart.options,
                        u = l.elements.line,
                        d = a.getScaleForId(o.yAxisID),
                        c = a.getDataset(),
                        h = f(c, l);

                    for (h && (n = r.custom || {}, void 0 !== c.tension && void 0 === c.lineTension && (c.lineTension = c.tension), r._scale = d, r._datasetIndex = a.index, r._children = s, r._model = {
                      spanGaps: c.spanGaps ? c.spanGaps : l.spanGaps,
                      tension: n.tension ? n.tension : g.valueOrDefault(c.lineTension, u.tension),
                      backgroundColor: n.backgroundColor ? n.backgroundColor : c.backgroundColor || u.backgroundColor,
                      borderWidth: n.borderWidth ? n.borderWidth : c.borderWidth || u.borderWidth,
                      borderColor: n.borderColor ? n.borderColor : c.borderColor || u.borderColor,
                      borderCapStyle: n.borderCapStyle ? n.borderCapStyle : c.borderCapStyle || u.borderCapStyle,
                      borderDash: n.borderDash ? n.borderDash : c.borderDash || u.borderDash,
                      borderDashOffset: n.borderDashOffset ? n.borderDashOffset : c.borderDashOffset || u.borderDashOffset,
                      borderJoinStyle: n.borderJoinStyle ? n.borderJoinStyle : c.borderJoinStyle || u.borderJoinStyle,
                      fill: n.fill ? n.fill : void 0 !== c.fill ? c.fill : u.fill,
                      steppedLine: n.steppedLine ? n.steppedLine : g.valueOrDefault(c.steppedLine, u.stepped),
                      cubicInterpolationMode: n.cubicInterpolationMode ? n.cubicInterpolationMode : g.valueOrDefault(c.cubicInterpolationMode, u.cubicInterpolationMode)
                    }, r.pivot()), e = 0, i = s.length; e < i; ++e) {
                      a.updateElement(s[e], e, t);
                    }

                    for (h && 0 !== r._model.tension && a.updateBezierControlPoints(), e = 0, i = s.length; e < i; ++e) {
                      s[e].pivot();
                    }
                  },
                  getPointBackgroundColor: function getPointBackgroundColor(t, e) {
                    var i = this.chart.options.elements.point.backgroundColor,
                        n = this.getDataset(),
                        a = t.custom || {};
                    return a.backgroundColor ? i = a.backgroundColor : n.pointBackgroundColor ? i = g.valueAtIndexOrDefault(n.pointBackgroundColor, e, i) : n.backgroundColor && (i = n.backgroundColor), i;
                  },
                  getPointBorderColor: function getPointBorderColor(t, e) {
                    var i = this.chart.options.elements.point.borderColor,
                        n = this.getDataset(),
                        a = t.custom || {};
                    return a.borderColor ? i = a.borderColor : n.pointBorderColor ? i = g.valueAtIndexOrDefault(n.pointBorderColor, e, i) : n.borderColor && (i = n.borderColor), i;
                  },
                  getPointBorderWidth: function getPointBorderWidth(t, e) {
                    var i = this.chart.options.elements.point.borderWidth,
                        n = this.getDataset(),
                        a = t.custom || {};
                    return isNaN(a.borderWidth) ? !isNaN(n.pointBorderWidth) || g.isArray(n.pointBorderWidth) ? i = g.valueAtIndexOrDefault(n.pointBorderWidth, e, i) : isNaN(n.borderWidth) || (i = n.borderWidth) : i = a.borderWidth, i;
                  },
                  getPointRotation: function getPointRotation(t, e) {
                    var i = this.chart.options.elements.point.rotation,
                        n = this.getDataset(),
                        a = t.custom || {};
                    return isNaN(a.rotation) ? isNaN(n.pointRotation) && !g.isArray(n.pointRotation) || (i = g.valueAtIndexOrDefault(n.pointRotation, e, i)) : i = a.rotation, i;
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n,
                        a,
                        o = this,
                        r = o.getMeta(),
                        s = t.custom || {},
                        l = o.getDataset(),
                        u = o.index,
                        d = l.data[e],
                        c = o.getScaleForId(r.yAxisID),
                        h = o.getScaleForId(r.xAxisID),
                        f = o.chart.options.elements.point;
                    void 0 !== l.radius && void 0 === l.pointRadius && (l.pointRadius = l.radius), void 0 !== l.hitRadius && void 0 === l.pointHitRadius && (l.pointHitRadius = l.hitRadius), n = h.getPixelForValue("object" == _typeof2(d) ? d : NaN, e, u), a = i ? c.getBasePixel() : o.calculatePointY(d, e, u), t._xScale = h, t._yScale = c, t._datasetIndex = u, t._index = e, t._model = {
                      x: n,
                      y: a,
                      skip: s.skip || isNaN(n) || isNaN(a),
                      radius: s.radius || g.valueAtIndexOrDefault(l.pointRadius, e, f.radius),
                      pointStyle: s.pointStyle || g.valueAtIndexOrDefault(l.pointStyle, e, f.pointStyle),
                      rotation: o.getPointRotation(t, e),
                      backgroundColor: o.getPointBackgroundColor(t, e),
                      borderColor: o.getPointBorderColor(t, e),
                      borderWidth: o.getPointBorderWidth(t, e),
                      tension: r.dataset._model ? r.dataset._model.tension : 0,
                      steppedLine: !!r.dataset._model && r.dataset._model.steppedLine,
                      hitRadius: s.hitRadius || g.valueAtIndexOrDefault(l.pointHitRadius, e, f.hitRadius)
                    };
                  },
                  calculatePointY: function calculatePointY(t, e, i) {
                    var n,
                        a,
                        o,
                        r = this.chart,
                        s = this.getMeta(),
                        l = this.getScaleForId(s.yAxisID),
                        u = 0,
                        d = 0;

                    if (l.options.stacked) {
                      for (n = 0; n < i; n++) {
                        if (a = r.data.datasets[n], "line" === (o = r.getDatasetMeta(n)).type && o.yAxisID === l.id && r.isDatasetVisible(n)) {
                          var c = Number(l.getRightValue(a.data[e]));
                          c < 0 ? d += c || 0 : u += c || 0;
                        }
                      }

                      var h = Number(l.getRightValue(t));
                      return h < 0 ? l.getPixelForValue(d + h) : l.getPixelForValue(u + h);
                    }

                    return l.getPixelForValue(t);
                  },
                  updateBezierControlPoints: function updateBezierControlPoints() {
                    var t,
                        e,
                        i,
                        n,
                        a = this.getMeta(),
                        o = this.chart.chartArea,
                        r = a.data || [];

                    function s(t, e, i) {
                      return Math.max(Math.min(t, i), e);
                    }

                    if (a.dataset._model.spanGaps && (r = r.filter(function (t) {
                      return !t._model.skip;
                    })), "monotone" === a.dataset._model.cubicInterpolationMode) g.splineCurveMonotone(r);else for (t = 0, e = r.length; t < e; ++t) {
                      i = r[t]._model, n = g.splineCurve(g.previousItem(r, t)._model, i, g.nextItem(r, t)._model, a.dataset._model.tension), i.controlPointPreviousX = n.previous.x, i.controlPointPreviousY = n.previous.y, i.controlPointNextX = n.next.x, i.controlPointNextY = n.next.y;
                    }
                    if (this.chart.options.elements.line.capBezierPoints) for (t = 0, e = r.length; t < e; ++t) {
                      (i = r[t]._model).controlPointPreviousX = s(i.controlPointPreviousX, o.left, o.right), i.controlPointPreviousY = s(i.controlPointPreviousY, o.top, o.bottom), i.controlPointNextX = s(i.controlPointNextX, o.left, o.right), i.controlPointNextY = s(i.controlPointNextY, o.top, o.bottom);
                    }
                  },
                  draw: function draw() {
                    var t,
                        e = this.chart,
                        i = this.getMeta(),
                        n = i.data || [],
                        a = e.chartArea,
                        o = n.length,
                        r = 0;

                    for (f(this.getDataset(), e.options) && (t = (i.dataset._model.borderWidth || 0) / 2, g.canvas.clipArea(e.ctx, {
                      left: a.left,
                      right: a.right,
                      top: a.top - t,
                      bottom: a.bottom + t
                    }), i.dataset.draw(), g.canvas.unclipArea(e.ctx)); r < o; ++r) {
                      n[r].draw(a);
                    }
                  },
                  setHoverStyle: function setHoverStyle(t) {
                    var e = this.chart.data.datasets[t._datasetIndex],
                        i = t._index,
                        n = t.custom || {},
                        a = t._model;
                    t.$previousStyle = {
                      backgroundColor: a.backgroundColor,
                      borderColor: a.borderColor,
                      borderWidth: a.borderWidth,
                      radius: a.radius
                    }, a.backgroundColor = n.hoverBackgroundColor || g.valueAtIndexOrDefault(e.pointHoverBackgroundColor, i, g.getHoverColor(a.backgroundColor)), a.borderColor = n.hoverBorderColor || g.valueAtIndexOrDefault(e.pointHoverBorderColor, i, g.getHoverColor(a.borderColor)), a.borderWidth = n.hoverBorderWidth || g.valueAtIndexOrDefault(e.pointHoverBorderWidth, i, a.borderWidth), a.radius = n.hoverRadius || g.valueAtIndexOrDefault(e.pointHoverRadius, i, this.chart.options.elements.point.hoverRadius);
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            19: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  k = t(46);
              n._set("polarArea", {
                scale: {
                  type: "radialLinear",
                  angleLines: {
                    display: !1
                  },
                  gridLines: {
                    circular: !0
                  },
                  pointLabels: {
                    display: !1
                  },
                  ticks: {
                    beginAtZero: !0
                  }
                },
                animation: {
                  animateRotate: !0,
                  animateScale: !0
                },
                startAngle: -.5 * Math.PI,
                legendCallback: function legendCallback(t) {
                  var e = [];
                  e.push('<ul class="' + t.id + '-legend">');
                  var i = t.data,
                      n = i.datasets,
                      a = i.labels;
                  if (n.length) for (var o = 0; o < n[0].data.length; ++o) {
                    e.push('<li><span style="background-color:' + n[0].backgroundColor[o] + '"></span>'), a[o] && e.push(a[o]), e.push("</li>");
                  }
                  return e.push("</ul>"), e.join("");
                },
                legend: {
                  labels: {
                    generateLabels: function generateLabels(s) {
                      var l = s.data;
                      return l.labels.length && l.datasets.length ? l.labels.map(function (t, e) {
                        var i = s.getDatasetMeta(0),
                            n = l.datasets[0],
                            a = i.data[e].custom || {},
                            o = k.valueAtIndexOrDefault,
                            r = s.options.elements.arc;
                        return {
                          text: t,
                          fillStyle: a.backgroundColor ? a.backgroundColor : o(n.backgroundColor, e, r.backgroundColor),
                          strokeStyle: a.borderColor ? a.borderColor : o(n.borderColor, e, r.borderColor),
                          lineWidth: a.borderWidth ? a.borderWidth : o(n.borderWidth, e, r.borderWidth),
                          hidden: isNaN(n.data[e]) || i.data[e].hidden,
                          index: e
                        };
                      }) : [];
                    }
                  },
                  onClick: function onClick(t, e) {
                    var i,
                        n,
                        a,
                        o = e.index,
                        r = this.chart;

                    for (i = 0, n = (r.data.datasets || []).length; i < n; ++i) {
                      (a = r.getDatasetMeta(i)).data[o].hidden = !a.data[o].hidden;
                    }

                    r.update();
                  }
                },
                tooltips: {
                  callbacks: {
                    title: function title() {
                      return "";
                    },
                    label: function label(t, e) {
                      return e.labels[t.index] + ": " + t.yLabel;
                    }
                  }
                }
              }), e.exports = function (t) {
                t.controllers.polarArea = t.DatasetController.extend({
                  dataElementType: a.Arc,
                  linkScales: k.noop,
                  update: function update(i) {
                    var t,
                        e,
                        n,
                        a = this,
                        o = a.getDataset(),
                        r = a.getMeta(),
                        s = a.chart.options.startAngle || 0,
                        l = a._starts = [],
                        u = a._angles = [];

                    for (a._updateRadius(), r.count = a.countVisibleElements(), t = 0, e = o.data.length; t < e; t++) {
                      l[t] = s, n = a._computeAngle(t), s += u[t] = n;
                    }

                    k.each(r.data, function (t, e) {
                      a.updateElement(t, e, i);
                    });
                  },
                  _updateRadius: function _updateRadius() {
                    var t = this,
                        e = t.chart,
                        i = e.chartArea,
                        n = e.options,
                        a = n.elements.arc,
                        o = Math.min(i.right - i.left, i.bottom - i.top);
                    e.outerRadius = Math.max((o - a.borderWidth / 2) / 2, 0), e.innerRadius = Math.max(n.cutoutPercentage ? e.outerRadius / 100 * n.cutoutPercentage : 1, 0), e.radiusLength = (e.outerRadius - e.innerRadius) / e.getVisibleDatasetCount(), t.outerRadius = e.outerRadius - e.radiusLength * t.index, t.innerRadius = t.outerRadius - e.radiusLength;
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n = this,
                        a = n.chart,
                        o = n.getDataset(),
                        r = a.options,
                        s = r.animation,
                        l = a.scale,
                        u = a.data.labels,
                        d = l.xCenter,
                        c = l.yCenter,
                        h = r.startAngle,
                        f = t.hidden ? 0 : l.getDistanceFromCenterForValue(o.data[e]),
                        g = n._starts[e],
                        p = g + (t.hidden ? 0 : n._angles[e]),
                        m = s.animateScale ? 0 : l.getDistanceFromCenterForValue(o.data[e]);
                    k.extend(t, {
                      _datasetIndex: n.index,
                      _index: e,
                      _scale: l,
                      _model: {
                        x: d,
                        y: c,
                        innerRadius: 0,
                        outerRadius: i ? m : f,
                        startAngle: i && s.animateRotate ? h : g,
                        endAngle: i && s.animateRotate ? h : p,
                        label: k.valueAtIndexOrDefault(u, e, u[e])
                      }
                    });
                    var v = this.chart.options.elements.arc,
                        b = t.custom || {},
                        x = k.valueAtIndexOrDefault,
                        y = t._model;
                    y.backgroundColor = b.backgroundColor ? b.backgroundColor : x(o.backgroundColor, e, v.backgroundColor), y.borderColor = b.borderColor ? b.borderColor : x(o.borderColor, e, v.borderColor), y.borderWidth = b.borderWidth ? b.borderWidth : x(o.borderWidth, e, v.borderWidth), t.pivot();
                  },
                  countVisibleElements: function countVisibleElements() {
                    var i = this.getDataset(),
                        t = this.getMeta(),
                        n = 0;
                    return k.each(t.data, function (t, e) {
                      isNaN(i.data[e]) || t.hidden || n++;
                    }), n;
                  },
                  _computeAngle: function _computeAngle(t) {
                    var e = this,
                        i = this.getMeta().count,
                        n = e.getDataset(),
                        a = e.getMeta();
                    if (isNaN(n.data[t]) || a.data[t].hidden) return 0;
                    var o = {
                      chart: e.chart,
                      dataIndex: t,
                      dataset: n,
                      datasetIndex: e.index
                    };
                    return k.options.resolve([e.chart.options.elements.arc.angle, 2 * Math.PI / i], o, t);
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            20: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(41),
                  u = t(46);
              n._set("radar", {
                scale: {
                  type: "radialLinear"
                },
                elements: {
                  line: {
                    tension: 0
                  }
                }
              }), e.exports = function (t) {
                t.controllers.radar = t.DatasetController.extend({
                  datasetElementType: a.Line,
                  dataElementType: a.Point,
                  linkScales: u.noop,
                  update: function update(i) {
                    var n = this,
                        t = n.getMeta(),
                        e = t.dataset,
                        a = t.data,
                        o = e.custom || {},
                        r = n.getDataset(),
                        s = n.chart.options.elements.line,
                        l = n.chart.scale;
                    void 0 !== r.tension && void 0 === r.lineTension && (r.lineTension = r.tension), u.extend(t.dataset, {
                      _datasetIndex: n.index,
                      _scale: l,
                      _children: a,
                      _loop: !0,
                      _model: {
                        tension: o.tension ? o.tension : u.valueOrDefault(r.lineTension, s.tension),
                        backgroundColor: o.backgroundColor ? o.backgroundColor : r.backgroundColor || s.backgroundColor,
                        borderWidth: o.borderWidth ? o.borderWidth : r.borderWidth || s.borderWidth,
                        borderColor: o.borderColor ? o.borderColor : r.borderColor || s.borderColor,
                        fill: o.fill ? o.fill : void 0 !== r.fill ? r.fill : s.fill,
                        borderCapStyle: o.borderCapStyle ? o.borderCapStyle : r.borderCapStyle || s.borderCapStyle,
                        borderDash: o.borderDash ? o.borderDash : r.borderDash || s.borderDash,
                        borderDashOffset: o.borderDashOffset ? o.borderDashOffset : r.borderDashOffset || s.borderDashOffset,
                        borderJoinStyle: o.borderJoinStyle ? o.borderJoinStyle : r.borderJoinStyle || s.borderJoinStyle
                      }
                    }), t.dataset.pivot(), u.each(a, function (t, e) {
                      n.updateElement(t, e, i);
                    }, n), n.updateBezierControlPoints();
                  },
                  updateElement: function updateElement(t, e, i) {
                    var n = this,
                        a = t.custom || {},
                        o = n.getDataset(),
                        r = n.chart.scale,
                        s = n.chart.options.elements.point,
                        l = r.getPointPositionForValue(e, o.data[e]);
                    void 0 !== o.radius && void 0 === o.pointRadius && (o.pointRadius = o.radius), void 0 !== o.hitRadius && void 0 === o.pointHitRadius && (o.pointHitRadius = o.hitRadius), u.extend(t, {
                      _datasetIndex: n.index,
                      _index: e,
                      _scale: r,
                      _model: {
                        x: i ? r.xCenter : l.x,
                        y: i ? r.yCenter : l.y,
                        tension: a.tension ? a.tension : u.valueOrDefault(o.lineTension, n.chart.options.elements.line.tension),
                        radius: a.radius ? a.radius : u.valueAtIndexOrDefault(o.pointRadius, e, s.radius),
                        backgroundColor: a.backgroundColor ? a.backgroundColor : u.valueAtIndexOrDefault(o.pointBackgroundColor, e, s.backgroundColor),
                        borderColor: a.borderColor ? a.borderColor : u.valueAtIndexOrDefault(o.pointBorderColor, e, s.borderColor),
                        borderWidth: a.borderWidth ? a.borderWidth : u.valueAtIndexOrDefault(o.pointBorderWidth, e, s.borderWidth),
                        pointStyle: a.pointStyle ? a.pointStyle : u.valueAtIndexOrDefault(o.pointStyle, e, s.pointStyle),
                        rotation: a.rotation ? a.rotation : u.valueAtIndexOrDefault(o.pointRotation, e, s.rotation),
                        hitRadius: a.hitRadius ? a.hitRadius : u.valueAtIndexOrDefault(o.pointHitRadius, e, s.hitRadius)
                      }
                    }), t._model.skip = a.skip ? a.skip : isNaN(t._model.x) || isNaN(t._model.y);
                  },
                  updateBezierControlPoints: function updateBezierControlPoints() {
                    var a = this.chart.chartArea,
                        o = this.getMeta();
                    u.each(o.data, function (t, e) {
                      var i = t._model,
                          n = u.splineCurve(u.previousItem(o.data, e, !0)._model, i, u.nextItem(o.data, e, !0)._model, i.tension);
                      i.controlPointPreviousX = Math.max(Math.min(n.previous.x, a.right), a.left), i.controlPointPreviousY = Math.max(Math.min(n.previous.y, a.bottom), a.top), i.controlPointNextX = Math.max(Math.min(n.next.x, a.right), a.left), i.controlPointNextY = Math.max(Math.min(n.next.y, a.bottom), a.top), t.pivot();
                    });
                  },
                  setHoverStyle: function setHoverStyle(t) {
                    var e = this.chart.data.datasets[t._datasetIndex],
                        i = t.custom || {},
                        n = t._index,
                        a = t._model;
                    t.$previousStyle = {
                      backgroundColor: a.backgroundColor,
                      borderColor: a.borderColor,
                      borderWidth: a.borderWidth,
                      radius: a.radius
                    }, a.radius = i.hoverRadius ? i.hoverRadius : u.valueAtIndexOrDefault(e.pointHoverRadius, n, this.chart.options.elements.point.hoverRadius), a.backgroundColor = i.hoverBackgroundColor ? i.hoverBackgroundColor : u.valueAtIndexOrDefault(e.pointHoverBackgroundColor, n, u.getHoverColor(a.backgroundColor)), a.borderColor = i.hoverBorderColor ? i.hoverBorderColor : u.valueAtIndexOrDefault(e.pointHoverBorderColor, n, u.getHoverColor(a.borderColor)), a.borderWidth = i.hoverBorderWidth ? i.hoverBorderWidth : u.valueAtIndexOrDefault(e.pointHoverBorderWidth, n, a.borderWidth);
                  }
                });
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            21: [function (t, e, i) {
              "use strict";

              t(26)._set("scatter", {
                hover: {
                  mode: "single"
                },
                scales: {
                  xAxes: [{
                    id: "x-axis-1",
                    type: "linear",
                    position: "bottom"
                  }],
                  yAxes: [{
                    id: "y-axis-1",
                    type: "linear",
                    position: "left"
                  }]
                },
                showLines: !1,
                tooltips: {
                  callbacks: {
                    title: function title() {
                      return "";
                    },
                    label: function label(t) {
                      return "(" + t.xLabel + ", " + t.yLabel + ")";
                    }
                  }
                }
              }), e.exports = function (t) {
                t.controllers.scatter = t.controllers.line;
              };
            }, {
              26: 26
            }],
            22: [function (t, e, i) {
              "use strict";

              var n = t(27);
              i = e.exports = n.extend({
                chart: null,
                currentStep: 0,
                numSteps: 60,
                easing: "",
                render: null,
                onAnimationProgress: null,
                onAnimationComplete: null
              });
              Object.defineProperty(i.prototype, "animationObject", {
                get: function get() {
                  return this;
                }
              }), Object.defineProperty(i.prototype, "chartInstance", {
                get: function get() {
                  return this.chart;
                },
                set: function set(t) {
                  this.chart = t;
                }
              });
            }, {
              27: 27
            }],
            23: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  o = t(46);
              n._set("global", {
                animation: {
                  duration: 1e3,
                  easing: "easeOutQuart",
                  onProgress: o.noop,
                  onComplete: o.noop
                }
              }), e.exports = {
                frameDuration: 17,
                animations: [],
                dropFrames: 0,
                request: null,
                addAnimation: function addAnimation(t, e, i, n) {
                  var a,
                      o,
                      r = this.animations;

                  for (e.chart = t, n || (t.animating = !0), a = 0, o = r.length; a < o; ++a) {
                    if (r[a].chart === t) return void (r[a] = e);
                  }

                  r.push(e), 1 === r.length && this.requestAnimationFrame();
                },
                cancelAnimation: function cancelAnimation(e) {
                  var t = o.findIndex(this.animations, function (t) {
                    return t.chart === e;
                  });
                  -1 !== t && (this.animations.splice(t, 1), e.animating = !1);
                },
                requestAnimationFrame: function requestAnimationFrame() {
                  var t = this;
                  null === t.request && (t.request = o.requestAnimFrame.call(window, function () {
                    t.request = null, t.startDigest();
                  }));
                },
                startDigest: function startDigest() {
                  var t = this,
                      e = Date.now(),
                      i = 0;
                  1 < t.dropFrames && (i = Math.floor(t.dropFrames), t.dropFrames = t.dropFrames % 1), t.advance(1 + i);
                  var n = Date.now();
                  t.dropFrames += (n - e) / t.frameDuration, 0 < t.animations.length && t.requestAnimationFrame();
                },
                advance: function advance(t) {
                  for (var e, i, n = this.animations, a = 0; a < n.length;) {
                    i = (e = n[a]).chart, e.currentStep = (e.currentStep || 0) + t, e.currentStep = Math.min(e.currentStep, e.numSteps), o.callback(e.render, [i, e], i), o.callback(e.onAnimationProgress, [e], i), e.currentStep >= e.numSteps ? (o.callback(e.onAnimationComplete, [e], i), i.animating = !1, n.splice(a, 1)) : ++a;
                  }
                }
              };
            }, {
              26: 26,
              46: 46
            }],
            24: [function (t, e, i) {
              "use strict";

              var s = t(22),
                  l = t(23),
                  c = t(26),
                  h = t(46),
                  a = t(29),
                  o = t(31),
                  f = t(49),
                  g = t(32),
                  p = t(34),
                  n = t(36);

              e.exports = function (u) {
                function d(t) {
                  return "top" === t || "bottom" === t;
                }

                u.types = {}, u.instances = {}, u.controllers = {}, h.extend(u.prototype, {
                  construct: function construct(t, e) {
                    var i,
                        n,
                        a = this;
                    (n = (i = (i = e) || {}).data = i.data || {}).datasets = n.datasets || [], n.labels = n.labels || [], i.options = h.configMerge(c.global, c[i.type], i.options || {}), e = i;
                    var o = f.acquireContext(t, e),
                        r = o && o.canvas,
                        s = r && r.height,
                        l = r && r.width;
                    a.id = h.uid(), a.ctx = o, a.canvas = r, a.config = e, a.width = l, a.height = s, a.aspectRatio = s ? l / s : null, a.options = e.options, a._bufferedRender = !1, (a.chart = a).controller = a, u.instances[a.id] = a, Object.defineProperty(a, "data", {
                      get: function get() {
                        return a.config.data;
                      },
                      set: function set(t) {
                        a.config.data = t;
                      }
                    }), o && r ? (a.initialize(), a.update()) : console.error("Failed to create chart: can't acquire context from the given item");
                  },
                  initialize: function initialize() {
                    var t = this;
                    return g.notify(t, "beforeInit"), h.retinaScale(t, t.options.devicePixelRatio), t.bindEvents(), t.options.responsive && t.resize(!0), t.ensureScalesHaveIDs(), t.buildOrUpdateScales(), t.initToolTip(), g.notify(t, "afterInit"), t;
                  },
                  clear: function clear() {
                    return h.canvas.clear(this), this;
                  },
                  stop: function stop() {
                    return l.cancelAnimation(this), this;
                  },
                  resize: function resize(t) {
                    var e = this,
                        i = e.options,
                        n = e.canvas,
                        a = i.maintainAspectRatio && e.aspectRatio || null,
                        o = Math.max(0, Math.floor(h.getMaximumWidth(n))),
                        r = Math.max(0, Math.floor(a ? o / a : h.getMaximumHeight(n)));

                    if ((e.width !== o || e.height !== r) && (n.width = e.width = o, n.height = e.height = r, n.style.width = o + "px", n.style.height = r + "px", h.retinaScale(e, i.devicePixelRatio), !t)) {
                      var s = {
                        width: o,
                        height: r
                      };
                      g.notify(e, "resize", [s]), e.options.onResize && e.options.onResize(e, s), e.stop(), e.update({
                        duration: e.options.responsiveAnimationDuration
                      });
                    }
                  },
                  ensureScalesHaveIDs: function ensureScalesHaveIDs() {
                    var t = this.options,
                        e = t.scales || {},
                        i = t.scale;
                    h.each(e.xAxes, function (t, e) {
                      t.id = t.id || "x-axis-" + e;
                    }), h.each(e.yAxes, function (t, e) {
                      t.id = t.id || "y-axis-" + e;
                    }), i && (i.id = i.id || "scale");
                  },
                  buildOrUpdateScales: function buildOrUpdateScales() {
                    var r = this,
                        t = r.options,
                        s = r.scales || {},
                        e = [],
                        l = Object.keys(s).reduce(function (t, e) {
                      return t[e] = !1, t;
                    }, {});
                    t.scales && (e = e.concat((t.scales.xAxes || []).map(function (t) {
                      return {
                        options: t,
                        dtype: "category",
                        dposition: "bottom"
                      };
                    }), (t.scales.yAxes || []).map(function (t) {
                      return {
                        options: t,
                        dtype: "linear",
                        dposition: "left"
                      };
                    }))), t.scale && e.push({
                      options: t.scale,
                      dtype: "radialLinear",
                      isDefault: !0,
                      dposition: "chartArea"
                    }), h.each(e, function (t) {
                      var e = t.options,
                          i = e.id,
                          n = h.valueOrDefault(e.type, t.dtype);
                      d(e.position) !== d(t.dposition) && (e.position = t.dposition), l[i] = !0;
                      var a = null;
                      if (i in s && s[i].type === n) (a = s[i]).options = e, a.ctx = r.ctx, a.chart = r;else {
                        var o = p.getScaleConstructor(n);
                        if (!o) return;
                        a = new o({
                          id: i,
                          type: n,
                          options: e,
                          ctx: r.ctx,
                          chart: r
                        }), s[a.id] = a;
                      }
                      a.mergeTicksOptions(), t.isDefault && (r.scale = a);
                    }), h.each(l, function (t, e) {
                      t || delete s[e];
                    }), r.scales = s, p.addScalesToLayout(this);
                  },
                  buildOrUpdateControllers: function buildOrUpdateControllers() {
                    var o = this,
                        r = [],
                        s = [];
                    return h.each(o.data.datasets, function (t, e) {
                      var i = o.getDatasetMeta(e),
                          n = t.type || o.config.type;
                      if (i.type && i.type !== n && (o.destroyDatasetMeta(e), i = o.getDatasetMeta(e)), i.type = n, r.push(i.type), i.controller) i.controller.updateIndex(e), i.controller.linkScales();else {
                        var a = u.controllers[i.type];
                        if (void 0 === a) throw new Error('"' + i.type + '" is not a chart type.');
                        i.controller = new a(o, e), s.push(i.controller);
                      }
                    }, o), s;
                  },
                  resetElements: function resetElements() {
                    var i = this;
                    h.each(i.data.datasets, function (t, e) {
                      i.getDatasetMeta(e).controller.reset();
                    }, i);
                  },
                  reset: function reset() {
                    this.resetElements(), this.tooltip.initialize();
                  },
                  update: function update(t) {
                    var e,
                        i,
                        n = this;

                    if (t && "object" == _typeof2(t) || (t = {
                      duration: t,
                      lazy: arguments[1]
                    }), i = (e = n).options, h.each(e.scales, function (t) {
                      o.removeBox(e, t);
                    }), i = h.configMerge(u.defaults.global, u.defaults[e.config.type], i), e.options = e.config.options = i, e.ensureScalesHaveIDs(), e.buildOrUpdateScales(), e.tooltip._options = i.tooltips, e.tooltip.initialize(), g._invalidate(n), !1 !== g.notify(n, "beforeUpdate")) {
                      n.tooltip._data = n.data;
                      var a = n.buildOrUpdateControllers();
                      h.each(n.data.datasets, function (t, e) {
                        n.getDatasetMeta(e).controller.buildOrUpdateElements();
                      }, n), n.updateLayout(), n.options.animation && n.options.animation.duration && h.each(a, function (t) {
                        t.reset();
                      }), n.updateDatasets(), n.tooltip.initialize(), n.lastActive = [], g.notify(n, "afterUpdate"), n._bufferedRender ? n._bufferedRequest = {
                        duration: t.duration,
                        easing: t.easing,
                        lazy: t.lazy
                      } : n.render(t);
                    }
                  },
                  updateLayout: function updateLayout() {
                    !1 !== g.notify(this, "beforeLayout") && (o.update(this, this.width, this.height), g.notify(this, "afterScaleUpdate"), g.notify(this, "afterLayout"));
                  },
                  updateDatasets: function updateDatasets() {
                    if (!1 !== g.notify(this, "beforeDatasetsUpdate")) {
                      for (var t = 0, e = this.data.datasets.length; t < e; ++t) {
                        this.updateDataset(t);
                      }

                      g.notify(this, "afterDatasetsUpdate");
                    }
                  },
                  updateDataset: function updateDataset(t) {
                    var e = this.getDatasetMeta(t),
                        i = {
                      meta: e,
                      index: t
                    };
                    !1 !== g.notify(this, "beforeDatasetUpdate", [i]) && (e.controller.update(), g.notify(this, "afterDatasetUpdate", [i]));
                  },
                  render: function render(t) {
                    var e = this;
                    t && "object" == _typeof2(t) || (t = {
                      duration: t,
                      lazy: arguments[1]
                    });
                    var i = t.duration,
                        n = t.lazy;

                    if (!1 !== g.notify(e, "beforeRender")) {
                      var a = e.options.animation,
                          o = function o(t) {
                        g.notify(e, "afterRender"), h.callback(a && a.onComplete, [t], e);
                      };

                      if (a && (void 0 !== i && 0 !== i || void 0 === i && 0 !== a.duration)) {
                        var r = new s({
                          numSteps: (i || a.duration) / 16.66,
                          easing: t.easing || a.easing,
                          render: function render(t, e) {
                            var i = h.easing.effects[e.easing],
                                n = e.currentStep,
                                a = n / e.numSteps;
                            t.draw(i(a), a, n);
                          },
                          onAnimationProgress: a.onProgress,
                          onAnimationComplete: o
                        });
                        l.addAnimation(e, r, i, n);
                      } else e.draw(), o(new s({
                        numSteps: 0,
                        chart: e
                      }));

                      return e;
                    }
                  },
                  draw: function draw(t) {
                    var e = this;
                    e.clear(), h.isNullOrUndef(t) && (t = 1), e.transition(t), e.width <= 0 || e.height <= 0 || !1 !== g.notify(e, "beforeDraw", [t]) && (h.each(e.boxes, function (t) {
                      t.draw(e.chartArea);
                    }, e), e.scale && e.scale.draw(), e.drawDatasets(t), e._drawTooltip(t), g.notify(e, "afterDraw", [t]));
                  },
                  transition: function transition(t) {
                    for (var e = 0, i = (this.data.datasets || []).length; e < i; ++e) {
                      this.isDatasetVisible(e) && this.getDatasetMeta(e).controller.transition(t);
                    }

                    this.tooltip.transition(t);
                  },
                  drawDatasets: function drawDatasets(t) {
                    var e = this;

                    if (!1 !== g.notify(e, "beforeDatasetsDraw", [t])) {
                      for (var i = (e.data.datasets || []).length - 1; 0 <= i; --i) {
                        e.isDatasetVisible(i) && e.drawDataset(i, t);
                      }

                      g.notify(e, "afterDatasetsDraw", [t]);
                    }
                  },
                  drawDataset: function drawDataset(t, e) {
                    var i = this.getDatasetMeta(t),
                        n = {
                      meta: i,
                      index: t,
                      easingValue: e
                    };
                    !1 !== g.notify(this, "beforeDatasetDraw", [n]) && (i.controller.draw(e), g.notify(this, "afterDatasetDraw", [n]));
                  },
                  _drawTooltip: function _drawTooltip(t) {
                    var e = this.tooltip,
                        i = {
                      tooltip: e,
                      easingValue: t
                    };
                    !1 !== g.notify(this, "beforeTooltipDraw", [i]) && (e.draw(), g.notify(this, "afterTooltipDraw", [i]));
                  },
                  getElementAtEvent: function getElementAtEvent(t) {
                    return a.modes.single(this, t);
                  },
                  getElementsAtEvent: function getElementsAtEvent(t) {
                    return a.modes.label(this, t, {
                      intersect: !0
                    });
                  },
                  getElementsAtXAxis: function getElementsAtXAxis(t) {
                    return a.modes["x-axis"](this, t, {
                      intersect: !0
                    });
                  },
                  getElementsAtEventForMode: function getElementsAtEventForMode(t, e, i) {
                    var n = a.modes[e];
                    return "function" == typeof n ? n(this, t, i) : [];
                  },
                  getDatasetAtEvent: function getDatasetAtEvent(t) {
                    return a.modes.dataset(this, t, {
                      intersect: !0
                    });
                  },
                  getDatasetMeta: function getDatasetMeta(t) {
                    var e = this.data.datasets[t];
                    e._meta || (e._meta = {});
                    var i = e._meta[this.id];
                    return i || (i = e._meta[this.id] = {
                      type: null,
                      data: [],
                      dataset: null,
                      controller: null,
                      hidden: null,
                      xAxisID: null,
                      yAxisID: null
                    }), i;
                  },
                  getVisibleDatasetCount: function getVisibleDatasetCount() {
                    for (var t = 0, e = 0, i = this.data.datasets.length; e < i; ++e) {
                      this.isDatasetVisible(e) && t++;
                    }

                    return t;
                  },
                  isDatasetVisible: function isDatasetVisible(t) {
                    var e = this.getDatasetMeta(t);
                    return "boolean" == typeof e.hidden ? !e.hidden : !this.data.datasets[t].hidden;
                  },
                  generateLegend: function generateLegend() {
                    return this.options.legendCallback(this);
                  },
                  destroyDatasetMeta: function destroyDatasetMeta(t) {
                    var e = this.id,
                        i = this.data.datasets[t],
                        n = i._meta && i._meta[e];
                    n && (n.controller.destroy(), delete i._meta[e]);
                  },
                  destroy: function destroy() {
                    var t,
                        e,
                        i = this,
                        n = i.canvas;

                    for (i.stop(), t = 0, e = i.data.datasets.length; t < e; ++t) {
                      i.destroyDatasetMeta(t);
                    }

                    n && (i.unbindEvents(), h.canvas.clear(i), f.releaseContext(i.ctx), i.canvas = null, i.ctx = null), g.notify(i, "destroy"), delete u.instances[i.id];
                  },
                  toBase64Image: function toBase64Image() {
                    return this.canvas.toDataURL.apply(this.canvas, arguments);
                  },
                  initToolTip: function initToolTip() {
                    var t = this;
                    t.tooltip = new n({
                      _chart: t,
                      _chartInstance: t,
                      _data: t.data,
                      _options: t.options.tooltips
                    }, t);
                  },
                  bindEvents: function bindEvents() {
                    var e = this,
                        i = e._listeners = {},
                        n = function n() {
                      e.eventHandler.apply(e, arguments);
                    };

                    h.each(e.options.events, function (t) {
                      f.addEventListener(e, t, n), i[t] = n;
                    }), e.options.responsive && (n = function n() {
                      e.resize();
                    }, f.addEventListener(e, "resize", n), i.resize = n);
                  },
                  unbindEvents: function unbindEvents() {
                    var i = this,
                        t = i._listeners;
                    t && (delete i._listeners, h.each(t, function (t, e) {
                      f.removeEventListener(i, e, t);
                    }));
                  },
                  updateHoverStyle: function updateHoverStyle(t, e, i) {
                    var n,
                        a,
                        o,
                        r = i ? "setHoverStyle" : "removeHoverStyle";

                    for (a = 0, o = t.length; a < o; ++a) {
                      (n = t[a]) && this.getDatasetMeta(n._datasetIndex).controller[r](n);
                    }
                  },
                  eventHandler: function eventHandler(t) {
                    var e = this,
                        i = e.tooltip;

                    if (!1 !== g.notify(e, "beforeEvent", [t])) {
                      e._bufferedRender = !0, e._bufferedRequest = null;
                      var n = e.handleEvent(t);
                      i && (n = i._start ? i.handleEvent(t) : n | i.handleEvent(t)), g.notify(e, "afterEvent", [t]);
                      var a = e._bufferedRequest;
                      return a ? e.render(a) : n && !e.animating && (e.stop(), e.render({
                        duration: e.options.hover.animationDuration,
                        lazy: !0
                      })), e._bufferedRender = !1, e._bufferedRequest = null, e;
                    }
                  },
                  handleEvent: function handleEvent(t) {
                    var e,
                        i = this,
                        n = i.options || {},
                        a = n.hover;
                    return i.lastActive = i.lastActive || [], "mouseout" === t.type ? i.active = [] : i.active = i.getElementsAtEventForMode(t, a.mode, a), h.callback(n.onHover || n.hover.onHover, [t["native"], i.active], i), "mouseup" !== t.type && "click" !== t.type || n.onClick && n.onClick.call(i, t["native"], i.active), i.lastActive.length && i.updateHoverStyle(i.lastActive, a.mode, !1), i.active.length && a.mode && i.updateHoverStyle(i.active, a.mode, !0), e = !h.arrayEquals(i.active, i.lastActive), i.lastActive = i.active, e;
                  }
                }), u.Controller = u;
              };
            }, {
              22: 22,
              23: 23,
              26: 26,
              29: 29,
              31: 31,
              32: 32,
              34: 34,
              36: 36,
              46: 46,
              49: 49
            }],
            25: [function (t, e, i) {
              "use strict";

              var s = t(46);

              e.exports = function (t) {
                var o = ["push", "pop", "shift", "splice", "unshift"];

                function r(e, t) {
                  var i = e._chartjs;

                  if (i) {
                    var n = i.listeners,
                        a = n.indexOf(t);
                    -1 !== a && n.splice(a, 1), 0 < n.length || (o.forEach(function (t) {
                      delete e[t];
                    }), delete e._chartjs);
                  }
                }

                t.DatasetController = function (t, e) {
                  this.initialize(t, e);
                }, s.extend(t.DatasetController.prototype, {
                  datasetElementType: null,
                  dataElementType: null,
                  initialize: function initialize(t, e) {
                    this.chart = t, this.index = e, this.linkScales(), this.addElements();
                  },
                  updateIndex: function updateIndex(t) {
                    this.index = t;
                  },
                  linkScales: function linkScales() {
                    var t = this,
                        e = t.getMeta(),
                        i = t.getDataset();
                    null !== e.xAxisID && e.xAxisID in t.chart.scales || (e.xAxisID = i.xAxisID || t.chart.options.scales.xAxes[0].id), null !== e.yAxisID && e.yAxisID in t.chart.scales || (e.yAxisID = i.yAxisID || t.chart.options.scales.yAxes[0].id);
                  },
                  getDataset: function getDataset() {
                    return this.chart.data.datasets[this.index];
                  },
                  getMeta: function getMeta() {
                    return this.chart.getDatasetMeta(this.index);
                  },
                  getScaleForId: function getScaleForId(t) {
                    return this.chart.scales[t];
                  },
                  reset: function reset() {
                    this.update(!0);
                  },
                  destroy: function destroy() {
                    this._data && r(this._data, this);
                  },
                  createMetaDataset: function createMetaDataset() {
                    var t = this.datasetElementType;
                    return t && new t({
                      _chart: this.chart,
                      _datasetIndex: this.index
                    });
                  },
                  createMetaData: function createMetaData(t) {
                    var e = this.dataElementType;
                    return e && new e({
                      _chart: this.chart,
                      _datasetIndex: this.index,
                      _index: t
                    });
                  },
                  addElements: function addElements() {
                    var t,
                        e,
                        i = this.getMeta(),
                        n = this.getDataset().data || [],
                        a = i.data;

                    for (t = 0, e = n.length; t < e; ++t) {
                      a[t] = a[t] || this.createMetaData(t);
                    }

                    i.dataset = i.dataset || this.createMetaDataset();
                  },
                  addElementAndReset: function addElementAndReset(t) {
                    var e = this.createMetaData(t);
                    this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0);
                  },
                  buildOrUpdateElements: function buildOrUpdateElements() {
                    var a,
                        t,
                        e = this,
                        i = e.getDataset(),
                        n = i.data || (i.data = []);
                    e._data !== n && (e._data && r(e._data, e), t = e, (a = n)._chartjs ? a._chartjs.listeners.push(t) : (Object.defineProperty(a, "_chartjs", {
                      configurable: !0,
                      enumerable: !1,
                      value: {
                        listeners: [t]
                      }
                    }), o.forEach(function (t) {
                      var i = "onData" + t.charAt(0).toUpperCase() + t.slice(1),
                          n = a[t];
                      Object.defineProperty(a, t, {
                        configurable: !0,
                        enumerable: !1,
                        value: function value() {
                          var e = Array.prototype.slice.call(arguments),
                              t = n.apply(this, e);
                          return s.each(a._chartjs.listeners, function (t) {
                            "function" == typeof t[i] && t[i].apply(t, e);
                          }), t;
                        }
                      });
                    })), e._data = n), e.resyncElements();
                  },
                  update: s.noop,
                  transition: function transition(t) {
                    for (var e = this.getMeta(), i = e.data || [], n = i.length, a = 0; a < n; ++a) {
                      i[a].transition(t);
                    }

                    e.dataset && e.dataset.transition(t);
                  },
                  draw: function draw() {
                    var t = this.getMeta(),
                        e = t.data || [],
                        i = e.length,
                        n = 0;

                    for (t.dataset && t.dataset.draw(); n < i; ++n) {
                      e[n].draw();
                    }
                  },
                  removeHoverStyle: function removeHoverStyle(t) {
                    s.merge(t._model, t.$previousStyle || {}), delete t.$previousStyle;
                  },
                  setHoverStyle: function setHoverStyle(t) {
                    var e = this.chart.data.datasets[t._datasetIndex],
                        i = t._index,
                        n = t.custom || {},
                        a = s.valueAtIndexOrDefault,
                        o = s.getHoverColor,
                        r = t._model;
                    t.$previousStyle = {
                      backgroundColor: r.backgroundColor,
                      borderColor: r.borderColor,
                      borderWidth: r.borderWidth
                    }, r.backgroundColor = n.hoverBackgroundColor ? n.hoverBackgroundColor : a(e.hoverBackgroundColor, i, o(r.backgroundColor)), r.borderColor = n.hoverBorderColor ? n.hoverBorderColor : a(e.hoverBorderColor, i, o(r.borderColor)), r.borderWidth = n.hoverBorderWidth ? n.hoverBorderWidth : a(e.hoverBorderWidth, i, r.borderWidth);
                  },
                  resyncElements: function resyncElements() {
                    var t = this.getMeta(),
                        e = this.getDataset().data,
                        i = t.data.length,
                        n = e.length;
                    n < i ? t.data.splice(n, i - n) : i < n && this.insertElements(i, n - i);
                  },
                  insertElements: function insertElements(t, e) {
                    for (var i = 0; i < e; ++i) {
                      this.addElementAndReset(t + i);
                    }
                  },
                  onDataPush: function onDataPush() {
                    this.insertElements(this.getDataset().data.length - 1, arguments.length);
                  },
                  onDataPop: function onDataPop() {
                    this.getMeta().data.pop();
                  },
                  onDataShift: function onDataShift() {
                    this.getMeta().data.shift();
                  },
                  onDataSplice: function onDataSplice(t, e) {
                    this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2);
                  },
                  onDataUnshift: function onDataUnshift() {
                    this.insertElements(0, arguments.length);
                  }
                }), t.DatasetController.extend = s.inherits;
              };
            }, {
              46: 46
            }],
            26: [function (t, e, i) {
              "use strict";

              var n = t(46);
              e.exports = {
                _set: function _set(t, e) {
                  return n.merge(this[t] || (this[t] = {}), e);
                }
              };
            }, {
              46: 46
            }],
            27: [function (t, e, i) {
              "use strict";

              var g = t(3),
                  n = t(46);

              var a = function a(t) {
                n.extend(this, t), this.initialize.apply(this, arguments);
              };

              n.extend(a.prototype, {
                initialize: function initialize() {
                  this.hidden = !1;
                },
                pivot: function pivot() {
                  var t = this;
                  return t._view || (t._view = n.clone(t._model)), t._start = {}, t;
                },
                transition: function transition(t) {
                  var e = this,
                      i = e._model,
                      n = e._start,
                      a = e._view;
                  return i && 1 !== t ? (a || (a = e._view = {}), n || (n = e._start = {}), function (t, e, i, n) {
                    var a,
                        o,
                        r,
                        s,
                        l,
                        u,
                        d,
                        c,
                        h,
                        f = Object.keys(i);

                    for (a = 0, o = f.length; a < o; ++a) {
                      if (u = i[r = f[a]], e.hasOwnProperty(r) || (e[r] = u), (s = e[r]) !== u && "_" !== r[0]) {
                        if (t.hasOwnProperty(r) || (t[r] = s), (d = _typeof2(u)) == _typeof2(l = t[r])) if ("string" === d) {
                          if ((c = g(l)).valid && (h = g(u)).valid) {
                            e[r] = h.mix(c, n).rgbString();
                            continue;
                          }
                        } else if ("number" === d && isFinite(l) && isFinite(u)) {
                          e[r] = l + (u - l) * n;
                          continue;
                        }
                        e[r] = u;
                      }
                    }
                  }(n, a, i, t)) : (e._view = i, e._start = null), e;
                },
                tooltipPosition: function tooltipPosition() {
                  return {
                    x: this._model.x,
                    y: this._model.y
                  };
                },
                hasValue: function hasValue() {
                  return n.isNumber(this._model.x) && n.isNumber(this._model.y);
                }
              }), a.extend = n.inherits, e.exports = a;
            }, {
              3: 3,
              46: 46
            }],
            28: [function (t, e, i) {
              "use strict";

              var n = t(3),
                  a = t(26),
                  g = t(46),
                  l = t(34);

              e.exports = function () {
                function d(t, e, i) {
                  var n;
                  return "string" == typeof t ? (n = parseInt(t, 10), -1 !== t.indexOf("%") && (n = n / 100 * e.parentNode[i])) : n = t, n;
                }

                function c(t) {
                  return null != t && "none" !== t;
                }

                function e(t, e, i) {
                  var n = document.defaultView,
                      a = g._getParentNode(t),
                      o = n.getComputedStyle(t)[e],
                      r = n.getComputedStyle(a)[e],
                      s = c(o),
                      l = c(r),
                      u = Number.POSITIVE_INFINITY;

                  return s || l ? Math.min(s ? d(o, t, i) : u, l ? d(r, a, i) : u) : "none";
                }

                g.configMerge = function () {
                  return g.merge(g.clone(arguments[0]), [].slice.call(arguments, 1), {
                    merger: function merger(t, e, i, n) {
                      var a = e[t] || {},
                          o = i[t];
                      "scales" === t ? e[t] = g.scaleMerge(a, o) : "scale" === t ? e[t] = g.merge(a, [l.getScaleDefaults(o.type), o]) : g._merger(t, e, i, n);
                    }
                  });
                }, g.scaleMerge = function () {
                  return g.merge(g.clone(arguments[0]), [].slice.call(arguments, 1), {
                    merger: function merger(t, e, i, n) {
                      if ("xAxes" === t || "yAxes" === t) {
                        var a,
                            o,
                            r,
                            s = i[t].length;

                        for (e[t] || (e[t] = []), a = 0; a < s; ++a) {
                          r = i[t][a], o = g.valueOrDefault(r.type, "xAxes" === t ? "category" : "linear"), a >= e[t].length && e[t].push({}), !e[t][a].type || r.type && r.type !== e[t][a].type ? g.merge(e[t][a], [l.getScaleDefaults(o), r]) : g.merge(e[t][a], r);
                        }
                      } else g._merger(t, e, i, n);
                    }
                  });
                }, g.where = function (t, e) {
                  if (g.isArray(t) && Array.prototype.filter) return t.filter(e);
                  var i = [];
                  return g.each(t, function (t) {
                    e(t) && i.push(t);
                  }), i;
                }, g.findIndex = Array.prototype.findIndex ? function (t, e, i) {
                  return t.findIndex(e, i);
                } : function (t, e, i) {
                  i = void 0 === i ? t : i;

                  for (var n = 0, a = t.length; n < a; ++n) {
                    if (e.call(i, t[n], n, t)) return n;
                  }

                  return -1;
                }, g.findNextWhere = function (t, e, i) {
                  g.isNullOrUndef(i) && (i = -1);

                  for (var n = i + 1; n < t.length; n++) {
                    var a = t[n];
                    if (e(a)) return a;
                  }
                }, g.findPreviousWhere = function (t, e, i) {
                  g.isNullOrUndef(i) && (i = t.length);

                  for (var n = i - 1; 0 <= n; n--) {
                    var a = t[n];
                    if (e(a)) return a;
                  }
                }, g.isNumber = function (t) {
                  return !isNaN(parseFloat(t)) && isFinite(t);
                }, g.almostEquals = function (t, e, i) {
                  return Math.abs(t - e) < i;
                }, g.almostWhole = function (t, e) {
                  var i = Math.round(t);
                  return i - e < t && t < i + e;
                }, g.max = function (t) {
                  return t.reduce(function (t, e) {
                    return isNaN(e) ? t : Math.max(t, e);
                  }, Number.NEGATIVE_INFINITY);
                }, g.min = function (t) {
                  return t.reduce(function (t, e) {
                    return isNaN(e) ? t : Math.min(t, e);
                  }, Number.POSITIVE_INFINITY);
                }, g.sign = Math.sign ? function (t) {
                  return Math.sign(t);
                } : function (t) {
                  return 0 === (t = +t) || isNaN(t) ? t : 0 < t ? 1 : -1;
                }, g.log10 = Math.log10 ? function (t) {
                  return Math.log10(t);
                } : function (t) {
                  var e = Math.log(t) * Math.LOG10E,
                      i = Math.round(e);
                  return t === Math.pow(10, i) ? i : e;
                }, g.toRadians = function (t) {
                  return t * (Math.PI / 180);
                }, g.toDegrees = function (t) {
                  return t * (180 / Math.PI);
                }, g.getAngleFromPoint = function (t, e) {
                  var i = e.x - t.x,
                      n = e.y - t.y,
                      a = Math.sqrt(i * i + n * n),
                      o = Math.atan2(n, i);
                  return o < -.5 * Math.PI && (o += 2 * Math.PI), {
                    angle: o,
                    distance: a
                  };
                }, g.distanceBetweenPoints = function (t, e) {
                  return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
                }, g.aliasPixel = function (t) {
                  return t % 2 == 0 ? 0 : .5;
                }, g.splineCurve = function (t, e, i, n) {
                  var a = t.skip ? e : t,
                      o = e,
                      r = i.skip ? e : i,
                      s = Math.sqrt(Math.pow(o.x - a.x, 2) + Math.pow(o.y - a.y, 2)),
                      l = Math.sqrt(Math.pow(r.x - o.x, 2) + Math.pow(r.y - o.y, 2)),
                      u = s / (s + l),
                      d = l / (s + l),
                      c = n * (u = isNaN(u) ? 0 : u),
                      h = n * (d = isNaN(d) ? 0 : d);
                  return {
                    previous: {
                      x: o.x - c * (r.x - a.x),
                      y: o.y - c * (r.y - a.y)
                    },
                    next: {
                      x: o.x + h * (r.x - a.x),
                      y: o.y + h * (r.y - a.y)
                    }
                  };
                }, g.EPSILON = Number.EPSILON || 1e-14, g.splineCurveMonotone = function (t) {
                  var e,
                      i,
                      n,
                      a,
                      o,
                      r,
                      s,
                      l,
                      u,
                      d = (t || []).map(function (t) {
                    return {
                      model: t._model,
                      deltaK: 0,
                      mK: 0
                    };
                  }),
                      c = d.length;

                  for (e = 0; e < c; ++e) {
                    if (!(n = d[e]).model.skip) {
                      if (i = 0 < e ? d[e - 1] : null, (a = e < c - 1 ? d[e + 1] : null) && !a.model.skip) {
                        var h = a.model.x - n.model.x;
                        n.deltaK = 0 !== h ? (a.model.y - n.model.y) / h : 0;
                      }

                      !i || i.model.skip ? n.mK = n.deltaK : !a || a.model.skip ? n.mK = i.deltaK : this.sign(i.deltaK) !== this.sign(n.deltaK) ? n.mK = 0 : n.mK = (i.deltaK + n.deltaK) / 2;
                    }
                  }

                  for (e = 0; e < c - 1; ++e) {
                    n = d[e], a = d[e + 1], n.model.skip || a.model.skip || (g.almostEquals(n.deltaK, 0, this.EPSILON) ? n.mK = a.mK = 0 : (o = n.mK / n.deltaK, r = a.mK / n.deltaK, (l = Math.pow(o, 2) + Math.pow(r, 2)) <= 9 || (s = 3 / Math.sqrt(l), n.mK = o * s * n.deltaK, a.mK = r * s * n.deltaK)));
                  }

                  for (e = 0; e < c; ++e) {
                    (n = d[e]).model.skip || (i = 0 < e ? d[e - 1] : null, a = e < c - 1 ? d[e + 1] : null, i && !i.model.skip && (u = (n.model.x - i.model.x) / 3, n.model.controlPointPreviousX = n.model.x - u, n.model.controlPointPreviousY = n.model.y - u * n.mK), a && !a.model.skip && (u = (a.model.x - n.model.x) / 3, n.model.controlPointNextX = n.model.x + u, n.model.controlPointNextY = n.model.y + u * n.mK));
                  }
                }, g.nextItem = function (t, e, i) {
                  return i ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1];
                }, g.previousItem = function (t, e, i) {
                  return i ? e <= 0 ? t[t.length - 1] : t[e - 1] : e <= 0 ? t[0] : t[e - 1];
                }, g.niceNum = function (t, e) {
                  var i = Math.floor(g.log10(t)),
                      n = t / Math.pow(10, i);
                  return (e ? n < 1.5 ? 1 : n < 3 ? 2 : n < 7 ? 5 : 10 : n <= 1 ? 1 : n <= 2 ? 2 : n <= 5 ? 5 : 10) * Math.pow(10, i);
                }, g.requestAnimFrame = "undefined" == typeof window ? function (t) {
                  t();
                } : window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {
                  return window.setTimeout(t, 1e3 / 60);
                }, g.getRelativePosition = function (t, e) {
                  var i,
                      n,
                      a = t.originalEvent || t,
                      o = t.target || t.srcElement,
                      r = o.getBoundingClientRect(),
                      s = a.touches;
                  n = s && 0 < s.length ? (i = s[0].clientX, s[0].clientY) : (i = a.clientX, a.clientY);
                  var l = parseFloat(g.getStyle(o, "padding-left")),
                      u = parseFloat(g.getStyle(o, "padding-top")),
                      d = parseFloat(g.getStyle(o, "padding-right")),
                      c = parseFloat(g.getStyle(o, "padding-bottom")),
                      h = r.right - r.left - l - d,
                      f = r.bottom - r.top - u - c;
                  return {
                    x: i = Math.round((i - r.left - l) / h * o.width / e.currentDevicePixelRatio),
                    y: n = Math.round((n - r.top - u) / f * o.height / e.currentDevicePixelRatio)
                  };
                }, g.getConstraintWidth = function (t) {
                  return e(t, "max-width", "clientWidth");
                }, g.getConstraintHeight = function (t) {
                  return e(t, "max-height", "clientHeight");
                }, g._calculatePadding = function (t, e, i) {
                  return -1 < (e = g.getStyle(t, e)).indexOf("%") ? i / parseInt(e, 10) : parseInt(e, 10);
                }, g._getParentNode = function (t) {
                  var e = t.parentNode;
                  return e && e.host && (e = e.host), e;
                }, g.getMaximumWidth = function (t) {
                  var e = g._getParentNode(t);

                  if (!e) return t.clientWidth;

                  var i = e.clientWidth,
                      n = i - g._calculatePadding(e, "padding-left", i) - g._calculatePadding(e, "padding-right", i),
                      a = g.getConstraintWidth(t);

                  return isNaN(a) ? n : Math.min(n, a);
                }, g.getMaximumHeight = function (t) {
                  var e = g._getParentNode(t);

                  if (!e) return t.clientHeight;

                  var i = e.clientHeight,
                      n = i - g._calculatePadding(e, "padding-top", i) - g._calculatePadding(e, "padding-bottom", i),
                      a = g.getConstraintHeight(t);

                  return isNaN(a) ? n : Math.min(n, a);
                }, g.getStyle = function (t, e) {
                  return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e);
                }, g.retinaScale = function (t, e) {
                  var i = t.currentDevicePixelRatio = e || "undefined" != typeof window && window.devicePixelRatio || 1;

                  if (1 !== i) {
                    var n = t.canvas,
                        a = t.height,
                        o = t.width;
                    n.height = a * i, n.width = o * i, t.ctx.scale(i, i), n.style.height || n.style.width || (n.style.height = a + "px", n.style.width = o + "px");
                  }
                }, g.fontString = function (t, e, i) {
                  return e + " " + t + "px " + i;
                }, g.longestText = function (e, t, i, n) {
                  var a = (n = n || {}).data = n.data || {},
                      o = n.garbageCollect = n.garbageCollect || [];
                  n.font !== t && (a = n.data = {}, o = n.garbageCollect = [], n.font = t), e.font = t;
                  var r = 0;
                  g.each(i, function (t) {
                    null != t && !0 !== g.isArray(t) ? r = g.measureText(e, a, o, r, t) : g.isArray(t) && g.each(t, function (t) {
                      null == t || g.isArray(t) || (r = g.measureText(e, a, o, r, t));
                    });
                  });
                  var s = o.length / 2;

                  if (s > i.length) {
                    for (var l = 0; l < s; l++) {
                      delete a[o[l]];
                    }

                    o.splice(0, s);
                  }

                  return r;
                }, g.measureText = function (t, e, i, n, a) {
                  var o = e[a];
                  return o || (o = e[a] = t.measureText(a).width, i.push(a)), n < o && (n = o), n;
                }, g.numberOfLabelLines = function (t) {
                  var e = 1;
                  return g.each(t, function (t) {
                    g.isArray(t) && t.length > e && (e = t.length);
                  }), e;
                }, g.color = n ? function (t) {
                  return t instanceof CanvasGradient && (t = a.global.defaultColor), n(t);
                } : function (t) {
                  return console.error("Color.js not found!"), t;
                }, g.getHoverColor = function (t) {
                  return t instanceof CanvasPattern ? t : g.color(t).saturate(.5).darken(.1).rgbString();
                };
              };
            }, {
              26: 26,
              3: 3,
              34: 34,
              46: 46
            }],
            29: [function (t, e, i) {
              "use strict";

              var n = t(46);

              function s(t, e) {
                return t["native"] ? {
                  x: t.x,
                  y: t.y
                } : n.getRelativePosition(t, e);
              }

              function l(t, e) {
                var i, n, a, o, r;

                for (n = 0, o = t.data.datasets.length; n < o; ++n) {
                  if (t.isDatasetVisible(n)) for (a = 0, r = (i = t.getDatasetMeta(n)).data.length; a < r; ++a) {
                    var s = i.data[a];
                    s._view.skip || e(s);
                  }
                }
              }

              function u(t, e) {
                var i = [];
                return l(t, function (t) {
                  t.inRange(e.x, e.y) && i.push(t);
                }), i;
              }

              function d(t, n, a, o) {
                var r = Number.POSITIVE_INFINITY,
                    s = [];
                return l(t, function (t) {
                  if (!a || t.inRange(n.x, n.y)) {
                    var e = t.getCenterPoint(),
                        i = o(n, e);
                    i < r ? (s = [t], r = i) : i === r && s.push(t);
                  }
                }), s;
              }

              function c(t) {
                var a = -1 !== t.indexOf("x"),
                    o = -1 !== t.indexOf("y");
                return function (t, e) {
                  var i = a ? Math.abs(t.x - e.x) : 0,
                      n = o ? Math.abs(t.y - e.y) : 0;
                  return Math.sqrt(Math.pow(i, 2) + Math.pow(n, 2));
                };
              }

              function a(n, t, e) {
                var i = s(t, n);
                e.axis = e.axis || "x";
                var a = c(e.axis),
                    o = e.intersect ? u(n, i) : d(n, i, !1, a),
                    r = [];
                return o.length ? (n.data.datasets.forEach(function (t, e) {
                  if (n.isDatasetVisible(e)) {
                    var i = n.getDatasetMeta(e).data[o[0]._index];

                    i && !i._view.skip && r.push(i);
                  }
                }), r) : [];
              }

              e.exports = {
                modes: {
                  single: function single(t, e) {
                    var i = s(e, t),
                        n = [];
                    return l(t, function (t) {
                      if (t.inRange(i.x, i.y)) return n.push(t), n;
                    }), n.slice(0, 1);
                  },
                  label: a,
                  index: a,
                  dataset: function dataset(t, e, i) {
                    var n = s(e, t);
                    i.axis = i.axis || "xy";
                    var a = c(i.axis),
                        o = i.intersect ? u(t, n) : d(t, n, !1, a);
                    return 0 < o.length && (o = t.getDatasetMeta(o[0]._datasetIndex).data), o;
                  },
                  "x-axis": function xAxis(t, e) {
                    return a(t, e, {
                      intersect: !1
                    });
                  },
                  point: function point(t, e) {
                    return u(t, s(e, t));
                  },
                  nearest: function nearest(t, e, i) {
                    var n = s(e, t);
                    i.axis = i.axis || "xy";
                    var a = c(i.axis),
                        o = d(t, n, i.intersect, a);
                    return 1 < o.length && o.sort(function (t, e) {
                      var i = t.getArea() - e.getArea();
                      return 0 === i && (i = t._datasetIndex - e._datasetIndex), i;
                    }), o.slice(0, 1);
                  },
                  x: function x(t, e, i) {
                    var n = s(e, t),
                        a = [],
                        o = !1;
                    return l(t, function (t) {
                      t.inXRange(n.x) && a.push(t), t.inRange(n.x, n.y) && (o = !0);
                    }), i.intersect && !o && (a = []), a;
                  },
                  y: function y(t, e, i) {
                    var n = s(e, t),
                        a = [],
                        o = !1;
                    return l(t, function (t) {
                      t.inYRange(n.y) && a.push(t), t.inRange(n.x, n.y) && (o = !0);
                    }), i.intersect && !o && (a = []), a;
                  }
                }
              };
            }, {
              46: 46
            }],
            30: [function (t, e, i) {
              "use strict";

              t(26)._set("global", {
                responsive: !0,
                responsiveAnimationDuration: 0,
                maintainAspectRatio: !0,
                events: ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
                hover: {
                  onHover: null,
                  mode: "nearest",
                  intersect: !0,
                  animationDuration: 400
                },
                onClick: null,
                defaultColor: "rgba(0,0,0,0.1)",
                defaultFontColor: "#666",
                defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                defaultFontSize: 12,
                defaultFontStyle: "normal",
                showLines: !0,
                elements: {},
                layout: {
                  padding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                  }
                }
              }), e.exports = function () {
                var t = function t(_t, e) {
                  return this.construct(_t, e), this;
                };

                return t.Chart = t;
              };
            }, {
              26: 26
            }],
            31: [function (t, e, i) {
              "use strict";

              var B = t(46);

              function W(t, e) {
                return B.where(t, function (t) {
                  return t.position === e;
                });
              }

              function V(t, a) {
                t.forEach(function (t, e) {
                  return t._tmpIndex_ = e, t;
                }), t.sort(function (t, e) {
                  var i = a ? e : t,
                      n = a ? t : e;
                  return i.weight === n.weight ? i._tmpIndex_ - n._tmpIndex_ : i.weight - n.weight;
                }), t.forEach(function (t) {
                  delete t._tmpIndex_;
                });
              }

              e.exports = {
                defaults: {},
                addBox: function addBox(t, e) {
                  t.boxes || (t.boxes = []), e.fullWidth = e.fullWidth || !1, e.position = e.position || "top", e.weight = e.weight || 0, t.boxes.push(e);
                },
                removeBox: function removeBox(t, e) {
                  var i = t.boxes ? t.boxes.indexOf(e) : -1;
                  -1 !== i && t.boxes.splice(i, 1);
                },
                configure: function configure(t, e, i) {
                  for (var n, a = ["fullWidth", "position", "weight"], o = a.length, r = 0; r < o; ++r) {
                    n = a[r], i.hasOwnProperty(n) && (e[n] = i[n]);
                  }
                },
                update: function update(e, i, t) {
                  if (e) {
                    var n = e.options.layout || {},
                        a = B.options.toPadding(n.padding),
                        o = a.left,
                        r = a.right,
                        s = a.top,
                        l = a.bottom,
                        u = W(e.boxes, "left"),
                        d = W(e.boxes, "right"),
                        c = W(e.boxes, "top"),
                        h = W(e.boxes, "bottom"),
                        f = W(e.boxes, "chartArea");
                    V(u, !0), V(d, !1), V(c, !0), V(h, !1);
                    var g = i - o - r,
                        p = t - s - l,
                        m = p / 2,
                        v = (i - g / 2) / (u.length + d.length),
                        b = (t - m) / (c.length + h.length),
                        x = g,
                        y = p,
                        k = [];
                    B.each(u.concat(d, c, h), function (t) {
                      var e,
                          i = t.isHorizontal();
                      i ? (e = t.update(t.fullWidth ? g : x, b), y -= e.height) : (e = t.update(v, y), x -= e.width), k.push({
                        horizontal: i,
                        minSize: e,
                        box: t
                      });
                    });
                    var M = 0,
                        w = 0,
                        C = 0,
                        S = 0;
                    B.each(c.concat(h), function (t) {
                      if (t.getPadding) {
                        var e = t.getPadding();
                        M = Math.max(M, e.left), w = Math.max(w, e.right);
                      }
                    }), B.each(u.concat(d), function (t) {
                      if (t.getPadding) {
                        var e = t.getPadding();
                        C = Math.max(C, e.top), S = Math.max(S, e.bottom);
                      }
                    });
                    var _ = o,
                        D = r,
                        P = s,
                        I = l;
                    B.each(u.concat(d), z), B.each(u, function (t) {
                      _ += t.width;
                    }), B.each(d, function (t) {
                      D += t.width;
                    }), B.each(c.concat(h), z), B.each(c, function (t) {
                      P += t.height;
                    }), B.each(h, function (t) {
                      I += t.height;
                    }), B.each(u.concat(d), function (e) {
                      var t = B.findNextWhere(k, function (t) {
                        return t.box === e;
                      }),
                          i = {
                        left: 0,
                        right: 0,
                        top: P,
                        bottom: I
                      };
                      t && e.update(t.minSize.width, y, i);
                    }), _ = o, D = r, P = s, I = l, B.each(u, function (t) {
                      _ += t.width;
                    }), B.each(d, function (t) {
                      D += t.width;
                    }), B.each(c, function (t) {
                      P += t.height;
                    }), B.each(h, function (t) {
                      I += t.height;
                    });
                    var A = Math.max(M - _, 0);
                    _ += A, D += Math.max(w - D, 0);
                    var T = Math.max(C - P, 0);
                    P += T, I += Math.max(S - I, 0);
                    var F = t - P - I,
                        O = i - _ - D;
                    O === x && F === y || (B.each(u, function (t) {
                      t.height = F;
                    }), B.each(d, function (t) {
                      t.height = F;
                    }), B.each(c, function (t) {
                      t.fullWidth || (t.width = O);
                    }), B.each(h, function (t) {
                      t.fullWidth || (t.width = O);
                    }), y = F, x = O);
                    var R = o + A,
                        L = s + T;
                    B.each(u.concat(c), N), R += x, L += y, B.each(d, N), B.each(h, N), e.chartArea = {
                      left: _,
                      top: P,
                      right: _ + x,
                      bottom: P + y
                    }, B.each(f, function (t) {
                      t.left = e.chartArea.left, t.top = e.chartArea.top, t.right = e.chartArea.right, t.bottom = e.chartArea.bottom, t.update(x, y);
                    });
                  }

                  function z(e) {
                    var t = B.findNextWhere(k, function (t) {
                      return t.box === e;
                    });
                    if (t) if (e.isHorizontal()) {
                      var i = {
                        left: Math.max(_, M),
                        right: Math.max(D, w),
                        top: 0,
                        bottom: 0
                      };
                      e.update(e.fullWidth ? g : x, p / 2, i);
                    } else e.update(t.minSize.width, y);
                  }

                  function N(t) {
                    t.isHorizontal() ? (t.left = t.fullWidth ? o : _, t.right = t.fullWidth ? i - r : _ + x, t.top = L, t.bottom = L + t.height, L = t.bottom) : (t.left = R, t.right = R + t.width, t.top = P, t.bottom = P + y, R = t.right);
                  }
                }
              };
            }, {
              46: 46
            }],
            32: [function (t, e, i) {
              "use strict";

              var r = t(26),
                  s = t(46);
              r._set("global", {
                plugins: {}
              }), e.exports = {
                _plugins: [],
                _cacheId: 0,
                register: function register(t) {
                  var e = this._plugins;
                  [].concat(t).forEach(function (t) {
                    -1 === e.indexOf(t) && e.push(t);
                  }), this._cacheId++;
                },
                unregister: function unregister(t) {
                  var i = this._plugins;
                  [].concat(t).forEach(function (t) {
                    var e = i.indexOf(t);
                    -1 !== e && i.splice(e, 1);
                  }), this._cacheId++;
                },
                clear: function clear() {
                  this._plugins = [], this._cacheId++;
                },
                count: function count() {
                  return this._plugins.length;
                },
                getAll: function getAll() {
                  return this._plugins;
                },
                notify: function notify(t, e, i) {
                  var n,
                      a,
                      o,
                      r,
                      s,
                      l = this.descriptors(t),
                      u = l.length;

                  for (n = 0; n < u; ++n) {
                    if ("function" == typeof (s = (o = (a = l[n]).plugin)[e]) && ((r = [t].concat(i || [])).push(a.options), !1 === s.apply(o, r))) return !1;
                  }

                  return !0;
                },
                descriptors: function descriptors(t) {
                  var e = t.$plugins || (t.$plugins = {});
                  if (e.id === this._cacheId) return e.descriptors;
                  var n = [],
                      a = [],
                      i = t && t.config || {},
                      o = i.options && i.options.plugins || {};
                  return this._plugins.concat(i.plugins || []).forEach(function (t) {
                    if (-1 === n.indexOf(t)) {
                      var e = t.id,
                          i = o[e];
                      !1 !== i && (!0 === i && (i = s.clone(r.global.plugins[e])), n.push(t), a.push({
                        plugin: t,
                        options: i || {}
                      }));
                    }
                  }), e.descriptors = a, e.id = this._cacheId, a;
                },
                _invalidate: function _invalidate(t) {
                  delete t.$plugins;
                }
              };
            }, {
              26: 26,
              46: 46
            }],
            33: [function (t, e, i) {
              "use strict";

              var y = t(26),
                  n = t(27),
                  H = t(46),
                  a = t(35);

              function k(t) {
                var e,
                    i,
                    n = [];

                for (e = 0, i = t.length; e < i; ++e) {
                  n.push(t[e].label);
                }

                return n;
              }

              function j(t, e, i) {
                var n = t.getPixelForTick(e);
                return i && (n -= 0 === e ? (t.getPixelForTick(1) - n) / 2 : (n - t.getPixelForTick(e - 1)) / 2), n;
              }

              function M(t, e, i) {
                return H.isArray(e) ? H.longestText(t, i, e) : t.measureText(e).width;
              }

              function w(t) {
                var e = H.valueOrDefault,
                    i = y.global,
                    n = e(t.fontSize, i.defaultFontSize),
                    a = e(t.fontStyle, i.defaultFontStyle),
                    o = e(t.fontFamily, i.defaultFontFamily);
                return {
                  size: n,
                  style: a,
                  family: o,
                  font: H.fontString(n, a, o)
                };
              }

              function C(t) {
                return H.options.toLineHeight(H.valueOrDefault(t.lineHeight, 1.2), H.valueOrDefault(t.fontSize, y.global.defaultFontSize));
              }

              y._set("scale", {
                display: !0,
                position: "left",
                offset: !1,
                gridLines: {
                  display: !0,
                  color: "rgba(0, 0, 0, 0.1)",
                  lineWidth: 1,
                  drawBorder: !0,
                  drawOnChartArea: !0,
                  drawTicks: !0,
                  tickMarkLength: 10,
                  zeroLineWidth: 1,
                  zeroLineColor: "rgba(0,0,0,0.25)",
                  zeroLineBorderDash: [],
                  zeroLineBorderDashOffset: 0,
                  offsetGridLines: !1,
                  borderDash: [],
                  borderDashOffset: 0
                },
                scaleLabel: {
                  display: !1,
                  labelString: "",
                  lineHeight: 1.2,
                  padding: {
                    top: 4,
                    bottom: 4
                  }
                },
                ticks: {
                  beginAtZero: !1,
                  minRotation: 0,
                  maxRotation: 50,
                  mirror: !1,
                  padding: 0,
                  reverse: !1,
                  display: !0,
                  autoSkip: !0,
                  autoSkipPadding: 0,
                  labelOffset: 0,
                  callback: a.formatters.values,
                  minor: {},
                  major: {}
                }
              }), e.exports = n.extend({
                getPadding: function getPadding() {
                  return {
                    left: this.paddingLeft || 0,
                    top: this.paddingTop || 0,
                    right: this.paddingRight || 0,
                    bottom: this.paddingBottom || 0
                  };
                },
                getTicks: function getTicks() {
                  return this._ticks;
                },
                mergeTicksOptions: function mergeTicksOptions() {
                  var t = this.options.ticks;

                  for (var e in !1 === t.minor && (t.minor = {
                    display: !1
                  }), !1 === t.major && (t.major = {
                    display: !1
                  }), t) {
                    "major" !== e && "minor" !== e && (void 0 === t.minor[e] && (t.minor[e] = t[e]), void 0 === t.major[e] && (t.major[e] = t[e]));
                  }
                },
                beforeUpdate: function beforeUpdate() {
                  H.callback(this.options.beforeUpdate, [this]);
                },
                update: function update(t, e, i) {
                  var n,
                      a,
                      o,
                      r,
                      s,
                      l,
                      u = this;

                  for (u.beforeUpdate(), u.maxWidth = t, u.maxHeight = e, u.margins = H.extend({
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                  }, i), u.longestTextCache = u.longestTextCache || {}, u.beforeSetDimensions(), u.setDimensions(), u.afterSetDimensions(), u.beforeDataLimits(), u.determineDataLimits(), u.afterDataLimits(), u.beforeBuildTicks(), s = u.buildTicks() || [], u.afterBuildTicks(), u.beforeTickToLabelConversion(), o = u.convertTicksToLabels(s) || u.ticks, u.afterTickToLabelConversion(), n = 0, a = (u.ticks = o).length; n < a; ++n) {
                    r = o[n], (l = s[n]) ? l.label = r : s.push(l = {
                      label: r,
                      major: !1
                    });
                  }

                  return u._ticks = s, u.beforeCalculateTickRotation(), u.calculateTickRotation(), u.afterCalculateTickRotation(), u.beforeFit(), u.fit(), u.afterFit(), u.afterUpdate(), u.minSize;
                },
                afterUpdate: function afterUpdate() {
                  H.callback(this.options.afterUpdate, [this]);
                },
                beforeSetDimensions: function beforeSetDimensions() {
                  H.callback(this.options.beforeSetDimensions, [this]);
                },
                setDimensions: function setDimensions() {
                  var t = this;
                  t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0;
                },
                afterSetDimensions: function afterSetDimensions() {
                  H.callback(this.options.afterSetDimensions, [this]);
                },
                beforeDataLimits: function beforeDataLimits() {
                  H.callback(this.options.beforeDataLimits, [this]);
                },
                determineDataLimits: H.noop,
                afterDataLimits: function afterDataLimits() {
                  H.callback(this.options.afterDataLimits, [this]);
                },
                beforeBuildTicks: function beforeBuildTicks() {
                  H.callback(this.options.beforeBuildTicks, [this]);
                },
                buildTicks: H.noop,
                afterBuildTicks: function afterBuildTicks() {
                  H.callback(this.options.afterBuildTicks, [this]);
                },
                beforeTickToLabelConversion: function beforeTickToLabelConversion() {
                  H.callback(this.options.beforeTickToLabelConversion, [this]);
                },
                convertTicksToLabels: function convertTicksToLabels() {
                  var t = this.options.ticks;
                  this.ticks = this.ticks.map(t.userCallback || t.callback, this);
                },
                afterTickToLabelConversion: function afterTickToLabelConversion() {
                  H.callback(this.options.afterTickToLabelConversion, [this]);
                },
                beforeCalculateTickRotation: function beforeCalculateTickRotation() {
                  H.callback(this.options.beforeCalculateTickRotation, [this]);
                },
                calculateTickRotation: function calculateTickRotation() {
                  var t = this,
                      e = t.ctx,
                      i = t.options.ticks,
                      n = k(t._ticks),
                      a = w(i);
                  e.font = a.font;
                  var o = i.minRotation || 0;
                  if (n.length && t.options.display && t.isHorizontal()) for (var r, s = H.longestText(e, a.font, n, t.longestTextCache), l = s, u = t.getPixelForTick(1) - t.getPixelForTick(0) - 6; u < l && o < i.maxRotation;) {
                    var d = H.toRadians(o);

                    if (r = Math.cos(d), Math.sin(d) * s > t.maxHeight) {
                      o--;
                      break;
                    }

                    o++, l = r * s;
                  }
                  t.labelRotation = o;
                },
                afterCalculateTickRotation: function afterCalculateTickRotation() {
                  H.callback(this.options.afterCalculateTickRotation, [this]);
                },
                beforeFit: function beforeFit() {
                  H.callback(this.options.beforeFit, [this]);
                },
                fit: function fit() {
                  var t = this,
                      e = t.minSize = {
                    width: 0,
                    height: 0
                  },
                      i = k(t._ticks),
                      n = t.options,
                      a = n.ticks,
                      o = n.scaleLabel,
                      r = n.gridLines,
                      s = n.display,
                      l = t.isHorizontal(),
                      u = w(a),
                      d = n.gridLines.tickMarkLength;

                  if (e.width = l ? t.isFullWidth() ? t.maxWidth - t.margins.left - t.margins.right : t.maxWidth : s && r.drawTicks ? d : 0, e.height = l ? s && r.drawTicks ? d : 0 : t.maxHeight, o.display && s) {
                    var c = C(o) + H.options.toPadding(o.padding).height;
                    l ? e.height += c : e.width += c;
                  }

                  if (a.display && s) {
                    var h = H.longestText(t.ctx, u.font, i, t.longestTextCache),
                        f = H.numberOfLabelLines(i),
                        g = .5 * u.size,
                        p = t.options.ticks.padding;

                    if (l) {
                      t.longestLabelWidth = h;
                      var m = H.toRadians(t.labelRotation),
                          v = Math.cos(m),
                          b = Math.sin(m) * h + u.size * f + g * (f - 1) + g;
                      e.height = Math.min(t.maxHeight, e.height + b + p), t.ctx.font = u.font;
                      var x = M(t.ctx, i[0], u.font),
                          y = M(t.ctx, i[i.length - 1], u.font);
                      0 !== t.labelRotation ? (t.paddingLeft = "bottom" === n.position ? v * x + 3 : v * g + 3, t.paddingRight = "bottom" === n.position ? v * g + 3 : v * y + 3) : (t.paddingLeft = x / 2 + 3, t.paddingRight = y / 2 + 3);
                    } else a.mirror ? h = 0 : h += p + g, e.width = Math.min(t.maxWidth, e.width + h), t.paddingTop = u.size / 2, t.paddingBottom = u.size / 2;
                  }

                  t.handleMargins(), t.width = e.width, t.height = e.height;
                },
                handleMargins: function handleMargins() {
                  var t = this;
                  t.margins && (t.paddingLeft = Math.max(t.paddingLeft - t.margins.left, 0), t.paddingTop = Math.max(t.paddingTop - t.margins.top, 0), t.paddingRight = Math.max(t.paddingRight - t.margins.right, 0), t.paddingBottom = Math.max(t.paddingBottom - t.margins.bottom, 0));
                },
                afterFit: function afterFit() {
                  H.callback(this.options.afterFit, [this]);
                },
                isHorizontal: function isHorizontal() {
                  return "top" === this.options.position || "bottom" === this.options.position;
                },
                isFullWidth: function isFullWidth() {
                  return this.options.fullWidth;
                },
                getRightValue: function getRightValue(t) {
                  if (H.isNullOrUndef(t)) return NaN;
                  if ("number" == typeof t && !isFinite(t)) return NaN;
                  if (t) if (this.isHorizontal()) {
                    if (void 0 !== t.x) return this.getRightValue(t.x);
                  } else if (void 0 !== t.y) return this.getRightValue(t.y);
                  return t;
                },
                getLabelForIndex: H.noop,
                getPixelForValue: H.noop,
                getValueForPixel: H.noop,
                getPixelForTick: function getPixelForTick(t) {
                  var e = this,
                      i = e.options.offset;

                  if (e.isHorizontal()) {
                    var n = (e.width - (e.paddingLeft + e.paddingRight)) / Math.max(e._ticks.length - (i ? 0 : 1), 1),
                        a = n * t + e.paddingLeft;
                    i && (a += n / 2);
                    var o = e.left + Math.round(a);
                    return o += e.isFullWidth() ? e.margins.left : 0;
                  }

                  var r = e.height - (e.paddingTop + e.paddingBottom);
                  return e.top + t * (r / (e._ticks.length - 1));
                },
                getPixelForDecimal: function getPixelForDecimal(t) {
                  var e = this;

                  if (e.isHorizontal()) {
                    var i = (e.width - (e.paddingLeft + e.paddingRight)) * t + e.paddingLeft,
                        n = e.left + Math.round(i);
                    return n += e.isFullWidth() ? e.margins.left : 0;
                  }

                  return e.top + t * e.height;
                },
                getBasePixel: function getBasePixel() {
                  return this.getPixelForValue(this.getBaseValue());
                },
                getBaseValue: function getBaseValue() {
                  var t = this.min,
                      e = this.max;
                  return this.beginAtZero ? 0 : t < 0 && e < 0 ? e : 0 < t && 0 < e ? t : 0;
                },
                _autoSkip: function _autoSkip(t) {
                  var e,
                      i,
                      n,
                      a,
                      o = this,
                      r = o.isHorizontal(),
                      s = o.options.ticks.minor,
                      l = t.length,
                      u = H.toRadians(o.labelRotation),
                      d = Math.cos(u),
                      c = o.longestLabelWidth * d,
                      h = [];

                  for (s.maxTicksLimit && (a = s.maxTicksLimit), r && (e = !1, (c + s.autoSkipPadding) * l > o.width - (o.paddingLeft + o.paddingRight) && (e = 1 + Math.floor((c + s.autoSkipPadding) * l / (o.width - (o.paddingLeft + o.paddingRight)))), a && a < l && (e = Math.max(e, Math.floor(l / a)))), i = 0; i < l; i++) {
                    n = t[i], (1 < e && 0 < i % e || i % e == 0 && l <= i + e) && i !== l - 1 && delete n.label, h.push(n);
                  }

                  return h;
                },
                draw: function draw(S) {
                  var _ = this,
                      D = _.options;

                  if (D.display) {
                    var r = _.ctx,
                        P = y.global,
                        I = D.ticks.minor,
                        t = D.ticks.major || I,
                        A = D.gridLines,
                        e = D.scaleLabel,
                        T = 0 !== _.labelRotation,
                        F = _.isHorizontal(),
                        O = I.autoSkip ? _._autoSkip(_.getTicks()) : _.getTicks(),
                        s = H.valueOrDefault(I.fontColor, P.defaultFontColor),
                        l = w(I),
                        u = H.valueOrDefault(t.fontColor, P.defaultFontColor),
                        d = w(t),
                        R = A.drawTicks ? A.tickMarkLength : 0,
                        i = H.valueOrDefault(e.fontColor, P.defaultFontColor),
                        n = w(e),
                        a = H.options.toPadding(e.padding),
                        L = H.toRadians(_.labelRotation),
                        z = [],
                        N = _.options.gridLines.lineWidth,
                        B = "right" === D.position ? _.left : _.right - N - R,
                        W = "right" === D.position ? _.left + R : _.right,
                        V = "bottom" === D.position ? _.top + N : _.bottom - R - N,
                        E = "bottom" === D.position ? _.top + N + R : _.bottom + N;

                    if (H.each(O, function (t, e) {
                      if (!H.isNullOrUndef(t.label)) {
                        var i,
                            n,
                            a,
                            o,
                            r,
                            s,
                            l,
                            u,
                            d,
                            c,
                            h,
                            f,
                            g,
                            p,
                            m = t.label;
                        o = e === _.zeroLineIndex && D.offset === A.offsetGridLines ? (i = A.zeroLineWidth, n = A.zeroLineColor, a = A.zeroLineBorderDash, A.zeroLineBorderDashOffset) : (i = H.valueAtIndexOrDefault(A.lineWidth, e), n = H.valueAtIndexOrDefault(A.color, e), a = H.valueOrDefault(A.borderDash, P.borderDash), H.valueOrDefault(A.borderDashOffset, P.borderDashOffset));
                        var v = "middle",
                            b = "middle",
                            x = I.padding;

                        if (F) {
                          var y = R + x;
                          p = "bottom" === D.position ? (b = T ? "middle" : "top", v = T ? "right" : "center", _.top + y) : (b = T ? "middle" : "bottom", v = T ? "left" : "center", _.bottom - y);
                          var k = j(_, e, A.offsetGridLines && 1 < O.length);
                          k < _.left && (n = "rgba(0,0,0,0)"), k += H.aliasPixel(i), g = _.getPixelForTick(e) + I.labelOffset, r = l = d = h = k, s = V, u = E, c = S.top, f = S.bottom + N;
                        } else {
                          var M,
                              w = "left" === D.position;
                          M = I.mirror ? (v = w ? "left" : "right", x) : (v = w ? "right" : "left", R + x), g = w ? _.right - M : _.left + M;
                          var C = j(_, e, A.offsetGridLines && 1 < O.length);
                          C < _.top && (n = "rgba(0,0,0,0)"), C += H.aliasPixel(i), p = _.getPixelForTick(e) + I.labelOffset, r = B, l = W, d = S.left, h = S.right + N, s = u = c = f = C;
                        }

                        z.push({
                          tx1: r,
                          ty1: s,
                          tx2: l,
                          ty2: u,
                          x1: d,
                          y1: c,
                          x2: h,
                          y2: f,
                          labelX: g,
                          labelY: p,
                          glWidth: i,
                          glColor: n,
                          glBorderDash: a,
                          glBorderDashOffset: o,
                          rotation: -1 * L,
                          label: m,
                          major: t.major,
                          textBaseline: b,
                          textAlign: v
                        });
                      }
                    }), H.each(z, function (t) {
                      if (A.display && (r.save(), r.lineWidth = t.glWidth, r.strokeStyle = t.glColor, r.setLineDash && (r.setLineDash(t.glBorderDash), r.lineDashOffset = t.glBorderDashOffset), r.beginPath(), A.drawTicks && (r.moveTo(t.tx1, t.ty1), r.lineTo(t.tx2, t.ty2)), A.drawOnChartArea && (r.moveTo(t.x1, t.y1), r.lineTo(t.x2, t.y2)), r.stroke(), r.restore()), I.display) {
                        r.save(), r.translate(t.labelX, t.labelY), r.rotate(t.rotation), r.font = t.major ? d.font : l.font, r.fillStyle = t.major ? u : s, r.textBaseline = t.textBaseline, r.textAlign = t.textAlign;
                        var e = t.label;
                        if (H.isArray(e)) for (var i = e.length, n = 1.5 * l.size, a = _.isHorizontal() ? 0 : -n * (i - 1) / 2, o = 0; o < i; ++o) {
                          r.fillText("" + e[o], 0, a), a += n;
                        } else r.fillText(e, 0, 0);
                        r.restore();
                      }
                    }), e.display) {
                      var o,
                          c,
                          h = 0,
                          f = C(e) / 2;
                      if (F) o = _.left + (_.right - _.left) / 2, c = "bottom" === D.position ? _.bottom - f - a.bottom : _.top + f + a.top;else {
                        var g = "left" === D.position;
                        o = g ? _.left + f + a.top : _.right - f - a.top, c = _.top + (_.bottom - _.top) / 2, h = g ? -.5 * Math.PI : .5 * Math.PI;
                      }
                      r.save(), r.translate(o, c), r.rotate(h), r.textAlign = "center", r.textBaseline = "middle", r.fillStyle = i, r.font = n.font, r.fillText(e.labelString, 0, 0), r.restore();
                    }

                    if (A.drawBorder) {
                      r.lineWidth = H.valueAtIndexOrDefault(A.lineWidth, 0), r.strokeStyle = H.valueAtIndexOrDefault(A.color, 0);
                      var p = _.left,
                          m = _.right + N,
                          v = _.top,
                          b = _.bottom + N,
                          x = H.aliasPixel(r.lineWidth);
                      F ? (v = b = "top" === D.position ? _.bottom : _.top, v += x, b += x) : (p = m = "left" === D.position ? _.right : _.left, p += x, m += x), r.beginPath(), r.moveTo(p, v), r.lineTo(m, b), r.stroke();
                    }
                  }
                }
              });
            }, {
              26: 26,
              27: 27,
              35: 35,
              46: 46
            }],
            34: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(46),
                  o = t(31);
              e.exports = {
                constructors: {},
                defaults: {},
                registerScaleType: function registerScaleType(t, e, i) {
                  this.constructors[t] = e, this.defaults[t] = a.clone(i);
                },
                getScaleConstructor: function getScaleConstructor(t) {
                  return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0;
                },
                getScaleDefaults: function getScaleDefaults(t) {
                  return this.defaults.hasOwnProperty(t) ? a.merge({}, [n.scale, this.defaults[t]]) : {};
                },
                updateScaleDefaults: function updateScaleDefaults(t, e) {
                  this.defaults.hasOwnProperty(t) && (this.defaults[t] = a.extend(this.defaults[t], e));
                },
                addScalesToLayout: function addScalesToLayout(e) {
                  a.each(e.scales, function (t) {
                    t.fullWidth = t.options.fullWidth, t.position = t.options.position, t.weight = t.options.weight, o.addBox(e, t);
                  });
                }
              };
            }, {
              26: 26,
              31: 31,
              46: 46
            }],
            35: [function (t, e, i) {
              "use strict";

              var l = t(46);
              e.exports = {
                formatters: {
                  values: function values(t) {
                    return l.isArray(t) ? t : "" + t;
                  },
                  linear: function linear(t, e, i) {
                    var n = 3 < i.length ? i[2] - i[1] : i[1] - i[0];
                    1 < Math.abs(n) && t !== Math.floor(t) && (n = t - Math.floor(t));
                    var a = l.log10(Math.abs(n)),
                        o = "";
                    if (0 !== t) {
                      if (Math.max(Math.abs(i[0]), Math.abs(i[i.length - 1])) < 1e-4) {
                        var r = l.log10(Math.abs(t));
                        o = t.toExponential(Math.floor(r) - Math.floor(a));
                      } else {
                        var s = -1 * Math.floor(a);
                        s = Math.max(Math.min(s, 20), 0), o = t.toFixed(s);
                      }
                    } else o = "0";
                    return o;
                  },
                  logarithmic: function logarithmic(t, e, i) {
                    var n = t / Math.pow(10, Math.floor(l.log10(t)));
                    return 0 === t ? "0" : 1 === n || 2 === n || 5 === n || 0 === e || e === i.length - 1 ? t.toExponential() : "";
                  }
                }
              };
            }, {
              46: 46
            }],
            36: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(27),
                  R = t(46);

              n._set("global", {
                tooltips: {
                  enabled: !0,
                  custom: null,
                  mode: "nearest",
                  position: "average",
                  intersect: !0,
                  backgroundColor: "rgba(0,0,0,0.8)",
                  titleFontStyle: "bold",
                  titleSpacing: 2,
                  titleMarginBottom: 6,
                  titleFontColor: "#fff",
                  titleAlign: "left",
                  bodySpacing: 2,
                  bodyFontColor: "#fff",
                  bodyAlign: "left",
                  footerFontStyle: "bold",
                  footerSpacing: 2,
                  footerMarginTop: 6,
                  footerFontColor: "#fff",
                  footerAlign: "left",
                  yPadding: 6,
                  xPadding: 6,
                  caretPadding: 2,
                  caretSize: 5,
                  cornerRadius: 6,
                  multiKeyBackground: "#fff",
                  displayColors: !0,
                  borderColor: "rgba(0,0,0,0)",
                  borderWidth: 0,
                  callbacks: {
                    beforeTitle: R.noop,
                    title: function title(t, e) {
                      var i = "",
                          n = e.labels,
                          a = n ? n.length : 0;

                      if (0 < t.length) {
                        var o = t[0];
                        o.xLabel ? i = o.xLabel : 0 < a && o.index < a && (i = n[o.index]);
                      }

                      return i;
                    },
                    afterTitle: R.noop,
                    beforeBody: R.noop,
                    beforeLabel: R.noop,
                    label: function label(t, e) {
                      var i = e.datasets[t.datasetIndex].label || "";
                      return i && (i += ": "), i += t.yLabel;
                    },
                    labelColor: function labelColor(t, e) {
                      var i = e.getDatasetMeta(t.datasetIndex).data[t.index]._view;

                      return {
                        borderColor: i.borderColor,
                        backgroundColor: i.backgroundColor
                      };
                    },
                    labelTextColor: function labelTextColor() {
                      return this._options.bodyFontColor;
                    },
                    afterLabel: R.noop,
                    afterBody: R.noop,
                    beforeFooter: R.noop,
                    footer: R.noop,
                    afterFooter: R.noop
                  }
                }
              });

              var L = {
                average: function average(t) {
                  if (!t.length) return !1;
                  var e,
                      i,
                      n = 0,
                      a = 0,
                      o = 0;

                  for (e = 0, i = t.length; e < i; ++e) {
                    var r = t[e];

                    if (r && r.hasValue()) {
                      var s = r.tooltipPosition();
                      n += s.x, a += s.y, ++o;
                    }
                  }

                  return {
                    x: Math.round(n / o),
                    y: Math.round(a / o)
                  };
                },
                nearest: function nearest(t, e) {
                  var i,
                      n,
                      a,
                      o = e.x,
                      r = e.y,
                      s = Number.POSITIVE_INFINITY;

                  for (i = 0, n = t.length; i < n; ++i) {
                    var l = t[i];

                    if (l && l.hasValue()) {
                      var u = l.getCenterPoint(),
                          d = R.distanceBetweenPoints(e, u);
                      d < s && (s = d, a = l);
                    }
                  }

                  if (a) {
                    var c = a.tooltipPosition();
                    o = c.x, r = c.y;
                  }

                  return {
                    x: o,
                    y: r
                  };
                }
              };

              function h(t, e) {
                var i = R.color(t);
                return i.alpha(e * i.alpha()).rgbaString();
              }

              function r(t, e) {
                return e && (R.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
              }

              function s(t) {
                return ("string" == typeof t || t instanceof String) && -1 < t.indexOf("\n") ? t.split("\n") : t;
              }

              function z(t) {
                var e = n.global,
                    i = R.valueOrDefault;
                return {
                  xPadding: t.xPadding,
                  yPadding: t.yPadding,
                  xAlign: t.xAlign,
                  yAlign: t.yAlign,
                  bodyFontColor: t.bodyFontColor,
                  _bodyFontFamily: i(t.bodyFontFamily, e.defaultFontFamily),
                  _bodyFontStyle: i(t.bodyFontStyle, e.defaultFontStyle),
                  _bodyAlign: t.bodyAlign,
                  bodyFontSize: i(t.bodyFontSize, e.defaultFontSize),
                  bodySpacing: t.bodySpacing,
                  titleFontColor: t.titleFontColor,
                  _titleFontFamily: i(t.titleFontFamily, e.defaultFontFamily),
                  _titleFontStyle: i(t.titleFontStyle, e.defaultFontStyle),
                  titleFontSize: i(t.titleFontSize, e.defaultFontSize),
                  _titleAlign: t.titleAlign,
                  titleSpacing: t.titleSpacing,
                  titleMarginBottom: t.titleMarginBottom,
                  footerFontColor: t.footerFontColor,
                  _footerFontFamily: i(t.footerFontFamily, e.defaultFontFamily),
                  _footerFontStyle: i(t.footerFontStyle, e.defaultFontStyle),
                  footerFontSize: i(t.footerFontSize, e.defaultFontSize),
                  _footerAlign: t.footerAlign,
                  footerSpacing: t.footerSpacing,
                  footerMarginTop: t.footerMarginTop,
                  caretSize: t.caretSize,
                  cornerRadius: t.cornerRadius,
                  backgroundColor: t.backgroundColor,
                  opacity: 0,
                  legendColorBackground: t.multiKeyBackground,
                  displayColors: t.displayColors,
                  borderColor: t.borderColor,
                  borderWidth: t.borderWidth
                };
              }

              function o(t) {
                return r([], s(t));
              }

              (e.exports = a.extend({
                initialize: function initialize() {
                  this._model = z(this._options), this._lastActive = [];
                },
                getTitle: function getTitle() {
                  var t = this._options.callbacks,
                      e = t.beforeTitle.apply(this, arguments),
                      i = t.title.apply(this, arguments),
                      n = t.afterTitle.apply(this, arguments),
                      a = [];
                  return a = r(a = r(a = r(a, s(e)), s(i)), s(n));
                },
                getBeforeBody: function getBeforeBody() {
                  return o(this._options.callbacks.beforeBody.apply(this, arguments));
                },
                getBody: function getBody(t, i) {
                  var n = this,
                      a = n._options.callbacks,
                      o = [];
                  return R.each(t, function (t) {
                    var e = {
                      before: [],
                      lines: [],
                      after: []
                    };
                    r(e.before, s(a.beforeLabel.call(n, t, i))), r(e.lines, a.label.call(n, t, i)), r(e.after, s(a.afterLabel.call(n, t, i))), o.push(e);
                  }), o;
                },
                getAfterBody: function getAfterBody() {
                  return o(this._options.callbacks.afterBody.apply(this, arguments));
                },
                getFooter: function getFooter() {
                  var t = this._options.callbacks,
                      e = t.beforeFooter.apply(this, arguments),
                      i = t.footer.apply(this, arguments),
                      n = t.afterFooter.apply(this, arguments),
                      a = [];
                  return a = r(a = r(a = r(a, s(e)), s(i)), s(n));
                },
                update: function update(t) {
                  var e,
                      i,
                      n,
                      a,
                      o,
                      r,
                      s,
                      l,
                      u,
                      d,
                      c,
                      h,
                      f,
                      g,
                      p,
                      m,
                      v,
                      b,
                      x,
                      y,
                      k = this,
                      M = k._options,
                      w = k._model,
                      C = k._model = z(M),
                      S = k._active,
                      _ = k._data,
                      D = {
                    xAlign: w.xAlign,
                    yAlign: w.yAlign
                  },
                      P = {
                    x: w.x,
                    y: w.y
                  },
                      I = {
                    width: w.width,
                    height: w.height
                  },
                      A = {
                    x: w.caretX,
                    y: w.caretY
                  };

                  if (S.length) {
                    C.opacity = 1;
                    var T = [],
                        F = [];
                    A = L[M.position].call(k, S, k._eventPosition);
                    var O = [];

                    for (e = 0, i = S.length; e < i; ++e) {
                      O.push((m = S[e], b = v = void 0, v = m._xScale, b = m._yScale || m._scale, x = m._index, y = m._datasetIndex, {
                        xLabel: v ? v.getLabelForIndex(x, y) : "",
                        yLabel: b ? b.getLabelForIndex(x, y) : "",
                        index: x,
                        datasetIndex: y,
                        x: m._model.x,
                        y: m._model.y
                      }));
                    }

                    M.filter && (O = O.filter(function (t) {
                      return M.filter(t, _);
                    })), M.itemSort && (O = O.sort(function (t, e) {
                      return M.itemSort(t, e, _);
                    })), R.each(O, function (t) {
                      T.push(M.callbacks.labelColor.call(k, t, k._chart)), F.push(M.callbacks.labelTextColor.call(k, t, k._chart));
                    }), C.title = k.getTitle(O, _), C.beforeBody = k.getBeforeBody(O, _), C.body = k.getBody(O, _), C.afterBody = k.getAfterBody(O, _), C.footer = k.getFooter(O, _), C.x = Math.round(A.x), C.y = Math.round(A.y), C.caretPadding = M.caretPadding, C.labelColors = T, C.labelTextColors = F, C.dataPoints = O, D = function (t, e) {
                      var i,
                          n,
                          a,
                          o,
                          r,
                          s = t._model,
                          l = t._chart,
                          u = t._chart.chartArea,
                          d = "center",
                          c = "center";
                      s.y < e.height ? c = "top" : s.y > l.height - e.height && (c = "bottom");
                      var h = (u.left + u.right) / 2,
                          f = (u.top + u.bottom) / 2;
                      n = "center" === c ? (i = function i(t) {
                        return t <= h;
                      }, function (t) {
                        return h < t;
                      }) : (i = function i(t) {
                        return t <= e.width / 2;
                      }, function (t) {
                        return t >= l.width - e.width / 2;
                      }), a = function a(t) {
                        return t + e.width + s.caretSize + s.caretPadding > l.width;
                      }, o = function o(t) {
                        return t - e.width - s.caretSize - s.caretPadding < 0;
                      }, r = function r(t) {
                        return t <= f ? "top" : "bottom";
                      }, i(s.x) ? (d = "left", a(s.x) && (d = "center", c = r(s.y))) : n(s.x) && (d = "right", o(s.x) && (d = "center", c = r(s.y)));
                      var g = t._options;
                      return {
                        xAlign: g.xAlign ? g.xAlign : d,
                        yAlign: g.yAlign ? g.yAlign : c
                      };
                    }(this, I = function (t, e) {
                      var i = t._chart.ctx,
                          n = 2 * e.yPadding,
                          a = 0,
                          o = e.body,
                          r = o.reduce(function (t, e) {
                        return t + e.before.length + e.lines.length + e.after.length;
                      }, 0);
                      r += e.beforeBody.length + e.afterBody.length;
                      var s = e.title.length,
                          l = e.footer.length,
                          u = e.titleFontSize,
                          d = e.bodyFontSize,
                          c = e.footerFontSize;
                      n += s * u, n += s ? (s - 1) * e.titleSpacing : 0, n += s ? e.titleMarginBottom : 0, n += r * d, n += r ? (r - 1) * e.bodySpacing : 0, n += l ? e.footerMarginTop : 0, n += l * c, n += l ? (l - 1) * e.footerSpacing : 0;

                      var h = 0,
                          f = function f(t) {
                        a = Math.max(a, i.measureText(t).width + h);
                      };

                      return i.font = R.fontString(u, e._titleFontStyle, e._titleFontFamily), R.each(e.title, f), i.font = R.fontString(d, e._bodyFontStyle, e._bodyFontFamily), R.each(e.beforeBody.concat(e.afterBody), f), h = e.displayColors ? d + 2 : 0, R.each(o, function (t) {
                        R.each(t.before, f), R.each(t.lines, f), R.each(t.after, f);
                      }), h = 0, i.font = R.fontString(c, e._footerFontStyle, e._footerFontFamily), R.each(e.footer, f), {
                        width: a += 2 * e.xPadding,
                        height: n
                      };
                    }(this, C)), n = C, a = I, o = D, r = k._chart, s = n.x, l = n.y, u = n.caretSize, d = n.caretPadding, c = n.cornerRadius, h = o.xAlign, f = o.yAlign, g = u + d, p = c + d, "right" === h ? s -= a.width : "center" === h && ((s -= a.width / 2) + a.width > r.width && (s = r.width - a.width), s < 0 && (s = 0)), "top" === f ? l += g : l -= "bottom" === f ? a.height + g : a.height / 2, "center" === f ? "left" === h ? s += g : "right" === h && (s -= g) : "left" === h ? s -= p : "right" === h && (s += p), P = {
                      x: s,
                      y: l
                    };
                  } else C.opacity = 0;

                  return C.xAlign = D.xAlign, C.yAlign = D.yAlign, C.x = P.x, C.y = P.y, C.width = I.width, C.height = I.height, C.caretX = A.x, C.caretY = A.y, k._model = C, t && M.custom && M.custom.call(k, C), k;
                },
                drawCaret: function drawCaret(t, e) {
                  var i = this._chart.ctx,
                      n = this._view,
                      a = this.getCaretPosition(t, e, n);
                  i.lineTo(a.x1, a.y1), i.lineTo(a.x2, a.y2), i.lineTo(a.x3, a.y3);
                },
                getCaretPosition: function getCaretPosition(t, e, i) {
                  var n,
                      a,
                      o,
                      r,
                      s,
                      l,
                      u = i.caretSize,
                      d = i.cornerRadius,
                      c = i.xAlign,
                      h = i.yAlign,
                      f = t.x,
                      g = t.y,
                      p = e.width,
                      m = e.height;
                  if ("center" === h) s = g + m / 2, l = "left" === c ? (a = (n = f) - u, o = n, r = s + u, s - u) : (a = (n = f + p) + u, o = n, r = s - u, s + u);else if (o = (n = "left" === c ? (a = f + d + u) - u : "right" === c ? (a = f + p - d - u) - u : (a = i.caretX) - u, a + u), "top" === h) s = (r = g) - u, l = r;else {
                    s = (r = g + m) + u, l = r;
                    var v = o;
                    o = n, n = v;
                  }
                  return {
                    x1: n,
                    x2: a,
                    x3: o,
                    y1: r,
                    y2: s,
                    y3: l
                  };
                },
                drawTitle: function drawTitle(t, e, i, n) {
                  var a = e.title;

                  if (a.length) {
                    i.textAlign = e._titleAlign, i.textBaseline = "top";
                    var o,
                        r,
                        s = e.titleFontSize,
                        l = e.titleSpacing;

                    for (i.fillStyle = h(e.titleFontColor, n), i.font = R.fontString(s, e._titleFontStyle, e._titleFontFamily), o = 0, r = a.length; o < r; ++o) {
                      i.fillText(a[o], t.x, t.y), t.y += s + l, o + 1 === a.length && (t.y += e.titleMarginBottom - l);
                    }
                  }
                },
                drawBody: function drawBody(n, a, o, r) {
                  var s = a.bodyFontSize,
                      e = a.bodySpacing,
                      t = a.body;
                  o.textAlign = a._bodyAlign, o.textBaseline = "top", o.font = R.fontString(s, a._bodyFontStyle, a._bodyFontFamily);

                  var i = 0,
                      l = function l(t) {
                    o.fillText(t, n.x + i, n.y), n.y += s + e;
                  };

                  o.fillStyle = h(a.bodyFontColor, r), R.each(a.beforeBody, l);
                  var u = a.displayColors;
                  i = u ? s + 2 : 0, R.each(t, function (t, e) {
                    var i = h(a.labelTextColors[e], r);
                    o.fillStyle = i, R.each(t.before, l), R.each(t.lines, function (t) {
                      u && (o.fillStyle = h(a.legendColorBackground, r), o.fillRect(n.x, n.y, s, s), o.lineWidth = 1, o.strokeStyle = h(a.labelColors[e].borderColor, r), o.strokeRect(n.x, n.y, s, s), o.fillStyle = h(a.labelColors[e].backgroundColor, r), o.fillRect(n.x + 1, n.y + 1, s - 2, s - 2), o.fillStyle = i), l(t);
                    }), R.each(t.after, l);
                  }), i = 0, R.each(a.afterBody, l), n.y -= e;
                },
                drawFooter: function drawFooter(e, i, n, t) {
                  var a = i.footer;
                  a.length && (e.y += i.footerMarginTop, n.textAlign = i._footerAlign, n.textBaseline = "top", n.fillStyle = h(i.footerFontColor, t), n.font = R.fontString(i.footerFontSize, i._footerFontStyle, i._footerFontFamily), R.each(a, function (t) {
                    n.fillText(t, e.x, e.y), e.y += i.footerFontSize + i.footerSpacing;
                  }));
                },
                drawBackground: function drawBackground(t, e, i, n, a) {
                  i.fillStyle = h(e.backgroundColor, a), i.strokeStyle = h(e.borderColor, a), i.lineWidth = e.borderWidth;
                  var o = e.xAlign,
                      r = e.yAlign,
                      s = t.x,
                      l = t.y,
                      u = n.width,
                      d = n.height,
                      c = e.cornerRadius;
                  i.beginPath(), i.moveTo(s + c, l), "top" === r && this.drawCaret(t, n), i.lineTo(s + u - c, l), i.quadraticCurveTo(s + u, l, s + u, l + c), "center" === r && "right" === o && this.drawCaret(t, n), i.lineTo(s + u, l + d - c), i.quadraticCurveTo(s + u, l + d, s + u - c, l + d), "bottom" === r && this.drawCaret(t, n), i.lineTo(s + c, l + d), i.quadraticCurveTo(s, l + d, s, l + d - c), "center" === r && "left" === o && this.drawCaret(t, n), i.lineTo(s, l + c), i.quadraticCurveTo(s, l, s + c, l), i.closePath(), i.fill(), 0 < e.borderWidth && i.stroke();
                },
                draw: function draw() {
                  var t = this._chart.ctx,
                      e = this._view;

                  if (0 !== e.opacity) {
                    var i = {
                      width: e.width,
                      height: e.height
                    },
                        n = {
                      x: e.x,
                      y: e.y
                    },
                        a = Math.abs(e.opacity < .001) ? 0 : e.opacity,
                        o = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length;
                    this._options.enabled && o && (this.drawBackground(n, e, t, i, a), n.x += e.xPadding, n.y += e.yPadding, this.drawTitle(n, e, t, a), this.drawBody(n, e, t, a), this.drawFooter(n, e, t, a));
                  }
                },
                handleEvent: function handleEvent(t) {
                  var e,
                      i = this,
                      n = i._options;
                  return i._lastActive = i._lastActive || [], "mouseout" === t.type ? i._active = [] : i._active = i._chart.getElementsAtEventForMode(t, n.mode, n), (e = !R.arrayEquals(i._active, i._lastActive)) && (i._lastActive = i._active, (n.enabled || n.custom) && (i._eventPosition = {
                    x: t.x,
                    y: t.y
                  }, i.update(!0), i.pivot())), e;
                }
              })).positioners = L;
            }, {
              26: 26,
              27: 27,
              46: 46
            }],
            37: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(27),
                  d = t(46);
              n._set("global", {
                elements: {
                  arc: {
                    backgroundColor: n.global.defaultColor,
                    borderColor: "#fff",
                    borderWidth: 2
                  }
                }
              }), e.exports = a.extend({
                inLabelRange: function inLabelRange(t) {
                  var e = this._view;
                  return !!e && Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2);
                },
                inRange: function inRange(t, e) {
                  var i = this._view;

                  if (i) {
                    for (var n = d.getAngleFromPoint(i, {
                      x: t,
                      y: e
                    }), a = n.angle, o = n.distance, r = i.startAngle, s = i.endAngle; s < r;) {
                      s += 2 * Math.PI;
                    }

                    for (; s < a;) {
                      a -= 2 * Math.PI;
                    }

                    for (; a < r;) {
                      a += 2 * Math.PI;
                    }

                    var l = r <= a && a <= s,
                        u = o >= i.innerRadius && o <= i.outerRadius;
                    return l && u;
                  }

                  return !1;
                },
                getCenterPoint: function getCenterPoint() {
                  var t = this._view,
                      e = (t.startAngle + t.endAngle) / 2,
                      i = (t.innerRadius + t.outerRadius) / 2;
                  return {
                    x: t.x + Math.cos(e) * i,
                    y: t.y + Math.sin(e) * i
                  };
                },
                getArea: function getArea() {
                  var t = this._view;
                  return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2));
                },
                tooltipPosition: function tooltipPosition() {
                  var t = this._view,
                      e = t.startAngle + (t.endAngle - t.startAngle) / 2,
                      i = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius;
                  return {
                    x: t.x + Math.cos(e) * i,
                    y: t.y + Math.sin(e) * i
                  };
                },
                draw: function draw() {
                  var t = this._chart.ctx,
                      e = this._view,
                      i = e.startAngle,
                      n = e.endAngle;
                  t.beginPath(), t.arc(e.x, e.y, e.outerRadius, i, n), t.arc(e.x, e.y, e.innerRadius, n, i, !0), t.closePath(), t.strokeStyle = e.borderColor, t.lineWidth = e.borderWidth, t.fillStyle = e.backgroundColor, t.fill(), t.lineJoin = "bevel", e.borderWidth && t.stroke();
                }
              });
            }, {
              26: 26,
              27: 27,
              46: 46
            }],
            38: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(27),
                  d = t(46),
                  c = n.global;
              n._set("global", {
                elements: {
                  line: {
                    tension: .4,
                    backgroundColor: c.defaultColor,
                    borderWidth: 3,
                    borderColor: c.defaultColor,
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0,
                    borderJoinStyle: "miter",
                    capBezierPoints: !0,
                    fill: !0
                  }
                }
              }), e.exports = a.extend({
                draw: function draw() {
                  var t,
                      e,
                      i,
                      n,
                      a = this._view,
                      o = this._chart.ctx,
                      r = a.spanGaps,
                      s = this._children.slice(),
                      l = c.elements.line,
                      u = -1;

                  for (this._loop && s.length && s.push(s[0]), o.save(), o.lineCap = a.borderCapStyle || l.borderCapStyle, o.setLineDash && o.setLineDash(a.borderDash || l.borderDash), o.lineDashOffset = a.borderDashOffset || l.borderDashOffset, o.lineJoin = a.borderJoinStyle || l.borderJoinStyle, o.lineWidth = a.borderWidth || l.borderWidth, o.strokeStyle = a.borderColor || c.defaultColor, o.beginPath(), u = -1, t = 0; t < s.length; ++t) {
                    e = s[t], i = d.previousItem(s, t), n = e._view, 0 === t ? n.skip || (o.moveTo(n.x, n.y), u = t) : (i = -1 === u ? i : s[u], n.skip || (u !== t - 1 && !r || -1 === u ? o.moveTo(n.x, n.y) : d.canvas.lineTo(o, i._view, e._view), u = t));
                  }

                  o.stroke(), o.restore();
                }
              });
            }, {
              26: 26,
              27: 27,
              46: 46
            }],
            39: [function (t, e, i) {
              "use strict";

              var u = t(26),
                  n = t(27),
                  d = t(46),
                  c = u.global.defaultColor;

              function a(t) {
                var e = this._view;
                return !!e && Math.abs(t - e.x) < e.radius + e.hitRadius;
              }

              u._set("global", {
                elements: {
                  point: {
                    radius: 3,
                    pointStyle: "circle",
                    backgroundColor: c,
                    borderColor: c,
                    borderWidth: 1,
                    hitRadius: 1,
                    hoverRadius: 4,
                    hoverBorderWidth: 1
                  }
                }
              }), e.exports = n.extend({
                inRange: function inRange(t, e) {
                  var i = this._view;
                  return !!i && Math.pow(t - i.x, 2) + Math.pow(e - i.y, 2) < Math.pow(i.hitRadius + i.radius, 2);
                },
                inLabelRange: a,
                inXRange: a,
                inYRange: function inYRange(t) {
                  var e = this._view;
                  return !!e && Math.abs(t - e.y) < e.radius + e.hitRadius;
                },
                getCenterPoint: function getCenterPoint() {
                  var t = this._view;
                  return {
                    x: t.x,
                    y: t.y
                  };
                },
                getArea: function getArea() {
                  return Math.PI * Math.pow(this._view.radius, 2);
                },
                tooltipPosition: function tooltipPosition() {
                  var t = this._view;
                  return {
                    x: t.x,
                    y: t.y,
                    padding: t.radius + t.borderWidth
                  };
                },
                draw: function draw(t) {
                  var e = this._view,
                      i = this._model,
                      n = this._chart.ctx,
                      a = e.pointStyle,
                      o = e.rotation,
                      r = e.radius,
                      s = e.x,
                      l = e.y;
                  e.skip || (void 0 === t || i.x >= t.left && 1.01 * t.right >= i.x && i.y >= t.top && 1.01 * t.bottom >= i.y) && (n.strokeStyle = e.borderColor || c, n.lineWidth = d.valueOrDefault(e.borderWidth, u.global.elements.point.borderWidth), n.fillStyle = e.backgroundColor || c, d.canvas.drawPoint(n, a, r, s, l, o));
                }
              });
            }, {
              26: 26,
              27: 27,
              46: 46
            }],
            40: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  a = t(27);

              function l(t) {
                return void 0 !== t._view.width;
              }

              function o(t) {
                var e,
                    i,
                    n,
                    a,
                    o = t._view;

                if (l(t)) {
                  var r = o.width / 2;
                  e = o.x - r, i = o.x + r, n = Math.min(o.y, o.base), a = Math.max(o.y, o.base);
                } else {
                  var s = o.height / 2;
                  e = Math.min(o.x, o.base), i = Math.max(o.x, o.base), n = o.y - s, a = o.y + s;
                }

                return {
                  left: e,
                  top: n,
                  right: i,
                  bottom: a
                };
              }

              n._set("global", {
                elements: {
                  rectangle: {
                    backgroundColor: n.global.defaultColor,
                    borderColor: n.global.defaultColor,
                    borderSkipped: "bottom",
                    borderWidth: 0
                  }
                }
              }), e.exports = a.extend({
                draw: function draw() {
                  var t,
                      e,
                      i,
                      n,
                      a,
                      o,
                      r,
                      s = this._chart.ctx,
                      l = this._view,
                      u = l.borderWidth;

                  if (r = l.horizontal ? (t = l.base, e = l.x, i = l.y - l.height / 2, n = l.y + l.height / 2, a = t < e ? 1 : -1, o = 1, l.borderSkipped || "left") : (t = l.x - l.width / 2, e = l.x + l.width / 2, a = 1, o = (i = l.y) < (n = l.base) ? 1 : -1, l.borderSkipped || "bottom"), u) {
                    var d = Math.min(Math.abs(t - e), Math.abs(i - n)),
                        c = (u = d < u ? d : u) / 2,
                        h = t + ("left" !== r ? c * a : 0),
                        f = e + ("right" !== r ? -c * a : 0),
                        g = i + ("top" !== r ? c * o : 0),
                        p = n + ("bottom" !== r ? -c * o : 0);
                    h !== f && (i = g, n = p), g !== p && (t = h, e = f);
                  }

                  s.beginPath(), s.fillStyle = l.backgroundColor, s.strokeStyle = l.borderColor, s.lineWidth = u;
                  var m = [[t, n], [t, i], [e, i], [e, n]],
                      v = ["bottom", "left", "top", "right"].indexOf(r, 0);

                  function b(t) {
                    return m[(v + t) % 4];
                  }

                  -1 === v && (v = 0);
                  var x = b(0);
                  s.moveTo(x[0], x[1]);

                  for (var y = 1; y < 4; y++) {
                    x = b(y), s.lineTo(x[0], x[1]);
                  }

                  s.fill(), u && s.stroke();
                },
                height: function height() {
                  var t = this._view;
                  return t.base - t.y;
                },
                inRange: function inRange(t, e) {
                  var i = !1;

                  if (this._view) {
                    var n = o(this);
                    i = t >= n.left && t <= n.right && e >= n.top && e <= n.bottom;
                  }

                  return i;
                },
                inLabelRange: function inLabelRange(t, e) {
                  if (!this._view) return !1;
                  var i = o(this);
                  return l(this) ? t >= i.left && t <= i.right : e >= i.top && e <= i.bottom;
                },
                inXRange: function inXRange(t) {
                  var e = o(this);
                  return t >= e.left && t <= e.right;
                },
                inYRange: function inYRange(t) {
                  var e = o(this);
                  return t >= e.top && t <= e.bottom;
                },
                getCenterPoint: function getCenterPoint() {
                  var t,
                      e,
                      i = this._view;
                  return e = l(this) ? (t = i.x, (i.y + i.base) / 2) : (t = (i.x + i.base) / 2, i.y), {
                    x: t,
                    y: e
                  };
                },
                getArea: function getArea() {
                  var t = this._view;
                  return t.width * Math.abs(t.y - t.base);
                },
                tooltipPosition: function tooltipPosition() {
                  var t = this._view;
                  return {
                    x: t.x,
                    y: t.y
                  };
                }
              });
            }, {
              26: 26,
              27: 27
            }],
            41: [function (t, e, i) {
              "use strict";

              e.exports = {}, e.exports.Arc = t(37), e.exports.Line = t(38), e.exports.Point = t(39), e.exports.Rectangle = t(40);
            }, {
              37: 37,
              38: 38,
              39: 39,
              40: 40
            }],
            42: [function (t, e, i) {
              "use strict";

              var n = t(43);
              i = e.exports = {
                clear: function clear(t) {
                  t.ctx.clearRect(0, 0, t.width, t.height);
                },
                roundedRect: function roundedRect(t, e, i, n, a, o) {
                  if (o) {
                    var r = Math.min(o, a / 2 - 1e-7, n / 2 - 1e-7);
                    t.moveTo(e + r, i), t.lineTo(e + n - r, i), t.arcTo(e + n, i, e + n, i + r, r), t.lineTo(e + n, i + a - r), t.arcTo(e + n, i + a, e + n - r, i + a, r), t.lineTo(e + r, i + a), t.arcTo(e, i + a, e, i + a - r, r), t.lineTo(e, i + r), t.arcTo(e, i, e + r, i, r), t.closePath(), t.moveTo(e, i);
                  } else t.rect(e, i, n, a);
                },
                drawPoint: function drawPoint(t, e, i, n, a, o) {
                  var r, s, l, u, d, c;

                  if (o = o || 0, !e || "object" != _typeof2(e) || "[object HTMLImageElement]" !== (r = e.toString()) && "[object HTMLCanvasElement]" !== r) {
                    if (!(isNaN(i) || i <= 0)) {
                      switch (t.save(), t.translate(n, a), t.rotate(o * Math.PI / 180), t.beginPath(), e) {
                        default:
                          t.arc(0, 0, i, 0, 2 * Math.PI), t.closePath();
                          break;

                        case "triangle":
                          d = (s = 3 * i / Math.sqrt(3)) * Math.sqrt(3) / 2, t.moveTo(-s / 2, d / 3), t.lineTo(s / 2, d / 3), t.lineTo(0, -2 * d / 3), t.closePath();
                          break;

                        case "rect":
                          c = 1 / Math.SQRT2 * i, t.rect(-c, -c, 2 * c, 2 * c);
                          break;

                        case "rectRounded":
                          var h = i / Math.SQRT2,
                              f = -h,
                              g = -h,
                              p = Math.SQRT2 * i;
                          this.roundedRect(t, f, g, p, p, .425 * i);
                          break;

                        case "rectRot":
                          c = 1 / Math.SQRT2 * i, t.moveTo(-c, 0), t.lineTo(0, c), t.lineTo(c, 0), t.lineTo(0, -c), t.closePath();
                          break;

                        case "cross":
                          t.moveTo(0, i), t.lineTo(0, -i), t.moveTo(-i, 0), t.lineTo(i, 0);
                          break;

                        case "crossRot":
                          l = Math.cos(Math.PI / 4) * i, u = Math.sin(Math.PI / 4) * i, t.moveTo(-l, -u), t.lineTo(l, u), t.moveTo(-l, u), t.lineTo(l, -u);
                          break;

                        case "star":
                          t.moveTo(0, i), t.lineTo(0, -i), t.moveTo(-i, 0), t.lineTo(i, 0), l = Math.cos(Math.PI / 4) * i, u = Math.sin(Math.PI / 4) * i, t.moveTo(-l, -u), t.lineTo(l, u), t.moveTo(-l, u), t.lineTo(l, -u);
                          break;

                        case "line":
                          t.moveTo(-i, 0), t.lineTo(i, 0);
                          break;

                        case "dash":
                          t.moveTo(0, 0), t.lineTo(i, 0);
                      }

                      t.fill(), t.stroke(), t.restore();
                    }
                  } else t.drawImage(e, n - e.width / 2, a - e.height / 2, e.width, e.height);
                },
                clipArea: function clipArea(t, e) {
                  t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip();
                },
                unclipArea: function unclipArea(t) {
                  t.restore();
                },
                lineTo: function lineTo(t, e, i, n) {
                  if (i.steppedLine) return "after" === i.steppedLine && !n || "after" !== i.steppedLine && n ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y), void t.lineTo(i.x, i.y);
                  i.tension ? t.bezierCurveTo(n ? e.controlPointPreviousX : e.controlPointNextX, n ? e.controlPointPreviousY : e.controlPointNextY, n ? i.controlPointNextX : i.controlPointPreviousX, n ? i.controlPointNextY : i.controlPointPreviousY, i.x, i.y) : t.lineTo(i.x, i.y);
                }
              };
              n.clear = i.clear, n.drawRoundedRectangle = function (t) {
                t.beginPath(), i.roundedRect.apply(i, arguments);
              };
            }, {
              43: 43
            }],
            43: [function (t, e, i) {
              "use strict";

              var n,
                  d = {
                noop: function noop() {},
                uid: (n = 0, function () {
                  return n++;
                }),
                isNullOrUndef: function isNullOrUndef(t) {
                  return null == t;
                },
                isArray: Array.isArray ? Array.isArray : function (t) {
                  return "[object Array]" === Object.prototype.toString.call(t);
                },
                isObject: function isObject(t) {
                  return null !== t && "[object Object]" === Object.prototype.toString.call(t);
                },
                valueOrDefault: function valueOrDefault(t, e) {
                  return void 0 === t ? e : t;
                },
                valueAtIndexOrDefault: function valueAtIndexOrDefault(t, e, i) {
                  return d.valueOrDefault(d.isArray(t) ? t[e] : t, i);
                },
                callback: function callback(t, e, i) {
                  if (t && "function" == typeof t.call) return t.apply(i, e);
                },
                each: function each(t, e, i, n) {
                  var a, o, r;
                  if (d.isArray(t)) {
                    if (o = t.length, n) for (a = o - 1; 0 <= a; a--) {
                      e.call(i, t[a], a);
                    } else for (a = 0; a < o; a++) {
                      e.call(i, t[a], a);
                    }
                  } else if (d.isObject(t)) for (o = (r = Object.keys(t)).length, a = 0; a < o; a++) {
                    e.call(i, t[r[a]], r[a]);
                  }
                },
                arrayEquals: function arrayEquals(t, e) {
                  var i, n, a, o;
                  if (!t || !e || t.length !== e.length) return !1;

                  for (i = 0, n = t.length; i < n; ++i) {
                    if (a = t[i], o = e[i], a instanceof Array && o instanceof Array) {
                      if (!d.arrayEquals(a, o)) return !1;
                    } else if (a !== o) return !1;
                  }

                  return !0;
                },
                clone: function clone(t) {
                  if (d.isArray(t)) return t.map(d.clone);

                  if (d.isObject(t)) {
                    for (var e = {}, i = Object.keys(t), n = i.length, a = 0; a < n; ++a) {
                      e[i[a]] = d.clone(t[i[a]]);
                    }

                    return e;
                  }

                  return t;
                },
                _merger: function _merger(t, e, i, n) {
                  var a = e[t],
                      o = i[t];
                  d.isObject(a) && d.isObject(o) ? d.merge(a, o, n) : e[t] = d.clone(o);
                },
                _mergerIf: function _mergerIf(t, e, i) {
                  var n = e[t],
                      a = i[t];
                  d.isObject(n) && d.isObject(a) ? d.mergeIf(n, a) : e.hasOwnProperty(t) || (e[t] = d.clone(a));
                },
                merge: function merge(t, e, i) {
                  var n,
                      a,
                      o,
                      r,
                      s,
                      l = d.isArray(e) ? e : [e],
                      u = l.length;
                  if (!d.isObject(t)) return t;

                  for (n = (i = i || {}).merger || d._merger, a = 0; a < u; ++a) {
                    if (e = l[a], d.isObject(e)) for (s = 0, r = (o = Object.keys(e)).length; s < r; ++s) {
                      n(o[s], t, e, i);
                    }
                  }

                  return t;
                },
                mergeIf: function mergeIf(t, e) {
                  return d.merge(t, e, {
                    merger: d._mergerIf
                  });
                },
                extend: function extend(i) {
                  for (var t = function t(_t2, e) {
                    i[e] = _t2;
                  }, e = 1, n = arguments.length; e < n; ++e) {
                    d.each(arguments[e], t);
                  }

                  return i;
                },
                inherits: function inherits(t) {
                  var e = this,
                      i = t && t.hasOwnProperty("constructor") ? t.constructor : function () {
                    return e.apply(this, arguments);
                  },
                      n = function n() {
                    this.constructor = i;
                  };

                  return n.prototype = e.prototype, i.prototype = new n(), i.extend = d.inherits, t && d.extend(i.prototype, t), i.__super__ = e.prototype, i;
                }
              };
              (e.exports = d).callCallback = d.callback, d.indexOf = function (t, e, i) {
                return Array.prototype.indexOf.call(t, e, i);
              }, d.getValueOrDefault = d.valueOrDefault, d.getValueAtIndexOrDefault = d.valueAtIndexOrDefault;
            }, {}],
            44: [function (t, e, i) {
              "use strict";

              var n = t(43),
                  a = {
                linear: function linear(t) {
                  return t;
                },
                easeInQuad: function easeInQuad(t) {
                  return t * t;
                },
                easeOutQuad: function easeOutQuad(t) {
                  return -t * (t - 2);
                },
                easeInOutQuad: function easeInOutQuad(t) {
                  return (t /= .5) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
                },
                easeInCubic: function easeInCubic(t) {
                  return t * t * t;
                },
                easeOutCubic: function easeOutCubic(t) {
                  return (t -= 1) * t * t + 1;
                },
                easeInOutCubic: function easeInOutCubic(t) {
                  return (t /= .5) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
                },
                easeInQuart: function easeInQuart(t) {
                  return t * t * t * t;
                },
                easeOutQuart: function easeOutQuart(t) {
                  return -((t -= 1) * t * t * t - 1);
                },
                easeInOutQuart: function easeInOutQuart(t) {
                  return (t /= .5) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
                },
                easeInQuint: function easeInQuint(t) {
                  return t * t * t * t * t;
                },
                easeOutQuint: function easeOutQuint(t) {
                  return (t -= 1) * t * t * t * t + 1;
                },
                easeInOutQuint: function easeInOutQuint(t) {
                  return (t /= .5) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
                },
                easeInSine: function easeInSine(t) {
                  return 1 - Math.cos(t * (Math.PI / 2));
                },
                easeOutSine: function easeOutSine(t) {
                  return Math.sin(t * (Math.PI / 2));
                },
                easeInOutSine: function easeInOutSine(t) {
                  return -.5 * (Math.cos(Math.PI * t) - 1);
                },
                easeInExpo: function easeInExpo(t) {
                  return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
                },
                easeOutExpo: function easeOutExpo(t) {
                  return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
                },
                easeInOutExpo: function easeInOutExpo(t) {
                  return 0 === t ? 0 : 1 === t ? 1 : (t /= .5) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * --t));
                },
                easeInCirc: function easeInCirc(t) {
                  return 1 <= t ? t : -(Math.sqrt(1 - t * t) - 1);
                },
                easeOutCirc: function easeOutCirc(t) {
                  return Math.sqrt(1 - (t -= 1) * t);
                },
                easeInOutCirc: function easeInOutCirc(t) {
                  return (t /= .5) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                },
                easeInElastic: function easeInElastic(t) {
                  var e = 1.70158,
                      i = 0,
                      n = 1;
                  return 0 === t ? 0 : 1 === t ? 1 : (i || (i = .3), e = n < 1 ? (n = 1, i / 4) : i / (2 * Math.PI) * Math.asin(1 / n), -n * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / i));
                },
                easeOutElastic: function easeOutElastic(t) {
                  var e = 1.70158,
                      i = 0,
                      n = 1;
                  return 0 === t ? 0 : 1 === t ? 1 : (i || (i = .3), e = n < 1 ? (n = 1, i / 4) : i / (2 * Math.PI) * Math.asin(1 / n), n * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / i) + 1);
                },
                easeInOutElastic: function easeInOutElastic(t) {
                  var e = 1.70158,
                      i = 0,
                      n = 1;
                  return 0 === t ? 0 : 2 == (t /= .5) ? 1 : (i || (i = .45), e = n < 1 ? (n = 1, i / 4) : i / (2 * Math.PI) * Math.asin(1 / n), t < 1 ? n * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / i) * -.5 : n * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / i) * .5 + 1);
                },
                easeInBack: function easeInBack(t) {
                  return t * t * (2.70158 * t - 1.70158);
                },
                easeOutBack: function easeOutBack(t) {
                  return (t -= 1) * t * (2.70158 * t + 1.70158) + 1;
                },
                easeInOutBack: function easeInOutBack(t) {
                  var e = 1.70158;
                  return (t /= .5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);
                },
                easeInBounce: function easeInBounce(t) {
                  return 1 - a.easeOutBounce(1 - t);
                },
                easeOutBounce: function easeOutBounce(t) {
                  return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
                },
                easeInOutBounce: function easeInOutBounce(t) {
                  return t < .5 ? .5 * a.easeInBounce(2 * t) : .5 * a.easeOutBounce(2 * t - 1) + .5;
                }
              };
              e.exports = {
                effects: a
              }, n.easingEffects = a;
            }, {
              43: 43
            }],
            45: [function (t, e, i) {
              "use strict";

              var r = t(43);
              e.exports = {
                toLineHeight: function toLineHeight(t, e) {
                  var i = ("" + t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
                  if (!i || "normal" === i[1]) return 1.2 * e;

                  switch (t = +i[2], i[3]) {
                    case "px":
                      return t;

                    case "%":
                      t /= 100;
                  }

                  return e * t;
                },
                toPadding: function toPadding(t) {
                  var e, i, n, a;
                  return r.isObject(t) ? (e = +t.top || 0, i = +t.right || 0, n = +t.bottom || 0, a = +t.left || 0) : e = i = n = a = +t || 0, {
                    top: e,
                    right: i,
                    bottom: n,
                    left: a,
                    height: e + n,
                    width: a + i
                  };
                },
                resolve: function resolve(t, e, i) {
                  var n, a, o;

                  for (n = 0, a = t.length; n < a; ++n) {
                    if (void 0 !== (o = t[n]) && (void 0 !== e && "function" == typeof o && (o = o(e)), void 0 !== i && r.isArray(o) && (o = o[i]), void 0 !== o)) return o;
                  }
                }
              };
            }, {
              43: 43
            }],
            46: [function (t, e, i) {
              "use strict";

              e.exports = t(43), e.exports.easing = t(44), e.exports.canvas = t(42), e.exports.options = t(45);
            }, {
              42: 42,
              43: 43,
              44: 44,
              45: 45
            }],
            47: [function (t, e, i) {
              e.exports = {
                acquireContext: function acquireContext(t) {
                  return t && t.canvas && (t = t.canvas), t && t.getContext("2d") || null;
                }
              };
            }, {}],
            48: [function (t, e, i) {
              "use strict";

              var f = t(46),
                  g = "$chartjs",
                  p = "chartjs-",
                  m = p + "render-monitor",
                  v = p + "render-animation",
                  b = ["animationstart", "webkitAnimationStart"],
                  s = {
                touchstart: "mousedown",
                touchmove: "mousemove",
                touchend: "mouseup",
                pointerenter: "mouseenter",
                pointerdown: "mousedown",
                pointermove: "mousemove",
                pointerup: "mouseup",
                pointerleave: "mouseout",
                pointerout: "mouseout"
              };

              function l(t, e) {
                var i = f.getStyle(t, e),
                    n = i && i.match(/^(\d+)(\.\d+)?px$/);
                return n ? Number(n[1]) : void 0;
              }

              var n = !!function () {
                var t = !1;

                try {
                  var e = Object.defineProperty({}, "passive", {
                    get: function get() {
                      t = !0;
                    }
                  });
                  window.addEventListener("e", null, e);
                } catch (t) {}

                return t;
              }() && {
                passive: !0
              };

              function x(t, e, i) {
                t.addEventListener(e, i, n);
              }

              function r(t, e, i) {
                t.removeEventListener(e, i, n);
              }

              function y(t, e, i, n, a) {
                return {
                  type: t,
                  chart: e,
                  "native": a || null,
                  x: void 0 !== i ? i : null,
                  y: void 0 !== n ? n : null
                };
              }

              function a(e, t, i) {
                var n,
                    a,
                    o,
                    r,
                    s,
                    l,
                    u,
                    d,
                    c = e[g] || (e[g] = {}),
                    h = c.resizer = function (t) {
                  var e = document.createElement("div"),
                      i = p + "size-monitor",
                      n = "position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";
                  e.style.cssText = n, e.className = i, e.innerHTML = '<div class="' + i + '-expand" style="' + n + '"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="' + i + '-shrink" style="' + n + '"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';
                  var a = e.childNodes[0],
                      o = e.childNodes[1];

                  e._reset = function () {
                    a.scrollLeft = 1e6, a.scrollTop = 1e6, o.scrollLeft = 1e6, o.scrollTop = 1e6;
                  };

                  var r = function r() {
                    e._reset(), t();
                  };

                  return x(a, "scroll", r.bind(a, "expand")), x(o, "scroll", r.bind(o, "shrink")), e;
                }((o = !(n = function n() {
                  if (c.resizer) return t(y("resize", i));
                }), r = [], function () {
                  r = Array.prototype.slice.call(arguments), a = a || this, o || (o = !0, f.requestAnimFrame.call(window, function () {
                    o = !1, n.apply(a, r);
                  }));
                }));

                l = function l() {
                  if (c.resizer) {
                    var t = e.parentNode;
                    t && t !== h.parentNode && t.insertBefore(h, t.firstChild), h._reset();
                  }
                }, u = (s = e)[g] || (s[g] = {}), d = u.renderProxy = function (t) {
                  t.animationName === v && l();
                }, f.each(b, function (t) {
                  x(s, t, d);
                }), u.reflow = !!s.offsetParent, s.classList.add(m);
              }

              function o(t) {
                var e,
                    i,
                    n,
                    a = t[g] || {},
                    o = a.resizer;
                delete a.resizer, i = (e = t)[g] || {}, (n = i.renderProxy) && (f.each(b, function (t) {
                  r(e, t, n);
                }), delete i.renderProxy), e.classList.remove(m), o && o.parentNode && o.parentNode.removeChild(o);
              }

              e.exports = {
                _enabled: "undefined" != typeof window && "undefined" != typeof document,
                initialize: function initialize() {
                  var t,
                      e,
                      i,
                      n = "from{opacity:0.99}to{opacity:1}";
                  e = "@-webkit-keyframes " + v + "{" + n + "}@keyframes " + v + "{" + n + "}." + m + "{-webkit-animation:" + v + " 0.001s;animation:" + v + " 0.001s;}", i = (t = this)._style || document.createElement("style"), t._style || (e = "/* Chart.js */\n" + e, (t._style = i).setAttribute("type", "text/css"), document.getElementsByTagName("head")[0].appendChild(i)), i.appendChild(document.createTextNode(e));
                },
                acquireContext: function acquireContext(t, e) {
                  "string" == typeof t ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas);
                  var i = t && t.getContext && t.getContext("2d");
                  return i && i.canvas === t ? (function (t, e) {
                    var i = t.style,
                        n = t.getAttribute("height"),
                        a = t.getAttribute("width");

                    if (t[g] = {
                      initial: {
                        height: n,
                        width: a,
                        style: {
                          display: i.display,
                          height: i.height,
                          width: i.width
                        }
                      }
                    }, i.display = i.display || "block", null === a || "" === a) {
                      var o = l(t, "width");
                      void 0 !== o && (t.width = o);
                    }

                    if (null === n || "" === n) if ("" === t.style.height) t.height = t.width / (e.options.aspectRatio || 2);else {
                      var r = l(t, "height");
                      void 0 !== o && (t.height = r);
                    }
                  }(t, e), i) : null;
                },
                releaseContext: function releaseContext(t) {
                  var i = t.canvas;

                  if (i[g]) {
                    var n = i[g].initial;
                    ["height", "width"].forEach(function (t) {
                      var e = n[t];
                      f.isNullOrUndef(e) ? i.removeAttribute(t) : i.setAttribute(t, e);
                    }), f.each(n.style || {}, function (t, e) {
                      i.style[e] = t;
                    }), i.width = i.width, delete i[g];
                  }
                },
                addEventListener: function addEventListener(o, t, r) {
                  var e = o.canvas;

                  if ("resize" !== t) {
                    var i = r[g] || (r[g] = {});
                    x(e, t, (i.proxies || (i.proxies = {}))[o.id + "_" + t] = function (t) {
                      var e, i, n, a;
                      r((i = o, n = s[(e = t).type] || e.type, a = f.getRelativePosition(e, i), y(n, i, a.x, a.y, e)));
                    });
                  } else a(e, r, o);
                },
                removeEventListener: function removeEventListener(t, e, i) {
                  var n = t.canvas;

                  if ("resize" !== e) {
                    var a = ((i[g] || {}).proxies || {})[t.id + "_" + e];
                    a && r(n, e, a);
                  } else o(n);
                }
              }, f.addEvent = x, f.removeEvent = r;
            }, {
              46: 46
            }],
            49: [function (t, e, i) {
              "use strict";

              var n = t(46),
                  a = t(47),
                  o = t(48),
                  r = o._enabled ? o : a;
              e.exports = n.extend({
                initialize: function initialize() {},
                acquireContext: function acquireContext() {},
                releaseContext: function releaseContext() {},
                addEventListener: function addEventListener() {},
                removeEventListener: function removeEventListener() {}
              }, r);
            }, {
              46: 46,
              47: 47,
              48: 48
            }],
            50: [function (t, e, i) {
              "use strict";

              e.exports = {}, e.exports.filler = t(51), e.exports.legend = t(52), e.exports.title = t(53);
            }, {
              51: 51,
              52: 52,
              53: 53
            }],
            51: [function (t, e, i) {
              "use strict";

              var u = t(26),
                  h = t(41),
                  d = t(46);

              u._set("global", {
                plugins: {
                  filler: {
                    propagate: !0
                  }
                }
              });

              var f = {
                dataset: function dataset(t) {
                  var e = t.fill,
                      i = t.chart,
                      n = i.getDatasetMeta(e),
                      a = n && i.isDatasetVisible(e) && n.dataset._children || [],
                      o = a.length || 0;
                  return o ? function (t, e) {
                    return e < o && a[e]._view || null;
                  } : null;
                },
                boundary: function boundary(t) {
                  var e = t.boundary,
                      i = e ? e.x : null,
                      n = e ? e.y : null;
                  return function (t) {
                    return {
                      x: null === i ? t.x : i,
                      y: null === n ? t.y : n
                    };
                  };
                }
              };

              function g(t, e, i) {
                var n,
                    a = t._model || {},
                    o = a.fill;
                if (void 0 === o && (o = !!a.backgroundColor), !1 === o || null === o) return !1;
                if (!0 === o) return "origin";
                if (n = parseFloat(o, 10), isFinite(n) && Math.floor(n) === n) return "-" !== o[0] && "+" !== o[0] || (n = e + n), !(n === e || n < 0 || i <= n) && n;

                switch (o) {
                  case "bottom":
                    return "start";

                  case "top":
                    return "end";

                  case "zero":
                    return "origin";

                  case "origin":
                  case "start":
                  case "end":
                    return o;

                  default:
                    return !1;
                }
              }

              function p(t) {
                var e,
                    i = t.el._model || {},
                    n = t.el._scale || {},
                    a = t.fill,
                    o = null;
                if (isFinite(a)) return null;

                if ("start" === a ? o = void 0 === i.scaleBottom ? n.bottom : i.scaleBottom : "end" === a ? o = void 0 === i.scaleTop ? n.top : i.scaleTop : void 0 !== i.scaleZero ? o = i.scaleZero : n.getBasePosition ? o = n.getBasePosition() : n.getBasePixel && (o = n.getBasePixel()), null != o) {
                  if (void 0 !== o.x && void 0 !== o.y) return o;
                  if ("number" == typeof o && isFinite(o)) return {
                    x: (e = n.isHorizontal()) ? o : null,
                    y: e ? null : o
                  };
                }

                return null;
              }

              function m(t, e, i) {
                var n,
                    a = t[e].fill,
                    o = [e];
                if (!i) return a;

                for (; !1 !== a && -1 === o.indexOf(a);) {
                  if (!isFinite(a)) return a;
                  if (!(n = t[a])) return !1;
                  if (n.visible) return a;
                  o.push(a), a = n.fill;
                }

                return !1;
              }

              function x(t) {
                return t && !t.skip;
              }

              function y(t, e, i, n, a) {
                var o;

                if (n && a) {
                  for (t.moveTo(e[0].x, e[0].y), o = 1; o < n; ++o) {
                    d.canvas.lineTo(t, e[o - 1], e[o]);
                  }

                  for (t.lineTo(i[a - 1].x, i[a - 1].y), o = a - 1; 0 < o; --o) {
                    d.canvas.lineTo(t, i[o], i[o - 1], !0);
                  }
                }
              }

              e.exports = {
                id: "filler",
                afterDatasetsUpdate: function afterDatasetsUpdate(t, e) {
                  var i,
                      n,
                      a,
                      o,
                      r,
                      s,
                      l,
                      u = (t.data.datasets || []).length,
                      d = e.propagate,
                      c = [];

                  for (n = 0; n < u; ++n) {
                    o = null, (a = (i = t.getDatasetMeta(n)).dataset) && a._model && a instanceof h.Line && (o = {
                      visible: t.isDatasetVisible(n),
                      fill: g(a, n, u),
                      chart: t,
                      el: a
                    }), i.$filler = o, c.push(o);
                  }

                  for (n = 0; n < u; ++n) {
                    (o = c[n]) && (o.fill = m(c, n, d), o.boundary = p(o), o.mapper = (l = void 0, s = (r = o).fill, !(l = "dataset") === s ? null : (isFinite(s) || (l = "boundary"), f[l](r))));
                  }
                },
                beforeDatasetDraw: function beforeDatasetDraw(t, e) {
                  var i = e.meta.$filler;

                  if (i) {
                    var n = t.ctx,
                        a = i.el,
                        o = a._view,
                        r = a._children || [],
                        s = i.mapper,
                        l = o.backgroundColor || u.global.defaultColor;
                    s && l && r.length && (d.canvas.clipArea(n, t.chartArea), function (t, e, i, n, a, o) {
                      var r,
                          s,
                          l,
                          u,
                          d,
                          c,
                          h,
                          f = e.length,
                          g = n.spanGaps,
                          p = [],
                          m = [],
                          v = 0,
                          b = 0;

                      for (t.beginPath(), r = 0, s = f + !!o; r < s; ++r) {
                        d = i(u = e[l = r % f]._view, l, n), c = x(u), h = x(d), c && h ? (v = p.push(u), b = m.push(d)) : v && b && (g ? (c && p.push(u), h && m.push(d)) : (y(t, p, m, v, b), v = b = 0, p = [], m = []));
                      }

                      y(t, p, m, v, b), t.closePath(), t.fillStyle = a, t.fill();
                    }(n, r, s, o, l, a._loop), d.canvas.unclipArea(n));
                  }
                }
              };
            }, {
              26: 26,
              41: 41,
              46: 46
            }],
            52: [function (t, e, i) {
              "use strict";

              var _ = t(26),
                  n = t(27),
                  D = t(46),
                  a = t(31),
                  o = D.noop;

              function P(t, e) {
                return t.usePointStyle ? e * Math.SQRT2 : t.boxWidth;
              }

              _._set("global", {
                legend: {
                  display: !0,
                  position: "top",
                  fullWidth: !0,
                  reverse: !1,
                  weight: 1e3,
                  onClick: function onClick(t, e) {
                    var i = e.datasetIndex,
                        n = this.chart,
                        a = n.getDatasetMeta(i);
                    a.hidden = null === a.hidden ? !n.data.datasets[i].hidden : null, n.update();
                  },
                  onHover: null,
                  labels: {
                    boxWidth: 40,
                    padding: 10,
                    generateLabels: function generateLabels(i) {
                      var t = i.data;
                      return D.isArray(t.datasets) ? t.datasets.map(function (t, e) {
                        return {
                          text: t.label,
                          fillStyle: D.isArray(t.backgroundColor) ? t.backgroundColor[0] : t.backgroundColor,
                          hidden: !i.isDatasetVisible(e),
                          lineCap: t.borderCapStyle,
                          lineDash: t.borderDash,
                          lineDashOffset: t.borderDashOffset,
                          lineJoin: t.borderJoinStyle,
                          lineWidth: t.borderWidth,
                          strokeStyle: t.borderColor,
                          pointStyle: t.pointStyle,
                          datasetIndex: e
                        };
                      }, this) : [];
                    }
                  }
                },
                legendCallback: function legendCallback(t) {
                  var e = [];
                  e.push('<ul class="' + t.id + '-legend">');

                  for (var i = 0; i < t.data.datasets.length; i++) {
                    e.push('<li><span style="background-color:' + t.data.datasets[i].backgroundColor + '"></span>'), t.data.datasets[i].label && e.push(t.data.datasets[i].label), e.push("</li>");
                  }

                  return e.push("</ul>"), e.join("");
                }
              });

              var r = n.extend({
                initialize: function initialize(t) {
                  D.extend(this, t), this.legendHitBoxes = [], this.doughnutMode = !1;
                },
                beforeUpdate: o,
                update: function update(t, e, i) {
                  var n = this;
                  return n.beforeUpdate(), n.maxWidth = t, n.maxHeight = e, n.margins = i, n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n.beforeBuildLabels(), n.buildLabels(), n.afterBuildLabels(), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate(), n.minSize;
                },
                afterUpdate: o,
                beforeSetDimensions: o,
                setDimensions: function setDimensions() {
                  var t = this;
                  t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {
                    width: 0,
                    height: 0
                  };
                },
                afterSetDimensions: o,
                beforeBuildLabels: o,
                buildLabels: function buildLabels() {
                  var e = this,
                      i = e.options.labels || {},
                      t = D.callback(i.generateLabels, [e.chart], e) || [];
                  i.filter && (t = t.filter(function (t) {
                    return i.filter(t, e.chart.data);
                  })), e.options.reverse && t.reverse(), e.legendItems = t;
                },
                afterBuildLabels: o,
                beforeFit: o,
                fit: function fit() {
                  var n = this,
                      t = n.options,
                      a = t.labels,
                      e = t.display,
                      o = n.ctx,
                      i = _.global,
                      r = D.valueOrDefault,
                      s = r(a.fontSize, i.defaultFontSize),
                      l = r(a.fontStyle, i.defaultFontStyle),
                      u = r(a.fontFamily, i.defaultFontFamily),
                      d = D.fontString(s, l, u),
                      c = n.legendHitBoxes = [],
                      h = n.minSize,
                      f = n.isHorizontal();
                  if (h.height = f ? (h.width = n.maxWidth, e ? 10 : 0) : (h.width = e ? 10 : 0, n.maxHeight), e) if (o.font = d, f) {
                    var g = n.lineWidths = [0],
                        p = n.legendItems.length ? s + a.padding : 0;
                    o.textAlign = "left", o.textBaseline = "top", D.each(n.legendItems, function (t, e) {
                      var i = P(a, s) + s / 2 + o.measureText(t.text).width;
                      g[g.length - 1] + i + a.padding >= n.width && (p += s + a.padding, g[g.length] = n.left), c[e] = {
                        left: 0,
                        top: 0,
                        width: i,
                        height: s
                      }, g[g.length - 1] += i + a.padding;
                    }), h.height += p;
                  } else {
                    var m = a.padding,
                        v = n.columnWidths = [],
                        b = a.padding,
                        x = 0,
                        y = 0,
                        k = s + m;
                    D.each(n.legendItems, function (t, e) {
                      var i = P(a, s) + s / 2 + o.measureText(t.text).width;
                      y + k > h.height && (b += x + a.padding, v.push(x), y = x = 0), x = Math.max(x, i), y += k, c[e] = {
                        left: 0,
                        top: 0,
                        width: i,
                        height: s
                      };
                    }), b += x, v.push(x), h.width += b;
                  }
                  n.width = h.width, n.height = h.height;
                },
                afterFit: o,
                isHorizontal: function isHorizontal() {
                  return "top" === this.options.position || "bottom" === this.options.position;
                },
                draw: function draw() {
                  var c = this,
                      h = c.options,
                      f = h.labels,
                      g = _.global,
                      p = g.elements.line,
                      m = c.width,
                      v = c.lineWidths;

                  if (h.display) {
                    var b,
                        x = c.ctx,
                        y = D.valueOrDefault,
                        t = y(f.fontColor, g.defaultFontColor),
                        k = y(f.fontSize, g.defaultFontSize),
                        e = y(f.fontStyle, g.defaultFontStyle),
                        i = y(f.fontFamily, g.defaultFontFamily),
                        n = D.fontString(k, e, i);
                    x.textAlign = "left", x.textBaseline = "middle", x.lineWidth = .5, x.strokeStyle = t, x.fillStyle = t, x.font = n;
                    var M = P(f, k),
                        w = c.legendHitBoxes,
                        C = c.isHorizontal();
                    b = C ? {
                      x: c.left + (m - v[0]) / 2,
                      y: c.top + f.padding,
                      line: 0
                    } : {
                      x: c.left + f.padding,
                      y: c.top + f.padding,
                      line: 0
                    };
                    var S = k + f.padding;
                    D.each(c.legendItems, function (t, e) {
                      var i,
                          n,
                          a,
                          o,
                          r,
                          s = x.measureText(t.text).width,
                          l = M + k / 2 + s,
                          u = b.x,
                          d = b.y;
                      C ? m <= u + l && (d = b.y += S, b.line++, u = b.x = c.left + (m - v[b.line]) / 2) : d + S > c.bottom && (u = b.x = u + c.columnWidths[b.line] + f.padding, d = b.y = c.top + f.padding, b.line++), function (t, e, i) {
                        if (!(isNaN(M) || M <= 0)) {
                          x.save(), x.fillStyle = y(i.fillStyle, g.defaultColor), x.lineCap = y(i.lineCap, p.borderCapStyle), x.lineDashOffset = y(i.lineDashOffset, p.borderDashOffset), x.lineJoin = y(i.lineJoin, p.borderJoinStyle), x.lineWidth = y(i.lineWidth, p.borderWidth), x.strokeStyle = y(i.strokeStyle, g.defaultColor);
                          var n = 0 === y(i.lineWidth, p.borderWidth);

                          if (x.setLineDash && x.setLineDash(y(i.lineDash, p.borderDash)), h.labels && h.labels.usePointStyle) {
                            var a = k * Math.SQRT2 / 2,
                                o = a / Math.SQRT2,
                                r = t + o,
                                s = e + o;
                            D.canvas.drawPoint(x, i.pointStyle, a, r, s);
                          } else n || x.strokeRect(t, e, M, k), x.fillRect(t, e, M, k);

                          x.restore();
                        }
                      }(u, d, t), w[e].left = u, w[e].top = d, i = t, n = s, o = M + (a = k / 2) + u, r = d + a, x.fillText(i.text, o, r), i.hidden && (x.beginPath(), x.lineWidth = 2, x.moveTo(o, r), x.lineTo(o + n, r), x.stroke()), C ? b.x += l + f.padding : b.y += S;
                    });
                  }
                },
                handleEvent: function handleEvent(t) {
                  var e = this,
                      i = e.options,
                      n = "mouseup" === t.type ? "click" : t.type,
                      a = !1;

                  if ("mousemove" === n) {
                    if (!i.onHover) return;
                  } else {
                    if ("click" !== n) return;
                    if (!i.onClick) return;
                  }

                  var o = t.x,
                      r = t.y;
                  if (o >= e.left && o <= e.right && r >= e.top && r <= e.bottom) for (var s = e.legendHitBoxes, l = 0; l < s.length; ++l) {
                    var u = s[l];

                    if (o >= u.left && o <= u.left + u.width && r >= u.top && r <= u.top + u.height) {
                      if ("click" === n) {
                        i.onClick.call(e, t["native"], e.legendItems[l]), a = !0;
                        break;
                      }

                      if ("mousemove" === n) {
                        i.onHover.call(e, t["native"], e.legendItems[l]), a = !0;
                        break;
                      }
                    }
                  }
                  return a;
                }
              });

              function s(t, e) {
                var i = new r({
                  ctx: t.ctx,
                  options: e,
                  chart: t
                });
                a.configure(t, i, e), a.addBox(t, i), t.legend = i;
              }

              e.exports = {
                id: "legend",
                _element: r,
                beforeInit: function beforeInit(t) {
                  var e = t.options.legend;
                  e && s(t, e);
                },
                beforeUpdate: function beforeUpdate(t) {
                  var e = t.options.legend,
                      i = t.legend;
                  e ? (D.mergeIf(e, _.global.legend), i ? (a.configure(t, i, e), i.options = e) : s(t, e)) : i && (a.removeBox(t, i), delete t.legend);
                },
                afterEvent: function afterEvent(t, e) {
                  var i = t.legend;
                  i && i.handleEvent(e);
                }
              };
            }, {
              26: 26,
              27: 27,
              31: 31,
              46: 46
            }],
            53: [function (t, e, i) {
              "use strict";

              var M = t(26),
                  n = t(27),
                  w = t(46),
                  a = t(31),
                  o = w.noop;

              M._set("global", {
                title: {
                  display: !1,
                  fontStyle: "bold",
                  fullWidth: !0,
                  lineHeight: 1.2,
                  padding: 10,
                  position: "top",
                  text: "",
                  weight: 2e3
                }
              });

              var r = n.extend({
                initialize: function initialize(t) {
                  w.extend(this, t), this.legendHitBoxes = [];
                },
                beforeUpdate: o,
                update: function update(t, e, i) {
                  var n = this;
                  return n.beforeUpdate(), n.maxWidth = t, n.maxHeight = e, n.margins = i, n.beforeSetDimensions(), n.setDimensions(), n.afterSetDimensions(), n.beforeBuildLabels(), n.buildLabels(), n.afterBuildLabels(), n.beforeFit(), n.fit(), n.afterFit(), n.afterUpdate(), n.minSize;
                },
                afterUpdate: o,
                beforeSetDimensions: o,
                setDimensions: function setDimensions() {
                  var t = this;
                  t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = {
                    width: 0,
                    height: 0
                  };
                },
                afterSetDimensions: o,
                beforeBuildLabels: o,
                buildLabels: o,
                afterBuildLabels: o,
                beforeFit: o,
                fit: function fit() {
                  var t = this,
                      e = w.valueOrDefault,
                      i = t.options,
                      n = i.display,
                      a = e(i.fontSize, M.global.defaultFontSize),
                      o = t.minSize,
                      r = w.isArray(i.text) ? i.text.length : 1,
                      s = w.options.toLineHeight(i.lineHeight, a),
                      l = n ? r * s + 2 * i.padding : 0;
                  t.isHorizontal() ? (o.width = t.maxWidth, o.height = l) : (o.width = l, o.height = t.maxHeight), t.width = o.width, t.height = o.height;
                },
                afterFit: o,
                isHorizontal: function isHorizontal() {
                  var t = this.options.position;
                  return "top" === t || "bottom" === t;
                },
                draw: function draw() {
                  var t = this,
                      e = t.ctx,
                      i = w.valueOrDefault,
                      n = t.options,
                      a = M.global;

                  if (n.display) {
                    var o,
                        r,
                        s,
                        l = i(n.fontSize, a.defaultFontSize),
                        u = i(n.fontStyle, a.defaultFontStyle),
                        d = i(n.fontFamily, a.defaultFontFamily),
                        c = w.fontString(l, u, d),
                        h = w.options.toLineHeight(n.lineHeight, l),
                        f = h / 2 + n.padding,
                        g = 0,
                        p = t.top,
                        m = t.left,
                        v = t.bottom,
                        b = t.right;
                    e.fillStyle = i(n.fontColor, a.defaultFontColor), e.font = c, t.isHorizontal() ? (r = m + (b - m) / 2, s = p + f, o = b - m) : (r = "left" === n.position ? m + f : b - f, s = p + (v - p) / 2, o = v - p, g = Math.PI * ("left" === n.position ? -.5 : .5)), e.save(), e.translate(r, s), e.rotate(g), e.textAlign = "center", e.textBaseline = "middle";
                    var x = n.text;
                    if (w.isArray(x)) for (var y = 0, k = 0; k < x.length; ++k) {
                      e.fillText(x[k], 0, y, o), y += h;
                    } else e.fillText(x, 0, 0, o);
                    e.restore();
                  }
                }
              });

              function s(t, e) {
                var i = new r({
                  ctx: t.ctx,
                  options: e,
                  chart: t
                });
                a.configure(t, i, e), a.addBox(t, i), t.titleBlock = i;
              }

              e.exports = {
                id: "title",
                _element: r,
                beforeInit: function beforeInit(t) {
                  var e = t.options.title;
                  e && s(t, e);
                },
                beforeUpdate: function beforeUpdate(t) {
                  var e = t.options.title,
                      i = t.titleBlock;
                  e ? (w.mergeIf(e, M.global.title), i ? (a.configure(t, i, e), i.options = e) : s(t, e)) : i && (a.removeBox(t, i), delete t.titleBlock);
                }
              };
            }, {
              26: 26,
              27: 27,
              31: 31,
              46: 46
            }],
            54: [function (t, e, i) {
              "use strict";

              var n = t(33),
                  a = t(34);

              e.exports = function () {
                var t = n.extend({
                  getLabels: function getLabels() {
                    var t = this.chart.data;
                    return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels;
                  },
                  determineDataLimits: function determineDataLimits() {
                    var t,
                        e = this,
                        i = e.getLabels();
                    e.minIndex = 0, e.maxIndex = i.length - 1, void 0 !== e.options.ticks.min && (t = i.indexOf(e.options.ticks.min), e.minIndex = -1 !== t ? t : e.minIndex), void 0 !== e.options.ticks.max && (t = i.indexOf(e.options.ticks.max), e.maxIndex = -1 !== t ? t : e.maxIndex), e.min = i[e.minIndex], e.max = i[e.maxIndex];
                  },
                  buildTicks: function buildTicks() {
                    var t = this,
                        e = t.getLabels();
                    t.ticks = 0 === t.minIndex && t.maxIndex === e.length - 1 ? e : e.slice(t.minIndex, t.maxIndex + 1);
                  },
                  getLabelForIndex: function getLabelForIndex(t, e) {
                    var i = this,
                        n = i.chart.data,
                        a = i.isHorizontal();
                    return n.yLabels && !a ? i.getRightValue(n.datasets[e].data[t]) : i.ticks[t - i.minIndex];
                  },
                  getPixelForValue: function getPixelForValue(t, e) {
                    var i,
                        n = this,
                        a = n.options.offset,
                        o = Math.max(n.maxIndex + 1 - n.minIndex - (a ? 0 : 1), 1);

                    if (null != t && (i = n.isHorizontal() ? t.x : t.y), void 0 !== i || void 0 !== t && isNaN(e)) {
                      t = i || t;
                      var r = n.getLabels().indexOf(t);
                      e = -1 !== r ? r : e;
                    }

                    if (n.isHorizontal()) {
                      var s = n.width / o,
                          l = s * (e - n.minIndex);
                      return a && (l += s / 2), n.left + Math.round(l);
                    }

                    var u = n.height / o,
                        d = u * (e - n.minIndex);
                    return a && (d += u / 2), n.top + Math.round(d);
                  },
                  getPixelForTick: function getPixelForTick(t) {
                    return this.getPixelForValue(this.ticks[t], t + this.minIndex, null);
                  },
                  getValueForPixel: function getValueForPixel(t) {
                    var e = this,
                        i = e.options.offset,
                        n = Math.max(e._ticks.length - (i ? 0 : 1), 1),
                        a = e.isHorizontal(),
                        o = (a ? e.width : e.height) / n;
                    return t -= a ? e.left : e.top, i && (t -= o / 2), (t <= 0 ? 0 : Math.round(t / o)) + e.minIndex;
                  },
                  getBasePixel: function getBasePixel() {
                    return this.bottom;
                  }
                });
                a.registerScaleType("category", t, {
                  position: "bottom"
                });
              };
            }, {
              33: 33,
              34: 34
            }],
            55: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  c = t(46),
                  a = t(34),
                  o = t(35);

              e.exports = function (t) {
                var e = {
                  position: "left",
                  ticks: {
                    callback: o.formatters.linear
                  }
                },
                    i = t.LinearScaleBase.extend({
                  determineDataLimits: function determineDataLimits() {
                    var r = this,
                        s = r.options,
                        l = r.chart,
                        t = l.data.datasets,
                        e = r.isHorizontal();

                    function u(t) {
                      return e ? t.xAxisID === r.id : t.yAxisID === r.id;
                    }

                    r.min = null, r.max = null;
                    var n = s.stacked;

                    if (void 0 === n && c.each(t, function (t, e) {
                      if (!n) {
                        var i = l.getDatasetMeta(e);
                        l.isDatasetVisible(e) && u(i) && void 0 !== i.stack && (n = !0);
                      }
                    }), s.stacked || n) {
                      var d = {};
                      c.each(t, function (t, e) {
                        var n = l.getDatasetMeta(e),
                            i = [n.type, void 0 === s.stacked && void 0 === n.stack ? e : "", n.stack].join(".");
                        void 0 === d[i] && (d[i] = {
                          positiveValues: [],
                          negativeValues: []
                        });
                        var a = d[i].positiveValues,
                            o = d[i].negativeValues;
                        l.isDatasetVisible(e) && u(n) && c.each(t.data, function (t, e) {
                          var i = +r.getRightValue(t);
                          isNaN(i) || n.data[e].hidden || (a[e] = a[e] || 0, o[e] = o[e] || 0, s.relativePoints ? a[e] = 100 : i < 0 ? o[e] += i : a[e] += i);
                        });
                      }), c.each(d, function (t) {
                        var e = t.positiveValues.concat(t.negativeValues),
                            i = c.min(e),
                            n = c.max(e);
                        r.min = null === r.min ? i : Math.min(r.min, i), r.max = null === r.max ? n : Math.max(r.max, n);
                      });
                    } else c.each(t, function (t, e) {
                      var n = l.getDatasetMeta(e);
                      l.isDatasetVisible(e) && u(n) && c.each(t.data, function (t, e) {
                        var i = +r.getRightValue(t);
                        isNaN(i) || n.data[e].hidden || (null === r.min ? r.min = i : i < r.min && (r.min = i), null === r.max ? r.max = i : i > r.max && (r.max = i));
                      });
                    });

                    r.min = isFinite(r.min) && !isNaN(r.min) ? r.min : 0, r.max = isFinite(r.max) && !isNaN(r.max) ? r.max : 1, this.handleTickRangeOptions();
                  },
                  getTickLimit: function getTickLimit() {
                    var t,
                        e = this.options.ticks;
                    if (this.isHorizontal()) t = Math.min(e.maxTicksLimit ? e.maxTicksLimit : 11, Math.ceil(this.width / 50));else {
                      var i = c.valueOrDefault(e.fontSize, n.global.defaultFontSize);
                      t = Math.min(e.maxTicksLimit ? e.maxTicksLimit : 11, Math.ceil(this.height / (2 * i)));
                    }
                    return t;
                  },
                  handleDirectionalChanges: function handleDirectionalChanges() {
                    this.isHorizontal() || this.ticks.reverse();
                  },
                  getLabelForIndex: function getLabelForIndex(t, e) {
                    return +this.getRightValue(this.chart.data.datasets[e].data[t]);
                  },
                  getPixelForValue: function getPixelForValue(t) {
                    var e = this,
                        i = e.start,
                        n = +e.getRightValue(t),
                        a = e.end - i;
                    return e.isHorizontal() ? e.left + e.width / a * (n - i) : e.bottom - e.height / a * (n - i);
                  },
                  getValueForPixel: function getValueForPixel(t) {
                    var e = this,
                        i = e.isHorizontal(),
                        n = i ? e.width : e.height,
                        a = (i ? t - e.left : e.bottom - t) / n;
                    return e.start + (e.end - e.start) * a;
                  },
                  getPixelForTick: function getPixelForTick(t) {
                    return this.getPixelForValue(this.ticksAsNumbers[t]);
                  }
                });
                a.registerScaleType("linear", i, e);
              };
            }, {
              26: 26,
              34: 34,
              35: 35,
              46: 46
            }],
            56: [function (t, e, i) {
              "use strict";

              var c = t(46),
                  n = t(33);

              e.exports = function (t) {
                var e = c.noop;
                t.LinearScaleBase = n.extend({
                  getRightValue: function getRightValue(t) {
                    return "string" == typeof t ? +t : n.prototype.getRightValue.call(this, t);
                  },
                  handleTickRangeOptions: function handleTickRangeOptions() {
                    var t = this,
                        e = t.options.ticks;

                    if (e.beginAtZero) {
                      var i = c.sign(t.min),
                          n = c.sign(t.max);
                      i < 0 && n < 0 ? t.max = 0 : 0 < i && 0 < n && (t.min = 0);
                    }

                    var a = void 0 !== e.min || void 0 !== e.suggestedMin,
                        o = void 0 !== e.max || void 0 !== e.suggestedMax;
                    void 0 !== e.min ? t.min = e.min : void 0 !== e.suggestedMin && (null === t.min ? t.min = e.suggestedMin : t.min = Math.min(t.min, e.suggestedMin)), void 0 !== e.max ? t.max = e.max : void 0 !== e.suggestedMax && (null === t.max ? t.max = e.suggestedMax : t.max = Math.max(t.max, e.suggestedMax)), a !== o && t.min >= t.max && (a ? t.max = t.min + 1 : t.min = t.max - 1), t.min === t.max && (t.max++, e.beginAtZero || t.min--);
                  },
                  getTickLimit: e,
                  handleDirectionalChanges: e,
                  buildTicks: function buildTicks() {
                    var t = this,
                        e = t.options.ticks,
                        i = t.getTickLimit(),
                        n = {
                      maxTicks: i = Math.max(2, i),
                      min: e.min,
                      max: e.max,
                      precision: e.precision,
                      stepSize: c.valueOrDefault(e.fixedStepSize, e.stepSize)
                    },
                        a = t.ticks = function (t, e) {
                      var i,
                          n,
                          a,
                          o = [];
                      if (t.stepSize && 0 < t.stepSize) a = t.stepSize;else {
                        var r = c.niceNum(e.max - e.min, !1);
                        a = c.niceNum(r / (t.maxTicks - 1), !0), void 0 !== (n = t.precision) && (i = Math.pow(10, n), a = Math.ceil(a * i) / i);
                      }
                      var s = Math.floor(e.min / a) * a,
                          l = Math.ceil(e.max / a) * a;
                      c.isNullOrUndef(t.min) || c.isNullOrUndef(t.max) || !t.stepSize || c.almostWhole((t.max - t.min) / t.stepSize, a / 1e3) && (s = t.min, l = t.max);
                      var u = (l - s) / a;
                      u = c.almostEquals(u, Math.round(u), a / 1e3) ? Math.round(u) : Math.ceil(u), a < (n = 1) && (n = Math.pow(10, 1 - Math.floor(c.log10(a))), s = Math.round(s * n) / n, l = Math.round(l * n) / n), o.push(void 0 !== t.min ? t.min : s);

                      for (var d = 1; d < u; ++d) {
                        o.push(Math.round((s + d * a) * n) / n);
                      }

                      return o.push(void 0 !== t.max ? t.max : l), o;
                    }(n, t);

                    t.handleDirectionalChanges(), t.max = c.max(a), t.min = c.min(a), e.reverse ? (a.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max);
                  },
                  convertTicksToLabels: function convertTicksToLabels() {
                    var t = this;
                    t.ticksAsNumbers = t.ticks.slice(), t.zeroLineIndex = t.ticks.indexOf(0), n.prototype.convertTicksToLabels.call(t);
                  }
                });
              };
            }, {
              33: 33,
              46: 46
            }],
            57: [function (t, e, i) {
              "use strict";

              var h = t(46),
                  n = t(33),
                  a = t(34),
                  o = t(35);

              e.exports = function (c) {
                var t = {
                  position: "left",
                  ticks: {
                    callback: o.formatters.logarithmic
                  }
                },
                    e = n.extend({
                  determineDataLimits: function determineDataLimits() {
                    var r = this,
                        i = r.options,
                        s = r.chart,
                        t = s.data.datasets,
                        e = r.isHorizontal();

                    function l(t) {
                      return e ? t.xAxisID === r.id : t.yAxisID === r.id;
                    }

                    r.min = null, r.max = null, r.minNotZero = null;
                    var n = i.stacked;

                    if (void 0 === n && h.each(t, function (t, e) {
                      if (!n) {
                        var i = s.getDatasetMeta(e);
                        s.isDatasetVisible(e) && l(i) && void 0 !== i.stack && (n = !0);
                      }
                    }), i.stacked || n) {
                      var u = {};
                      h.each(t, function (t, e) {
                        var a = s.getDatasetMeta(e),
                            o = [a.type, void 0 === i.stacked && void 0 === a.stack ? e : "", a.stack].join(".");
                        s.isDatasetVisible(e) && l(a) && (void 0 === u[o] && (u[o] = []), h.each(t.data, function (t, e) {
                          var i = u[o],
                              n = +r.getRightValue(t);
                          isNaN(n) || a.data[e].hidden || n < 0 || (i[e] = i[e] || 0, i[e] += n);
                        }));
                      }), h.each(u, function (t) {
                        if (0 < t.length) {
                          var e = h.min(t),
                              i = h.max(t);
                          r.min = null === r.min ? e : Math.min(r.min, e), r.max = null === r.max ? i : Math.max(r.max, i);
                        }
                      });
                    } else h.each(t, function (t, e) {
                      var n = s.getDatasetMeta(e);
                      s.isDatasetVisible(e) && l(n) && h.each(t.data, function (t, e) {
                        var i = +r.getRightValue(t);
                        isNaN(i) || n.data[e].hidden || i < 0 || (null === r.min ? r.min = i : i < r.min && (r.min = i), null === r.max ? r.max = i : i > r.max && (r.max = i), 0 !== i && (null === r.minNotZero || i < r.minNotZero) && (r.minNotZero = i));
                      });
                    });

                    this.handleTickRangeOptions();
                  },
                  handleTickRangeOptions: function handleTickRangeOptions() {
                    var t = this,
                        e = t.options.ticks,
                        i = h.valueOrDefault;
                    t.min = i(e.min, t.min), t.max = i(e.max, t.max), t.min === t.max && (0 !== t.min && null !== t.min ? (t.min = Math.pow(10, Math.floor(h.log10(t.min)) - 1), t.max = Math.pow(10, Math.floor(h.log10(t.max)) + 1)) : (t.min = 1, t.max = 10)), null === t.min && (t.min = Math.pow(10, Math.floor(h.log10(t.max)) - 1)), null === t.max && (t.max = 0 !== t.min ? Math.pow(10, Math.floor(h.log10(t.min)) + 1) : 10), null === t.minNotZero && (0 < t.min ? t.minNotZero = t.min : t.max < 1 ? t.minNotZero = Math.pow(10, Math.floor(h.log10(t.max))) : t.minNotZero = 1);
                  },
                  buildTicks: function buildTicks() {
                    var t = this,
                        e = t.options.ticks,
                        i = !t.isHorizontal(),
                        n = {
                      min: e.min,
                      max: e.max
                    },
                        a = t.ticks = function (t, e) {
                      var i,
                          n,
                          a = [],
                          o = h.valueOrDefault,
                          r = o(t.min, Math.pow(10, Math.floor(h.log10(e.min)))),
                          s = Math.floor(h.log10(e.max)),
                          l = Math.ceil(e.max / Math.pow(10, s));
                      0 === r ? (i = Math.floor(h.log10(e.minNotZero)), n = Math.floor(e.minNotZero / Math.pow(10, i)), a.push(r), r = n * Math.pow(10, i)) : (i = Math.floor(h.log10(r)), n = Math.floor(r / Math.pow(10, i)));

                      for (var u = i < 0 ? Math.pow(10, Math.abs(i)) : 1; a.push(r), 10 == ++n && (n = 1, u = 0 <= ++i ? 1 : u), r = Math.round(n * Math.pow(10, i) * u) / u, i < s || i === s && n < l;) {
                        ;
                      }

                      var d = o(t.max, r);
                      return a.push(d), a;
                    }(n, t);

                    t.max = h.max(a), t.min = h.min(a), e.reverse ? (i = !i, t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), i && a.reverse();
                  },
                  convertTicksToLabels: function convertTicksToLabels() {
                    this.tickValues = this.ticks.slice(), n.prototype.convertTicksToLabels.call(this);
                  },
                  getLabelForIndex: function getLabelForIndex(t, e) {
                    return +this.getRightValue(this.chart.data.datasets[e].data[t]);
                  },
                  getPixelForTick: function getPixelForTick(t) {
                    return this.getPixelForValue(this.tickValues[t]);
                  },
                  _getFirstTickValue: function _getFirstTickValue(t) {
                    var e = Math.floor(h.log10(t));
                    return Math.floor(t / Math.pow(10, e)) * Math.pow(10, e);
                  },
                  getPixelForValue: function getPixelForValue(t) {
                    var e,
                        i,
                        n,
                        a,
                        o,
                        r = this,
                        s = r.options.ticks.reverse,
                        l = h.log10,
                        u = r._getFirstTickValue(r.minNotZero),
                        d = 0;

                    return t = +r.getRightValue(t), o = s ? (n = r.end, a = r.start, -1) : (n = r.start, a = r.end, 1), i = r.isHorizontal() ? (e = r.width, s ? r.right : r.left) : (e = r.height, o *= -1, s ? r.top : r.bottom), t !== n && (0 === n && (e -= d = h.getValueOrDefault(r.options.ticks.fontSize, c.defaults.global.defaultFontSize), n = u), 0 !== t && (d += e / (l(a) - l(n)) * (l(t) - l(n))), i += o * d), i;
                  },
                  getValueForPixel: function getValueForPixel(t) {
                    var e,
                        i,
                        n,
                        a,
                        o = this,
                        r = o.options.ticks.reverse,
                        s = h.log10,
                        l = o._getFirstTickValue(o.minNotZero);

                    if (n = r ? (i = o.end, o.start) : (i = o.start, o.end), (a = o.isHorizontal() ? (e = o.width, r ? o.right - t : t - o.left) : (e = o.height, r ? t - o.top : o.bottom - t)) !== i) {
                      if (0 === i) {
                        var u = h.getValueOrDefault(o.options.ticks.fontSize, c.defaults.global.defaultFontSize);
                        a -= u, e -= u, i = l;
                      }

                      a *= s(n) - s(i), a /= e, a = Math.pow(10, s(i) + a);
                    }

                    return a;
                  }
                });
                a.registerScaleType("logarithmic", e, t);
              };
            }, {
              33: 33,
              34: 34,
              35: 35,
              46: 46
            }],
            58: [function (t, e, i) {
              "use strict";

              var n = t(26),
                  k = t(46),
                  a = t(34),
                  o = t(35);

              e.exports = function (e) {
                var v = n.global,
                    t = {
                  display: !0,
                  animate: !0,
                  position: "chartArea",
                  angleLines: {
                    display: !0,
                    color: "rgba(0, 0, 0, 0.1)",
                    lineWidth: 1
                  },
                  gridLines: {
                    circular: !1
                  },
                  ticks: {
                    showLabelBackdrop: !0,
                    backdropColor: "rgba(255,255,255,0.75)",
                    backdropPaddingY: 2,
                    backdropPaddingX: 2,
                    callback: o.formatters.linear
                  },
                  pointLabels: {
                    display: !0,
                    fontSize: 10,
                    callback: function callback(t) {
                      return t;
                    }
                  }
                };

                function b(t) {
                  var e = t.options;
                  return e.angleLines.display || e.pointLabels.display ? t.chart.data.labels.length : 0;
                }

                function x(t) {
                  var e = t.options.pointLabels,
                      i = k.valueOrDefault(e.fontSize, v.defaultFontSize),
                      n = k.valueOrDefault(e.fontStyle, v.defaultFontStyle),
                      a = k.valueOrDefault(e.fontFamily, v.defaultFontFamily);
                  return {
                    size: i,
                    style: n,
                    family: a,
                    font: k.fontString(i, n, a)
                  };
                }

                function m(t, e, i, n, a) {
                  return t === n || t === a ? {
                    start: e - i / 2,
                    end: e + i / 2
                  } : t < n || a < t ? {
                    start: e - i - 5,
                    end: e
                  } : {
                    start: e,
                    end: e + i + 5
                  };
                }

                function y(t, e, i, n) {
                  if (k.isArray(e)) for (var a = i.y, o = 1.5 * n, r = 0; r < e.length; ++r) {
                    t.fillText(e[r], i.x, a), a += o;
                  } else t.fillText(e, i.x, i.y);
                }

                function s(t) {
                  return k.isNumber(t) ? t : 0;
                }

                var i = e.LinearScaleBase.extend({
                  setDimensions: function setDimensions() {
                    var t = this,
                        e = t.options,
                        i = e.ticks;
                    t.width = t.maxWidth, t.height = t.maxHeight, t.xCenter = Math.round(t.width / 2), t.yCenter = Math.round(t.height / 2);
                    var n = k.min([t.height, t.width]),
                        a = k.valueOrDefault(i.fontSize, v.defaultFontSize);
                    t.drawingArea = e.display ? n / 2 - (a / 2 + i.backdropPaddingY) : n / 2;
                  },
                  determineDataLimits: function determineDataLimits() {
                    var a = this,
                        i = a.chart,
                        o = Number.POSITIVE_INFINITY,
                        r = Number.NEGATIVE_INFINITY;
                    k.each(i.data.datasets, function (t, e) {
                      if (i.isDatasetVisible(e)) {
                        var n = i.getDatasetMeta(e);
                        k.each(t.data, function (t, e) {
                          var i = +a.getRightValue(t);
                          isNaN(i) || n.data[e].hidden || (o = Math.min(i, o), r = Math.max(i, r));
                        });
                      }
                    }), a.min = o === Number.POSITIVE_INFINITY ? 0 : o, a.max = r === Number.NEGATIVE_INFINITY ? 0 : r, a.handleTickRangeOptions();
                  },
                  getTickLimit: function getTickLimit() {
                    var t = this.options.ticks,
                        e = k.valueOrDefault(t.fontSize, v.defaultFontSize);
                    return Math.min(t.maxTicksLimit ? t.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * e)));
                  },
                  convertTicksToLabels: function convertTicksToLabels() {
                    var t = this;
                    e.LinearScaleBase.prototype.convertTicksToLabels.call(t), t.pointLabels = t.chart.data.labels.map(t.options.pointLabels.callback, t);
                  },
                  getLabelForIndex: function getLabelForIndex(t, e) {
                    return +this.getRightValue(this.chart.data.datasets[e].data[t]);
                  },
                  fit: function fit() {
                    var t, e;
                    this.options.pointLabels.display ? function (t) {
                      var e,
                          i,
                          n,
                          a = x(t),
                          o = Math.min(t.height / 2, t.width / 2),
                          r = {
                        r: t.width,
                        l: 0,
                        t: t.height,
                        b: 0
                      },
                          s = {};
                      t.ctx.font = a.font, t._pointLabelSizes = [];
                      var l,
                          u,
                          d,
                          c = b(t);

                      for (e = 0; e < c; e++) {
                        n = t.getPointPosition(e, o), l = t.ctx, u = a.size, d = t.pointLabels[e] || "", i = k.isArray(d) ? {
                          w: k.longestText(l, l.font, d),
                          h: d.length * u + 1.5 * (d.length - 1) * u
                        } : {
                          w: l.measureText(d).width,
                          h: u
                        }, t._pointLabelSizes[e] = i;
                        var h = t.getIndexAngle(e),
                            f = k.toDegrees(h) % 360,
                            g = m(f, n.x, i.w, 0, 180),
                            p = m(f, n.y, i.h, 90, 270);
                        g.start < r.l && (r.l = g.start, s.l = h), g.end > r.r && (r.r = g.end, s.r = h), p.start < r.t && (r.t = p.start, s.t = h), p.end > r.b && (r.b = p.end, s.b = h);
                      }

                      t.setReductions(o, r, s);
                    }(this) : (t = this, e = Math.min(t.height / 2, t.width / 2), t.drawingArea = Math.round(e), t.setCenterPoint(0, 0, 0, 0));
                  },
                  setReductions: function setReductions(t, e, i) {
                    var n = e.l / Math.sin(i.l),
                        a = Math.max(e.r - this.width, 0) / Math.sin(i.r),
                        o = -e.t / Math.cos(i.t),
                        r = -Math.max(e.b - this.height, 0) / Math.cos(i.b);
                    n = s(n), a = s(a), o = s(o), r = s(r), this.drawingArea = Math.min(Math.round(t - (n + a) / 2), Math.round(t - (o + r) / 2)), this.setCenterPoint(n, a, o, r);
                  },
                  setCenterPoint: function setCenterPoint(t, e, i, n) {
                    var a = this,
                        o = a.width - e - a.drawingArea,
                        r = t + a.drawingArea,
                        s = i + a.drawingArea,
                        l = a.height - n - a.drawingArea;
                    a.xCenter = Math.round((r + o) / 2 + a.left), a.yCenter = Math.round((s + l) / 2 + a.top);
                  },
                  getIndexAngle: function getIndexAngle(t) {
                    return t * (2 * Math.PI / b(this)) + (this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0) * Math.PI * 2 / 360;
                  },
                  getDistanceFromCenterForValue: function getDistanceFromCenterForValue(t) {
                    var e = this;
                    if (null === t) return 0;
                    var i = e.drawingArea / (e.max - e.min);
                    return e.options.ticks.reverse ? (e.max - t) * i : (t - e.min) * i;
                  },
                  getPointPosition: function getPointPosition(t, e) {
                    var i = this.getIndexAngle(t) - Math.PI / 2;
                    return {
                      x: Math.round(Math.cos(i) * e) + this.xCenter,
                      y: Math.round(Math.sin(i) * e) + this.yCenter
                    };
                  },
                  getPointPositionForValue: function getPointPositionForValue(t, e) {
                    return this.getPointPosition(t, this.getDistanceFromCenterForValue(e));
                  },
                  getBasePosition: function getBasePosition() {
                    var t = this.min,
                        e = this.max;
                    return this.getPointPositionForValue(0, this.beginAtZero ? 0 : t < 0 && e < 0 ? e : 0 < t && 0 < e ? t : 0);
                  },
                  draw: function draw() {
                    var o = this,
                        t = o.options,
                        r = t.gridLines,
                        s = t.ticks,
                        l = k.valueOrDefault;

                    if (t.display) {
                      var u = o.ctx,
                          d = this.getIndexAngle(0),
                          c = l(s.fontSize, v.defaultFontSize),
                          e = l(s.fontStyle, v.defaultFontStyle),
                          i = l(s.fontFamily, v.defaultFontFamily),
                          h = k.fontString(c, e, i);
                      k.each(o.ticks, function (t, e) {
                        if (0 < e || s.reverse) {
                          var i = o.getDistanceFromCenterForValue(o.ticksAsNumbers[e]);

                          if (r.display && 0 !== e && function (t, e, i, n) {
                            var a = t.ctx;
                            if (a.strokeStyle = k.valueAtIndexOrDefault(e.color, n - 1), a.lineWidth = k.valueAtIndexOrDefault(e.lineWidth, n - 1), t.options.gridLines.circular) a.beginPath(), a.arc(t.xCenter, t.yCenter, i, 0, 2 * Math.PI), a.closePath(), a.stroke();else {
                              var o = b(t);
                              if (0 === o) return;
                              a.beginPath();
                              var r = t.getPointPosition(0, i);
                              a.moveTo(r.x, r.y);

                              for (var s = 1; s < o; s++) {
                                r = t.getPointPosition(s, i), a.lineTo(r.x, r.y);
                              }

                              a.closePath(), a.stroke();
                            }
                          }(o, r, i, e), s.display) {
                            var n = l(s.fontColor, v.defaultFontColor);

                            if (u.font = h, u.save(), u.translate(o.xCenter, o.yCenter), u.rotate(d), s.showLabelBackdrop) {
                              var a = u.measureText(t).width;
                              u.fillStyle = s.backdropColor, u.fillRect(-a / 2 - s.backdropPaddingX, -i - c / 2 - s.backdropPaddingY, a + 2 * s.backdropPaddingX, c + 2 * s.backdropPaddingY);
                            }

                            u.textAlign = "center", u.textBaseline = "middle", u.fillStyle = n, u.fillText(t, 0, -i), u.restore();
                          }
                        }
                      }), (t.angleLines.display || t.pointLabels.display) && function (t) {
                        var e = t.ctx,
                            i = t.options,
                            n = i.angleLines,
                            a = i.pointLabels;
                        e.lineWidth = n.lineWidth, e.strokeStyle = n.color;
                        var o,
                            r,
                            s,
                            l,
                            u = t.getDistanceFromCenterForValue(i.ticks.reverse ? t.min : t.max),
                            d = x(t);
                        e.textBaseline = "top";

                        for (var c = b(t) - 1; 0 <= c; c--) {
                          if (n.display) {
                            var h = t.getPointPosition(c, u);
                            e.beginPath(), e.moveTo(t.xCenter, t.yCenter), e.lineTo(h.x, h.y), e.stroke(), e.closePath();
                          }

                          if (a.display) {
                            var f = t.getPointPosition(c, u + 5),
                                g = k.valueAtIndexOrDefault(a.fontColor, c, v.defaultFontColor);
                            e.font = d.font, e.fillStyle = g;
                            var p = t.getIndexAngle(c),
                                m = k.toDegrees(p);
                            e.textAlign = 0 === (l = m) || 180 === l ? "center" : l < 180 ? "left" : "right", o = m, r = t._pointLabelSizes[c], s = f, 90 === o || 270 === o ? s.y -= r.h / 2 : (270 < o || o < 90) && (s.y -= r.h), y(e, t.pointLabels[c] || "", f, d.size);
                          }
                        }
                      }(o);
                    }
                  }
                });
                a.registerScaleType("radialLinear", i, t);
              };
            }, {
              26: 26,
              34: 34,
              35: 35,
              46: 46
            }],
            59: [function (t, e, i) {
              "use strict";

              var x = t(1);
              x = "function" == typeof x ? x : window.moment;
              var r = t(26),
                  m = t(46),
                  n = t(33),
                  a = t(34),
                  p = Number.MIN_SAFE_INTEGER || -9007199254740991,
                  v = Number.MAX_SAFE_INTEGER || 9007199254740991,
                  y = {
                millisecond: {
                  common: !0,
                  size: 1,
                  steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
                },
                second: {
                  common: !0,
                  size: 1e3,
                  steps: [1, 2, 5, 10, 15, 30]
                },
                minute: {
                  common: !0,
                  size: 6e4,
                  steps: [1, 2, 5, 10, 15, 30]
                },
                hour: {
                  common: !0,
                  size: 36e5,
                  steps: [1, 2, 3, 6, 12]
                },
                day: {
                  common: !0,
                  size: 864e5,
                  steps: [1, 2, 5]
                },
                week: {
                  common: !1,
                  size: 6048e5,
                  steps: [1, 2, 3, 4]
                },
                month: {
                  common: !0,
                  size: 2628e6,
                  steps: [1, 2, 3]
                },
                quarter: {
                  common: !1,
                  size: 7884e6,
                  steps: [1, 2, 3, 4]
                },
                year: {
                  common: !0,
                  size: 3154e7
                }
              },
                  k = Object.keys(y);

              function b(t, e) {
                return t - e;
              }

              function M(t) {
                var e,
                    i,
                    n,
                    a = {},
                    o = [];

                for (e = 0, i = t.length; e < i; ++e) {
                  a[n = t[e]] || (a[n] = !0, o.push(n));
                }

                return o;
              }

              function w(t, e, i, n) {
                var a = function (t, e, i) {
                  for (var n, a, o, r = 0, s = t.length - 1; 0 <= r && r <= s;) {
                    if (a = t[(n = r + s >> 1) - 1] || null, o = t[n], !a) return {
                      lo: null,
                      hi: o
                    };
                    if (o[e] < i) r = n + 1;else {
                      if (!(a[e] > i)) return {
                        lo: a,
                        hi: o
                      };
                      s = n - 1;
                    }
                  }

                  return {
                    lo: o,
                    hi: null
                  };
                }(t, e, i),
                    o = a.lo ? a.hi ? a.lo : t[t.length - 2] : t[0],
                    r = a.lo ? a.hi ? a.hi : t[t.length - 1] : t[1],
                    s = r[e] - o[e],
                    l = s ? (i - o[e]) / s : 0,
                    u = (r[n] - o[n]) * l;

                return o[n] + u;
              }

              function C(t, e) {
                var i = e.parser,
                    n = e.parser || e.format;
                return "function" == typeof i ? i(t) : "string" == typeof t && "string" == typeof n ? x(t, n) : (t instanceof x || (t = x(t)), t.isValid() ? t : "function" == typeof n ? n(t) : t);
              }

              function S(t, e) {
                if (m.isNullOrUndef(t)) return null;
                var i = e.options.time,
                    n = C(e.getRightValue(t), i);
                return n.isValid() ? (i.round && n.startOf(i.round), n.valueOf()) : null;
              }

              function _(t) {
                for (var e = k.indexOf(t) + 1, i = k.length; e < i; ++e) {
                  if (y[k[e]].common) return k[e];
                }
              }

              function D(t, e, i, n) {
                var a,
                    o = n.time,
                    r = o.unit || function (t, e, i, n) {
                  var a,
                      o,
                      r,
                      s = k.length;

                  for (a = k.indexOf(t); a < s - 1; ++a) {
                    if (r = (o = y[k[a]]).steps ? o.steps[o.steps.length - 1] : v, o.common && Math.ceil((i - e) / (r * o.size)) <= n) return k[a];
                  }

                  return k[s - 1];
                }(o.minUnit, t, e, i),
                    s = _(r),
                    l = m.valueOrDefault(o.stepSize, o.unitStepSize),
                    u = "week" === r && o.isoWeekday,
                    d = n.ticks.major.enabled,
                    c = y[r],
                    h = x(t),
                    f = x(e),
                    g = [];

                for (l || (l = function (t, e, i, n) {
                  var a,
                      o,
                      r,
                      s = e - t,
                      l = y[i],
                      u = l.size,
                      d = l.steps;
                  if (!d) return Math.ceil(s / (n * u));

                  for (a = 0, o = d.length; a < o && (r = d[a], !(Math.ceil(s / (u * r)) <= n)); ++a) {
                    ;
                  }

                  return r;
                }(t, e, r, i)), u && (h = h.isoWeekday(u), f = f.isoWeekday(u)), h = h.startOf(u ? "day" : r), (f = f.startOf(u ? "day" : r)) < e && f.add(1, r), a = x(h), d && s && !u && !o.round && (a.startOf(s), a.add(~~((h - a) / (c.size * l)) * l, r)); a < f; a.add(l, r)) {
                  g.push(+a);
                }

                return g.push(+a), g;
              }

              e.exports = function () {
                var t = n.extend({
                  initialize: function initialize() {
                    if (!x) throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");
                    this.mergeTicksOptions(), n.prototype.initialize.call(this);
                  },
                  update: function update() {
                    var t = this.options;
                    return t.time && t.time.format && console.warn("options.time.format is deprecated and replaced by options.time.parser."), n.prototype.update.apply(this, arguments);
                  },
                  getRightValue: function getRightValue(t) {
                    return t && void 0 !== t.t && (t = t.t), n.prototype.getRightValue.call(this, t);
                  },
                  determineDataLimits: function determineDataLimits() {
                    var t,
                        e,
                        i,
                        n,
                        a,
                        o,
                        r = this,
                        s = r.chart,
                        l = r.options.time,
                        u = l.unit || "day",
                        d = v,
                        c = p,
                        h = [],
                        f = [],
                        g = [];

                    for (t = 0, i = s.data.labels.length; t < i; ++t) {
                      g.push(S(s.data.labels[t], r));
                    }

                    for (t = 0, i = (s.data.datasets || []).length; t < i; ++t) {
                      if (s.isDatasetVisible(t)) {
                        if (a = s.data.datasets[t].data, m.isObject(a[0])) for (f[t] = [], e = 0, n = a.length; e < n; ++e) {
                          o = S(a[e], r), h.push(o), f[t][e] = o;
                        } else h.push.apply(h, g), f[t] = g.slice(0);
                      } else f[t] = [];
                    }

                    g.length && (g = M(g).sort(b), d = Math.min(d, g[0]), c = Math.max(c, g[g.length - 1])), h.length && (h = M(h).sort(b), d = Math.min(d, h[0]), c = Math.max(c, h[h.length - 1])), d = S(l.min, r) || d, c = S(l.max, r) || c, d = d === v ? +x().startOf(u) : d, c = c === p ? +x().endOf(u) + 1 : c, r.min = Math.min(d, c), r.max = Math.max(d + 1, c), r._horizontal = r.isHorizontal(), r._table = [], r._timestamps = {
                      data: h,
                      datasets: f,
                      labels: g
                    };
                  },
                  buildTicks: function buildTicks() {
                    var t,
                        e,
                        i,
                        n,
                        a,
                        o,
                        r,
                        s,
                        l,
                        u,
                        d,
                        c,
                        h = this,
                        f = h.min,
                        g = h.max,
                        p = h.options,
                        m = p.time,
                        v = [],
                        b = [];

                    switch (p.ticks.source) {
                      case "data":
                        v = h._timestamps.data;
                        break;

                      case "labels":
                        v = h._timestamps.labels;
                        break;

                      case "auto":
                      default:
                        v = D(f, g, h.getLabelCapacity(f), p);
                    }

                    for ("ticks" === p.bounds && v.length && (f = v[0], g = v[v.length - 1]), f = S(m.min, h) || f, g = S(m.max, h) || g, t = 0, e = v.length; t < e; ++t) {
                      f <= (i = v[t]) && i <= g && b.push(i);
                    }

                    return h.min = f, h.max = g, h._unit = m.unit || function (t, e, i, n) {
                      var a,
                          o,
                          r = x.duration(x(n).diff(x(i)));

                      for (a = k.length - 1; a >= k.indexOf(e); a--) {
                        if (o = k[a], y[o].common && r.as(o) >= t.length) return o;
                      }

                      return k[e ? k.indexOf(e) : 0];
                    }(b, m.minUnit, h.min, h.max), h._majorUnit = _(h._unit), h._table = function (t, e, i, n) {
                      if ("linear" === n || !t.length) return [{
                        time: e,
                        pos: 0
                      }, {
                        time: i,
                        pos: 1
                      }];
                      var a,
                          o,
                          r,
                          s,
                          l,
                          u = [],
                          d = [e];

                      for (a = 0, o = t.length; a < o; ++a) {
                        e < (s = t[a]) && s < i && d.push(s);
                      }

                      for (d.push(i), a = 0, o = d.length; a < o; ++a) {
                        l = d[a + 1], r = d[a - 1], s = d[a], void 0 !== r && void 0 !== l && Math.round((l + r) / 2) === s || u.push({
                          time: s,
                          pos: a / (o - 1)
                        });
                      }

                      return u;
                    }(h._timestamps.data, f, g, p.distribution), h._offsets = (n = h._table, a = b, o = f, r = g, c = d = 0, (s = p).offset && a.length && (s.time.min || (l = 1 < a.length ? a[1] : r, u = a[0], d = (w(n, "time", l, "pos") - w(n, "time", u, "pos")) / 2), s.time.max || (l = a[a.length - 1], u = 1 < a.length ? a[a.length - 2] : o, c = (w(n, "time", l, "pos") - w(n, "time", u, "pos")) / 2)), {
                      left: d,
                      right: c
                    }), h._labelFormat = function (t, e) {
                      var i,
                          n,
                          a,
                          o = t.length;

                      for (i = 0; i < o; i++) {
                        if (0 !== (n = C(t[i], e)).millisecond()) return "MMM D, YYYY h:mm:ss.SSS a";
                        0 === n.second() && 0 === n.minute() && 0 === n.hour() || (a = !0);
                      }

                      return a ? "MMM D, YYYY h:mm:ss a" : "MMM D, YYYY";
                    }(h._timestamps.data, m), function (t, e) {
                      var i,
                          n,
                          a,
                          o,
                          r = [];

                      for (i = 0, n = t.length; i < n; ++i) {
                        a = t[i], o = !!e && a === +x(a).startOf(e), r.push({
                          value: a,
                          major: o
                        });
                      }

                      return r;
                    }(b, h._majorUnit);
                  },
                  getLabelForIndex: function getLabelForIndex(t, e) {
                    var i = this.chart.data,
                        n = this.options.time,
                        a = i.labels && t < i.labels.length ? i.labels[t] : "",
                        o = i.datasets[e].data[t];
                    return m.isObject(o) && (a = this.getRightValue(o)), n.tooltipFormat ? C(a, n).format(n.tooltipFormat) : "string" == typeof a ? a : C(a, n).format(this._labelFormat);
                  },
                  tickFormatFunction: function tickFormatFunction(t, e, i, n) {
                    var a = this.options,
                        o = t.valueOf(),
                        r = a.time.displayFormats,
                        s = r[this._unit],
                        l = this._majorUnit,
                        u = r[l],
                        d = t.clone().startOf(l).valueOf(),
                        c = a.ticks.major,
                        h = c.enabled && l && u && o === d,
                        f = t.format(n || (h ? u : s)),
                        g = h ? c : a.ticks.minor,
                        p = m.valueOrDefault(g.callback, g.userCallback);
                    return p ? p(f, e, i) : f;
                  },
                  convertTicksToLabels: function convertTicksToLabels(t) {
                    var e,
                        i,
                        n = [];

                    for (e = 0, i = t.length; e < i; ++e) {
                      n.push(this.tickFormatFunction(x(t[e].value), e, t));
                    }

                    return n;
                  },
                  getPixelForOffset: function getPixelForOffset(t) {
                    var e = this,
                        i = e._horizontal ? e.width : e.height,
                        n = e._horizontal ? e.left : e.top,
                        a = w(e._table, "time", t, "pos");
                    return n + i * (e._offsets.left + a) / (e._offsets.left + 1 + e._offsets.right);
                  },
                  getPixelForValue: function getPixelForValue(t, e, i) {
                    var n = null;
                    if (void 0 !== e && void 0 !== i && (n = this._timestamps.datasets[i][e]), null === n && (n = S(t, this)), null !== n) return this.getPixelForOffset(n);
                  },
                  getPixelForTick: function getPixelForTick(t) {
                    var e = this.getTicks();
                    return 0 <= t && t < e.length ? this.getPixelForOffset(e[t].value) : null;
                  },
                  getValueForPixel: function getValueForPixel(t) {
                    var e = this,
                        i = e._horizontal ? e.width : e.height,
                        n = e._horizontal ? e.left : e.top,
                        a = (i ? (t - n) / i : 0) * (e._offsets.left + 1 + e._offsets.left) - e._offsets.right,
                        o = w(e._table, "pos", a, "time");
                    return x(o);
                  },
                  getLabelWidth: function getLabelWidth(t) {
                    var e = this.options.ticks,
                        i = this.ctx.measureText(t).width,
                        n = m.toRadians(e.maxRotation),
                        a = Math.cos(n),
                        o = Math.sin(n);
                    return i * a + m.valueOrDefault(e.fontSize, r.global.defaultFontSize) * o;
                  },
                  getLabelCapacity: function getLabelCapacity(t) {
                    var e = this.options.time.displayFormats.millisecond,
                        i = this.tickFormatFunction(x(t), 0, [], e),
                        n = this.getLabelWidth(i),
                        a = this.isHorizontal() ? this.width : this.height,
                        o = Math.floor(a / n);
                    return 0 < o ? o : 1;
                  }
                });
                a.registerScaleType("time", t, {
                  position: "bottom",
                  distribution: "linear",
                  bounds: "data",
                  time: {
                    parser: !1,
                    format: !1,
                    unit: !1,
                    round: !1,
                    displayFormat: !1,
                    isoWeekday: !1,
                    minUnit: "millisecond",
                    displayFormats: {
                      millisecond: "h:mm:ss.SSS a",
                      second: "h:mm:ss a",
                      minute: "h:mm a",
                      hour: "hA",
                      day: "MMM D",
                      week: "ll",
                      month: "MMM YYYY",
                      quarter: "[Q]Q - YYYY",
                      year: "YYYY"
                    }
                  },
                  ticks: {
                    autoSkip: !1,
                    source: "auto",
                    major: {
                      enabled: !1
                    }
                  }
                });
              };
            }, {
              1: 1,
              26: 26,
              33: 33,
              34: 34,
              46: 46
            }]
          }, {}, [7])(7);
        });
        ;
        browserify_shim__define__module__export__(typeof chart != "undefined" ? chart : window.chart);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  70: [function (require, module, exports) {
    /**
     * @namespace Chart
     */
    var Chart = require('./core/core')();

    Chart.helpers = require('./helpers/index'); // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!

    require('./core/core.helpers')(Chart);

    Chart.Animation = require('./core/core.animation');
    Chart.animationService = require('./core/core.animations');
    Chart.defaults = require('./core/core.defaults');
    Chart.Element = require('./core/core.element');
    Chart.elements = require('./elements/index');
    Chart.Interaction = require('./core/core.interaction');
    Chart.layouts = require('./core/core.layouts');
    Chart.platform = require('./platforms/platform');
    Chart.plugins = require('./core/core.plugins');
    Chart.Scale = require('./core/core.scale');
    Chart.scaleService = require('./core/core.scaleService');
    Chart.Ticks = require('./core/core.ticks');
    Chart.Tooltip = require('./core/core.tooltip');

    require('./core/core.controller')(Chart);

    require('./core/core.datasetController')(Chart);

    require('./scales/scale.linearbase')(Chart);

    require('./scales/scale.category')(Chart);

    require('./scales/scale.linear')(Chart);

    require('./scales/scale.logarithmic')(Chart);

    require('./scales/scale.radialLinear')(Chart);

    require('./scales/scale.time')(Chart); // Controllers must be loaded after elements
    // See Chart.core.datasetController.dataElementType


    require('./controllers/controller.bar')(Chart);

    require('./controllers/controller.bubble')(Chart);

    require('./controllers/controller.doughnut')(Chart);

    require('./controllers/controller.line')(Chart);

    require('./controllers/controller.polarArea')(Chart);

    require('./controllers/controller.radar')(Chart);

    require('./controllers/controller.scatter')(Chart);

    require('./charts/Chart.Bar')(Chart);

    require('./charts/Chart.Bubble')(Chart);

    require('./charts/Chart.Doughnut')(Chart);

    require('./charts/Chart.Line')(Chart);

    require('./charts/Chart.PolarArea')(Chart);

    require('./charts/Chart.Radar')(Chart);

    require('./charts/Chart.Scatter')(Chart); // Loading built-in plugins


    var plugins = require('./plugins');

    for (var k in plugins) {
      if (plugins.hasOwnProperty(k)) {
        Chart.plugins.register(plugins[k]);
      }
    }

    Chart.platform.initialize();
    module.exports = Chart;

    if (typeof window !== 'undefined') {
      window.Chart = Chart;
    } // DEPRECATIONS

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Legend
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */


    Chart.Legend = plugins.legend._element;
    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Title
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */

    Chart.Title = plugins.title._element;
    /**
     * Provided for backward compatibility, use Chart.plugins instead
     * @namespace Chart.pluginService
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */

    Chart.pluginService = Chart.plugins;
    /**
     * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
     * effect, instead simply create/register plugins via plain JavaScript objects.
     * @interface Chart.PluginBase
     * @deprecated since version 2.5.0
     * @todo remove at version 3
     * @private
     */

    Chart.PluginBase = Chart.Element.extend({});
    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */

    Chart.canvasHelpers = Chart.helpers.canvas;
    /**
     * Provided for backward compatibility, use Chart.layouts instead.
     * @namespace Chart.layoutService
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */

    Chart.layoutService = Chart.layouts;
  }, {
    "./charts/Chart.Bar": 71,
    "./charts/Chart.Bubble": 72,
    "./charts/Chart.Doughnut": 73,
    "./charts/Chart.Line": 74,
    "./charts/Chart.PolarArea": 75,
    "./charts/Chart.Radar": 76,
    "./charts/Chart.Scatter": 77,
    "./controllers/controller.bar": 78,
    "./controllers/controller.bubble": 79,
    "./controllers/controller.doughnut": 80,
    "./controllers/controller.line": 81,
    "./controllers/controller.polarArea": 82,
    "./controllers/controller.radar": 83,
    "./controllers/controller.scatter": 84,
    "./core/core": 93,
    "./core/core.animation": 85,
    "./core/core.animations": 86,
    "./core/core.controller": 87,
    "./core/core.datasetController": 88,
    "./core/core.defaults": 89,
    "./core/core.element": 90,
    "./core/core.helpers": 91,
    "./core/core.interaction": 92,
    "./core/core.layouts": 94,
    "./core/core.plugins": 95,
    "./core/core.scale": 96,
    "./core/core.scaleService": 97,
    "./core/core.ticks": 98,
    "./core/core.tooltip": 99,
    "./elements/index": 104,
    "./helpers/index": 109,
    "./platforms/platform": 112,
    "./plugins": 113,
    "./scales/scale.category": 117,
    "./scales/scale.linear": 118,
    "./scales/scale.linearbase": 119,
    "./scales/scale.logarithmic": 120,
    "./scales/scale.radialLinear": 121,
    "./scales/scale.time": 122
  }],
  71: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Bar = function (context, config) {
        config.type = 'bar';
        return new Chart(context, config);
      };
    };
  }, {}],
  72: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Bubble = function (context, config) {
        config.type = 'bubble';
        return new Chart(context, config);
      };
    };
  }, {}],
  73: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Doughnut = function (context, config) {
        config.type = 'doughnut';
        return new Chart(context, config);
      };
    };
  }, {}],
  74: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Line = function (context, config) {
        config.type = 'line';
        return new Chart(context, config);
      };
    };
  }, {}],
  75: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.PolarArea = function (context, config) {
        config.type = 'polarArea';
        return new Chart(context, config);
      };
    };
  }, {}],
  76: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Radar = function (context, config) {
        config.type = 'radar';
        return new Chart(context, config);
      };
    };
  }, {}],
  77: [function (require, module, exports) {
    'use strict';

    module.exports = function (Chart) {
      Chart.Scatter = function (context, config) {
        config.type = 'scatter';
        return new Chart(context, config);
      };
    };
  }, {}],
  78: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('bar', {
      hover: {
        mode: 'label'
      },
      scales: {
        xAxes: [{
          type: 'category',
          // Specific to Bar Controller
          categoryPercentage: 0.8,
          barPercentage: 0.9,
          // offset settings
          offset: true,
          // grid line settings
          gridLines: {
            offsetGridLines: true
          }
        }],
        yAxes: [{
          type: 'linear'
        }]
      }
    });

    defaults._set('horizontalBar', {
      hover: {
        mode: 'index',
        axis: 'y'
      },
      scales: {
        xAxes: [{
          type: 'linear',
          position: 'bottom'
        }],
        yAxes: [{
          position: 'left',
          type: 'category',
          // Specific to Horizontal Bar Controller
          categoryPercentage: 0.8,
          barPercentage: 0.9,
          // offset settings
          offset: true,
          // grid line settings
          gridLines: {
            offsetGridLines: true
          }
        }]
      },
      elements: {
        rectangle: {
          borderSkipped: 'left'
        }
      },
      tooltips: {
        callbacks: {
          title: function title(item, data) {
            // Pick first xLabel for now
            var title = '';

            if (item.length > 0) {
              if (item[0].yLabel) {
                title = item[0].yLabel;
              } else if (data.labels.length > 0 && item[0].index < data.labels.length) {
                title = data.labels[item[0].index];
              }
            }

            return title;
          },
          label: function label(item, data) {
            var datasetLabel = data.datasets[item.datasetIndex].label || '';
            return datasetLabel + ': ' + item.xLabel;
          }
        },
        mode: 'index',
        axis: 'y'
      }
    });
    /**
     * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
     * @private
     */


    function computeMinSampleSize(scale, pixels) {
      var min = scale.isHorizontal() ? scale.width : scale.height;
      var ticks = scale.getTicks();
      var prev, curr, i, ilen;

      for (i = 1, ilen = pixels.length; i < ilen; ++i) {
        min = Math.min(min, pixels[i] - pixels[i - 1]);
      }

      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        curr = scale.getPixelForTick(i);
        min = i > 0 ? Math.min(min, curr - prev) : min;
        prev = curr;
      }

      return min;
    }
    /**
     * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
     * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
     * mode currently always generates bars equally sized (until we introduce scriptable options?).
     * @private
     */


    function computeFitCategoryTraits(index, ruler, options) {
      var thickness = options.barThickness;
      var count = ruler.stackCount;
      var curr = ruler.pixels[index];
      var size, ratio;

      if (helpers.isNullOrUndef(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
      } else {
        // When bar thickness is enforced, category and bar percentages are ignored.
        // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
        // and deprecate barPercentage since this value is ignored when thickness is absolute.
        size = thickness * count;
        ratio = 1;
      }

      return {
        chunk: size / count,
        ratio: ratio,
        start: curr - size / 2
      };
    }
    /**
     * Computes an "optimal" category that globally arranges bars side by side (no gap when
     * percentage options are 1), based on the previous and following categories. This mode
     * generates bars with different widths when data are not evenly spaced.
     * @private
     */


    function computeFlexCategoryTraits(index, ruler, options) {
      var pixels = ruler.pixels;
      var curr = pixels[index];
      var prev = index > 0 ? pixels[index - 1] : null;
      var next = index < pixels.length - 1 ? pixels[index + 1] : null;
      var percent = options.categoryPercentage;
      var start, size;

      if (prev === null) {
        // first data: its size is double based on the next point or,
        // if it's also the last data, we use the scale end extremity.
        prev = curr - (next === null ? ruler.end - curr : next - curr);
      }

      if (next === null) {
        // last data: its size is also double based on the previous point.
        next = curr + curr - prev;
      }

      start = curr - (curr - prev) / 2 * percent;
      size = (next - prev) / 2 * percent;
      return {
        chunk: size / ruler.stackCount,
        ratio: options.barPercentage,
        start: start
      };
    }

    module.exports = function (Chart) {
      Chart.controllers.bar = Chart.DatasetController.extend({
        dataElementType: elements.Rectangle,
        initialize: function initialize() {
          var me = this;
          var meta;
          Chart.DatasetController.prototype.initialize.apply(me, arguments);
          meta = me.getMeta();
          meta.stack = me.getDataset().stack;
          meta.bar = true;
        },
        update: function update(reset) {
          var me = this;
          var rects = me.getMeta().data;
          var i, ilen;
          me._ruler = me.getRuler();

          for (i = 0, ilen = rects.length; i < ilen; ++i) {
            me.updateElement(rects[i], i, reset);
          }
        },
        updateElement: function updateElement(rectangle, index, reset) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          var custom = rectangle.custom || {};
          var rectangleOptions = chart.options.elements.rectangle;
          rectangle._xScale = me.getScaleForId(meta.xAxisID);
          rectangle._yScale = me.getScaleForId(meta.yAxisID);
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          rectangle._model = {
            datasetLabel: dataset.label,
            label: chart.data.labels[index],
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleOptions.borderSkipped,
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.backgroundColor, index, rectangleOptions.backgroundColor),
            borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.borderColor, index, rectangleOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.borderWidth, index, rectangleOptions.borderWidth)
          };
          me.updateElementGeometry(rectangle, index, reset);
          rectangle.pivot();
        },

        /**
         * @private
         */
        updateElementGeometry: function updateElementGeometry(rectangle, index, reset) {
          var me = this;
          var model = rectangle._model;
          var vscale = me.getValueScale();
          var base = vscale.getBasePixel();
          var horizontal = vscale.isHorizontal();
          var ruler = me._ruler || me.getRuler();
          var vpixels = me.calculateBarValuePixels(me.index, index);
          var ipixels = me.calculateBarIndexPixels(me.index, index, ruler);
          model.horizontal = horizontal;
          model.base = reset ? base : vpixels.base;
          model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
          model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
          model.height = horizontal ? ipixels.size : undefined;
          model.width = horizontal ? undefined : ipixels.size;
        },

        /**
         * @private
         */
        getValueScaleId: function getValueScaleId() {
          return this.getMeta().yAxisID;
        },

        /**
         * @private
         */
        getIndexScaleId: function getIndexScaleId() {
          return this.getMeta().xAxisID;
        },

        /**
         * @private
         */
        getValueScale: function getValueScale() {
          return this.getScaleForId(this.getValueScaleId());
        },

        /**
         * @private
         */
        getIndexScale: function getIndexScale() {
          return this.getScaleForId(this.getIndexScaleId());
        },

        /**
         * Returns the stacks based on groups and bar visibility.
         * @param {Number} [last] - The dataset index
         * @returns {Array} The stack list
         * @private
         */
        _getStacks: function _getStacks(last) {
          var me = this;
          var chart = me.chart;
          var scale = me.getIndexScale();
          var stacked = scale.options.stacked;
          var ilen = last === undefined ? chart.data.datasets.length : last + 1;
          var stacks = [];
          var i, meta;

          for (i = 0; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i);

            if (meta.bar && chart.isDatasetVisible(i) && (stacked === false || stacked === true && stacks.indexOf(meta.stack) === -1 || stacked === undefined && (meta.stack === undefined || stacks.indexOf(meta.stack) === -1))) {
              stacks.push(meta.stack);
            }
          }

          return stacks;
        },

        /**
         * Returns the effective number of stacks based on groups and bar visibility.
         * @private
         */
        getStackCount: function getStackCount() {
          return this._getStacks().length;
        },

        /**
         * Returns the stack index for the given dataset based on groups and bar visibility.
         * @param {Number} [datasetIndex] - The dataset index
         * @param {String} [name] - The stack name to find
         * @returns {Number} The stack index
         * @private
         */
        getStackIndex: function getStackIndex(datasetIndex, name) {
          var stacks = this._getStacks(datasetIndex);

          var index = name !== undefined ? stacks.indexOf(name) : -1; // indexOf returns -1 if element is not present

          return index === -1 ? stacks.length - 1 : index;
        },

        /**
         * @private
         */
        getRuler: function getRuler() {
          var me = this;
          var scale = me.getIndexScale();
          var stackCount = me.getStackCount();
          var datasetIndex = me.index;
          var isHorizontal = scale.isHorizontal();
          var start = isHorizontal ? scale.left : scale.top;
          var end = start + (isHorizontal ? scale.width : scale.height);
          var pixels = [];
          var i, ilen, min;

          for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
            pixels.push(scale.getPixelForValue(null, i, datasetIndex));
          }

          min = helpers.isNullOrUndef(scale.options.barThickness) ? computeMinSampleSize(scale, pixels) : -1;
          return {
            min: min,
            pixels: pixels,
            start: start,
            end: end,
            stackCount: stackCount,
            scale: scale
          };
        },

        /**
         * Note: pixel values are not clamped to the scale area.
         * @private
         */
        calculateBarValuePixels: function calculateBarValuePixels(datasetIndex, index) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var scale = me.getValueScale();
          var datasets = chart.data.datasets;
          var value = scale.getRightValue(datasets[datasetIndex].data[index]);
          var stacked = scale.options.stacked;
          var stack = meta.stack;
          var start = 0;
          var i, imeta, ivalue, base, head, size;

          if (stacked || stacked === undefined && stack !== undefined) {
            for (i = 0; i < datasetIndex; ++i) {
              imeta = chart.getDatasetMeta(i);

              if (imeta.bar && imeta.stack === stack && imeta.controller.getValueScaleId() === scale.id && chart.isDatasetVisible(i)) {
                ivalue = scale.getRightValue(datasets[i].data[index]);

                if (value < 0 && ivalue < 0 || value >= 0 && ivalue > 0) {
                  start += ivalue;
                }
              }
            }
          }

          base = scale.getPixelForValue(start);
          head = scale.getPixelForValue(start + value);
          size = (head - base) / 2;
          return {
            size: size,
            base: base,
            head: head,
            center: head + size / 2
          };
        },

        /**
         * @private
         */
        calculateBarIndexPixels: function calculateBarIndexPixels(datasetIndex, index, ruler) {
          var me = this;
          var options = ruler.scale.options;
          var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options) : computeFitCategoryTraits(index, ruler, options);
          var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
          var center = range.start + range.chunk * stackIndex + range.chunk / 2;
          var size = Math.min(helpers.valueOrDefault(options.maxBarThickness, Infinity), range.chunk * range.ratio);
          return {
            base: center - size / 2,
            head: center + size / 2,
            center: center,
            size: size
          };
        },
        draw: function draw() {
          var me = this;
          var chart = me.chart;
          var scale = me.getValueScale();
          var rects = me.getMeta().data;
          var dataset = me.getDataset();
          var ilen = rects.length;
          var i = 0;
          helpers.canvas.clipArea(chart.ctx, chart.chartArea);

          for (; i < ilen; ++i) {
            if (!isNaN(scale.getRightValue(dataset.data[i]))) {
              rects[i].draw();
            }
          }

          helpers.canvas.unclipArea(chart.ctx);
        }
      });
      Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
        /**
         * @private
         */
        getValueScaleId: function getValueScaleId() {
          return this.getMeta().xAxisID;
        },

        /**
         * @private
         */
        getIndexScaleId: function getIndexScaleId() {
          return this.getMeta().yAxisID;
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  79: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('bubble', {
      hover: {
        mode: 'single'
      },
      scales: {
        xAxes: [{
          type: 'linear',
          // bubble should probably use a linear scale by default
          position: 'bottom',
          id: 'x-axis-0' // need an ID so datasets can reference the scale

        }],
        yAxes: [{
          type: 'linear',
          position: 'left',
          id: 'y-axis-0'
        }]
      },
      tooltips: {
        callbacks: {
          title: function title() {
            // Title doesn't make sense for scatter since we format the data as a point
            return '';
          },
          label: function label(item, data) {
            var datasetLabel = data.datasets[item.datasetIndex].label || '';
            var dataPoint = data.datasets[item.datasetIndex].data[item.index];
            return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
          }
        }
      }
    });

    module.exports = function (Chart) {
      Chart.controllers.bubble = Chart.DatasetController.extend({
        /**
         * @protected
         */
        dataElementType: elements.Point,

        /**
         * @protected
         */
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data; // Update Points

          helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
          });
        },

        /**
         * @protected
         */
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);

          var options = me._resolveElementOptions(point, index);

          var data = me.getDataset().data[index];
          var dsIndex = me.index;
          var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(_typeof2(data) === 'object' ? data : NaN, index, dsIndex);
          var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options;
          point._datasetIndex = dsIndex;
          point._index = index;
          point._model = {
            backgroundColor: options.backgroundColor,
            borderColor: options.borderColor,
            borderWidth: options.borderWidth,
            hitRadius: options.hitRadius,
            pointStyle: options.pointStyle,
            rotation: options.rotation,
            radius: reset ? 0 : options.radius,
            skip: custom.skip || isNaN(x) || isNaN(y),
            x: x,
            y: y
          };
          point.pivot();
        },

        /**
         * @protected
         */
        setHoverStyle: function setHoverStyle(point) {
          var model = point._model;
          var options = point._options;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = helpers.valueOrDefault(options.hoverBackgroundColor, helpers.getHoverColor(options.backgroundColor));
          model.borderColor = helpers.valueOrDefault(options.hoverBorderColor, helpers.getHoverColor(options.borderColor));
          model.borderWidth = helpers.valueOrDefault(options.hoverBorderWidth, options.borderWidth);
          model.radius = options.radius + options.hoverRadius;
        },

        /**
         * @private
         */
        _resolveElementOptions: function _resolveElementOptions(point, index) {
          var me = this;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var dataset = datasets[me.index];
          var custom = point.custom || {};
          var options = chart.options.elements.point;
          var resolve = helpers.options.resolve;
          var data = dataset.data[index];
          var values = {};
          var i, ilen, key; // Scriptable options

          var context = {
            chart: chart,
            dataIndex: index,
            dataset: dataset,
            datasetIndex: me.index
          };
          var keys = ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'];

          for (i = 0, ilen = keys.length; i < ilen; ++i) {
            key = keys[i];
            values[key] = resolve([custom[key], dataset[key], options[key]], context, index);
          } // Custom radius resolution


          values.radius = resolve([custom.radius, data ? data.r : undefined, dataset.radius, options.radius], context, index);
          return values;
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  80: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('doughnut', {
      animation: {
        // Boolean - Whether we animate the rotation of the Doughnut
        animateRotate: true,
        // Boolean - Whether we animate scaling the Doughnut from the centre
        animateScale: false
      },
      hover: {
        mode: 'single'
      },
      legendCallback: function legendCallback(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;

        if (datasets.length) {
          for (var i = 0; i < datasets[0].data.length; ++i) {
            text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');

            if (labels[i]) {
              text.push(labels[i]);
            }

            text.push('</li>');
          }
        }

        text.push('</ul>');
        return text.join('');
      },
      legend: {
        labels: {
          generateLabels: function generateLabels(chart) {
            var data = chart.data;

            if (data.labels.length && data.datasets.length) {
              return data.labels.map(function (label, i) {
                var meta = chart.getDatasetMeta(0);
                var ds = data.datasets[0];
                var arc = meta.data[i];
                var custom = arc && arc.custom || {};
                var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                var arcOpts = chart.options.elements.arc;
                var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                return {
                  text: label,
                  fillStyle: fill,
                  strokeStyle: stroke,
                  lineWidth: bw,
                  hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                  // Extra data used for toggling the correct item
                  index: i
                };
              });
            }

            return [];
          }
        },
        onClick: function onClick(e, legendItem) {
          var index = legendItem.index;
          var chart = this.chart;
          var i, ilen, meta;

          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i); // toggle visibility of index if exists

            if (meta.data[index]) {
              meta.data[index].hidden = !meta.data[index].hidden;
            }
          }

          chart.update();
        }
      },
      // The percentage of the chart that we cut out of the middle.
      cutoutPercentage: 50,
      // The rotation of the chart, where the first data arc begins.
      rotation: Math.PI * -0.5,
      // The total circumference of the chart.
      circumference: Math.PI * 2.0,
      // Need to override these to give a nice default
      tooltips: {
        callbacks: {
          title: function title() {
            return '';
          },
          label: function label(tooltipItem, data) {
            var dataLabel = data.labels[tooltipItem.index];
            var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

            if (helpers.isArray(dataLabel)) {
              // show value on first line of multiline label
              // need to clone because we are changing the value
              dataLabel = dataLabel.slice();
              dataLabel[0] += value;
            } else {
              dataLabel += value;
            }

            return dataLabel;
          }
        }
      }
    });

    defaults._set('pie', helpers.clone(defaults.doughnut));

    defaults._set('pie', {
      cutoutPercentage: 0
    });

    module.exports = function (Chart) {
      Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers.noop,
        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
        getRingIndex: function getRingIndex(datasetIndex) {
          var ringIndex = 0;

          for (var j = 0; j < datasetIndex; ++j) {
            if (this.chart.isDatasetVisible(j)) {
              ++ringIndex;
            }
          }

          return ringIndex;
        },
        update: function update(reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var arcOpts = opts.elements.arc;
          var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;
          var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;
          var minSize = Math.min(availableWidth, availableHeight);
          var offset = {
            x: 0,
            y: 0
          };
          var meta = me.getMeta();
          var cutoutPercentage = opts.cutoutPercentage;
          var circumference = opts.circumference; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc

          if (circumference < Math.PI * 2.0) {
            var startAngle = opts.rotation % (Math.PI * 2.0);
            startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
            var endAngle = startAngle + circumference;
            var start = {
              x: Math.cos(startAngle),
              y: Math.sin(startAngle)
            };
            var end = {
              x: Math.cos(endAngle),
              y: Math.sin(endAngle)
            };
            var contains0 = startAngle <= 0 && endAngle >= 0 || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;
            var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
            var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
            var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
            var cutout = cutoutPercentage / 100.0;
            var min = {
              x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
              y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
            };
            var max = {
              x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
              y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
            };
            var size = {
              width: (max.x - min.x) * 0.5,
              height: (max.y - min.y) * 0.5
            };
            minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
            offset = {
              x: (max.x + min.x) * -0.5,
              y: (max.y + min.y) * -0.5
            };
          }

          chart.borderWidth = me.getMaxBorderWidth(meta.data);
          chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
          chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          chart.offsetX = offset.x * chart.outerRadius;
          chart.offsetY = offset.y * chart.outerRadius;
          meta.total = me.calculateTotal();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
          me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
          helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
          });
        },
        updateElement: function updateElement(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var animationOpts = opts.animation;
          var centerX = (chartArea.left + chartArea.right) / 2;
          var centerY = (chartArea.top + chartArea.bottom) / 2;
          var startAngle = opts.rotation; // non reset case handled later

          var endAngle = opts.rotation; // non reset case handled later

          var dataset = me.getDataset();
          var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI));
          var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
          var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
          var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            // Desired view properties
            _model: {
              x: centerX + chart.offsetX,
              y: centerY + chart.offsetY,
              startAngle: startAngle,
              endAngle: endAngle,
              circumference: circumference,
              outerRadius: outerRadius,
              innerRadius: innerRadius,
              label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
          });
          var model = arc._model; // Resets the visual styles

          var custom = arc.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var elementOpts = this.chart.options.elements.arc;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth); // Set correct angles if not resetting

          if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
              model.startAngle = opts.rotation;
            } else {
              model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }

            model.endAngle = model.startAngle + model.circumference;
          }

          arc.pivot();
        },
        calculateTotal: function calculateTotal() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var total = 0;
          var value;
          helpers.each(meta.data, function (element, index) {
            value = dataset.data[index];

            if (!isNaN(value) && !element.hidden) {
              total += Math.abs(value);
            }
          });
          /* if (total === 0) {
          	total = NaN;
          }*/

          return total;
        },
        calculateCircumference: function calculateCircumference(value) {
          var total = this.getMeta().total;

          if (total > 0 && !isNaN(value)) {
            return Math.PI * 2.0 * (Math.abs(value) / total);
          }

          return 0;
        },
        // gets the max border or hover width to properly scale pie charts
        getMaxBorderWidth: function getMaxBorderWidth(arcs) {
          var max = 0;
          var index = this.index;
          var length = arcs.length;
          var borderWidth;
          var hoverWidth;

          for (var i = 0; i < length; i++) {
            borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;
            hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
            max = borderWidth > max ? borderWidth : max;
            max = hoverWidth > max ? hoverWidth : max;
          }

          return max;
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  81: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('line', {
      showLines: true,
      spanGaps: false,
      hover: {
        mode: 'label'
      },
      scales: {
        xAxes: [{
          type: 'category',
          id: 'x-axis-0'
        }],
        yAxes: [{
          type: 'linear',
          id: 'y-axis-0'
        }]
      }
    });

    module.exports = function (Chart) {
      function lineEnabled(dataset, options) {
        return helpers.valueOrDefault(dataset.showLine, options.showLines);
      }

      Chart.controllers.line = Chart.DatasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var options = me.chart.options;
          var lineElementOptions = options.elements.line;
          var scale = me.getScaleForId(meta.yAxisID);
          var i, ilen, custom;
          var dataset = me.getDataset();
          var showLine = lineEnabled(dataset, options); // Update Line

          if (showLine) {
            custom = line.custom || {}; // Compatibility: If the properties are defined with only the old name, use those values

            if (dataset.tension !== undefined && dataset.lineTension === undefined) {
              dataset.lineTension = dataset.tension;
            } // Utility


            line._scale = scale;
            line._datasetIndex = me.index; // Data

            line._children = points; // Model

            line._model = {
              // Appearance
              // The default behavior of lines is to break at null values, according
              // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
              // This option gives lines the ability to span gaps
              spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
              fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
              steppedLine: custom.steppedLine ? custom.steppedLine : helpers.valueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
              cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.valueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode)
            };
            line.pivot();
          } // Update Points


          for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
          }

          if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
          } // Now pivot the point for animation


          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
          }
        },
        getPointBackgroundColor: function getPointBackgroundColor(point, index) {
          var backgroundColor = this.chart.options.elements.point.backgroundColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (custom.backgroundColor) {
            backgroundColor = custom.backgroundColor;
          } else if (dataset.pointBackgroundColor) {
            backgroundColor = helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
          } else if (dataset.backgroundColor) {
            backgroundColor = dataset.backgroundColor;
          }

          return backgroundColor;
        },
        getPointBorderColor: function getPointBorderColor(point, index) {
          var borderColor = this.chart.options.elements.point.borderColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (custom.borderColor) {
            borderColor = custom.borderColor;
          } else if (dataset.pointBorderColor) {
            borderColor = helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
          } else if (dataset.borderColor) {
            borderColor = dataset.borderColor;
          }

          return borderColor;
        },
        getPointBorderWidth: function getPointBorderWidth(point, index) {
          var borderWidth = this.chart.options.elements.point.borderWidth;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (!isNaN(custom.borderWidth)) {
            borderWidth = custom.borderWidth;
          } else if (!isNaN(dataset.pointBorderWidth) || helpers.isArray(dataset.pointBorderWidth)) {
            borderWidth = helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
          } else if (!isNaN(dataset.borderWidth)) {
            borderWidth = dataset.borderWidth;
          }

          return borderWidth;
        },
        getPointRotation: function getPointRotation(point, index) {
          var pointRotation = this.chart.options.elements.point.rotation;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (!isNaN(custom.rotation)) {
            pointRotation = custom.rotation;
          } else if (!isNaN(dataset.pointRotation) || helpers.isArray(dataset.pointRotation)) {
            pointRotation = helpers.valueAtIndexOrDefault(dataset.pointRotation, index, pointRotation);
          }

          return pointRotation;
        },
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var datasetIndex = me.index;
          var value = dataset.data[index];
          var yScale = me.getScaleForId(meta.yAxisID);
          var xScale = me.getScaleForId(meta.xAxisID);
          var pointOptions = me.chart.options.elements.point;
          var x, y; // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
          }

          if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
            dataset.pointHitRadius = dataset.hitRadius;
          }

          x = xScale.getPixelForValue(_typeof2(value) === 'object' ? value : NaN, index, datasetIndex);
          y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility

          point._xScale = xScale;
          point._yScale = yScale;
          point._datasetIndex = datasetIndex;
          point._index = index; // Desired view properties

          point._model = {
            x: x,
            y: y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            // Appearance
            radius: custom.radius || helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
            pointStyle: custom.pointStyle || helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
            rotation: me.getPointRotation(point, index),
            backgroundColor: me.getPointBackgroundColor(point, index),
            borderColor: me.getPointBorderColor(point, index),
            borderWidth: me.getPointBorderWidth(point, index),
            tension: meta.dataset._model ? meta.dataset._model.tension : 0,
            steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
            // Tooltip
            hitRadius: custom.hitRadius || helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
          };
        },
        calculatePointY: function calculatePointY(value, index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var sumPos = 0;
          var sumNeg = 0;
          var i, ds, dsMeta;

          if (yScale.options.stacked) {
            for (i = 0; i < datasetIndex; i++) {
              ds = chart.data.datasets[i];
              dsMeta = chart.getDatasetMeta(i);

              if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));

                if (stackedRightValue < 0) {
                  sumNeg += stackedRightValue || 0;
                } else {
                  sumPos += stackedRightValue || 0;
                }
              }
            }

            var rightValue = Number(yScale.getRightValue(value));

            if (rightValue < 0) {
              return yScale.getPixelForValue(sumNeg + rightValue);
            }

            return yScale.getPixelForValue(sumPos + rightValue);
          }

          return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function updateBezierControlPoints() {
          var me = this;
          var meta = me.getMeta();
          var area = me.chart.chartArea;
          var points = meta.data || [];
          var i, ilen, point, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used

          if (meta.dataset._model.spanGaps) {
            points = points.filter(function (pt) {
              return !pt._model.skip;
            });
          }

          function capControlPoint(pt, min, max) {
            return Math.max(Math.min(pt, max), min);
          }

          if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
            helpers.splineCurveMonotone(points);
          } else {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              point = points[i];
              model = point._model;
              controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
              model.controlPointPreviousX = controlPoints.previous.x;
              model.controlPointPreviousY = controlPoints.previous.y;
              model.controlPointNextX = controlPoints.next.x;
              model.controlPointNextY = controlPoints.next.y;
            }
          }

          if (me.chart.options.elements.line.capBezierPoints) {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
            }
          }
        },
        draw: function draw() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var points = meta.data || [];
          var area = chart.chartArea;
          var ilen = points.length;
          var halfBorderWidth;
          var i = 0;

          if (lineEnabled(me.getDataset(), chart.options)) {
            halfBorderWidth = (meta.dataset._model.borderWidth || 0) / 2;
            helpers.canvas.clipArea(chart.ctx, {
              left: area.left,
              right: area.right,
              top: area.top - halfBorderWidth,
              bottom: area.bottom + halfBorderWidth
            });
            meta.dataset.draw();
            helpers.canvas.unclipArea(chart.ctx);
          } // Draw the points


          for (; i < ilen; ++i) {
            points[i].draw(area);
          }
        },
        setHoverStyle: function setHoverStyle(element) {
          // Point
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var model = element._model;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = custom.hoverBackgroundColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth || helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
          model.radius = custom.hoverRadius || helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  82: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('polarArea', {
      scale: {
        type: 'radialLinear',
        angleLines: {
          display: false
        },
        gridLines: {
          circular: true
        },
        pointLabels: {
          display: false
        },
        ticks: {
          beginAtZero: true
        }
      },
      // Boolean - Whether to animate the rotation of the chart
      animation: {
        animateRotate: true,
        animateScale: true
      },
      startAngle: -0.5 * Math.PI,
      legendCallback: function legendCallback(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;

        if (datasets.length) {
          for (var i = 0; i < datasets[0].data.length; ++i) {
            text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');

            if (labels[i]) {
              text.push(labels[i]);
            }

            text.push('</li>');
          }
        }

        text.push('</ul>');
        return text.join('');
      },
      legend: {
        labels: {
          generateLabels: function generateLabels(chart) {
            var data = chart.data;

            if (data.labels.length && data.datasets.length) {
              return data.labels.map(function (label, i) {
                var meta = chart.getDatasetMeta(0);
                var ds = data.datasets[0];
                var arc = meta.data[i];
                var custom = arc.custom || {};
                var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
                var arcOpts = chart.options.elements.arc;
                var fill = custom.backgroundColor ? custom.backgroundColor : valueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                var stroke = custom.borderColor ? custom.borderColor : valueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                var bw = custom.borderWidth ? custom.borderWidth : valueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                return {
                  text: label,
                  fillStyle: fill,
                  strokeStyle: stroke,
                  lineWidth: bw,
                  hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                  // Extra data used for toggling the correct item
                  index: i
                };
              });
            }

            return [];
          }
        },
        onClick: function onClick(e, legendItem) {
          var index = legendItem.index;
          var chart = this.chart;
          var i, ilen, meta;

          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            meta = chart.getDatasetMeta(i);
            meta.data[index].hidden = !meta.data[index].hidden;
          }

          chart.update();
        }
      },
      // Need to override these to give a nice default
      tooltips: {
        callbacks: {
          title: function title() {
            return '';
          },
          label: function label(item, data) {
            return data.labels[item.index] + ': ' + item.yLabel;
          }
        }
      }
    });

    module.exports = function (Chart) {
      Chart.controllers.polarArea = Chart.DatasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers.noop,
        update: function update(reset) {
          var me = this;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          var start = me.chart.options.startAngle || 0;
          var starts = me._starts = [];
          var angles = me._angles = [];
          var i, ilen, angle;

          me._updateRadius();

          meta.count = me.countVisibleElements();

          for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
            starts[i] = start;
            angle = me._computeAngle(i);
            angles[i] = angle;
            start += angle;
          }

          helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
          });
        },

        /**
         * @private
         */
        _updateRadius: function _updateRadius() {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var arcOpts = opts.elements.arc;
          var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
          chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
          me.innerRadius = me.outerRadius - chart.radiusLength;
        },
        updateElement: function updateElement(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var opts = chart.options;
          var animationOpts = opts.animation;
          var scale = chart.scale;
          var labels = chart.data.labels;
          var centerX = scale.xCenter;
          var centerY = scale.yCenter; // var negHalfPI = -0.5 * Math.PI;

          var datasetStartAngle = opts.startAngle;
          var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          var startAngle = me._starts[index];
          var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
          var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: centerX,
              y: centerY,
              innerRadius: 0,
              outerRadius: reset ? resetRadius : distance,
              startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
              endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
              label: helpers.valueAtIndexOrDefault(labels, index, labels[index])
            }
          }); // Apply border and fill style

          var elementOpts = this.chart.options.elements.arc;
          var custom = arc.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var model = arc._model;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
          arc.pivot();
        },
        countVisibleElements: function countVisibleElements() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var count = 0;
          helpers.each(meta.data, function (element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
              count++;
            }
          });
          return count;
        },

        /**
         * @private
         */
        _computeAngle: function _computeAngle(index) {
          var me = this;
          var count = this.getMeta().count;
          var dataset = me.getDataset();
          var meta = me.getMeta();

          if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
            return 0;
          } // Scriptable options


          var context = {
            chart: me.chart,
            dataIndex: index,
            dataset: dataset,
            datasetIndex: me.index
          };
          return helpers.options.resolve([me.chart.options.elements.arc.angle, 2 * Math.PI / count], context, index);
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  83: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('radar', {
      scale: {
        type: 'radialLinear'
      },
      elements: {
        line: {
          tension: 0 // no bezier in radar

        }
      }
    });

    module.exports = function (Chart) {
      Chart.controllers.radar = Chart.DatasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        linkScales: helpers.noop,
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data;
          var custom = line.custom || {};
          var dataset = me.getDataset();
          var lineElementOptions = me.chart.options.elements.line;
          var scale = me.chart.scale; // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.tension !== undefined && dataset.lineTension === undefined) {
            dataset.lineTension = dataset.tension;
          }

          helpers.extend(meta.dataset, {
            // Utility
            _datasetIndex: me.index,
            _scale: scale,
            // Data
            _children: points,
            _loop: true,
            // Model
            _model: {
              // Appearance
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle
            }
          });
          meta.dataset.pivot(); // Update Points

          helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
          }, me); // Update bezier control points

          me.updateBezierControlPoints();
        },
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var scale = me.chart.scale;
          var pointElementOptions = me.chart.options.elements.point;
          var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]); // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
          }

          if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
            dataset.pointHitRadius = dataset.hitRadius;
          }

          helpers.extend(point, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: reset ? scale.xCenter : pointPosition.x,
              // value not used in dataset scale, but we want a consistent API between scales
              y: reset ? scale.yCenter : pointPosition.y,
              // Appearance
              tension: custom.tension ? custom.tension : helpers.valueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
              radius: custom.radius ? custom.radius : helpers.valueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.valueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
              borderColor: custom.borderColor ? custom.borderColor : helpers.valueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
              borderWidth: custom.borderWidth ? custom.borderWidth : helpers.valueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
              pointStyle: custom.pointStyle ? custom.pointStyle : helpers.valueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
              rotation: custom.rotation ? custom.rotation : helpers.valueAtIndexOrDefault(dataset.pointRotation, index, pointElementOptions.rotation),
              // Tooltip
              hitRadius: custom.hitRadius ? custom.hitRadius : helpers.valueAtIndexOrDefault(dataset.pointHitRadius, index, pointElementOptions.hitRadius)
            }
          });
          point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
        },
        updateBezierControlPoints: function updateBezierControlPoints() {
          var chartArea = this.chart.chartArea;
          var meta = this.getMeta();
          helpers.each(meta.data, function (point, index) {
            var model = point._model;
            var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph

            model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
            model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
            model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
            model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top); // Now pivot the point for animation

            point.pivot();
          });
        },
        setHoverStyle: function setHoverStyle(point) {
          // Point
          var dataset = this.chart.data.datasets[point._datasetIndex];
          var custom = point.custom || {};
          var index = point._index;
          var model = point._model;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.valueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.valueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        }
      });
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  84: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    defaults._set('scatter', {
      hover: {
        mode: 'single'
      },
      scales: {
        xAxes: [{
          id: 'x-axis-1',
          // need an ID so datasets can reference the scale
          type: 'linear',
          // scatter should not use a category axis
          position: 'bottom'
        }],
        yAxes: [{
          id: 'y-axis-1',
          type: 'linear',
          position: 'left'
        }]
      },
      showLines: false,
      tooltips: {
        callbacks: {
          title: function title() {
            return ''; // doesn't make sense for scatter since data are formatted as a point
          },
          label: function label(item) {
            return '(' + item.xLabel + ', ' + item.yLabel + ')';
          }
        }
      }
    });

    module.exports = function (Chart) {
      // Scatter charts use line controllers
      Chart.controllers.scatter = Chart.controllers.line;
    };
  }, {
    "../core/core.defaults": 89
  }],
  85: [function (require, module, exports) {
    'use strict';

    var Element = require('./core.element');

    var exports = module.exports = Element.extend({
      chart: null,
      // the animation associated chart instance
      currentStep: 0,
      // the current animation step
      numSteps: 60,
      // default number of steps
      easing: '',
      // the easing to use for this animation
      render: null,
      // render function used by the animation service
      onAnimationProgress: null,
      // user specified callback to fire on each step of the animation
      onAnimationComplete: null // user specified callback to fire when the animation finishes

    }); // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.Animation instead
     * @prop Chart.Animation#animationObject
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */

    Object.defineProperty(exports.prototype, 'animationObject', {
      get: function get() {
        return this;
      }
    });
    /**
     * Provided for backward compatibility, use Chart.Animation#chart instead
     * @prop Chart.Animation#chartInstance
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */

    Object.defineProperty(exports.prototype, 'chartInstance', {
      get: function get() {
        return this.chart;
      },
      set: function set(value) {
        this.chart = value;
      }
    });
  }, {
    "./core.element": 90
  }],
  86: [function (require, module, exports) {
    /* global window: false */
    'use strict';

    var defaults = require('./core.defaults');

    var helpers = require('../helpers/index');

    defaults._set('global', {
      animation: {
        duration: 1000,
        easing: 'easeOutQuart',
        onProgress: helpers.noop,
        onComplete: helpers.noop
      }
    });

    module.exports = {
      frameDuration: 17,
      animations: [],
      dropFrames: 0,
      request: null,

      /**
       * @param {Chart} chart - The chart to animate.
       * @param {Chart.Animation} animation - The animation that we will animate.
       * @param {Number} duration - The animation duration in ms.
       * @param {Boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
       */
      addAnimation: function addAnimation(chart, animation, duration, lazy) {
        var animations = this.animations;
        var i, ilen;
        animation.chart = chart;

        if (!lazy) {
          chart.animating = true;
        }

        for (i = 0, ilen = animations.length; i < ilen; ++i) {
          if (animations[i].chart === chart) {
            animations[i] = animation;
            return;
          }
        }

        animations.push(animation); // If there are no animations queued, manually kickstart a digest, for lack of a better word

        if (animations.length === 1) {
          this.requestAnimationFrame();
        }
      },
      cancelAnimation: function cancelAnimation(chart) {
        var index = helpers.findIndex(this.animations, function (animation) {
          return animation.chart === chart;
        });

        if (index !== -1) {
          this.animations.splice(index, 1);
          chart.animating = false;
        }
      },
      requestAnimationFrame: function requestAnimationFrame() {
        var me = this;

        if (me.request === null) {
          // Skip animation frame requests until the active one is executed.
          // This can happen when processing mouse events, e.g. 'mousemove'
          // and 'mouseout' events will trigger multiple renders.
          me.request = helpers.requestAnimFrame.call(window, function () {
            me.request = null;
            me.startDigest();
          });
        }
      },

      /**
       * @private
       */
      startDigest: function startDigest() {
        var me = this;
        var startTime = Date.now();
        var framesToDrop = 0;

        if (me.dropFrames > 1) {
          framesToDrop = Math.floor(me.dropFrames);
          me.dropFrames = me.dropFrames % 1;
        }

        me.advance(1 + framesToDrop);
        var endTime = Date.now();
        me.dropFrames += (endTime - startTime) / me.frameDuration; // Do we have more stuff to animate?

        if (me.animations.length > 0) {
          me.requestAnimationFrame();
        }
      },

      /**
       * @private
       */
      advance: function advance(count) {
        var animations = this.animations;
        var animation, chart;
        var i = 0;

        while (i < animations.length) {
          animation = animations[i];
          chart = animation.chart;
          animation.currentStep = (animation.currentStep || 0) + count;
          animation.currentStep = Math.min(animation.currentStep, animation.numSteps);
          helpers.callback(animation.render, [chart, animation], chart);
          helpers.callback(animation.onAnimationProgress, [animation], chart);

          if (animation.currentStep >= animation.numSteps) {
            helpers.callback(animation.onAnimationComplete, [animation], chart);
            chart.animating = false;
            animations.splice(i, 1);
          } else {
            ++i;
          }
        }
      }
    };
  }, {
    "../helpers/index": 109,
    "./core.defaults": 89
  }],
  87: [function (require, module, exports) {
    'use strict';

    var Animation = require('./core.animation');

    var animations = require('./core.animations');

    var defaults = require('./core.defaults');

    var helpers = require('../helpers/index');

    var Interaction = require('./core.interaction');

    var layouts = require('./core.layouts');

    var platform = require('../platforms/platform');

    var plugins = require('./core.plugins');

    var scaleService = require('../core/core.scaleService');

    var Tooltip = require('./core.tooltip');

    module.exports = function (Chart) {
      // Create a dictionary of chart types, to allow for extension of existing types
      Chart.types = {}; // Store a reference to each instance - allowing us to globally resize chart instances on window resize.
      // Destroy method on the chart will remove the instance of the chart from this reference.

      Chart.instances = {}; // Controllers available for dataset visualization eg. bar, line, slice, etc.

      Chart.controllers = {};
      /**
       * Initializes the given config with global and chart default values.
       */

      function initConfig(config) {
        config = config || {}; // Do NOT use configMerge() for the data object because this method merges arrays
        // and so would change references to labels and datasets, preventing data updates.

        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = helpers.configMerge(defaults.global, defaults[config.type], config.options || {});
        return config;
      }
      /**
       * Updates the config of the chart
       * @param chart {Chart} chart to update the options for
       */


      function updateConfig(chart) {
        var newOptions = chart.options;
        helpers.each(chart.scales, function (scale) {
          layouts.removeBox(chart, scale);
        });
        newOptions = helpers.configMerge(Chart.defaults.global, Chart.defaults[chart.config.type], newOptions);
        chart.options = chart.config.options = newOptions;
        chart.ensureScalesHaveIDs();
        chart.buildOrUpdateScales(); // Tooltip

        chart.tooltip._options = newOptions.tooltips;
        chart.tooltip.initialize();
      }

      function positionIsHorizontal(position) {
        return position === 'top' || position === 'bottom';
      }

      helpers.extend(Chart.prototype,
      /** @lends Chart */
      {
        /**
         * @private
         */
        construct: function construct(item, config) {
          var me = this;
          config = initConfig(config);
          var context = platform.acquireContext(item, config);
          var canvas = context && context.canvas;
          var height = canvas && canvas.height;
          var width = canvas && canvas.width;
          me.id = helpers.uid();
          me.ctx = context;
          me.canvas = canvas;
          me.config = config;
          me.width = width;
          me.height = height;
          me.aspectRatio = height ? width / height : null;
          me.options = config.options;
          me._bufferedRender = false;
          /**
           * Provided for backward compatibility, Chart and Chart.Controller have been merged,
           * the "instance" still need to be defined since it might be called from plugins.
           * @prop Chart#chart
           * @deprecated since version 2.6.0
           * @todo remove at version 3
           * @private
           */

          me.chart = me;
          me.controller = me; // chart.chart.controller #inception
          // Add the chart instance to the global namespace

          Chart.instances[me.id] = me; // Define alias to the config data: `chart.data === chart.config.data`

          Object.defineProperty(me, 'data', {
            get: function get() {
              return me.config.data;
            },
            set: function set(value) {
              me.config.data = value;
            }
          });

          if (!context || !canvas) {
            // The given item is not a compatible context2d element, let's return before finalizing
            // the chart initialization but after setting basic chart / controller properties that
            // can help to figure out that the chart is not valid (e.g chart.canvas !== null);
            // https://github.com/chartjs/Chart.js/issues/2807
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
          }

          me.initialize();
          me.update();
        },

        /**
         * @private
         */
        initialize: function initialize() {
          var me = this; // Before init plugin notification

          plugins.notify(me, 'beforeInit');
          helpers.retinaScale(me, me.options.devicePixelRatio);
          me.bindEvents();

          if (me.options.responsive) {
            // Initial resize before chart draws (must be silent to preserve initial animations).
            me.resize(true);
          } // Make sure scales have IDs and are built before we build any controllers.


          me.ensureScalesHaveIDs();
          me.buildOrUpdateScales();
          me.initToolTip(); // After init plugin notification

          plugins.notify(me, 'afterInit');
          return me;
        },
        clear: function clear() {
          helpers.canvas.clear(this);
          return this;
        },
        stop: function stop() {
          // Stops any current animation loop occurring
          animations.cancelAnimation(this);
          return this;
        },
        resize: function resize(silent) {
          var me = this;
          var options = me.options;
          var canvas = me.canvas;
          var aspectRatio = options.maintainAspectRatio && me.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that
          // the canvas display style uses the same integer values to avoid blurring effect.
          // Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed

          var newWidth = Math.max(0, Math.floor(helpers.getMaximumWidth(canvas)));
          var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas)));

          if (me.width === newWidth && me.height === newHeight) {
            return;
          }

          canvas.width = me.width = newWidth;
          canvas.height = me.height = newHeight;
          canvas.style.width = newWidth + 'px';
          canvas.style.height = newHeight + 'px';
          helpers.retinaScale(me, options.devicePixelRatio);

          if (!silent) {
            // Notify any plugins about the resize
            var newSize = {
              width: newWidth,
              height: newHeight
            };
            plugins.notify(me, 'resize', [newSize]); // Notify of resize

            if (me.options.onResize) {
              me.options.onResize(me, newSize);
            }

            me.stop();
            me.update({
              duration: me.options.responsiveAnimationDuration
            });
          }
        },
        ensureScalesHaveIDs: function ensureScalesHaveIDs() {
          var options = this.options;
          var scalesOptions = options.scales || {};
          var scaleOptions = options.scale;
          helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
            xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
          });
          helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
            yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
          });

          if (scaleOptions) {
            scaleOptions.id = scaleOptions.id || 'scale';
          }
        },

        /**
         * Builds a map of scale ID to scale object for future lookup.
         */
        buildOrUpdateScales: function buildOrUpdateScales() {
          var me = this;
          var options = me.options;
          var scales = me.scales || {};
          var items = [];
          var updated = Object.keys(scales).reduce(function (obj, id) {
            obj[id] = false;
            return obj;
          }, {});

          if (options.scales) {
            items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
              return {
                options: xAxisOptions,
                dtype: 'category',
                dposition: 'bottom'
              };
            }), (options.scales.yAxes || []).map(function (yAxisOptions) {
              return {
                options: yAxisOptions,
                dtype: 'linear',
                dposition: 'left'
              };
            }));
          }

          if (options.scale) {
            items.push({
              options: options.scale,
              dtype: 'radialLinear',
              isDefault: true,
              dposition: 'chartArea'
            });
          }

          helpers.each(items, function (item) {
            var scaleOptions = item.options;
            var id = scaleOptions.id;
            var scaleType = helpers.valueOrDefault(scaleOptions.type, item.dtype);

            if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
              scaleOptions.position = item.dposition;
            }

            updated[id] = true;
            var scale = null;

            if (id in scales && scales[id].type === scaleType) {
              scale = scales[id];
              scale.options = scaleOptions;
              scale.ctx = me.ctx;
              scale.chart = me;
            } else {
              var scaleClass = scaleService.getScaleConstructor(scaleType);

              if (!scaleClass) {
                return;
              }

              scale = new scaleClass({
                id: id,
                type: scaleType,
                options: scaleOptions,
                ctx: me.ctx,
                chart: me
              });
              scales[scale.id] = scale;
            }

            scale.mergeTicksOptions(); // TODO(SB): I think we should be able to remove this custom case (options.scale)
            // and consider it as a regular scale part of the "scales"" map only! This would
            // make the logic easier and remove some useless? custom code.

            if (item.isDefault) {
              me.scale = scale;
            }
          }); // clear up discarded scales

          helpers.each(updated, function (hasUpdated, id) {
            if (!hasUpdated) {
              delete scales[id];
            }
          });
          me.scales = scales;
          scaleService.addScalesToLayout(this);
        },
        buildOrUpdateControllers: function buildOrUpdateControllers() {
          var me = this;
          var types = [];
          var newControllers = [];
          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            var meta = me.getDatasetMeta(datasetIndex);
            var type = dataset.type || me.config.type;

            if (meta.type && meta.type !== type) {
              me.destroyDatasetMeta(datasetIndex);
              meta = me.getDatasetMeta(datasetIndex);
            }

            meta.type = type;
            types.push(meta.type);

            if (meta.controller) {
              meta.controller.updateIndex(datasetIndex);
              meta.controller.linkScales();
            } else {
              var ControllerClass = Chart.controllers[meta.type];

              if (ControllerClass === undefined) {
                throw new Error('"' + meta.type + '" is not a chart type.');
              }

              meta.controller = new ControllerClass(me, datasetIndex);
              newControllers.push(meta.controller);
            }
          }, me);
          return newControllers;
        },

        /**
         * Reset the elements of all datasets
         * @private
         */
        resetElements: function resetElements() {
          var me = this;
          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.reset();
          }, me);
        },

        /**
        * Resets the chart back to it's state before the initial animation
        */
        reset: function reset() {
          this.resetElements();
          this.tooltip.initialize();
        },
        update: function update(config) {
          var me = this;

          if (!config || _typeof2(config) !== 'object') {
            // backwards compatibility
            config = {
              duration: config,
              lazy: arguments[1]
            };
          }

          updateConfig(me); // plugins options references might have change, let's invalidate the cache
          // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167

          plugins._invalidate(me);

          if (plugins.notify(me, 'beforeUpdate') === false) {
            return;
          } // In case the entire data object changed


          me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset

          var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts

          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
          }, me);
          me.updateLayout(); // Can only reset the new controllers after the scales have been updated

          if (me.options.animation && me.options.animation.duration) {
            helpers.each(newControllers, function (controller) {
              controller.reset();
            });
          }

          me.updateDatasets(); // Need to reset tooltip in case it is displayed with elements that are removed
          // after update.

          me.tooltip.initialize(); // Last active contains items that were previously in the tooltip.
          // When we reset the tooltip, we need to clear it

          me.lastActive = []; // Do this before render so that any plugins that need final scale updates can use it

          plugins.notify(me, 'afterUpdate');

          if (me._bufferedRender) {
            me._bufferedRequest = {
              duration: config.duration,
              easing: config.easing,
              lazy: config.lazy
            };
          } else {
            me.render(config);
          }
        },

        /**
         * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
         * hook, in which case, plugins will not be called on `afterLayout`.
         * @private
         */
        updateLayout: function updateLayout() {
          var me = this;

          if (plugins.notify(me, 'beforeLayout') === false) {
            return;
          }

          layouts.update(this, this.width, this.height);
          /**
           * Provided for backward compatibility, use `afterLayout` instead.
           * @method IPlugin#afterScaleUpdate
           * @deprecated since version 2.5.0
           * @todo remove at version 3
           * @private
           */

          plugins.notify(me, 'afterScaleUpdate');
          plugins.notify(me, 'afterLayout');
        },

        /**
         * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
         * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
         * @private
         */
        updateDatasets: function updateDatasets() {
          var me = this;

          if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
            return;
          }

          for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            me.updateDataset(i);
          }

          plugins.notify(me, 'afterDatasetsUpdate');
        },

        /**
         * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
         * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
         * @private
         */
        updateDataset: function updateDataset(index) {
          var me = this;
          var meta = me.getDatasetMeta(index);
          var args = {
            meta: meta,
            index: index
          };

          if (plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
            return;
          }

          meta.controller.update();
          plugins.notify(me, 'afterDatasetUpdate', [args]);
        },
        render: function render(config) {
          var me = this;

          if (!config || _typeof2(config) !== 'object') {
            // backwards compatibility
            config = {
              duration: config,
              lazy: arguments[1]
            };
          }

          var duration = config.duration;
          var lazy = config.lazy;

          if (plugins.notify(me, 'beforeRender') === false) {
            return;
          }

          var animationOptions = me.options.animation;

          var onComplete = function onComplete(animation) {
            plugins.notify(me, 'afterRender');
            helpers.callback(animationOptions && animationOptions.onComplete, [animation], me);
          };

          if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
            var animation = new Animation({
              numSteps: (duration || animationOptions.duration) / 16.66,
              // 60 fps
              easing: config.easing || animationOptions.easing,
              render: function render(chart, animationObject) {
                var easingFunction = helpers.easing.effects[animationObject.easing];
                var currentStep = animationObject.currentStep;
                var stepDecimal = currentStep / animationObject.numSteps;
                chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
              },
              onAnimationProgress: animationOptions.onProgress,
              onAnimationComplete: onComplete
            });
            animations.addAnimation(me, animation, duration, lazy);
          } else {
            me.draw(); // See https://github.com/chartjs/Chart.js/issues/3781

            onComplete(new Animation({
              numSteps: 0,
              chart: me
            }));
          }

          return me;
        },
        draw: function draw(easingValue) {
          var me = this;
          me.clear();

          if (helpers.isNullOrUndef(easingValue)) {
            easingValue = 1;
          }

          me.transition(easingValue);

          if (me.width <= 0 || me.height <= 0) {
            return;
          }

          if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
            return;
          } // Draw all the scales


          helpers.each(me.boxes, function (box) {
            box.draw(me.chartArea);
          }, me);

          if (me.scale) {
            me.scale.draw();
          }

          me.drawDatasets(easingValue);

          me._drawTooltip(easingValue);

          plugins.notify(me, 'afterDraw', [easingValue]);
        },

        /**
         * @private
         */
        transition: function transition(easingValue) {
          var me = this;

          for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
            if (me.isDatasetVisible(i)) {
              me.getDatasetMeta(i).controller.transition(easingValue);
            }
          }

          me.tooltip.transition(easingValue);
        },

        /**
         * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
         * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
         * @private
         */
        drawDatasets: function drawDatasets(easingValue) {
          var me = this;

          if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
            return;
          } // Draw datasets reversed to support proper line stacking


          for (var i = (me.data.datasets || []).length - 1; i >= 0; --i) {
            if (me.isDatasetVisible(i)) {
              me.drawDataset(i, easingValue);
            }
          }

          plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
        },

        /**
         * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
         * hook, in which case, plugins will not be called on `afterDatasetDraw`.
         * @private
         */
        drawDataset: function drawDataset(index, easingValue) {
          var me = this;
          var meta = me.getDatasetMeta(index);
          var args = {
            meta: meta,
            index: index,
            easingValue: easingValue
          };

          if (plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
            return;
          }

          meta.controller.draw(easingValue);
          plugins.notify(me, 'afterDatasetDraw', [args]);
        },

        /**
         * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
         * hook, in which case, plugins will not be called on `afterTooltipDraw`.
         * @private
         */
        _drawTooltip: function _drawTooltip(easingValue) {
          var me = this;
          var tooltip = me.tooltip;
          var args = {
            tooltip: tooltip,
            easingValue: easingValue
          };

          if (plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
            return;
          }

          tooltip.draw();
          plugins.notify(me, 'afterTooltipDraw', [args]);
        },
        // Get the single element that was clicked on
        // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
        getElementAtEvent: function getElementAtEvent(e) {
          return Interaction.modes.single(this, e);
        },
        getElementsAtEvent: function getElementsAtEvent(e) {
          return Interaction.modes.label(this, e, {
            intersect: true
          });
        },
        getElementsAtXAxis: function getElementsAtXAxis(e) {
          return Interaction.modes['x-axis'](this, e, {
            intersect: true
          });
        },
        getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {
          var method = Interaction.modes[mode];

          if (typeof method === 'function') {
            return method(this, e, options);
          }

          return [];
        },
        getDatasetAtEvent: function getDatasetAtEvent(e) {
          return Interaction.modes.dataset(this, e, {
            intersect: true
          });
        },
        getDatasetMeta: function getDatasetMeta(datasetIndex) {
          var me = this;
          var dataset = me.data.datasets[datasetIndex];

          if (!dataset._meta) {
            dataset._meta = {};
          }

          var meta = dataset._meta[me.id];

          if (!meta) {
            meta = dataset._meta[me.id] = {
              type: null,
              data: [],
              dataset: null,
              controller: null,
              hidden: null,
              // See isDatasetVisible() comment
              xAxisID: null,
              yAxisID: null
            };
          }

          return meta;
        },
        getVisibleDatasetCount: function getVisibleDatasetCount() {
          var count = 0;

          for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
            if (this.isDatasetVisible(i)) {
              count++;
            }
          }

          return count;
        },
        isDatasetVisible: function isDatasetVisible(datasetIndex) {
          var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
          // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.

          return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
        },
        generateLegend: function generateLegend() {
          return this.options.legendCallback(this);
        },

        /**
         * @private
         */
        destroyDatasetMeta: function destroyDatasetMeta(datasetIndex) {
          var id = this.id;
          var dataset = this.data.datasets[datasetIndex];
          var meta = dataset._meta && dataset._meta[id];

          if (meta) {
            meta.controller.destroy();
            delete dataset._meta[id];
          }
        },
        destroy: function destroy() {
          var me = this;
          var canvas = me.canvas;
          var i, ilen;
          me.stop(); // dataset controllers need to cleanup associated data

          for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            me.destroyDatasetMeta(i);
          }

          if (canvas) {
            me.unbindEvents();
            helpers.canvas.clear(me);
            platform.releaseContext(me.ctx);
            me.canvas = null;
            me.ctx = null;
          }

          plugins.notify(me, 'destroy');
          delete Chart.instances[me.id];
        },
        toBase64Image: function toBase64Image() {
          return this.canvas.toDataURL.apply(this.canvas, arguments);
        },
        initToolTip: function initToolTip() {
          var me = this;
          me.tooltip = new Tooltip({
            _chart: me,
            _chartInstance: me,
            // deprecated, backward compatibility
            _data: me.data,
            _options: me.options.tooltips
          }, me);
        },

        /**
         * @private
         */
        bindEvents: function bindEvents() {
          var me = this;
          var listeners = me._listeners = {};

          var listener = function listener() {
            me.eventHandler.apply(me, arguments);
          };

          helpers.each(me.options.events, function (type) {
            platform.addEventListener(me, type, listener);
            listeners[type] = listener;
          }); // Elements used to detect size change should not be injected for non responsive charts.
          // See https://github.com/chartjs/Chart.js/issues/2210

          if (me.options.responsive) {
            listener = function listener() {
              me.resize();
            };

            platform.addEventListener(me, 'resize', listener);
            listeners.resize = listener;
          }
        },

        /**
         * @private
         */
        unbindEvents: function unbindEvents() {
          var me = this;
          var listeners = me._listeners;

          if (!listeners) {
            return;
          }

          delete me._listeners;
          helpers.each(listeners, function (listener, type) {
            platform.removeEventListener(me, type, listener);
          });
        },
        updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {
          var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
          var element, i, ilen;

          for (i = 0, ilen = elements.length; i < ilen; ++i) {
            element = elements[i];

            if (element) {
              this.getDatasetMeta(element._datasetIndex).controller[method](element);
            }
          }
        },

        /**
         * @private
         */
        eventHandler: function eventHandler(e) {
          var me = this;
          var tooltip = me.tooltip;

          if (plugins.notify(me, 'beforeEvent', [e]) === false) {
            return;
          } // Buffer any update calls so that renders do not occur


          me._bufferedRender = true;
          me._bufferedRequest = null;
          var changed = me.handleEvent(e); // for smooth tooltip animations issue #4989
          // the tooltip should be the source of change
          // Animation check workaround:
          // tooltip._start will be null when tooltip isn't animating

          if (tooltip) {
            changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);
          }

          plugins.notify(me, 'afterEvent', [e]);
          var bufferedRequest = me._bufferedRequest;

          if (bufferedRequest) {
            // If we have an update that was triggered, we need to do a normal render
            me.render(bufferedRequest);
          } else if (changed && !me.animating) {
            // If entering, leaving, or changing elements, animate the change via pivot
            me.stop(); // We only need to render at this point. Updating will cause scales to be
            // recomputed generating flicker & using more memory than necessary.

            me.render({
              duration: me.options.hover.animationDuration,
              lazy: true
            });
          }

          me._bufferedRender = false;
          me._bufferedRequest = null;
          return me;
        },

        /**
         * Handle an event
         * @private
         * @param {IEvent} event the event to handle
         * @return {Boolean} true if the chart needs to re-render
         */
        handleEvent: function handleEvent(e) {
          var me = this;
          var options = me.options || {};
          var hoverOptions = options.hover;
          var changed = false;
          me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips

          if (e.type === 'mouseout') {
            me.active = [];
          } else {
            me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
          } // Invoke onHover hook
          // Need to call with native event here to not break backwards compatibility


          helpers.callback(options.onHover || options.hover.onHover, [e["native"], me.active], me);

          if (e.type === 'mouseup' || e.type === 'click') {
            if (options.onClick) {
              // Use e.native here for backwards compatibility
              options.onClick.call(me, e["native"], me.active);
            }
          } // Remove styling for last active (even if it may still be active)


          if (me.lastActive.length) {
            me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
          } // Built in hover styling


          if (me.active.length && hoverOptions.mode) {
            me.updateHoverStyle(me.active, hoverOptions.mode, true);
          }

          changed = !helpers.arrayEquals(me.active, me.lastActive); // Remember Last Actives

          me.lastActive = me.active;
          return changed;
        }
      });
      /**
       * Provided for backward compatibility, use Chart instead.
       * @class Chart.Controller
       * @deprecated since version 2.6.0
       * @todo remove at version 3
       * @private
       */

      Chart.Controller = Chart;
    };
  }, {
    "../core/core.scaleService": 97,
    "../helpers/index": 109,
    "../platforms/platform": 112,
    "./core.animation": 85,
    "./core.animations": 86,
    "./core.defaults": 89,
    "./core.interaction": 92,
    "./core.layouts": 94,
    "./core.plugins": 95,
    "./core.tooltip": 99
  }],
  88: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    module.exports = function (Chart) {
      var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
      /**
       * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
       * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
       * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
       */

      function listenArrayEvents(array, listener) {
        if (array._chartjs) {
          array._chartjs.listeners.push(listener);

          return;
        }

        Object.defineProperty(array, '_chartjs', {
          configurable: true,
          enumerable: false,
          value: {
            listeners: [listener]
          }
        });
        arrayEvents.forEach(function (key) {
          var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
          var base = array[key];
          Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function value() {
              var args = Array.prototype.slice.call(arguments);
              var res = base.apply(this, args);
              helpers.each(array._chartjs.listeners, function (object) {
                if (typeof object[method] === 'function') {
                  object[method].apply(object, args);
                }
              });
              return res;
            }
          });
        });
      }
      /**
       * Removes the given array event listener and cleanup extra attached properties (such as
       * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
       */


      function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;

        if (!stub) {
          return;
        }

        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);

        if (index !== -1) {
          listeners.splice(index, 1);
        }

        if (listeners.length > 0) {
          return;
        }

        arrayEvents.forEach(function (key) {
          delete array[key];
        });
        delete array._chartjs;
      } // Base class for all dataset controllers (line, bar, etc)


      Chart.DatasetController = function (chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
      };

      helpers.extend(Chart.DatasetController.prototype, {
        /**
         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
         * @type {Chart.core.element}
         */
        datasetElementType: null,

        /**
         * Element type used to generate a meta data (e.g. Chart.element.Point).
         * @type {Chart.core.element}
         */
        dataElementType: null,
        initialize: function initialize(chart, datasetIndex) {
          var me = this;
          me.chart = chart;
          me.index = datasetIndex;
          me.linkScales();
          me.addElements();
        },
        updateIndex: function updateIndex(datasetIndex) {
          this.index = datasetIndex;
        },
        linkScales: function linkScales() {
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();

          if (meta.xAxisID === null || !(meta.xAxisID in me.chart.scales)) {
            meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
          }

          if (meta.yAxisID === null || !(meta.yAxisID in me.chart.scales)) {
            meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
          }
        },
        getDataset: function getDataset() {
          return this.chart.data.datasets[this.index];
        },
        getMeta: function getMeta() {
          return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function getScaleForId(scaleID) {
          return this.chart.scales[scaleID];
        },
        reset: function reset() {
          this.update(true);
        },

        /**
         * @private
         */
        destroy: function destroy() {
          if (this._data) {
            unlistenArrayEvents(this._data, this);
          }
        },
        createMetaDataset: function createMetaDataset() {
          var me = this;
          var type = me.datasetElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index
          });
        },
        createMetaData: function createMetaData(index) {
          var me = this;
          var type = me.dataElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index,
            _index: index
          });
        },
        addElements: function addElements() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data || [];
          var metaData = meta.data;
          var i, ilen;

          for (i = 0, ilen = data.length; i < ilen; ++i) {
            metaData[i] = metaData[i] || me.createMetaData(i);
          }

          meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function addElementAndReset(index) {
          var element = this.createMetaData(index);
          this.getMeta().data.splice(index, 0, element);
          this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function buildOrUpdateElements() {
          var me = this;
          var dataset = me.getDataset();
          var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate
          // real-time charts), we need to monitor these data modifications and synchronize
          // the internal meta data accordingly.

          if (me._data !== data) {
            if (me._data) {
              // This case happens when the user replaced the data array instance.
              unlistenArrayEvents(me._data, me);
            }

            listenArrayEvents(data, me);
            me._data = data;
          } // Re-sync meta data in case the user replaced the data array or if we missed
          // any updates and so make sure that we handle number of datapoints changing.


          me.resyncElements();
        },
        update: helpers.noop,
        transition: function transition(easingValue) {
          var meta = this.getMeta();
          var elements = meta.data || [];
          var ilen = elements.length;
          var i = 0;

          for (; i < ilen; ++i) {
            elements[i].transition(easingValue);
          }

          if (meta.dataset) {
            meta.dataset.transition(easingValue);
          }
        },
        draw: function draw() {
          var meta = this.getMeta();
          var elements = meta.data || [];
          var ilen = elements.length;
          var i = 0;

          if (meta.dataset) {
            meta.dataset.draw();
          }

          for (; i < ilen; ++i) {
            elements[i].draw();
          }
        },
        removeHoverStyle: function removeHoverStyle(element) {
          helpers.merge(element._model, element.$previousStyle || {});
          delete element.$previousStyle;
        },
        setHoverStyle: function setHoverStyle(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var valueOrDefault = helpers.valueAtIndexOrDefault;
          var getHoverColor = helpers.getHoverColor;
          var model = element._model;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },

        /**
         * @private
         */
        resyncElements: function resyncElements() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data;
          var numMeta = meta.data.length;
          var numData = data.length;

          if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
          } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
          }
        },

        /**
         * @private
         */
        insertElements: function insertElements(start, count) {
          for (var i = 0; i < count; ++i) {
            this.addElementAndReset(start + i);
          }
        },

        /**
         * @private
         */
        onDataPush: function onDataPush() {
          this.insertElements(this.getDataset().data.length - 1, arguments.length);
        },

        /**
         * @private
         */
        onDataPop: function onDataPop() {
          this.getMeta().data.pop();
        },

        /**
         * @private
         */
        onDataShift: function onDataShift() {
          this.getMeta().data.shift();
        },

        /**
         * @private
         */
        onDataSplice: function onDataSplice(start, count) {
          this.getMeta().data.splice(start, count);
          this.insertElements(start, arguments.length - 2);
        },

        /**
         * @private
         */
        onDataUnshift: function onDataUnshift() {
          this.insertElements(0, arguments.length);
        }
      });
      Chart.DatasetController.extend = helpers.inherits;
    };
  }, {
    "../helpers/index": 109
  }],
  89: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    module.exports = {
      /**
       * @private
       */
      _set: function _set(scope, values) {
        return helpers.merge(this[scope] || (this[scope] = {}), values);
      }
    };
  }, {
    "../helpers/index": 109
  }],
  90: [function (require, module, exports) {
    'use strict';

    var color = require('chartjs-color');

    var helpers = require('../helpers/index');

    function interpolate(start, view, model, ease) {
      var keys = Object.keys(model);
      var i, ilen, key, actual, origin, target, type, c0, c1;

      for (i = 0, ilen = keys.length; i < ilen; ++i) {
        key = keys[i];
        target = model[key]; // if a value is added to the model after pivot() has been called, the view
        // doesn't contain it, so let's initialize the view to the target value.

        if (!view.hasOwnProperty(key)) {
          view[key] = target;
        }

        actual = view[key];

        if (actual === target || key[0] === '_') {
          continue;
        }

        if (!start.hasOwnProperty(key)) {
          start[key] = actual;
        }

        origin = start[key];
        type = _typeof2(target);

        if (type === _typeof2(origin)) {
          if (type === 'string') {
            c0 = color(origin);

            if (c0.valid) {
              c1 = color(target);

              if (c1.valid) {
                view[key] = c1.mix(c0, ease).rgbString();
                continue;
              }
            }
          } else if (type === 'number' && isFinite(origin) && isFinite(target)) {
            view[key] = origin + (target - origin) * ease;
            continue;
          }
        }

        view[key] = target;
      }
    }

    var Element = function Element(configuration) {
      helpers.extend(this, configuration);
      this.initialize.apply(this, arguments);
    };

    helpers.extend(Element.prototype, {
      initialize: function initialize() {
        this.hidden = false;
      },
      pivot: function pivot() {
        var me = this;

        if (!me._view) {
          me._view = helpers.clone(me._model);
        }

        me._start = {};
        return me;
      },
      transition: function transition(ease) {
        var me = this;
        var model = me._model;
        var start = me._start;
        var view = me._view; // No animation -> No Transition

        if (!model || ease === 1) {
          me._view = model;
          me._start = null;
          return me;
        }

        if (!view) {
          view = me._view = {};
        }

        if (!start) {
          start = me._start = {};
        }

        interpolate(start, view, model, ease);
        return me;
      },
      tooltipPosition: function tooltipPosition() {
        return {
          x: this._model.x,
          y: this._model.y
        };
      },
      hasValue: function hasValue() {
        return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
      }
    });
    Element.extend = helpers.inherits;
    module.exports = Element;
  }, {
    "../helpers/index": 109,
    "chartjs-color": 124
  }],
  91: [function (require, module, exports) {
    /* global window: false */

    /* global document: false */
    'use strict';

    var color = require('chartjs-color');

    var defaults = require('./core.defaults');

    var helpers = require('../helpers/index');

    var scaleService = require('../core/core.scaleService');

    module.exports = function () {
      // -- Basic js utility methods
      helpers.configMerge = function ()
      /* objects ... */
      {
        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
          merger: function merger(key, target, source, options) {
            var tval = target[key] || {};
            var sval = source[key];

            if (key === 'scales') {
              // scale config merging is complex. Add our own function here for that
              target[key] = helpers.scaleMerge(tval, sval);
            } else if (key === 'scale') {
              // used in polar area & radar charts since there is only one scale
              target[key] = helpers.merge(tval, [scaleService.getScaleDefaults(sval.type), sval]);
            } else {
              helpers._merger(key, target, source, options);
            }
          }
        });
      };

      helpers.scaleMerge = function ()
      /* objects ... */
      {
        return helpers.merge(helpers.clone(arguments[0]), [].slice.call(arguments, 1), {
          merger: function merger(key, target, source, options) {
            if (key === 'xAxes' || key === 'yAxes') {
              var slen = source[key].length;
              var i, type, scale;

              if (!target[key]) {
                target[key] = [];
              }

              for (i = 0; i < slen; ++i) {
                scale = source[key][i];
                type = helpers.valueOrDefault(scale.type, key === 'xAxes' ? 'category' : 'linear');

                if (i >= target[key].length) {
                  target[key].push({});
                }

                if (!target[key][i].type || scale.type && scale.type !== target[key][i].type) {
                  // new/untyped scale or type changed: let's apply the new defaults
                  // then merge source scale to correctly overwrite the defaults.
                  helpers.merge(target[key][i], [scaleService.getScaleDefaults(type), scale]);
                } else {
                  // scales type are the same
                  helpers.merge(target[key][i], scale);
                }
              }
            } else {
              helpers._merger(key, target, source, options);
            }
          }
        });
      };

      helpers.where = function (collection, filterCallback) {
        if (helpers.isArray(collection) && Array.prototype.filter) {
          return collection.filter(filterCallback);
        }

        var filtered = [];
        helpers.each(collection, function (item) {
          if (filterCallback(item)) {
            filtered.push(item);
          }
        });
        return filtered;
      };

      helpers.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
        return array.findIndex(callback, scope);
      } : function (array, callback, scope) {
        scope = scope === undefined ? array : scope;

        for (var i = 0, ilen = array.length; i < ilen; ++i) {
          if (callback.call(scope, array[i], i, array)) {
            return i;
          }
        }

        return -1;
      };

      helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
        // Default to start of the array
        if (helpers.isNullOrUndef(startIndex)) {
          startIndex = -1;
        }

        for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
          var currentItem = arrayToSearch[i];

          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      };

      helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
        // Default to end of the array
        if (helpers.isNullOrUndef(startIndex)) {
          startIndex = arrayToSearch.length;
        }

        for (var i = startIndex - 1; i >= 0; i--) {
          var currentItem = arrayToSearch[i];

          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      }; // -- Math methods


      helpers.isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };

      helpers.almostEquals = function (x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
      };

      helpers.almostWhole = function (x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon < x && rounded + epsilon > x;
      };

      helpers.max = function (array) {
        return array.reduce(function (max, value) {
          if (!isNaN(value)) {
            return Math.max(max, value);
          }

          return max;
        }, Number.NEGATIVE_INFINITY);
      };

      helpers.min = function (array) {
        return array.reduce(function (min, value) {
          if (!isNaN(value)) {
            return Math.min(min, value);
          }

          return min;
        }, Number.POSITIVE_INFINITY);
      };

      helpers.sign = Math.sign ? function (x) {
        return Math.sign(x);
      } : function (x) {
        x = +x; // convert to a number

        if (x === 0 || isNaN(x)) {
          return x;
        }

        return x > 0 ? 1 : -1;
      };
      helpers.log10 = Math.log10 ? function (x) {
        return Math.log10(x);
      } : function (x) {
        var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
        // Check for whole powers of 10,
        // which due to floating point rounding error should be corrected.

        var powerOf10 = Math.round(exponent);
        var isPowerOf10 = x === Math.pow(10, powerOf10);
        return isPowerOf10 ? powerOf10 : exponent;
      };

      helpers.toRadians = function (degrees) {
        return degrees * (Math.PI / 180);
      };

      helpers.toDegrees = function (radians) {
        return radians * (180 / Math.PI);
      }; // Gets the angle from vertical upright to the point about a centre.


      helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x;
        var distanceFromYCenter = anglePoint.y - centrePoint.y;
        var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

        if (angle < -0.5 * Math.PI) {
          angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
        }

        return {
          angle: angle,
          distance: radialDistanceFromCenter
        };
      };

      helpers.distanceBetweenPoints = function (pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
      };

      helpers.aliasPixel = function (pixelWidth) {
        return pixelWidth % 2 === 0 ? 0 : 0.5;
      };

      helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
        // Props to Rob Spencer at scaled innovation for his post on splining between points
        // http://scaledinnovation.com/analytics/splines/aboutSplines.html
        // This function must also respect "skipped" points
        var previous = firstPoint.skip ? middlePoint : firstPoint;
        var current = middlePoint;
        var next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
        var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf

        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01; // scaling factor for triangle Ta

        var fb = t * s12;
        return {
          previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
          },
          next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
          }
        };
      };

      helpers.EPSILON = Number.EPSILON || 1e-14;

      helpers.splineCurveMonotone = function (points) {
        // This function calculates Bézier control points in a similar way than |splineCurve|,
        // but preserves monotonicity of the provided data and ensures no local extremums are added
        // between the dataset discrete points due to the interpolation.
        // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
        var pointsWithTangents = (points || []).map(function (point) {
          return {
            model: point._model,
            deltaK: 0,
            mK: 0
          };
        }); // Calculate slopes (deltaK) and initialize tangents (mK)

        var pointsLen = pointsWithTangents.length;
        var i, pointBefore, pointCurrent, pointAfter;

        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];

          if (pointCurrent.model.skip) {
            continue;
          }

          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

          if (pointAfter && !pointAfter.model.skip) {
            var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0

            pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
          }

          if (!pointBefore || pointBefore.model.skip) {
            pointCurrent.mK = pointCurrent.deltaK;
          } else if (!pointAfter || pointAfter.model.skip) {
            pointCurrent.mK = pointBefore.deltaK;
          } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
            pointCurrent.mK = 0;
          } else {
            pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
          }
        } // Adjust tangents to ensure monotonic properties


        var alphaK, betaK, tauK, squaredMagnitude;

        for (i = 0; i < pointsLen - 1; ++i) {
          pointCurrent = pointsWithTangents[i];
          pointAfter = pointsWithTangents[i + 1];

          if (pointCurrent.model.skip || pointAfter.model.skip) {
            continue;
          }

          if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
            pointCurrent.mK = pointAfter.mK = 0;
            continue;
          }

          alphaK = pointCurrent.mK / pointCurrent.deltaK;
          betaK = pointAfter.mK / pointCurrent.deltaK;
          squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);

          if (squaredMagnitude <= 9) {
            continue;
          }

          tauK = 3 / Math.sqrt(squaredMagnitude);
          pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
          pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
        } // Compute control points


        var deltaX;

        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];

          if (pointCurrent.model.skip) {
            continue;
          }

          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

          if (pointBefore && !pointBefore.model.skip) {
            deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
            pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
            pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
          }

          if (pointAfter && !pointAfter.model.skip) {
            deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
            pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
            pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
          }
        }
      };

      helpers.nextItem = function (collection, index, loop) {
        if (loop) {
          return index >= collection.length - 1 ? collection[0] : collection[index + 1];
        }

        return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
      };

      helpers.previousItem = function (collection, index, loop) {
        if (loop) {
          return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
        }

        return index <= 0 ? collection[0] : collection[index - 1];
      }; // Implementation of the nice number algorithm used in determining where axis labels will go


      helpers.niceNum = function (range, round) {
        var exponent = Math.floor(helpers.log10(range));
        var fraction = range / Math.pow(10, exponent);
        var niceFraction;

        if (round) {
          if (fraction < 1.5) {
            niceFraction = 1;
          } else if (fraction < 3) {
            niceFraction = 2;
          } else if (fraction < 7) {
            niceFraction = 5;
          } else {
            niceFraction = 10;
          }
        } else if (fraction <= 1.0) {
          niceFraction = 1;
        } else if (fraction <= 2) {
          niceFraction = 2;
        } else if (fraction <= 5) {
          niceFraction = 5;
        } else {
          niceFraction = 10;
        }

        return niceFraction * Math.pow(10, exponent);
      }; // Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/


      helpers.requestAnimFrame = function () {
        if (typeof window === 'undefined') {
          return function (callback) {
            callback();
          };
        }

        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
          return window.setTimeout(callback, 1000 / 60);
        };
      }(); // -- DOM methods


      helpers.getRelativePosition = function (evt, chart) {
        var mouseX, mouseY;
        var e = evt.originalEvent || evt;
        var canvas = evt.target || evt.srcElement;
        var boundingRect = canvas.getBoundingClientRect();
        var touches = e.touches;

        if (touches && touches.length > 0) {
          mouseX = touches[0].clientX;
          mouseY = touches[0].clientY;
        } else {
          mouseX = e.clientX;
          mouseY = e.clientY;
        } // Scale mouse coordinates into canvas coordinates
        // by following the pattern laid out by 'jerryj' in the comments of
        // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/


        var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
        var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
        var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
        var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
        var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
        var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
        // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here

        mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
        mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
        return {
          x: mouseX,
          y: mouseY
        };
      }; // Private helper function to convert max-width/max-height values that may be percentages into a number


      function parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;

        if (typeof styleValue === 'string') {
          valueInPixels = parseInt(styleValue, 10);

          if (styleValue.indexOf('%') !== -1) {
            // percentage * size in dimension
            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
          }
        } else {
          valueInPixels = styleValue;
        }

        return valueInPixels;
      }
      /**
       * Returns if the given value contains an effective constraint.
       * @private
       */


      function isConstrainedValue(value) {
        return value !== undefined && value !== null && value !== 'none';
      } // Private helper to get a constraint dimension
      // @param domNode : the node to check the constraint on
      // @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
      // @param percentageProperty : property of parent to use when calculating width as a percentage
      // @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser


      function getConstraintDimension(domNode, maxStyle, percentageProperty) {
        var view = document.defaultView;

        var parentNode = helpers._getParentNode(domNode);

        var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
        var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
        var hasCNode = isConstrainedValue(constrainedNode);
        var hasCContainer = isConstrainedValue(constrainedContainer);
        var infinity = Number.POSITIVE_INFINITY;

        if (hasCNode || hasCContainer) {
          return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
        }

        return 'none';
      } // returns Number or undefined if no constraint


      helpers.getConstraintWidth = function (domNode) {
        return getConstraintDimension(domNode, 'max-width', 'clientWidth');
      }; // returns Number or undefined if no constraint


      helpers.getConstraintHeight = function (domNode) {
        return getConstraintDimension(domNode, 'max-height', 'clientHeight');
      };
      /**
       * @private
      	 */


      helpers._calculatePadding = function (container, padding, parentDimension) {
        padding = helpers.getStyle(container, padding);
        return padding.indexOf('%') > -1 ? parentDimension / parseInt(padding, 10) : parseInt(padding, 10);
      };
      /**
       * @private
       */


      helpers._getParentNode = function (domNode) {
        var parent = domNode.parentNode;

        if (parent && parent.host) {
          parent = parent.host;
        }

        return parent;
      };

      helpers.getMaximumWidth = function (domNode) {
        var container = helpers._getParentNode(domNode);

        if (!container) {
          return domNode.clientWidth;
        }

        var clientWidth = container.clientWidth;

        var paddingLeft = helpers._calculatePadding(container, 'padding-left', clientWidth);

        var paddingRight = helpers._calculatePadding(container, 'padding-right', clientWidth);

        var w = clientWidth - paddingLeft - paddingRight;
        var cw = helpers.getConstraintWidth(domNode);
        return isNaN(cw) ? w : Math.min(w, cw);
      };

      helpers.getMaximumHeight = function (domNode) {
        var container = helpers._getParentNode(domNode);

        if (!container) {
          return domNode.clientHeight;
        }

        var clientHeight = container.clientHeight;

        var paddingTop = helpers._calculatePadding(container, 'padding-top', clientHeight);

        var paddingBottom = helpers._calculatePadding(container, 'padding-bottom', clientHeight);

        var h = clientHeight - paddingTop - paddingBottom;
        var ch = helpers.getConstraintHeight(domNode);
        return isNaN(ch) ? h : Math.min(h, ch);
      };

      helpers.getStyle = function (el, property) {
        return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
      };

      helpers.retinaScale = function (chart, forceRatio) {
        var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== 'undefined' && window.devicePixelRatio || 1;

        if (pixelRatio === 1) {
          return;
        }

        var canvas = chart.canvas;
        var height = chart.height;
        var width = chart.width;
        canvas.height = height * pixelRatio;
        canvas.width = width * pixelRatio;
        chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,
        // making the chart visually bigger, so let's enforce it to the "correct" values.
        // See https://github.com/chartjs/Chart.js/issues/3575

        if (!canvas.style.height && !canvas.style.width) {
          canvas.style.height = height + 'px';
          canvas.style.width = width + 'px';
        }
      }; // -- Canvas methods


      helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
        return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
      };

      helpers.longestText = function (ctx, font, arrayOfThings, cache) {
        cache = cache || {};
        var data = cache.data = cache.data || {};
        var gc = cache.garbageCollect = cache.garbageCollect || [];

        if (cache.font !== font) {
          data = cache.data = {};
          gc = cache.garbageCollect = [];
          cache.font = font;
        }

        ctx.font = font;
        var longest = 0;
        helpers.each(arrayOfThings, function (thing) {
          // Undefined strings and arrays should not be measured
          if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
            longest = helpers.measureText(ctx, data, gc, longest, thing);
          } else if (helpers.isArray(thing)) {
            // if it is an array lets measure each element
            // to do maybe simplify this function a bit so we can do this more recursively?
            helpers.each(thing, function (nestedThing) {
              // Undefined strings and arrays should not be measured
              if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
              }
            });
          }
        });
        var gcLen = gc.length / 2;

        if (gcLen > arrayOfThings.length) {
          for (var i = 0; i < gcLen; i++) {
            delete data[gc[i]];
          }

          gc.splice(0, gcLen);
        }

        return longest;
      };

      helpers.measureText = function (ctx, data, gc, longest, string) {
        var textWidth = data[string];

        if (!textWidth) {
          textWidth = data[string] = ctx.measureText(string).width;
          gc.push(string);
        }

        if (textWidth > longest) {
          longest = textWidth;
        }

        return longest;
      };

      helpers.numberOfLabelLines = function (arrayOfThings) {
        var numberOfLines = 1;
        helpers.each(arrayOfThings, function (thing) {
          if (helpers.isArray(thing)) {
            if (thing.length > numberOfLines) {
              numberOfLines = thing.length;
            }
          }
        });
        return numberOfLines;
      };

      helpers.color = !color ? function (value) {
        console.error('Color.js not found!');
        return value;
      } : function (value) {
        /* global CanvasGradient */
        if (value instanceof CanvasGradient) {
          value = defaults.global.defaultColor;
        }

        return color(value);
      };

      helpers.getHoverColor = function (colorValue) {
        /* global CanvasPattern */
        return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
      };
    };
  }, {
    "../core/core.scaleService": 97,
    "../helpers/index": 109,
    "./core.defaults": 89,
    "chartjs-color": 124
  }],
  92: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');
    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {Point} the event position
     */


    function getRelativePosition(e, chart) {
      if (e["native"]) {
        return {
          x: e.x,
          y: e.y
        };
      }

      return helpers.getRelativePosition(e, chart);
    }
    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param chart {chart} the chart
     * @param handler {Function} the callback to execute for each visible item
     */


    function parseVisibleItems(chart, handler) {
      var datasets = chart.data.datasets;
      var meta, i, j, ilen, jlen;

      for (i = 0, ilen = datasets.length; i < ilen; ++i) {
        if (!chart.isDatasetVisible(i)) {
          continue;
        }

        meta = chart.getDatasetMeta(i);

        for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
          var element = meta.data[j];

          if (!element._view.skip) {
            handler(element);
          }
        }
      }
    }
    /**
     * Helper function to get the items that intersect the event position
     * @param items {ChartElement[]} elements to filter
     * @param position {Point} the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */


    function getIntersectItems(chart, position) {
      var elements = [];
      parseVisibleItems(chart, function (element) {
        if (element.inRange(position.x, position.y)) {
          elements.push(element);
        }
      });
      return elements;
    }
    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param chart {Chart} the chart to look at elements from
     * @param position {Point} the point to be nearest to
     * @param intersect {Boolean} if true, only consider items that intersect the position
     * @param distanceMetric {Function} function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */


    function getNearestItems(chart, position, intersect, distanceMetric) {
      var minDistance = Number.POSITIVE_INFINITY;
      var nearestItems = [];
      parseVisibleItems(chart, function (element) {
        if (intersect && !element.inRange(position.x, position.y)) {
          return;
        }

        var center = element.getCenterPoint();
        var distance = distanceMetric(position, center);

        if (distance < minDistance) {
          nearestItems = [element];
          minDistance = distance;
        } else if (distance === minDistance) {
          // Can have multiple items at the same distance in which case we sort by size
          nearestItems.push(element);
        }
      });
      return nearestItems;
    }
    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {String} axis the axis mode. x|y|xy
     */


    function getDistanceMetricForAxis(axis) {
      var useX = axis.indexOf('x') !== -1;
      var useY = axis.indexOf('y') !== -1;
      return function (pt1, pt2) {
        var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
      };
    }

    function indexMode(chart, e, options) {
      var position = getRelativePosition(e, chart); // Default axis for index mode is 'x' to match old behaviour

      options.axis = options.axis || 'x';
      var distanceMetric = getDistanceMetricForAxis(options.axis);
      var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
      var elements = [];

      if (!items.length) {
        return [];
      }

      chart.data.datasets.forEach(function (dataset, datasetIndex) {
        if (chart.isDatasetVisible(datasetIndex)) {
          var meta = chart.getDatasetMeta(datasetIndex);
          var element = meta.data[items[0]._index]; // don't count items that are skipped (null data)

          if (element && !element._view.skip) {
            elements.push(element);
          }
        }
      });
      return elements;
    }
    /**
     * @interface IInteractionOptions
     */

    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */

    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */


    module.exports = {
      // Helper function for different modes
      modes: {
        single: function single(chart, e) {
          var position = getRelativePosition(e, chart);
          var elements = [];
          parseVisibleItems(chart, function (element) {
            if (element.inRange(position.x, position.y)) {
              elements.push(element);
              return elements;
            }
          });
          return elements.slice(0, 1);
        },

        /**
         * @function Chart.Interaction.modes.label
         * @deprecated since version 2.4.0
         * @todo remove at version 3
         * @private
         */
        label: indexMode,

        /**
         * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
         * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
         * @function Chart.Interaction.modes.index
         * @since v2.4.0
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use during interaction
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        index: indexMode,

        /**
         * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
         * If the options.intersect is false, we find the nearest item and return the items in that dataset
         * @function Chart.Interaction.modes.dataset
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use during interaction
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        dataset: function dataset(chart, e, options) {
          var position = getRelativePosition(e, chart);
          options.axis = options.axis || 'xy';
          var distanceMetric = getDistanceMetricForAxis(options.axis);
          var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

          if (items.length > 0) {
            items = chart.getDatasetMeta(items[0]._datasetIndex).data;
          }

          return items;
        },

        /**
         * @function Chart.Interaction.modes.x-axis
         * @deprecated since version 2.4.0. Use index mode and intersect == true
         * @todo remove at version 3
         * @private
         */
        'x-axis': function xAxis(chart, e) {
          return indexMode(chart, e, {
            intersect: false
          });
        },

        /**
         * Point mode returns all elements that hit test based on the event position
         * of the event
         * @function Chart.Interaction.modes.intersect
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        point: function point(chart, e) {
          var position = getRelativePosition(e, chart);
          return getIntersectItems(chart, position);
        },

        /**
         * nearest mode returns the element closest to the point
         * @function Chart.Interaction.modes.intersect
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        nearest: function nearest(chart, e, options) {
          var position = getRelativePosition(e, chart);
          options.axis = options.axis || 'xy';
          var distanceMetric = getDistanceMetricForAxis(options.axis);
          var nearestItems = getNearestItems(chart, position, options.intersect, distanceMetric); // We have multiple items at the same distance from the event. Now sort by smallest

          if (nearestItems.length > 1) {
            nearestItems.sort(function (a, b) {
              var sizeA = a.getArea();
              var sizeB = b.getArea();
              var ret = sizeA - sizeB;

              if (ret === 0) {
                // if equal sort by dataset index
                ret = a._datasetIndex - b._datasetIndex;
              }

              return ret;
            });
          } // Return only 1 item


          return nearestItems.slice(0, 1);
        },

        /**
         * x mode returns the elements that hit-test at the current x coordinate
         * @function Chart.Interaction.modes.x
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        x: function x(chart, e, options) {
          var position = getRelativePosition(e, chart);
          var items = [];
          var intersectsItem = false;
          parseVisibleItems(chart, function (element) {
            if (element.inXRange(position.x)) {
              items.push(element);
            }

            if (element.inRange(position.x, position.y)) {
              intersectsItem = true;
            }
          }); // If we want to trigger on an intersect and we don't have any items
          // that intersect the position, return nothing

          if (options.intersect && !intersectsItem) {
            items = [];
          }

          return items;
        },

        /**
         * y mode returns the elements that hit-test at the current y coordinate
         * @function Chart.Interaction.modes.y
         * @param chart {chart} the chart we are returning items from
         * @param e {Event} the event we are find things at
         * @param options {IInteractionOptions} options to use
         * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
         */
        y: function y(chart, e, options) {
          var position = getRelativePosition(e, chart);
          var items = [];
          var intersectsItem = false;
          parseVisibleItems(chart, function (element) {
            if (element.inYRange(position.y)) {
              items.push(element);
            }

            if (element.inRange(position.x, position.y)) {
              intersectsItem = true;
            }
          }); // If we want to trigger on an intersect and we don't have any items
          // that intersect the position, return nothing

          if (options.intersect && !intersectsItem) {
            items = [];
          }

          return items;
        }
      }
    };
  }, {
    "../helpers/index": 109
  }],
  93: [function (require, module, exports) {
    'use strict';

    var defaults = require('./core.defaults');

    defaults._set('global', {
      responsive: true,
      responsiveAnimationDuration: 0,
      maintainAspectRatio: true,
      events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
      hover: {
        onHover: null,
        mode: 'nearest',
        intersect: true,
        animationDuration: 400
      },
      onClick: null,
      defaultColor: 'rgba(0,0,0,0.1)',
      defaultFontColor: '#666',
      defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      defaultFontSize: 12,
      defaultFontStyle: 'normal',
      showLines: true,
      // Element defaults defined in element extensions
      elements: {},
      // Layout options such as padding
      layout: {
        padding: {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        }
      }
    });

    module.exports = function () {
      // Occupy the global variable of Chart, and create a simple base class
      var Chart = function Chart(item, config) {
        this.construct(item, config);
        return this;
      };

      Chart.Chart = Chart;
      return Chart;
    };
  }, {
    "./core.defaults": 89
  }],
  94: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    function filterByPosition(array, position) {
      return helpers.where(array, function (v) {
        return v.position === position;
      });
    }

    function sortByWeight(array, reverse) {
      array.forEach(function (v, i) {
        v._tmpIndex_ = i;
        return v;
      });
      array.sort(function (a, b) {
        var v0 = reverse ? b : a;
        var v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0._tmpIndex_ - v1._tmpIndex_ : v0.weight - v1.weight;
      });
      array.forEach(function (v) {
        delete v._tmpIndex_;
      });
    }
    /**
     * @interface ILayoutItem
     * @prop {String} position - The position of the item in the chart layout. Possible values are
     * 'left', 'top', 'right', 'bottom', and 'chartArea'
     * @prop {Number} weight - The weight used to sort the item. Higher weights are further away from the chart area
     * @prop {Boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
     * @prop {Function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
     * @prop {Function} update - Takes two parameters: width and height. Returns size of item
     * @prop {Function} getPadding -  Returns an object with padding on the edges
     * @prop {Number} width - Width of item. Must be valid after update()
     * @prop {Number} height - Height of item. Must be valid after update()
     * @prop {Number} left - Left edge of the item. Set by layout system and cannot be used in update
     * @prop {Number} top - Top edge of the item. Set by layout system and cannot be used in update
     * @prop {Number} right - Right edge of the item. Set by layout system and cannot be used in update
     * @prop {Number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
     */
    // The layout service is very self explanatory.  It's responsible for the layout within a chart.
    // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
    // It is this service's responsibility of carrying out that layout.


    module.exports = {
      defaults: {},

      /**
       * Register a box to a chart.
       * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
       * @param {Chart} chart - the chart to use
       * @param {ILayoutItem} item - the item to add to be layed out
       */
      addBox: function addBox(chart, item) {
        if (!chart.boxes) {
          chart.boxes = [];
        } // initialize item with default values


        item.fullWidth = item.fullWidth || false;
        item.position = item.position || 'top';
        item.weight = item.weight || 0;
        chart.boxes.push(item);
      },

      /**
       * Remove a layoutItem from a chart
       * @param {Chart} chart - the chart to remove the box from
       * @param {Object} layoutItem - the item to remove from the layout
       */
      removeBox: function removeBox(chart, layoutItem) {
        var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;

        if (index !== -1) {
          chart.boxes.splice(index, 1);
        }
      },

      /**
       * Sets (or updates) options on the given `item`.
       * @param {Chart} chart - the chart in which the item lives (or will be added to)
       * @param {Object} item - the item to configure with the given options
       * @param {Object} options - the new item options.
       */
      configure: function configure(chart, item, options) {
        var props = ['fullWidth', 'position', 'weight'];
        var ilen = props.length;
        var i = 0;
        var prop;

        for (; i < ilen; ++i) {
          prop = props[i];

          if (options.hasOwnProperty(prop)) {
            item[prop] = options[prop];
          }
        }
      },

      /**
       * Fits boxes of the given chart into the given size by having each box measure itself
       * then running a fitting algorithm
       * @param {Chart} chart - the chart
       * @param {Number} width - the width to fit into
       * @param {Number} height - the height to fit into
       */
      update: function update(chart, width, height) {
        if (!chart) {
          return;
        }

        var layoutOptions = chart.options.layout || {};
        var padding = helpers.options.toPadding(layoutOptions.padding);
        var leftPadding = padding.left;
        var rightPadding = padding.right;
        var topPadding = padding.top;
        var bottomPadding = padding.bottom;
        var leftBoxes = filterByPosition(chart.boxes, 'left');
        var rightBoxes = filterByPosition(chart.boxes, 'right');
        var topBoxes = filterByPosition(chart.boxes, 'top');
        var bottomBoxes = filterByPosition(chart.boxes, 'bottom');
        var chartAreaBoxes = filterByPosition(chart.boxes, 'chartArea'); // Sort boxes by weight. A higher weight is further away from the chart area

        sortByWeight(leftBoxes, true);
        sortByWeight(rightBoxes, false);
        sortByWeight(topBoxes, true);
        sortByWeight(bottomBoxes, false); // Essentially we now have any number of boxes on each of the 4 sides.
        // Our canvas looks like the following.
        // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
        // B1 is the bottom axis
        // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
        // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
        // an error will be thrown.
        //
        // |----------------------------------------------------|
        // |                  T1 (Full Width)                   |
        // |----------------------------------------------------|
        // |    |    |                 T2                  |    |
        // |    |----|-------------------------------------|----|
        // |    |    | C1 |                           | C2 |    |
        // |    |    |----|                           |----|    |
        // |    |    |                                     |    |
        // | L1 | L2 |           ChartArea (C0)            | R1 |
        // |    |    |                                     |    |
        // |    |    |----|                           |----|    |
        // |    |    | C3 |                           | C4 |    |
        // |    |----|-------------------------------------|----|
        // |    |    |                 B1                  |    |
        // |----------------------------------------------------|
        // |                  B2 (Full Width)                   |
        // |----------------------------------------------------|
        //
        // What we do to find the best sizing, we do the following
        // 1. Determine the minimum size of the chart area.
        // 2. Split the remaining width equally between each vertical axis
        // 3. Split the remaining height equally between each horizontal axis
        // 4. Give each layout the maximum size it can be. The layout will return it's minimum size
        // 5. Adjust the sizes of each axis based on it's minimum reported size.
        // 6. Refit each axis
        // 7. Position each axis in the final location
        // 8. Tell the chart the final location of the chart area
        // 9. Tell any axes that overlay the chart area the positions of the chart area
        // Step 1

        var chartWidth = width - leftPadding - rightPadding;
        var chartHeight = height - topPadding - bottomPadding;
        var chartAreaWidth = chartWidth / 2; // min 50%

        var chartAreaHeight = chartHeight / 2; // min 50%
        // Step 2

        var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length); // Step 3

        var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length); // Step 4

        var maxChartAreaWidth = chartWidth;
        var maxChartAreaHeight = chartHeight;
        var minBoxSizes = [];

        function getMinimumBoxSize(box) {
          var minSize;
          var isHorizontal = box.isHorizontal();

          if (isHorizontal) {
            minSize = box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
            maxChartAreaHeight -= minSize.height;
          } else {
            minSize = box.update(verticalBoxWidth, maxChartAreaHeight);
            maxChartAreaWidth -= minSize.width;
          }

          minBoxSizes.push({
            horizontal: isHorizontal,
            minSize: minSize,
            box: box
          });
        }

        helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)

        var maxHorizontalLeftPadding = 0;
        var maxHorizontalRightPadding = 0;
        var maxVerticalTopPadding = 0;
        var maxVerticalBottomPadding = 0;
        helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
          if (horizontalBox.getPadding) {
            var boxPadding = horizontalBox.getPadding();
            maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
            maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
          }
        });
        helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
          if (verticalBox.getPadding) {
            var boxPadding = verticalBox.getPadding();
            maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
            maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
          }
        }); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
        // be if the axes are drawn at their minimum sizes.
        // Steps 5 & 6

        var totalLeftBoxesWidth = leftPadding;
        var totalRightBoxesWidth = rightPadding;
        var totalTopBoxesHeight = topPadding;
        var totalBottomBoxesHeight = bottomPadding; // Function to fit a box

        function fitBox(box) {
          var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
            return minBox.box === box;
          });

          if (minBoxSize) {
            if (box.isHorizontal()) {
              var scaleMargin = {
                left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                top: 0,
                bottom: 0
              }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
              // on the margin. Sometimes they need to increase in size slightly

              box.update(box.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
            } else {
              box.update(minBoxSize.minSize.width, maxChartAreaHeight);
            }
          }
        } // Update, and calculate the left and right margins for the horizontal boxes


        helpers.each(leftBoxes.concat(rightBoxes), fitBox);
        helpers.each(leftBoxes, function (box) {
          totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function (box) {
          totalRightBoxesWidth += box.width;
        }); // Set the Left and Right margins for the horizontal boxes

        helpers.each(topBoxes.concat(bottomBoxes), fitBox); // Figure out how much margin is on the top and bottom of the vertical boxes

        helpers.each(topBoxes, function (box) {
          totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function (box) {
          totalBottomBoxesHeight += box.height;
        });

        function finalFitVerticalBox(box) {
          var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
            return minSize.box === box;
          });
          var scaleMargin = {
            left: 0,
            right: 0,
            top: totalTopBoxesHeight,
            bottom: totalBottomBoxesHeight
          };

          if (minBoxSize) {
            box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
          }
        } // Let the left layout know the final margin


        helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)

        totalLeftBoxesWidth = leftPadding;
        totalRightBoxesWidth = rightPadding;
        totalTopBoxesHeight = topPadding;
        totalBottomBoxesHeight = bottomPadding;
        helpers.each(leftBoxes, function (box) {
          totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function (box) {
          totalRightBoxesWidth += box.width;
        });
        helpers.each(topBoxes, function (box) {
          totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function (box) {
          totalBottomBoxesHeight += box.height;
        }); // We may be adding some padding to account for rotated x axis labels

        var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
        totalLeftBoxesWidth += leftPaddingAddition;
        totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
        var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
        totalTopBoxesHeight += topPaddingAddition;
        totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation
        // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
        // without calling `fit` again

        var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
        var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;

        if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
          helpers.each(leftBoxes, function (box) {
            box.height = newMaxChartAreaHeight;
          });
          helpers.each(rightBoxes, function (box) {
            box.height = newMaxChartAreaHeight;
          });
          helpers.each(topBoxes, function (box) {
            if (!box.fullWidth) {
              box.width = newMaxChartAreaWidth;
            }
          });
          helpers.each(bottomBoxes, function (box) {
            if (!box.fullWidth) {
              box.width = newMaxChartAreaWidth;
            }
          });
          maxChartAreaHeight = newMaxChartAreaHeight;
          maxChartAreaWidth = newMaxChartAreaWidth;
        } // Step 7 - Position the boxes


        var left = leftPadding + leftPaddingAddition;
        var top = topPadding + topPaddingAddition;

        function placeBox(box) {
          if (box.isHorizontal()) {
            box.left = box.fullWidth ? leftPadding : totalLeftBoxesWidth;
            box.right = box.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
            box.top = top;
            box.bottom = top + box.height; // Move to next point

            top = box.bottom;
          } else {
            box.left = left;
            box.right = left + box.width;
            box.top = totalTopBoxesHeight;
            box.bottom = totalTopBoxesHeight + maxChartAreaHeight; // Move to next point

            left = box.right;
          }
        }

        helpers.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height

        left += maxChartAreaWidth;
        top += maxChartAreaHeight;
        helpers.each(rightBoxes, placeBox);
        helpers.each(bottomBoxes, placeBox); // Step 8

        chart.chartArea = {
          left: totalLeftBoxesWidth,
          top: totalTopBoxesHeight,
          right: totalLeftBoxesWidth + maxChartAreaWidth,
          bottom: totalTopBoxesHeight + maxChartAreaHeight
        }; // Step 9

        helpers.each(chartAreaBoxes, function (box) {
          box.left = chart.chartArea.left;
          box.top = chart.chartArea.top;
          box.right = chart.chartArea.right;
          box.bottom = chart.chartArea.bottom;
          box.update(maxChartAreaWidth, maxChartAreaHeight);
        });
      }
    };
  }, {
    "../helpers/index": 109
  }],
  95: [function (require, module, exports) {
    'use strict';

    var defaults = require('./core.defaults');

    var helpers = require('../helpers/index');

    defaults._set('global', {
      plugins: {}
    });
    /**
     * The plugin service singleton
     * @namespace Chart.plugins
     * @since 2.1.0
     */


    module.exports = {
      /**
       * Globally registered plugins.
       * @private
       */
      _plugins: [],

      /**
       * This identifier is used to invalidate the descriptors cache attached to each chart
       * when a global plugin is registered or unregistered. In this case, the cache ID is
       * incremented and descriptors are regenerated during following API calls.
       * @private
       */
      _cacheId: 0,

      /**
       * Registers the given plugin(s) if not already registered.
       * @param {Array|Object} plugins plugin instance(s).
       */
      register: function register(plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function (plugin) {
          if (p.indexOf(plugin) === -1) {
            p.push(plugin);
          }
        });
        this._cacheId++;
      },

      /**
       * Unregisters the given plugin(s) only if registered.
       * @param {Array|Object} plugins plugin instance(s).
       */
      unregister: function unregister(plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function (plugin) {
          var idx = p.indexOf(plugin);

          if (idx !== -1) {
            p.splice(idx, 1);
          }
        });
        this._cacheId++;
      },

      /**
       * Remove all registered plugins.
       * @since 2.1.5
       */
      clear: function clear() {
        this._plugins = [];
        this._cacheId++;
      },

      /**
       * Returns the number of registered plugins?
       * @returns {Number}
       * @since 2.1.5
       */
      count: function count() {
        return this._plugins.length;
      },

      /**
       * Returns all registered plugin instances.
       * @returns {Array} array of plugin objects.
       * @since 2.1.5
       */
      getAll: function getAll() {
        return this._plugins;
      },

      /**
       * Calls enabled plugins for `chart` on the specified hook and with the given args.
       * This method immediately returns as soon as a plugin explicitly returns false. The
       * returned value can be used, for instance, to interrupt the current action.
       * @param {Object} chart - The chart instance for which plugins should be called.
       * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
       * @param {Array} [args] - Extra arguments to apply to the hook call.
       * @returns {Boolean} false if any of the plugins return false, else returns true.
       */
      notify: function notify(chart, hook, args) {
        var descriptors = this.descriptors(chart);
        var ilen = descriptors.length;
        var i, descriptor, plugin, params, method;

        for (i = 0; i < ilen; ++i) {
          descriptor = descriptors[i];
          plugin = descriptor.plugin;
          method = plugin[hook];

          if (typeof method === 'function') {
            params = [chart].concat(args || []);
            params.push(descriptor.options);

            if (method.apply(plugin, params) === false) {
              return false;
            }
          }
        }

        return true;
      },

      /**
       * Returns descriptors of enabled plugins for the given chart.
       * @returns {Array} [{ plugin, options }]
       * @private
       */
      descriptors: function descriptors(chart) {
        var cache = chart.$plugins || (chart.$plugins = {});

        if (cache.id === this._cacheId) {
          return cache.descriptors;
        }

        var plugins = [];
        var descriptors = [];
        var config = chart && chart.config || {};
        var options = config.options && config.options.plugins || {};

        this._plugins.concat(config.plugins || []).forEach(function (plugin) {
          var idx = plugins.indexOf(plugin);

          if (idx !== -1) {
            return;
          }

          var id = plugin.id;
          var opts = options[id];

          if (opts === false) {
            return;
          }

          if (opts === true) {
            opts = helpers.clone(defaults.global.plugins[id]);
          }

          plugins.push(plugin);
          descriptors.push({
            plugin: plugin,
            options: opts || {}
          });
        });

        cache.descriptors = descriptors;
        cache.id = this._cacheId;
        return descriptors;
      },

      /**
       * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
       * but in some cases, this reference can be changed by the user when updating options.
       * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
       * @private
       */
      _invalidate: function _invalidate(chart) {
        delete chart.$plugins;
      }
    };
    /**
     * Plugin extension hooks.
     * @interface IPlugin
     * @since 2.1.0
     */

    /**
     * @method IPlugin#beforeInit
     * @desc Called before initializing `chart`.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#afterInit
     * @desc Called after `chart` has been initialized and before the first update.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeUpdate
     * @desc Called before updating `chart`. If any plugin returns `false`, the update
     * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart update.
     */

    /**
     * @method IPlugin#afterUpdate
     * @desc Called after `chart` has been updated and before rendering. Note that this
     * hook will not be called if the chart update has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeDatasetsUpdate
     * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
     * the datasets update is cancelled until another `update` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} false to cancel the datasets update.
     * @since version 2.1.5
    */

    /**
     * @method IPlugin#afterDatasetsUpdate
     * @desc Called after the `chart` datasets have been updated. Note that this hook
     * will not be called if the datasets update has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     * @since version 2.1.5
     */

    /**
     * @method IPlugin#beforeDatasetUpdate
     * @desc Called before updating the `chart` dataset at the given `args.index`. If any plugin
     * returns `false`, the datasets update is cancelled until another `update` is triggered.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Number} args.index - The dataset index.
     * @param {Object} args.meta - The dataset metadata.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart datasets drawing.
     */

    /**
     * @method IPlugin#afterDatasetUpdate
     * @desc Called after the `chart` datasets at the given `args.index` has been updated. Note
     * that this hook will not be called if the datasets update has been previously cancelled.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Number} args.index - The dataset index.
     * @param {Object} args.meta - The dataset metadata.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeLayout
     * @desc Called before laying out `chart`. If any plugin returns `false`,
     * the layout update is cancelled until another `update` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart layout.
     */

    /**
     * @method IPlugin#afterLayout
     * @desc Called after the `chart` has been layed out. Note that this hook will not
     * be called if the layout update has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeRender
     * @desc Called before rendering `chart`. If any plugin returns `false`,
     * the rendering is cancelled until another `render` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart rendering.
     */

    /**
     * @method IPlugin#afterRender
     * @desc Called after the `chart` has been fully rendered (and animation completed). Note
     * that this hook will not be called if the rendering has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeDraw
     * @desc Called before drawing `chart` at every animation frame specified by the given
     * easing value. If any plugin returns `false`, the frame drawing is cancelled until
     * another `render` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart drawing.
     */

    /**
     * @method IPlugin#afterDraw
     * @desc Called after the `chart` has been drawn for the specific easing value. Note
     * that this hook will not be called if the drawing has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeDatasetsDraw
     * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
     * the datasets drawing is cancelled until another `render` is triggered.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart datasets drawing.
     */

    /**
     * @method IPlugin#afterDatasetsDraw
     * @desc Called after the `chart` datasets have been drawn. Note that this hook
     * will not be called if the datasets drawing has been previously cancelled.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeDatasetDraw
     * @desc Called before drawing the `chart` dataset at the given `args.index` (datasets
     * are drawn in the reverse order). If any plugin returns `false`, the datasets drawing
     * is cancelled until another `render` is triggered.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Number} args.index - The dataset index.
     * @param {Object} args.meta - The dataset metadata.
     * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart datasets drawing.
     */

    /**
     * @method IPlugin#afterDatasetDraw
     * @desc Called after the `chart` datasets at the given `args.index` have been drawn
     * (datasets are drawn in the reverse order). Note that this hook will not be called
     * if the datasets drawing has been previously cancelled.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Number} args.index - The dataset index.
     * @param {Object} args.meta - The dataset metadata.
     * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeTooltipDraw
     * @desc Called before drawing the `tooltip`. If any plugin returns `false`,
     * the tooltip drawing is cancelled until another `render` is triggered.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Object} args.tooltip - The tooltip.
     * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     * @returns {Boolean} `false` to cancel the chart tooltip drawing.
     */

    /**
     * @method IPlugin#afterTooltipDraw
     * @desc Called after drawing the `tooltip`. Note that this hook will not
     * be called if the tooltip drawing has been previously cancelled.
     * @param {Chart} chart - The chart instance.
     * @param {Object} args - The call arguments.
     * @param {Object} args.tooltip - The tooltip.
     * @param {Number} args.easingValue - The current animation value, between 0.0 and 1.0.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#beforeEvent
     * @desc Called before processing the specified `event`. If any plugin returns `false`,
     * the event will be discarded.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {IEvent} event - The event object.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#afterEvent
     * @desc Called after the `event` has been consumed. Note that this hook
     * will not be called if the `event` has been previously discarded.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {IEvent} event - The event object.
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#resize
     * @desc Called after the chart as been resized.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
     * @param {Object} options - The plugin options.
     */

    /**
     * @method IPlugin#destroy
     * @desc Called after the chart as been destroyed.
     * @param {Chart.Controller} chart - The chart instance.
     * @param {Object} options - The plugin options.
     */
  }, {
    "../helpers/index": 109,
    "./core.defaults": 89
  }],
  96: [function (require, module, exports) {
    'use strict';

    var defaults = require('./core.defaults');

    var Element = require('./core.element');

    var helpers = require('../helpers/index');

    var Ticks = require('./core.ticks');

    defaults._set('scale', {
      display: true,
      position: 'left',
      offset: false,
      // grid line settings
      gridLines: {
        display: true,
        color: 'rgba(0, 0, 0, 0.1)',
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickMarkLength: 10,
        zeroLineWidth: 1,
        zeroLineColor: 'rgba(0,0,0,0.25)',
        zeroLineBorderDash: [],
        zeroLineBorderDashOffset: 0.0,
        offsetGridLines: false,
        borderDash: [],
        borderDashOffset: 0.0
      },
      // scale label
      scaleLabel: {
        // display property
        display: false,
        // actual label
        labelString: '',
        // line height
        lineHeight: 1.2,
        // top/bottom padding
        padding: {
          top: 4,
          bottom: 4
        }
      },
      // label settings
      ticks: {
        beginAtZero: false,
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        padding: 0,
        reverse: false,
        display: true,
        autoSkip: true,
        autoSkipPadding: 0,
        labelOffset: 0,
        // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
        callback: Ticks.formatters.values,
        minor: {},
        major: {}
      }
    });

    function labelsFromTicks(ticks) {
      var labels = [];
      var i, ilen;

      for (i = 0, ilen = ticks.length; i < ilen; ++i) {
        labels.push(ticks[i].label);
      }

      return labels;
    }

    function getLineValue(scale, index, offsetGridLines) {
      var lineValue = scale.getPixelForTick(index);

      if (offsetGridLines) {
        if (index === 0) {
          lineValue -= (scale.getPixelForTick(1) - lineValue) / 2;
        } else {
          lineValue -= (lineValue - scale.getPixelForTick(index - 1)) / 2;
        }
      }

      return lineValue;
    }

    function computeTextSize(context, tick, font) {
      return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
    }

    function parseFontOptions(options) {
      var valueOrDefault = helpers.valueOrDefault;
      var globalDefaults = defaults.global;
      var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
      var style = valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
      var family = valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
      return {
        size: size,
        style: style,
        family: family,
        font: helpers.fontString(size, style, family)
      };
    }

    function parseLineHeight(options) {
      return helpers.options.toLineHeight(helpers.valueOrDefault(options.lineHeight, 1.2), helpers.valueOrDefault(options.fontSize, defaults.global.defaultFontSize));
    }

    module.exports = Element.extend({
      /**
       * Get the padding needed for the scale
       * @method getPadding
       * @private
       * @returns {Padding} the necessary padding
       */
      getPadding: function getPadding() {
        var me = this;
        return {
          left: me.paddingLeft || 0,
          top: me.paddingTop || 0,
          right: me.paddingRight || 0,
          bottom: me.paddingBottom || 0
        };
      },

      /**
       * Returns the scale tick objects ({label, major})
       * @since 2.7
       */
      getTicks: function getTicks() {
        return this._ticks;
      },
      // These methods are ordered by lifecyle. Utilities then follow.
      // Any function defined here is inherited by all scale types.
      // Any function can be extended by the scale type
      mergeTicksOptions: function mergeTicksOptions() {
        var ticks = this.options.ticks;

        if (ticks.minor === false) {
          ticks.minor = {
            display: false
          };
        }

        if (ticks.major === false) {
          ticks.major = {
            display: false
          };
        }

        for (var key in ticks) {
          if (key !== 'major' && key !== 'minor') {
            if (typeof ticks.minor[key] === 'undefined') {
              ticks.minor[key] = ticks[key];
            }

            if (typeof ticks.major[key] === 'undefined') {
              ticks.major[key] = ticks[key];
            }
          }
        }
      },
      beforeUpdate: function beforeUpdate() {
        helpers.callback(this.options.beforeUpdate, [this]);
      },
      update: function update(maxWidth, maxHeight, margins) {
        var me = this;
        var i, ilen, labels, label, ticks, tick; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

        me.beforeUpdate(); // Absorb the master measurements

        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = helpers.extend({
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        }, margins);
        me.longestTextCache = me.longestTextCache || {}; // Dimensions

        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions(); // Data min/max

        me.beforeDataLimits();
        me.determineDataLimits();
        me.afterDataLimits(); // Ticks - `this.ticks` is now DEPRECATED!
        // Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
        // and must not be accessed directly from outside this class. `this.ticks` being
        // around for long time and not marked as private, we can't change its structure
        // without unexpected breaking changes. If you need to access the scale ticks,
        // use scale.getTicks() instead.

        me.beforeBuildTicks(); // New implementations should return an array of objects but for BACKWARD COMPAT,
        // we still support no return (`this.ticks` internally set by calling this method).

        ticks = me.buildTicks() || [];
        me.afterBuildTicks();
        me.beforeTickToLabelConversion(); // New implementations should return the formatted tick labels but for BACKWARD
        // COMPAT, we still support no return (`this.ticks` internally changed by calling
        // this method and supposed to contain only string values).

        labels = me.convertTicksToLabels(ticks) || me.ticks;
        me.afterTickToLabelConversion();
        me.ticks = labels; // BACKWARD COMPATIBILITY
        // IMPORTANT: from this point, we consider that `this.ticks` will NEVER change!
        // BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)

        for (i = 0, ilen = labels.length; i < ilen; ++i) {
          label = labels[i];
          tick = ticks[i];

          if (!tick) {
            ticks.push(tick = {
              label: label,
              major: false
            });
          } else {
            tick.label = label;
          }
        }

        me._ticks = ticks; // Tick Rotation

        me.beforeCalculateTickRotation();
        me.calculateTickRotation();
        me.afterCalculateTickRotation(); // Fit

        me.beforeFit();
        me.fit();
        me.afterFit(); //

        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: function afterUpdate() {
        helpers.callback(this.options.afterUpdate, [this]);
      },
      //
      beforeSetDimensions: function beforeSetDimensions() {
        helpers.callback(this.options.beforeSetDimensions, [this]);
      },
      setDimensions: function setDimensions() {
        var me = this; // Set the unconstrained dimension before label rotation

        if (me.isHorizontal()) {
          // Reset position before calculating rotation
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight; // Reset position before calculating rotation

          me.top = 0;
          me.bottom = me.height;
        } // Reset padding


        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
      },
      afterSetDimensions: function afterSetDimensions() {
        helpers.callback(this.options.afterSetDimensions, [this]);
      },
      // Data limits
      beforeDataLimits: function beforeDataLimits() {
        helpers.callback(this.options.beforeDataLimits, [this]);
      },
      determineDataLimits: helpers.noop,
      afterDataLimits: function afterDataLimits() {
        helpers.callback(this.options.afterDataLimits, [this]);
      },
      //
      beforeBuildTicks: function beforeBuildTicks() {
        helpers.callback(this.options.beforeBuildTicks, [this]);
      },
      buildTicks: helpers.noop,
      afterBuildTicks: function afterBuildTicks() {
        helpers.callback(this.options.afterBuildTicks, [this]);
      },
      beforeTickToLabelConversion: function beforeTickToLabelConversion() {
        helpers.callback(this.options.beforeTickToLabelConversion, [this]);
      },
      convertTicksToLabels: function convertTicksToLabels() {
        var me = this; // Convert ticks to strings

        var tickOpts = me.options.ticks;
        me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
      },
      afterTickToLabelConversion: function afterTickToLabelConversion() {
        helpers.callback(this.options.afterTickToLabelConversion, [this]);
      },
      //
      beforeCalculateTickRotation: function beforeCalculateTickRotation() {
        helpers.callback(this.options.beforeCalculateTickRotation, [this]);
      },
      calculateTickRotation: function calculateTickRotation() {
        var me = this;
        var context = me.ctx;
        var tickOpts = me.options.ticks;
        var labels = labelsFromTicks(me._ticks); // Get the width of each grid by calculating the difference
        // between x offsets between 0 and 1.

        var tickFont = parseFontOptions(tickOpts);
        context.font = tickFont.font;
        var labelRotation = tickOpts.minRotation || 0;

        if (labels.length && me.options.display && me.isHorizontal()) {
          var originalLabelWidth = helpers.longestText(context, tickFont.font, labels, me.longestTextCache);
          var labelWidth = originalLabelWidth;
          var cosRotation, sinRotation; // Allow 3 pixels x2 padding either side for label readability

          var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter

          while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
            var angleRadians = helpers.toRadians(labelRotation);
            cosRotation = Math.cos(angleRadians);
            sinRotation = Math.sin(angleRadians);

            if (sinRotation * originalLabelWidth > me.maxHeight) {
              // go back one step
              labelRotation--;
              break;
            }

            labelRotation++;
            labelWidth = cosRotation * originalLabelWidth;
          }
        }

        me.labelRotation = labelRotation;
      },
      afterCalculateTickRotation: function afterCalculateTickRotation() {
        helpers.callback(this.options.afterCalculateTickRotation, [this]);
      },
      //
      beforeFit: function beforeFit() {
        helpers.callback(this.options.beforeFit, [this]);
      },
      fit: function fit() {
        var me = this; // Reset

        var minSize = me.minSize = {
          width: 0,
          height: 0
        };
        var labels = labelsFromTicks(me._ticks);
        var opts = me.options;
        var tickOpts = opts.ticks;
        var scaleLabelOpts = opts.scaleLabel;
        var gridLineOpts = opts.gridLines;
        var display = opts.display;
        var isHorizontal = me.isHorizontal();
        var tickFont = parseFontOptions(tickOpts);
        var tickMarkLength = opts.gridLines.tickMarkLength; // Width

        if (isHorizontal) {
          // subtract the margins to line up with the chartArea if we are a full width scale
          minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
        } else {
          minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        } // height


        if (isHorizontal) {
          minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        } else {
          minSize.height = me.maxHeight; // fill all the height
        } // Are we showing a title for the scale?


        if (scaleLabelOpts.display && display) {
          var scaleLabelLineHeight = parseLineHeight(scaleLabelOpts);
          var scaleLabelPadding = helpers.options.toPadding(scaleLabelOpts.padding);
          var deltaHeight = scaleLabelLineHeight + scaleLabelPadding.height;

          if (isHorizontal) {
            minSize.height += deltaHeight;
          } else {
            minSize.width += deltaHeight;
          }
        } // Don't bother fitting the ticks if we are not showing them


        if (tickOpts.display && display) {
          var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, labels, me.longestTextCache);
          var tallestLabelHeightInLines = helpers.numberOfLabelLines(labels);
          var lineSpace = tickFont.size * 0.5;
          var tickPadding = me.options.ticks.padding;

          if (isHorizontal) {
            // A horizontal axis is more constrained by the height.
            me.longestLabelWidth = largestTextWidth;
            var angleRadians = helpers.toRadians(me.labelRotation);
            var cosRotation = Math.cos(angleRadians);
            var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation

            var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * (tallestLabelHeightInLines - 1) + lineSpace; // padding

            minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
            me.ctx.font = tickFont.font;
            var firstLabelWidth = computeTextSize(me.ctx, labels[0], tickFont.font);
            var lastLabelWidth = computeTextSize(me.ctx, labels[labels.length - 1], tickFont.font); // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
            // which means that the right padding is dominated by the font height

            if (me.labelRotation !== 0) {
              me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3; // add 3 px to move away from canvas edges

              me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
            } else {
              me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges

              me.paddingRight = lastLabelWidth / 2 + 3;
            }
          } else {
            // A vertical axis is more constrained by the width. Labels are the
            // dominant factor here, so get that length first and account for padding
            if (tickOpts.mirror) {
              largestTextWidth = 0;
            } else {
              // use lineSpace for consistency with horizontal axis
              // tickPadding is not implemented for horizontal
              largestTextWidth += tickPadding + lineSpace;
            }

            minSize.width = Math.min(me.maxWidth, minSize.width + largestTextWidth);
            me.paddingTop = tickFont.size / 2;
            me.paddingBottom = tickFont.size / 2;
          }
        }

        me.handleMargins();
        me.width = minSize.width;
        me.height = minSize.height;
      },

      /**
       * Handle margins and padding interactions
       * @private
       */
      handleMargins: function handleMargins() {
        var me = this;

        if (me.margins) {
          me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
          me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
          me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
          me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
        }
      },
      afterFit: function afterFit() {
        helpers.callback(this.options.afterFit, [this]);
      },
      // Shared Methods
      isHorizontal: function isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
      },
      isFullWidth: function isFullWidth() {
        return this.options.fullWidth;
      },
      // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
      getRightValue: function getRightValue(rawValue) {
        // Null and undefined values first
        if (helpers.isNullOrUndef(rawValue)) {
          return NaN;
        } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values


        if (typeof rawValue === 'number' && !isFinite(rawValue)) {
          return NaN;
        } // If it is in fact an object, dive in one more level


        if (rawValue) {
          if (this.isHorizontal()) {
            if (rawValue.x !== undefined) {
              return this.getRightValue(rawValue.x);
            }
          } else if (rawValue.y !== undefined) {
            return this.getRightValue(rawValue.y);
          }
        } // Value is good, return it


        return rawValue;
      },

      /**
       * Used to get the value to display in the tooltip for the data at the given index
       * @param index
       * @param datasetIndex
       */
      getLabelForIndex: helpers.noop,

      /**
       * Returns the location of the given data point. Value can either be an index or a numerical value
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       * @param value
       * @param index
       * @param datasetIndex
       */
      getPixelForValue: helpers.noop,

      /**
       * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       * @param pixel
       */
      getValueForPixel: helpers.noop,

      /**
       * Returns the location of the tick at the given index
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getPixelForTick: function getPixelForTick(index) {
        var me = this;
        var offset = me.options.offset;

        if (me.isHorizontal()) {
          var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
          var tickWidth = innerWidth / Math.max(me._ticks.length - (offset ? 0 : 1), 1);
          var pixel = tickWidth * index + me.paddingLeft;

          if (offset) {
            pixel += tickWidth / 2;
          }

          var finalVal = me.left + Math.round(pixel);
          finalVal += me.isFullWidth() ? me.margins.left : 0;
          return finalVal;
        }

        var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
        return me.top + index * (innerHeight / (me._ticks.length - 1));
      },

      /**
       * Utility for getting the pixel location of a percentage of scale
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getPixelForDecimal: function getPixelForDecimal(decimal) {
        var me = this;

        if (me.isHorizontal()) {
          var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
          var valueOffset = innerWidth * decimal + me.paddingLeft;
          var finalVal = me.left + Math.round(valueOffset);
          finalVal += me.isFullWidth() ? me.margins.left : 0;
          return finalVal;
        }

        return me.top + decimal * me.height;
      },

      /**
       * Returns the pixel for the minimum chart value
       * The coordinate (0, 0) is at the upper-left corner of the canvas
       */
      getBasePixel: function getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
      },
      getBaseValue: function getBaseValue() {
        var me = this;
        var min = me.min;
        var max = me.max;
        return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
      },

      /**
       * Returns a subset of ticks to be plotted to avoid overlapping labels.
       * @private
       */
      _autoSkip: function _autoSkip(ticks) {
        var skipRatio;
        var me = this;
        var isHorizontal = me.isHorizontal();
        var optionTicks = me.options.ticks.minor;
        var tickCount = ticks.length;
        var labelRotationRadians = helpers.toRadians(me.labelRotation);
        var cosRotation = Math.cos(labelRotationRadians);
        var longestRotatedLabel = me.longestLabelWidth * cosRotation;
        var result = [];
        var i, tick, shouldSkip; // figure out the maximum number of gridlines to show

        var maxTicks;

        if (optionTicks.maxTicksLimit) {
          maxTicks = optionTicks.maxTicksLimit;
        }

        if (isHorizontal) {
          skipRatio = false;

          if ((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount > me.width - (me.paddingLeft + me.paddingRight)) {
            skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * tickCount / (me.width - (me.paddingLeft + me.paddingRight)));
          } // if they defined a max number of optionTicks,
          // increase skipRatio until that number is met


          if (maxTicks && tickCount > maxTicks) {
            skipRatio = Math.max(skipRatio, Math.floor(tickCount / maxTicks));
          }
        }

        for (i = 0; i < tickCount; i++) {
          tick = ticks[i]; // Since we always show the last tick,we need may need to hide the last shown one before

          shouldSkip = skipRatio > 1 && i % skipRatio > 0 || i % skipRatio === 0 && i + skipRatio >= tickCount;

          if (shouldSkip && i !== tickCount - 1) {
            // leave tick in place but make sure it's not displayed (#4635)
            delete tick.label;
          }

          result.push(tick);
        }

        return result;
      },
      // Actually draw the scale on the canvas
      // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
      draw: function draw(chartArea) {
        var me = this;
        var options = me.options;

        if (!options.display) {
          return;
        }

        var context = me.ctx;
        var globalDefaults = defaults.global;
        var optionTicks = options.ticks.minor;
        var optionMajorTicks = options.ticks.major || optionTicks;
        var gridLines = options.gridLines;
        var scaleLabel = options.scaleLabel;
        var isRotated = me.labelRotation !== 0;
        var isHorizontal = me.isHorizontal();
        var ticks = optionTicks.autoSkip ? me._autoSkip(me.getTicks()) : me.getTicks();
        var tickFontColor = helpers.valueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
        var tickFont = parseFontOptions(optionTicks);
        var majorTickFontColor = helpers.valueOrDefault(optionMajorTicks.fontColor, globalDefaults.defaultFontColor);
        var majorTickFont = parseFontOptions(optionMajorTicks);
        var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
        var scaleLabelFontColor = helpers.valueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
        var scaleLabelFont = parseFontOptions(scaleLabel);
        var scaleLabelPadding = helpers.options.toPadding(scaleLabel.padding);
        var labelRotationRadians = helpers.toRadians(me.labelRotation);
        var itemsToDraw = [];
        var axisWidth = me.options.gridLines.lineWidth;
        var xTickStart = options.position === 'right' ? me.left : me.right - axisWidth - tl;
        var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
        var yTickStart = options.position === 'bottom' ? me.top + axisWidth : me.bottom - tl - axisWidth;
        var yTickEnd = options.position === 'bottom' ? me.top + axisWidth + tl : me.bottom + axisWidth;
        helpers.each(ticks, function (tick, index) {
          // autoskipper skipped this tick (#4635)
          if (helpers.isNullOrUndef(tick.label)) {
            return;
          }

          var label = tick.label;
          var lineWidth, lineColor, borderDash, borderDashOffset;

          if (index === me.zeroLineIndex && options.offset === gridLines.offsetGridLines) {
            // Draw the first index specially
            lineWidth = gridLines.zeroLineWidth;
            lineColor = gridLines.zeroLineColor;
            borderDash = gridLines.zeroLineBorderDash;
            borderDashOffset = gridLines.zeroLineBorderDashOffset;
          } else {
            lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, index);
            lineColor = helpers.valueAtIndexOrDefault(gridLines.color, index);
            borderDash = helpers.valueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
            borderDashOffset = helpers.valueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
          } // Common properties


          var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
          var textAlign = 'middle';
          var textBaseline = 'middle';
          var tickPadding = optionTicks.padding;

          if (isHorizontal) {
            var labelYOffset = tl + tickPadding;

            if (options.position === 'bottom') {
              // bottom
              textBaseline = !isRotated ? 'top' : 'middle';
              textAlign = !isRotated ? 'center' : 'right';
              labelY = me.top + labelYOffset;
            } else {
              // top
              textBaseline = !isRotated ? 'bottom' : 'middle';
              textAlign = !isRotated ? 'center' : 'left';
              labelY = me.bottom - labelYOffset;
            }

            var xLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);

            if (xLineValue < me.left) {
              lineColor = 'rgba(0,0,0,0)';
            }

            xLineValue += helpers.aliasPixel(lineWidth);
            labelX = me.getPixelForTick(index) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)

            tx1 = tx2 = x1 = x2 = xLineValue;
            ty1 = yTickStart;
            ty2 = yTickEnd;
            y1 = chartArea.top;
            y2 = chartArea.bottom + axisWidth;
          } else {
            var isLeft = options.position === 'left';
            var labelXOffset;

            if (optionTicks.mirror) {
              textAlign = isLeft ? 'left' : 'right';
              labelXOffset = tickPadding;
            } else {
              textAlign = isLeft ? 'right' : 'left';
              labelXOffset = tl + tickPadding;
            }

            labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
            var yLineValue = getLineValue(me, index, gridLines.offsetGridLines && ticks.length > 1);

            if (yLineValue < me.top) {
              lineColor = 'rgba(0,0,0,0)';
            }

            yLineValue += helpers.aliasPixel(lineWidth);
            labelY = me.getPixelForTick(index) + optionTicks.labelOffset;
            tx1 = xTickStart;
            tx2 = xTickEnd;
            x1 = chartArea.left;
            x2 = chartArea.right + axisWidth;
            ty1 = ty2 = y1 = y2 = yLineValue;
          }

          itemsToDraw.push({
            tx1: tx1,
            ty1: ty1,
            tx2: tx2,
            ty2: ty2,
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2,
            labelX: labelX,
            labelY: labelY,
            glWidth: lineWidth,
            glColor: lineColor,
            glBorderDash: borderDash,
            glBorderDashOffset: borderDashOffset,
            rotation: -1 * labelRotationRadians,
            label: label,
            major: tick.major,
            textBaseline: textBaseline,
            textAlign: textAlign
          });
        }); // Draw all of the tick labels, tick marks, and grid lines at the correct places

        helpers.each(itemsToDraw, function (itemToDraw) {
          if (gridLines.display) {
            context.save();
            context.lineWidth = itemToDraw.glWidth;
            context.strokeStyle = itemToDraw.glColor;

            if (context.setLineDash) {
              context.setLineDash(itemToDraw.glBorderDash);
              context.lineDashOffset = itemToDraw.glBorderDashOffset;
            }

            context.beginPath();

            if (gridLines.drawTicks) {
              context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
              context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
            }

            if (gridLines.drawOnChartArea) {
              context.moveTo(itemToDraw.x1, itemToDraw.y1);
              context.lineTo(itemToDraw.x2, itemToDraw.y2);
            }

            context.stroke();
            context.restore();
          }

          if (optionTicks.display) {
            // Make sure we draw text in the correct color and font
            context.save();
            context.translate(itemToDraw.labelX, itemToDraw.labelY);
            context.rotate(itemToDraw.rotation);
            context.font = itemToDraw.major ? majorTickFont.font : tickFont.font;
            context.fillStyle = itemToDraw.major ? majorTickFontColor : tickFontColor;
            context.textBaseline = itemToDraw.textBaseline;
            context.textAlign = itemToDraw.textAlign;
            var label = itemToDraw.label;

            if (helpers.isArray(label)) {
              var lineCount = label.length;
              var lineHeight = tickFont.size * 1.5;
              var y = me.isHorizontal() ? 0 : -lineHeight * (lineCount - 1) / 2;

              for (var i = 0; i < lineCount; ++i) {
                // We just make sure the multiline element is a string here..
                context.fillText('' + label[i], 0, y); // apply same lineSpacing as calculated @ L#320

                y += lineHeight;
              }
            } else {
              context.fillText(label, 0, 0);
            }

            context.restore();
          }
        });

        if (scaleLabel.display) {
          // Draw the scale label
          var scaleLabelX;
          var scaleLabelY;
          var rotation = 0;
          var halfLineHeight = parseLineHeight(scaleLabel) / 2;

          if (isHorizontal) {
            scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width

            scaleLabelY = options.position === 'bottom' ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
          } else {
            var isLeft = options.position === 'left';
            scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
            scaleLabelY = me.top + (me.bottom - me.top) / 2;
            rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
          }

          context.save();
          context.translate(scaleLabelX, scaleLabelY);
          context.rotate(rotation);
          context.textAlign = 'center';
          context.textBaseline = 'middle';
          context.fillStyle = scaleLabelFontColor; // render in correct colour

          context.font = scaleLabelFont.font;
          context.fillText(scaleLabel.labelString, 0, 0);
          context.restore();
        }

        if (gridLines.drawBorder) {
          // Draw the line at the edge of the axis
          context.lineWidth = helpers.valueAtIndexOrDefault(gridLines.lineWidth, 0);
          context.strokeStyle = helpers.valueAtIndexOrDefault(gridLines.color, 0);
          var x1 = me.left;
          var x2 = me.right + axisWidth;
          var y1 = me.top;
          var y2 = me.bottom + axisWidth;
          var aliasPixel = helpers.aliasPixel(context.lineWidth);

          if (isHorizontal) {
            y1 = y2 = options.position === 'top' ? me.bottom : me.top;
            y1 += aliasPixel;
            y2 += aliasPixel;
          } else {
            x1 = x2 = options.position === 'left' ? me.right : me.left;
            x1 += aliasPixel;
            x2 += aliasPixel;
          }

          context.beginPath();
          context.moveTo(x1, y1);
          context.lineTo(x2, y2);
          context.stroke();
        }
      }
    });
  }, {
    "../helpers/index": 109,
    "./core.defaults": 89,
    "./core.element": 90,
    "./core.ticks": 98
  }],
  97: [function (require, module, exports) {
    'use strict';

    var defaults = require('./core.defaults');

    var helpers = require('../helpers/index');

    var layouts = require('./core.layouts');

    module.exports = {
      // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
      // use the new chart options to grab the correct scale
      constructors: {},
      // Use a registration function so that we can move to an ES6 map when we no longer need to support
      // old browsers
      // Scale config defaults
      defaults: {},
      registerScaleType: function registerScaleType(type, scaleConstructor, scaleDefaults) {
        this.constructors[type] = scaleConstructor;
        this.defaults[type] = helpers.clone(scaleDefaults);
      },
      getScaleConstructor: function getScaleConstructor(type) {
        return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
      },
      getScaleDefaults: function getScaleDefaults(type) {
        // Return the scale defaults merged with the global settings so that we always use the latest ones
        return this.defaults.hasOwnProperty(type) ? helpers.merge({}, [defaults.scale, this.defaults[type]]) : {};
      },
      updateScaleDefaults: function updateScaleDefaults(type, additions) {
        var me = this;

        if (me.defaults.hasOwnProperty(type)) {
          me.defaults[type] = helpers.extend(me.defaults[type], additions);
        }
      },
      addScalesToLayout: function addScalesToLayout(chart) {
        // Adds each scale to the chart.boxes array to be sized accordingly
        helpers.each(chart.scales, function (scale) {
          // Set ILayoutItem parameters for backwards compatibility
          scale.fullWidth = scale.options.fullWidth;
          scale.position = scale.options.position;
          scale.weight = scale.options.weight;
          layouts.addBox(chart, scale);
        });
      }
    };
  }, {
    "../helpers/index": 109,
    "./core.defaults": 89,
    "./core.layouts": 94
  }],
  98: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');
    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */


    module.exports = {
      /**
       * Namespace to hold formatters for different types of ticks
       * @namespace Chart.Ticks.formatters
       */
      formatters: {
        /**
         * Formatter for value labels
         * @method Chart.Ticks.formatters.values
         * @param value the value to display
         * @return {String|Array} the label to display
         */
        values: function values(value) {
          return helpers.isArray(value) ? value : '' + value;
        },

        /**
         * Formatter for linear numeric ticks
         * @method Chart.Ticks.formatters.linear
         * @param tickValue {Number} the value to be formatted
         * @param index {Number} the position of the tickValue parameter in the ticks array
         * @param ticks {Array<Number>} the list of ticks being converted
         * @return {String} string representation of the tickValue parameter
         */
        linear: function linear(tickValue, index, ticks) {
          // If we have lots of ticks, don't use the ones
          var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need

          if (Math.abs(delta) > 1) {
            if (tickValue !== Math.floor(tickValue)) {
              // not an integer
              delta = tickValue - Math.floor(tickValue);
            }
          }

          var logDelta = helpers.log10(Math.abs(delta));
          var tickString = '';

          if (tickValue !== 0) {
            var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));

            if (maxTick < 1e-4) {
              // all ticks are small numbers; use scientific notation
              var logTick = helpers.log10(Math.abs(tickValue));
              tickString = tickValue.toExponential(Math.floor(logTick) - Math.floor(logDelta));
            } else {
              var numDecimal = -1 * Math.floor(logDelta);
              numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places

              tickString = tickValue.toFixed(numDecimal);
            }
          } else {
            tickString = '0'; // never show decimal places for 0
          }

          return tickString;
        },
        logarithmic: function logarithmic(tickValue, index, ticks) {
          var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));

          if (tickValue === 0) {
            return '0';
          } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
            return tickValue.toExponential();
          }

          return '';
        }
      }
    };
  }, {
    "../helpers/index": 109
  }],
  99: [function (require, module, exports) {
    'use strict';

    var defaults = require('./core.defaults');

    var Element = require('./core.element');

    var helpers = require('../helpers/index');

    defaults._set('global', {
      tooltips: {
        enabled: true,
        custom: null,
        mode: 'nearest',
        position: 'average',
        intersect: true,
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleFontStyle: 'bold',
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleFontColor: '#fff',
        titleAlign: 'left',
        bodySpacing: 2,
        bodyFontColor: '#fff',
        bodyAlign: 'left',
        footerFontStyle: 'bold',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFontColor: '#fff',
        footerAlign: 'left',
        yPadding: 6,
        xPadding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        multiKeyBackground: '#fff',
        displayColors: true,
        borderColor: 'rgba(0,0,0,0)',
        borderWidth: 0,
        callbacks: {
          // Args are: (tooltipItems, data)
          beforeTitle: helpers.noop,
          title: function title(tooltipItems, data) {
            // Pick first xLabel for now
            var title = '';
            var labels = data.labels;
            var labelCount = labels ? labels.length : 0;

            if (tooltipItems.length > 0) {
              var item = tooltipItems[0];

              if (item.xLabel) {
                title = item.xLabel;
              } else if (labelCount > 0 && item.index < labelCount) {
                title = labels[item.index];
              }
            }

            return title;
          },
          afterTitle: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeBody: helpers.noop,
          // Args are: (tooltipItem, data)
          beforeLabel: helpers.noop,
          label: function label(tooltipItem, data) {
            var label = data.datasets[tooltipItem.datasetIndex].label || '';

            if (label) {
              label += ': ';
            }

            label += tooltipItem.yLabel;
            return label;
          },
          labelColor: function labelColor(tooltipItem, chart) {
            var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
            var activeElement = meta.data[tooltipItem.index];
            var view = activeElement._view;
            return {
              borderColor: view.borderColor,
              backgroundColor: view.backgroundColor
            };
          },
          labelTextColor: function labelTextColor() {
            return this._options.bodyFontColor;
          },
          afterLabel: helpers.noop,
          // Args are: (tooltipItems, data)
          afterBody: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeFooter: helpers.noop,
          footer: helpers.noop,
          afterFooter: helpers.noop
        }
      }
    });

    var positioners = {
      /**
       * Average mode places the tooltip at the average position of the elements shown
       * @function Chart.Tooltip.positioners.average
       * @param elements {ChartElement[]} the elements being displayed in the tooltip
       * @returns {Point} tooltip position
       */
      average: function average(elements) {
        if (!elements.length) {
          return false;
        }

        var i, len;
        var x = 0;
        var y = 0;
        var count = 0;

        for (i = 0, len = elements.length; i < len; ++i) {
          var el = elements[i];

          if (el && el.hasValue()) {
            var pos = el.tooltipPosition();
            x += pos.x;
            y += pos.y;
            ++count;
          }
        }

        return {
          x: Math.round(x / count),
          y: Math.round(y / count)
        };
      },

      /**
       * Gets the tooltip position nearest of the item nearest to the event position
       * @function Chart.Tooltip.positioners.nearest
       * @param elements {Chart.Element[]} the tooltip elements
       * @param eventPosition {Point} the position of the event in canvas coordinates
       * @returns {Point} the tooltip position
       */
      nearest: function nearest(elements, eventPosition) {
        var x = eventPosition.x;
        var y = eventPosition.y;
        var minDistance = Number.POSITIVE_INFINITY;
        var i, len, nearestElement;

        for (i = 0, len = elements.length; i < len; ++i) {
          var el = elements[i];

          if (el && el.hasValue()) {
            var center = el.getCenterPoint();
            var d = helpers.distanceBetweenPoints(eventPosition, center);

            if (d < minDistance) {
              minDistance = d;
              nearestElement = el;
            }
          }
        }

        if (nearestElement) {
          var tp = nearestElement.tooltipPosition();
          x = tp.x;
          y = tp.y;
        }

        return {
          x: x,
          y: y
        };
      }
    };
    /**
     * Helper method to merge the opacity into a color
     */

    function mergeOpacity(colorString, opacity) {
      var color = helpers.color(colorString);
      return color.alpha(opacity * color.alpha()).rgbaString();
    } // Helper to push or concat based on if the 2nd parameter is an array or not


    function pushOrConcat(base, toPush) {
      if (toPush) {
        if (helpers.isArray(toPush)) {
          // base = base.concat(toPush);
          Array.prototype.push.apply(base, toPush);
        } else {
          base.push(toPush);
        }
      }

      return base;
    }
    /**
     * Returns array of strings split by newline
     * @param {String} value - The value to split by newline.
     * @returns {Array} value if newline present - Returned from String split() method
     * @function
     */


    function splitNewlines(str) {
      if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
        return str.split('\n');
      }

      return str;
    } // Private helper to create a tooltip item model
    // @param element : the chart element (point, arc, bar) to create the tooltip item for
    // @return : new tooltip item


    function createTooltipItem(element) {
      var xScale = element._xScale;
      var yScale = element._yScale || element._scale; // handle radar || polarArea charts

      var index = element._index;
      var datasetIndex = element._datasetIndex;
      return {
        xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
        yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
        index: index,
        datasetIndex: datasetIndex,
        x: element._model.x,
        y: element._model.y
      };
    }
    /**
     * Helper to get the reset model for the tooltip
     * @param tooltipOpts {Object} the tooltip options
     */


    function getBaseModel(tooltipOpts) {
      var globalDefaults = defaults.global;
      var valueOrDefault = helpers.valueOrDefault;
      return {
        // Positioning
        xPadding: tooltipOpts.xPadding,
        yPadding: tooltipOpts.yPadding,
        xAlign: tooltipOpts.xAlign,
        yAlign: tooltipOpts.yAlign,
        // Body
        bodyFontColor: tooltipOpts.bodyFontColor,
        _bodyFontFamily: valueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
        _bodyFontStyle: valueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
        _bodyAlign: tooltipOpts.bodyAlign,
        bodyFontSize: valueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
        bodySpacing: tooltipOpts.bodySpacing,
        // Title
        titleFontColor: tooltipOpts.titleFontColor,
        _titleFontFamily: valueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
        _titleFontStyle: valueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
        titleFontSize: valueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
        _titleAlign: tooltipOpts.titleAlign,
        titleSpacing: tooltipOpts.titleSpacing,
        titleMarginBottom: tooltipOpts.titleMarginBottom,
        // Footer
        footerFontColor: tooltipOpts.footerFontColor,
        _footerFontFamily: valueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
        _footerFontStyle: valueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
        footerFontSize: valueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
        _footerAlign: tooltipOpts.footerAlign,
        footerSpacing: tooltipOpts.footerSpacing,
        footerMarginTop: tooltipOpts.footerMarginTop,
        // Appearance
        caretSize: tooltipOpts.caretSize,
        cornerRadius: tooltipOpts.cornerRadius,
        backgroundColor: tooltipOpts.backgroundColor,
        opacity: 0,
        legendColorBackground: tooltipOpts.multiKeyBackground,
        displayColors: tooltipOpts.displayColors,
        borderColor: tooltipOpts.borderColor,
        borderWidth: tooltipOpts.borderWidth
      };
    }
    /**
     * Get the size of the tooltip
     */


    function getTooltipSize(tooltip, model) {
      var ctx = tooltip._chart.ctx;
      var height = model.yPadding * 2; // Tooltip Padding

      var width = 0; // Count of all lines in the body

      var body = model.body;
      var combinedBodyLength = body.reduce(function (count, bodyItem) {
        return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
      }, 0);
      combinedBodyLength += model.beforeBody.length + model.afterBody.length;
      var titleLineCount = model.title.length;
      var footerLineCount = model.footer.length;
      var titleFontSize = model.titleFontSize;
      var bodyFontSize = model.bodyFontSize;
      var footerFontSize = model.footerFontSize;
      height += titleLineCount * titleFontSize; // Title Lines

      height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing

      height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin

      height += combinedBodyLength * bodyFontSize; // Body Lines

      height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing

      height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin

      height += footerLineCount * footerFontSize; // Footer Lines

      height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
      // Title width

      var widthPadding = 0;

      var maxLineWidth = function maxLineWidth(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
      };

      ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
      helpers.each(model.title, maxLineWidth); // Body width

      ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
      helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box

      widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
      helpers.each(body, function (bodyItem) {
        helpers.each(bodyItem.before, maxLineWidth);
        helpers.each(bodyItem.lines, maxLineWidth);
        helpers.each(bodyItem.after, maxLineWidth);
      }); // Reset back to 0

      widthPadding = 0; // Footer width

      ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
      helpers.each(model.footer, maxLineWidth); // Add padding

      width += 2 * model.xPadding;
      return {
        width: width,
        height: height
      };
    }
    /**
     * Helper to get the alignment of a tooltip given the size
     */


    function determineAlignment(tooltip, size) {
      var model = tooltip._model;
      var chart = tooltip._chart;
      var chartArea = tooltip._chart.chartArea;
      var xAlign = 'center';
      var yAlign = 'center';

      if (model.y < size.height) {
        yAlign = 'top';
      } else if (model.y > chart.height - size.height) {
        yAlign = 'bottom';
      }

      var lf, rf; // functions to determine left, right alignment

      var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart

      var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges

      var midX = (chartArea.left + chartArea.right) / 2;
      var midY = (chartArea.top + chartArea.bottom) / 2;

      if (yAlign === 'center') {
        lf = function lf(x) {
          return x <= midX;
        };

        rf = function rf(x) {
          return x > midX;
        };
      } else {
        lf = function lf(x) {
          return x <= size.width / 2;
        };

        rf = function rf(x) {
          return x >= chart.width - size.width / 2;
        };
      }

      olf = function olf(x) {
        return x + size.width + model.caretSize + model.caretPadding > chart.width;
      };

      orf = function orf(x) {
        return x - size.width - model.caretSize - model.caretPadding < 0;
      };

      yf = function yf(y) {
        return y <= midY ? 'top' : 'bottom';
      };

      if (lf(model.x)) {
        xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?

        if (olf(model.x)) {
          xAlign = 'center';
          yAlign = yf(model.y);
        }
      } else if (rf(model.x)) {
        xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?

        if (orf(model.x)) {
          xAlign = 'center';
          yAlign = yf(model.y);
        }
      }

      var opts = tooltip._options;
      return {
        xAlign: opts.xAlign ? opts.xAlign : xAlign,
        yAlign: opts.yAlign ? opts.yAlign : yAlign
      };
    }
    /**
     * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
     */


    function getBackgroundPoint(vm, size, alignment, chart) {
      // Background Position
      var x = vm.x;
      var y = vm.y;
      var caretSize = vm.caretSize;
      var caretPadding = vm.caretPadding;
      var cornerRadius = vm.cornerRadius;
      var xAlign = alignment.xAlign;
      var yAlign = alignment.yAlign;
      var paddingAndSize = caretSize + caretPadding;
      var radiusAndPadding = cornerRadius + caretPadding;

      if (xAlign === 'right') {
        x -= size.width;
      } else if (xAlign === 'center') {
        x -= size.width / 2;

        if (x + size.width > chart.width) {
          x = chart.width - size.width;
        }

        if (x < 0) {
          x = 0;
        }
      }

      if (yAlign === 'top') {
        y += paddingAndSize;
      } else if (yAlign === 'bottom') {
        y -= size.height + paddingAndSize;
      } else {
        y -= size.height / 2;
      }

      if (yAlign === 'center') {
        if (xAlign === 'left') {
          x += paddingAndSize;
        } else if (xAlign === 'right') {
          x -= paddingAndSize;
        }
      } else if (xAlign === 'left') {
        x -= radiusAndPadding;
      } else if (xAlign === 'right') {
        x += radiusAndPadding;
      }

      return {
        x: x,
        y: y
      };
    }
    /**
     * Helper to build before and after body lines
     */


    function getBeforeAfterBodyLines(callback) {
      return pushOrConcat([], splitNewlines(callback));
    }

    var exports = module.exports = Element.extend({
      initialize: function initialize() {
        this._model = getBaseModel(this._options);
        this._lastActive = [];
      },
      // Get the title
      // Args are: (tooltipItem, data)
      getTitle: function getTitle() {
        var me = this;
        var opts = me._options;
        var callbacks = opts.callbacks;
        var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
        var title = callbacks.title.apply(me, arguments);
        var afterTitle = callbacks.afterTitle.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
      },
      // Args are: (tooltipItem, data)
      getBeforeBody: function getBeforeBody() {
        return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
      },
      // Args are: (tooltipItem, data)
      getBody: function getBody(tooltipItems, data) {
        var me = this;
        var callbacks = me._options.callbacks;
        var bodyItems = [];
        helpers.each(tooltipItems, function (tooltipItem) {
          var bodyItem = {
            before: [],
            lines: [],
            after: []
          };
          pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
          pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
          pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
          bodyItems.push(bodyItem);
        });
        return bodyItems;
      },
      // Args are: (tooltipItem, data)
      getAfterBody: function getAfterBody() {
        return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
      },
      // Get the footer and beforeFooter and afterFooter lines
      // Args are: (tooltipItem, data)
      getFooter: function getFooter() {
        var me = this;
        var callbacks = me._options.callbacks;
        var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
        var footer = callbacks.footer.apply(me, arguments);
        var afterFooter = callbacks.afterFooter.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
      },
      update: function update(changed) {
        var me = this;
        var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
        // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
        // which breaks any animations.

        var existingModel = me._model;
        var model = me._model = getBaseModel(opts);
        var active = me._active;
        var data = me._data; // In the case where active.length === 0 we need to keep these at existing values for good animations

        var alignment = {
          xAlign: existingModel.xAlign,
          yAlign: existingModel.yAlign
        };
        var backgroundPoint = {
          x: existingModel.x,
          y: existingModel.y
        };
        var tooltipSize = {
          width: existingModel.width,
          height: existingModel.height
        };
        var tooltipPosition = {
          x: existingModel.caretX,
          y: existingModel.caretY
        };
        var i, len;

        if (active.length) {
          model.opacity = 1;
          var labelColors = [];
          var labelTextColors = [];
          tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
          var tooltipItems = [];

          for (i = 0, len = active.length; i < len; ++i) {
            tooltipItems.push(createTooltipItem(active[i]));
          } // If the user provided a filter function, use it to modify the tooltip items


          if (opts.filter) {
            tooltipItems = tooltipItems.filter(function (a) {
              return opts.filter(a, data);
            });
          } // If the user provided a sorting function, use it to modify the tooltip items


          if (opts.itemSort) {
            tooltipItems = tooltipItems.sort(function (a, b) {
              return opts.itemSort(a, b, data);
            });
          } // Determine colors for boxes


          helpers.each(tooltipItems, function (tooltipItem) {
            labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
            labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
          }); // Build the Text Lines

          model.title = me.getTitle(tooltipItems, data);
          model.beforeBody = me.getBeforeBody(tooltipItems, data);
          model.body = me.getBody(tooltipItems, data);
          model.afterBody = me.getAfterBody(tooltipItems, data);
          model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors

          model.x = Math.round(tooltipPosition.x);
          model.y = Math.round(tooltipPosition.y);
          model.caretPadding = opts.caretPadding;
          model.labelColors = labelColors;
          model.labelTextColors = labelTextColors; // data points

          model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip

          tooltipSize = getTooltipSize(this, model);
          alignment = determineAlignment(this, tooltipSize); // Final Size and Position

          backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
        } else {
          model.opacity = 0;
        }

        model.xAlign = alignment.xAlign;
        model.yAlign = alignment.yAlign;
        model.x = backgroundPoint.x;
        model.y = backgroundPoint.y;
        model.width = tooltipSize.width;
        model.height = tooltipSize.height; // Point where the caret on the tooltip points to

        model.caretX = tooltipPosition.x;
        model.caretY = tooltipPosition.y;
        me._model = model;

        if (changed && opts.custom) {
          opts.custom.call(me, model);
        }

        return me;
      },
      drawCaret: function drawCaret(tooltipPoint, size) {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
      },
      getCaretPosition: function getCaretPosition(tooltipPoint, size, vm) {
        var x1, x2, x3, y1, y2, y3;
        var caretSize = vm.caretSize;
        var cornerRadius = vm.cornerRadius;
        var xAlign = vm.xAlign;
        var yAlign = vm.yAlign;
        var ptX = tooltipPoint.x;
        var ptY = tooltipPoint.y;
        var width = size.width;
        var height = size.height;

        if (yAlign === 'center') {
          y2 = ptY + height / 2;

          if (xAlign === 'left') {
            x1 = ptX;
            x2 = x1 - caretSize;
            x3 = x1;
            y1 = y2 + caretSize;
            y3 = y2 - caretSize;
          } else {
            x1 = ptX + width;
            x2 = x1 + caretSize;
            x3 = x1;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          }
        } else {
          if (xAlign === 'left') {
            x2 = ptX + cornerRadius + caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else if (xAlign === 'right') {
            x2 = ptX + width - cornerRadius - caretSize;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          } else {
            x2 = vm.caretX;
            x1 = x2 - caretSize;
            x3 = x2 + caretSize;
          }

          if (yAlign === 'top') {
            y1 = ptY;
            y2 = y1 - caretSize;
            y3 = y1;
          } else {
            y1 = ptY + height;
            y2 = y1 + caretSize;
            y3 = y1; // invert drawing order

            var tmp = x3;
            x3 = x1;
            x1 = tmp;
          }
        }

        return {
          x1: x1,
          x2: x2,
          x3: x3,
          y1: y1,
          y2: y2,
          y3: y3
        };
      },
      drawTitle: function drawTitle(pt, vm, ctx, opacity) {
        var title = vm.title;

        if (title.length) {
          ctx.textAlign = vm._titleAlign;
          ctx.textBaseline = 'top';
          var titleFontSize = vm.titleFontSize;
          var titleSpacing = vm.titleSpacing;
          ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
          ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
          var i, len;

          for (i = 0, len = title.length; i < len; ++i) {
            ctx.fillText(title[i], pt.x, pt.y);
            pt.y += titleFontSize + titleSpacing; // Line Height and spacing

            if (i + 1 === title.length) {
              pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
            }
          }
        }
      },
      drawBody: function drawBody(pt, vm, ctx, opacity) {
        var bodyFontSize = vm.bodyFontSize;
        var bodySpacing = vm.bodySpacing;
        var body = vm.body;
        ctx.textAlign = vm._bodyAlign;
        ctx.textBaseline = 'top';
        ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily); // Before Body

        var xLinePadding = 0;

        var fillLineOfText = function fillLineOfText(line) {
          ctx.fillText(line, pt.x + xLinePadding, pt.y);
          pt.y += bodyFontSize + bodySpacing;
        }; // Before body lines


        ctx.fillStyle = mergeOpacity(vm.bodyFontColor, opacity);
        helpers.each(vm.beforeBody, fillLineOfText);
        var drawColorBoxes = vm.displayColors;
        xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0; // Draw body lines now

        helpers.each(body, function (bodyItem, i) {
          var textColor = mergeOpacity(vm.labelTextColors[i], opacity);
          ctx.fillStyle = textColor;
          helpers.each(bodyItem.before, fillLineOfText);
          helpers.each(bodyItem.lines, function (line) {
            // Draw Legend-like boxes if needed
            if (drawColorBoxes) {
              // Fill a white rect so that colours merge nicely if the opacity is < 1
              ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
              ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize); // Border

              ctx.lineWidth = 1;
              ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
              ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize); // Inner square

              ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
              ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
              ctx.fillStyle = textColor;
            }

            fillLineOfText(line);
          });
          helpers.each(bodyItem.after, fillLineOfText);
        }); // Reset back to 0 for after body

        xLinePadding = 0; // After body lines

        helpers.each(vm.afterBody, fillLineOfText);
        pt.y -= bodySpacing; // Remove last body spacing
      },
      drawFooter: function drawFooter(pt, vm, ctx, opacity) {
        var footer = vm.footer;

        if (footer.length) {
          pt.y += vm.footerMarginTop;
          ctx.textAlign = vm._footerAlign;
          ctx.textBaseline = 'top';
          ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
          ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
          helpers.each(footer, function (line) {
            ctx.fillText(line, pt.x, pt.y);
            pt.y += vm.footerFontSize + vm.footerSpacing;
          });
        }
      },
      drawBackground: function drawBackground(pt, vm, ctx, tooltipSize, opacity) {
        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
        ctx.strokeStyle = mergeOpacity(vm.borderColor, opacity);
        ctx.lineWidth = vm.borderWidth;
        var xAlign = vm.xAlign;
        var yAlign = vm.yAlign;
        var x = pt.x;
        var y = pt.y;
        var width = tooltipSize.width;
        var height = tooltipSize.height;
        var radius = vm.cornerRadius;
        ctx.beginPath();
        ctx.moveTo(x + radius, y);

        if (yAlign === 'top') {
          this.drawCaret(pt, tooltipSize);
        }

        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);

        if (yAlign === 'center' && xAlign === 'right') {
          this.drawCaret(pt, tooltipSize);
        }

        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);

        if (yAlign === 'bottom') {
          this.drawCaret(pt, tooltipSize);
        }

        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);

        if (yAlign === 'center' && xAlign === 'left') {
          this.drawCaret(pt, tooltipSize);
        }

        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        ctx.fill();

        if (vm.borderWidth > 0) {
          ctx.stroke();
        }
      },
      draw: function draw() {
        var ctx = this._chart.ctx;
        var vm = this._view;

        if (vm.opacity === 0) {
          return;
        }

        var tooltipSize = {
          width: vm.width,
          height: vm.height
        };
        var pt = {
          x: vm.x,
          y: vm.y
        }; // IE11/Edge does not like very small opacities, so snap to 0

        var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity; // Truthy/falsey value for empty tooltip

        var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

        if (this._options.enabled && hasTooltipContent) {
          // Draw Background
          this.drawBackground(pt, vm, ctx, tooltipSize, opacity); // Draw Title, Body, and Footer

          pt.x += vm.xPadding;
          pt.y += vm.yPadding; // Titles

          this.drawTitle(pt, vm, ctx, opacity); // Body

          this.drawBody(pt, vm, ctx, opacity); // Footer

          this.drawFooter(pt, vm, ctx, opacity);
        }
      },

      /**
       * Handle an event
       * @private
       * @param {IEvent} event - The event to handle
       * @returns {Boolean} true if the tooltip changed
       */
      handleEvent: function handleEvent(e) {
        var me = this;
        var options = me._options;
        var changed = false;
        me._lastActive = me._lastActive || []; // Find Active Elements for tooltips

        if (e.type === 'mouseout') {
          me._active = [];
        } else {
          me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
        } // Remember Last Actives


        changed = !helpers.arrayEquals(me._active, me._lastActive); // Only handle target event on tooltip change

        if (changed) {
          me._lastActive = me._active;

          if (options.enabled || options.custom) {
            me._eventPosition = {
              x: e.x,
              y: e.y
            };
            me.update(true);
            me.pivot();
          }
        }

        return changed;
      }
    });
    /**
     * @namespace Chart.Tooltip.positioners
     */

    exports.positioners = positioners;
  }, {
    "../helpers/index": 109,
    "./core.defaults": 89,
    "./core.element": 90
  }],
  100: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    var helpers = require('../helpers/index');

    defaults._set('global', {
      elements: {
        arc: {
          backgroundColor: defaults.global.defaultColor,
          borderColor: '#fff',
          borderWidth: 2
        }
      }
    });

    module.exports = Element.extend({
      inLabelRange: function inLabelRange(mouseX) {
        var vm = this._view;

        if (vm) {
          return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
        }

        return false;
      },
      inRange: function inRange(chartX, chartY) {
        var vm = this._view;

        if (vm) {
          var pointRelativePosition = helpers.getAngleFromPoint(vm, {
            x: chartX,
            y: chartY
          });
          var angle = pointRelativePosition.angle;
          var distance = pointRelativePosition.distance; // Sanitise angle range

          var startAngle = vm.startAngle;
          var endAngle = vm.endAngle;

          while (endAngle < startAngle) {
            endAngle += 2.0 * Math.PI;
          }

          while (angle > endAngle) {
            angle -= 2.0 * Math.PI;
          }

          while (angle < startAngle) {
            angle += 2.0 * Math.PI;
          } // Check if within the range of the open/close angle


          var betweenAngles = angle >= startAngle && angle <= endAngle;
          var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
          return betweenAngles && withinRadius;
        }

        return false;
      },
      getCenterPoint: function getCenterPoint() {
        var vm = this._view;
        var halfAngle = (vm.startAngle + vm.endAngle) / 2;
        var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
        return {
          x: vm.x + Math.cos(halfAngle) * halfRadius,
          y: vm.y + Math.sin(halfAngle) * halfRadius
        };
      },
      getArea: function getArea() {
        var vm = this._view;
        return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
      },
      tooltipPosition: function tooltipPosition() {
        var vm = this._view;
        var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
        var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
        return {
          x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
          y: vm.y + Math.sin(centreAngle) * rangeFromCentre
        };
      },
      draw: function draw() {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var sA = vm.startAngle;
        var eA = vm.endAngle;
        ctx.beginPath();
        ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
        ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
        ctx.closePath();
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = vm.borderWidth;
        ctx.fillStyle = vm.backgroundColor;
        ctx.fill();
        ctx.lineJoin = 'bevel';

        if (vm.borderWidth) {
          ctx.stroke();
        }
      }
    });
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90,
    "../helpers/index": 109
  }],
  101: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    var helpers = require('../helpers/index');

    var globalDefaults = defaults.global;

    defaults._set('global', {
      elements: {
        line: {
          tension: 0.4,
          backgroundColor: globalDefaults.defaultColor,
          borderWidth: 3,
          borderColor: globalDefaults.defaultColor,
          borderCapStyle: 'butt',
          borderDash: [],
          borderDashOffset: 0.0,
          borderJoinStyle: 'miter',
          capBezierPoints: true,
          fill: true // do we fill in the area between the line and its base axis

        }
      }
    });

    module.exports = Element.extend({
      draw: function draw() {
        var me = this;
        var vm = me._view;
        var ctx = me._chart.ctx;
        var spanGaps = vm.spanGaps;

        var points = me._children.slice(); // clone array


        var globalOptionLineElements = globalDefaults.elements.line;
        var lastDrawnIndex = -1;
        var index, current, previous, currentVM; // If we are looping, adding the first point again

        if (me._loop && points.length) {
          points.push(points[0]);
        }

        ctx.save(); // Stroke Line Options

        ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash

        if (ctx.setLineDash) {
          ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
        }

        ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
        ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
        ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
        ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line

        ctx.beginPath();
        lastDrawnIndex = -1;

        for (index = 0; index < points.length; ++index) {
          current = points[index];
          previous = helpers.previousItem(points, index);
          currentVM = current._view; // First point moves to it's starting position no matter what

          if (index === 0) {
            if (!currentVM.skip) {
              ctx.moveTo(currentVM.x, currentVM.y);
              lastDrawnIndex = index;
            }
          } else {
            previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

            if (!currentVM.skip) {
              if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                // There was a gap and this is the first point after the gap
                ctx.moveTo(currentVM.x, currentVM.y);
              } else {
                // Line to next point
                helpers.canvas.lineTo(ctx, previous._view, current._view);
              }

              lastDrawnIndex = index;
            }
          }
        }

        ctx.stroke();
        ctx.restore();
      }
    });
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90,
    "../helpers/index": 109
  }],
  102: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    var helpers = require('../helpers/index');

    var defaultColor = defaults.global.defaultColor;

    defaults._set('global', {
      elements: {
        point: {
          radius: 3,
          pointStyle: 'circle',
          backgroundColor: defaultColor,
          borderColor: defaultColor,
          borderWidth: 1,
          // Hover
          hitRadius: 1,
          hoverRadius: 4,
          hoverBorderWidth: 1
        }
      }
    });

    function xRange(mouseX) {
      var vm = this._view;
      return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
    }

    function yRange(mouseY) {
      var vm = this._view;
      return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
    }

    module.exports = Element.extend({
      inRange: function inRange(mouseX, mouseY) {
        var vm = this._view;
        return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
      },
      inLabelRange: xRange,
      inXRange: xRange,
      inYRange: yRange,
      getCenterPoint: function getCenterPoint() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y
        };
      },
      getArea: function getArea() {
        return Math.PI * Math.pow(this._view.radius, 2);
      },
      tooltipPosition: function tooltipPosition() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y,
          padding: vm.radius + vm.borderWidth
        };
      },
      draw: function draw(chartArea) {
        var vm = this._view;
        var model = this._model;
        var ctx = this._chart.ctx;
        var pointStyle = vm.pointStyle;
        var rotation = vm.rotation;
        var radius = vm.radius;
        var x = vm.x;
        var y = vm.y;
        var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)

        if (vm.skip) {
          return;
        } // Clipping for Points.


        if (chartArea === undefined || model.x >= chartArea.left && chartArea.right * errMargin >= model.x && model.y >= chartArea.top && chartArea.bottom * errMargin >= model.y) {
          ctx.strokeStyle = vm.borderColor || defaultColor;
          ctx.lineWidth = helpers.valueOrDefault(vm.borderWidth, defaults.global.elements.point.borderWidth);
          ctx.fillStyle = vm.backgroundColor || defaultColor;
          helpers.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
        }
      }
    });
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90,
    "../helpers/index": 109
  }],
  103: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    defaults._set('global', {
      elements: {
        rectangle: {
          backgroundColor: defaults.global.defaultColor,
          borderColor: defaults.global.defaultColor,
          borderSkipped: 'bottom',
          borderWidth: 0
        }
      }
    });

    function isVertical(bar) {
      return bar._view.width !== undefined;
    }
    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */


    function getBarBounds(bar) {
      var vm = bar._view;
      var x1, x2, y1, y2;

      if (isVertical(bar)) {
        // vertical
        var halfWidth = vm.width / 2;
        x1 = vm.x - halfWidth;
        x2 = vm.x + halfWidth;
        y1 = Math.min(vm.y, vm.base);
        y2 = Math.max(vm.y, vm.base);
      } else {
        // horizontal bar
        var halfHeight = vm.height / 2;
        x1 = Math.min(vm.x, vm.base);
        x2 = Math.max(vm.x, vm.base);
        y1 = vm.y - halfHeight;
        y2 = vm.y + halfHeight;
      }

      return {
        left: x1,
        top: y1,
        right: x2,
        bottom: y2
      };
    }

    module.exports = Element.extend({
      draw: function draw() {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var left, right, top, bottom, signX, signY, borderSkipped;
        var borderWidth = vm.borderWidth;

        if (!vm.horizontal) {
          // bar
          left = vm.x - vm.width / 2;
          right = vm.x + vm.width / 2;
          top = vm.y;
          bottom = vm.base;
          signX = 1;
          signY = bottom > top ? 1 : -1;
          borderSkipped = vm.borderSkipped || 'bottom';
        } else {
          // horizontal bar
          left = vm.base;
          right = vm.x;
          top = vm.y - vm.height / 2;
          bottom = vm.y + vm.height / 2;
          signX = right > left ? 1 : -1;
          signY = 1;
          borderSkipped = vm.borderSkipped || 'left';
        } // Canvas doesn't allow us to stroke inside the width so we can
        // adjust the sizes to fit if we're setting a stroke on the line


        if (borderWidth) {
          // borderWidth shold be less than bar width and bar height.
          var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
          borderWidth = borderWidth > barSize ? barSize : borderWidth;
          var halfStroke = borderWidth / 2; // Adjust borderWidth when bar top position is near vm.base(zero).

          var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
          var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
          var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
          var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0); // not become a vertical line?

          if (borderLeft !== borderRight) {
            top = borderTop;
            bottom = borderBottom;
          } // not become a horizontal line?


          if (borderTop !== borderBottom) {
            left = borderLeft;
            right = borderRight;
          }
        }

        ctx.beginPath();
        ctx.fillStyle = vm.backgroundColor;
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = borderWidth; // Corner points, from bottom-left to bottom-right clockwise
        // | 1 2 |
        // | 0 3 |

        var corners = [[left, bottom], [left, top], [right, top], [right, bottom]]; // Find first (starting) corner with fallback to 'bottom'

        var borders = ['bottom', 'left', 'top', 'right'];
        var startCorner = borders.indexOf(borderSkipped, 0);

        if (startCorner === -1) {
          startCorner = 0;
        }

        function cornerAt(index) {
          return corners[(startCorner + index) % 4];
        } // Draw rectangle from 'startCorner'


        var corner = cornerAt(0);
        ctx.moveTo(corner[0], corner[1]);

        for (var i = 1; i < 4; i++) {
          corner = cornerAt(i);
          ctx.lineTo(corner[0], corner[1]);
        }

        ctx.fill();

        if (borderWidth) {
          ctx.stroke();
        }
      },
      height: function height() {
        var vm = this._view;
        return vm.base - vm.y;
      },
      inRange: function inRange(mouseX, mouseY) {
        var inRange = false;

        if (this._view) {
          var bounds = getBarBounds(this);
          inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
        }

        return inRange;
      },
      inLabelRange: function inLabelRange(mouseX, mouseY) {
        var me = this;

        if (!me._view) {
          return false;
        }

        var inRange = false;
        var bounds = getBarBounds(me);

        if (isVertical(me)) {
          inRange = mouseX >= bounds.left && mouseX <= bounds.right;
        } else {
          inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
        }

        return inRange;
      },
      inXRange: function inXRange(mouseX) {
        var bounds = getBarBounds(this);
        return mouseX >= bounds.left && mouseX <= bounds.right;
      },
      inYRange: function inYRange(mouseY) {
        var bounds = getBarBounds(this);
        return mouseY >= bounds.top && mouseY <= bounds.bottom;
      },
      getCenterPoint: function getCenterPoint() {
        var vm = this._view;
        var x, y;

        if (isVertical(this)) {
          x = vm.x;
          y = (vm.y + vm.base) / 2;
        } else {
          x = (vm.x + vm.base) / 2;
          y = vm.y;
        }

        return {
          x: x,
          y: y
        };
      },
      getArea: function getArea() {
        var vm = this._view;
        return vm.width * Math.abs(vm.y - vm.base);
      },
      tooltipPosition: function tooltipPosition() {
        var vm = this._view;
        return {
          x: vm.x,
          y: vm.y
        };
      }
    });
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90
  }],
  104: [function (require, module, exports) {
    'use strict';

    module.exports = {};
    module.exports.Arc = require('./element.arc');
    module.exports.Line = require('./element.line');
    module.exports.Point = require('./element.point');
    module.exports.Rectangle = require('./element.rectangle');
  }, {
    "./element.arc": 100,
    "./element.line": 101,
    "./element.point": 102,
    "./element.rectangle": 103
  }],
  105: [function (require, module, exports) {
    'use strict';

    var helpers = require('./helpers.core');
    /**
     * @namespace Chart.helpers.canvas
     */


    var exports = module.exports = {
      /**
       * Clears the entire canvas associated to the given `chart`.
       * @param {Chart} chart - The chart for which to clear the canvas.
       */
      clear: function clear(chart) {
        chart.ctx.clearRect(0, 0, chart.width, chart.height);
      },

      /**
       * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
       * given size (width, height) and the same `radius` for all corners.
       * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
       * @param {Number} x - The x axis of the coordinate for the rectangle starting point.
       * @param {Number} y - The y axis of the coordinate for the rectangle starting point.
       * @param {Number} width - The rectangle's width.
       * @param {Number} height - The rectangle's height.
       * @param {Number} radius - The rounded amount (in pixels) for the four corners.
       * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
       */
      roundedRect: function roundedRect(ctx, x, y, width, height, radius) {
        if (radius) {
          // NOTE(SB) `epsilon` helps to prevent minor artifacts appearing
          // on Chrome when `r` is exactly half the height or the width.
          var epsilon = 0.0000001;
          var r = Math.min(radius, height / 2 - epsilon, width / 2 - epsilon);
          ctx.moveTo(x + r, y);
          ctx.lineTo(x + width - r, y);
          ctx.arcTo(x + width, y, x + width, y + r, r);
          ctx.lineTo(x + width, y + height - r);
          ctx.arcTo(x + width, y + height, x + width - r, y + height, r);
          ctx.lineTo(x + r, y + height);
          ctx.arcTo(x, y + height, x, y + height - r, r);
          ctx.lineTo(x, y + r);
          ctx.arcTo(x, y, x + r, y, r);
          ctx.closePath();
          ctx.moveTo(x, y);
        } else {
          ctx.rect(x, y, width, height);
        }
      },
      drawPoint: function drawPoint(ctx, style, radius, x, y, rotation) {
        var type, edgeLength, xOffset, yOffset, height, size;
        rotation = rotation || 0;

        if (style && _typeof2(style) === 'object') {
          type = style.toString();

          if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
            ctx.drawImage(style, x - style.width / 2, y - style.height / 2, style.width, style.height);
            return;
          }
        }

        if (isNaN(radius) || radius <= 0) {
          return;
        }

        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(rotation * Math.PI / 180);
        ctx.beginPath();

        switch (style) {
          // Default includes circle
          default:
            ctx.arc(0, 0, radius, 0, Math.PI * 2);
            ctx.closePath();
            break;

          case 'triangle':
            edgeLength = 3 * radius / Math.sqrt(3);
            height = edgeLength * Math.sqrt(3) / 2;
            ctx.moveTo(-edgeLength / 2, height / 3);
            ctx.lineTo(edgeLength / 2, height / 3);
            ctx.lineTo(0, -2 * height / 3);
            ctx.closePath();
            break;

          case 'rect':
            size = 1 / Math.SQRT2 * radius;
            ctx.rect(-size, -size, 2 * size, 2 * size);
            break;

          case 'rectRounded':
            var offset = radius / Math.SQRT2;
            var leftX = -offset;
            var topY = -offset;
            var sideSize = Math.SQRT2 * radius; // NOTE(SB) the rounded rect implementation changed to use `arcTo`
            // instead of `quadraticCurveTo` since it generates better results
            // when rect is almost a circle. 0.425 (instead of 0.5) produces
            // results visually closer to the previous impl.

            this.roundedRect(ctx, leftX, topY, sideSize, sideSize, radius * 0.425);
            break;

          case 'rectRot':
            size = 1 / Math.SQRT2 * radius;
            ctx.moveTo(-size, 0);
            ctx.lineTo(0, size);
            ctx.lineTo(size, 0);
            ctx.lineTo(0, -size);
            ctx.closePath();
            break;

          case 'cross':
            ctx.moveTo(0, radius);
            ctx.lineTo(0, -radius);
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            break;

          case 'crossRot':
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(-xOffset, -yOffset);
            ctx.lineTo(xOffset, yOffset);
            ctx.moveTo(-xOffset, yOffset);
            ctx.lineTo(xOffset, -yOffset);
            break;

          case 'star':
            ctx.moveTo(0, radius);
            ctx.lineTo(0, -radius);
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(-xOffset, -yOffset);
            ctx.lineTo(xOffset, yOffset);
            ctx.moveTo(-xOffset, yOffset);
            ctx.lineTo(xOffset, -yOffset);
            break;

          case 'line':
            ctx.moveTo(-radius, 0);
            ctx.lineTo(radius, 0);
            break;

          case 'dash':
            ctx.moveTo(0, 0);
            ctx.lineTo(radius, 0);
            break;
        }

        ctx.fill();
        ctx.stroke();
        ctx.restore();
      },
      clipArea: function clipArea(ctx, area) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
        ctx.clip();
      },
      unclipArea: function unclipArea(ctx) {
        ctx.restore();
      },
      lineTo: function lineTo(ctx, previous, target, flip) {
        if (target.steppedLine) {
          if (target.steppedLine === 'after' && !flip || target.steppedLine !== 'after' && flip) {
            ctx.lineTo(previous.x, target.y);
          } else {
            ctx.lineTo(target.x, previous.y);
          }

          ctx.lineTo(target.x, target.y);
          return;
        }

        if (!target.tension) {
          ctx.lineTo(target.x, target.y);
          return;
        }

        ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);
      }
    }; // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.clear = exports.clear;
    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.drawRoundedRectangle = function (ctx) {
      ctx.beginPath();
      exports.roundedRect.apply(exports, arguments);
    };
  }, {
    "./helpers.core": 106
  }],
  106: [function (require, module, exports) {
    'use strict';
    /**
     * @namespace Chart.helpers
     */

    var helpers = {
      /**
       * An empty function that can be used, for example, for optional callback.
       */
      noop: function noop() {},

      /**
       * Returns a unique id, sequentially generated from a global variable.
       * @returns {Number}
       * @function
       */
      uid: function () {
        var id = 0;
        return function () {
          return id++;
        };
      }(),

      /**
       * Returns true if `value` is neither null nor undefined, else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @since 2.7.0
       */
      isNullOrUndef: function isNullOrUndef(value) {
        return value === null || typeof value === 'undefined';
      },

      /**
       * Returns true if `value` is an array, else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @function
       */
      isArray: Array.isArray ? Array.isArray : function (value) {
        return Object.prototype.toString.call(value) === '[object Array]';
      },

      /**
       * Returns true if `value` is an object (excluding null), else returns false.
       * @param {*} value - The value to test.
       * @returns {Boolean}
       * @since 2.7.0
       */
      isObject: function isObject(value) {
        return value !== null && Object.prototype.toString.call(value) === '[object Object]';
      },

      /**
       * Returns `value` if defined, else returns `defaultValue`.
       * @param {*} value - The value to return if defined.
       * @param {*} defaultValue - The value to return if `value` is undefined.
       * @returns {*}
       */
      valueOrDefault: function valueOrDefault(value, defaultValue) {
        return typeof value === 'undefined' ? defaultValue : value;
      },

      /**
       * Returns value at the given `index` in array if defined, else returns `defaultValue`.
       * @param {Array} value - The array to lookup for value at `index`.
       * @param {Number} index - The index in `value` to lookup for value.
       * @param {*} defaultValue - The value to return if `value[index]` is undefined.
       * @returns {*}
       */
      valueAtIndexOrDefault: function valueAtIndexOrDefault(value, index, defaultValue) {
        return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
      },

      /**
       * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
       * value returned by `fn`. If `fn` is not a function, this method returns undefined.
       * @param {Function} fn - The function to call.
       * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
       * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
       * @returns {*}
       */
      callback: function callback(fn, args, thisArg) {
        if (fn && typeof fn.call === 'function') {
          return fn.apply(thisArg, args);
        }
      },

      /**
       * Note(SB) for performance sake, this method should only be used when loopable type
       * is unknown or in none intensive code (not called often and small loopable). Else
       * it's preferable to use a regular for() loop and save extra function calls.
       * @param {Object|Array} loopable - The object or array to be iterated.
       * @param {Function} fn - The function to call for each item.
       * @param {Object} [thisArg] - The value of `this` provided for the call to `fn`.
       * @param {Boolean} [reverse] - If true, iterates backward on the loopable.
       */
      each: function each(loopable, fn, thisArg, reverse) {
        var i, len, keys;

        if (helpers.isArray(loopable)) {
          len = loopable.length;

          if (reverse) {
            for (i = len - 1; i >= 0; i--) {
              fn.call(thisArg, loopable[i], i);
            }
          } else {
            for (i = 0; i < len; i++) {
              fn.call(thisArg, loopable[i], i);
            }
          }
        } else if (helpers.isObject(loopable)) {
          keys = Object.keys(loopable);
          len = keys.length;

          for (i = 0; i < len; i++) {
            fn.call(thisArg, loopable[keys[i]], keys[i]);
          }
        }
      },

      /**
       * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
       * @see http://stackoverflow.com/a/14853974
       * @param {Array} a0 - The array to compare
       * @param {Array} a1 - The array to compare
       * @returns {Boolean}
       */
      arrayEquals: function arrayEquals(a0, a1) {
        var i, ilen, v0, v1;

        if (!a0 || !a1 || a0.length !== a1.length) {
          return false;
        }

        for (i = 0, ilen = a0.length; i < ilen; ++i) {
          v0 = a0[i];
          v1 = a1[i];

          if (v0 instanceof Array && v1 instanceof Array) {
            if (!helpers.arrayEquals(v0, v1)) {
              return false;
            }
          } else if (v0 !== v1) {
            // NOTE: two different object instances will never be equal: {x:20} != {x:20}
            return false;
          }
        }

        return true;
      },

      /**
       * Returns a deep copy of `source` without keeping references on objects and arrays.
       * @param {*} source - The value to clone.
       * @returns {*}
       */
      clone: function clone(source) {
        if (helpers.isArray(source)) {
          return source.map(helpers.clone);
        }

        if (helpers.isObject(source)) {
          var target = {};
          var keys = Object.keys(source);
          var klen = keys.length;
          var k = 0;

          for (; k < klen; ++k) {
            target[keys[k]] = helpers.clone(source[keys[k]]);
          }

          return target;
        }

        return source;
      },

      /**
       * The default merger when Chart.helpers.merge is called without merger option.
       * Note(SB): this method is also used by configMerge and scaleMerge as fallback.
       * @private
       */
      _merger: function _merger(key, target, source, options) {
        var tval = target[key];
        var sval = source[key];

        if (helpers.isObject(tval) && helpers.isObject(sval)) {
          helpers.merge(tval, sval, options);
        } else {
          target[key] = helpers.clone(sval);
        }
      },

      /**
       * Merges source[key] in target[key] only if target[key] is undefined.
       * @private
       */
      _mergerIf: function _mergerIf(key, target, source) {
        var tval = target[key];
        var sval = source[key];

        if (helpers.isObject(tval) && helpers.isObject(sval)) {
          helpers.mergeIf(tval, sval);
        } else if (!target.hasOwnProperty(key)) {
          target[key] = helpers.clone(sval);
        }
      },

      /**
       * Recursively deep copies `source` properties into `target` with the given `options`.
       * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
       * @param {Object} target - The target object in which all sources are merged into.
       * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
       * @param {Object} [options] - Merging options:
       * @param {Function} [options.merger] - The merge method (key, target, source, options)
       * @returns {Object} The `target` object.
       */
      merge: function merge(target, source, options) {
        var sources = helpers.isArray(source) ? source : [source];
        var ilen = sources.length;
        var merge, i, keys, klen, k;

        if (!helpers.isObject(target)) {
          return target;
        }

        options = options || {};
        merge = options.merger || helpers._merger;

        for (i = 0; i < ilen; ++i) {
          source = sources[i];

          if (!helpers.isObject(source)) {
            continue;
          }

          keys = Object.keys(source);

          for (k = 0, klen = keys.length; k < klen; ++k) {
            merge(keys[k], target, source, options);
          }
        }

        return target;
      },

      /**
       * Recursively deep copies `source` properties into `target` *only* if not defined in target.
       * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
       * @param {Object} target - The target object in which all sources are merged into.
       * @param {Object|Array(Object)} source - Object(s) to merge into `target`.
       * @returns {Object} The `target` object.
       */
      mergeIf: function mergeIf(target, source) {
        return helpers.merge(target, source, {
          merger: helpers._mergerIf
        });
      },

      /**
       * Applies the contents of two or more objects together into the first object.
       * @param {Object} target - The target object in which all objects are merged into.
       * @param {Object} arg1 - Object containing additional properties to merge in target.
       * @param {Object} argN - Additional objects containing properties to merge in target.
       * @returns {Object} The `target` object.
       */
      extend: function extend(target) {
        var setFn = function setFn(value, key) {
          target[key] = value;
        };

        for (var i = 1, ilen = arguments.length; i < ilen; ++i) {
          helpers.each(arguments[i], setFn);
        }

        return target;
      },

      /**
       * Basic javascript inheritance based on the model created in Backbone.js
       */
      inherits: function inherits(extensions) {
        var me = this;
        var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
          return me.apply(this, arguments);
        };

        var Surrogate = function Surrogate() {
          this.constructor = ChartElement;
        };

        Surrogate.prototype = me.prototype;
        ChartElement.prototype = new Surrogate();
        ChartElement.extend = helpers.inherits;

        if (extensions) {
          helpers.extend(ChartElement.prototype, extensions);
        }

        ChartElement.__super__ = me.prototype;
        return ChartElement;
      }
    };
    module.exports = helpers; // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */

    helpers.callCallback = helpers.callback;
    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.indexOf = function (array, item, fromIndex) {
      return Array.prototype.indexOf.call(array, item, fromIndex);
    };
    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */


    helpers.getValueOrDefault = helpers.valueOrDefault;
    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
  }, {}],
  107: [function (require, module, exports) {
    'use strict';

    var helpers = require('./helpers.core');
    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */


    var effects = {
      linear: function linear(t) {
        return t;
      },
      easeInQuad: function easeInQuad(t) {
        return t * t;
      },
      easeOutQuad: function easeOutQuad(t) {
        return -t * (t - 2);
      },
      easeInOutQuad: function easeInOutQuad(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t;
        }

        return -0.5 * (--t * (t - 2) - 1);
      },
      easeInCubic: function easeInCubic(t) {
        return t * t * t;
      },
      easeOutCubic: function easeOutCubic(t) {
        return (t = t - 1) * t * t + 1;
      },
      easeInOutCubic: function easeInOutCubic(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t;
        }

        return 0.5 * ((t -= 2) * t * t + 2);
      },
      easeInQuart: function easeInQuart(t) {
        return t * t * t * t;
      },
      easeOutQuart: function easeOutQuart(t) {
        return -((t = t - 1) * t * t * t - 1);
      },
      easeInOutQuart: function easeInOutQuart(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t * t;
        }

        return -0.5 * ((t -= 2) * t * t * t - 2);
      },
      easeInQuint: function easeInQuint(t) {
        return t * t * t * t * t;
      },
      easeOutQuint: function easeOutQuint(t) {
        return (t = t - 1) * t * t * t * t + 1;
      },
      easeInOutQuint: function easeInOutQuint(t) {
        if ((t /= 0.5) < 1) {
          return 0.5 * t * t * t * t * t;
        }

        return 0.5 * ((t -= 2) * t * t * t * t + 2);
      },
      easeInSine: function easeInSine(t) {
        return -Math.cos(t * (Math.PI / 2)) + 1;
      },
      easeOutSine: function easeOutSine(t) {
        return Math.sin(t * (Math.PI / 2));
      },
      easeInOutSine: function easeInOutSine(t) {
        return -0.5 * (Math.cos(Math.PI * t) - 1);
      },
      easeInExpo: function easeInExpo(t) {
        return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
      },
      easeOutExpo: function easeOutExpo(t) {
        return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
      },
      easeInOutExpo: function easeInOutExpo(t) {
        if (t === 0) {
          return 0;
        }

        if (t === 1) {
          return 1;
        }

        if ((t /= 0.5) < 1) {
          return 0.5 * Math.pow(2, 10 * (t - 1));
        }

        return 0.5 * (-Math.pow(2, -10 * --t) + 2);
      },
      easeInCirc: function easeInCirc(t) {
        if (t >= 1) {
          return t;
        }

        return -(Math.sqrt(1 - t * t) - 1);
      },
      easeOutCirc: function easeOutCirc(t) {
        return Math.sqrt(1 - (t = t - 1) * t);
      },
      easeInOutCirc: function easeInOutCirc(t) {
        if ((t /= 0.5) < 1) {
          return -0.5 * (Math.sqrt(1 - t * t) - 1);
        }

        return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
      },
      easeInElastic: function easeInElastic(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;

        if (t === 0) {
          return 0;
        }

        if (t === 1) {
          return 1;
        }

        if (!p) {
          p = 0.3;
        }

        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }

        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
      },
      easeOutElastic: function easeOutElastic(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;

        if (t === 0) {
          return 0;
        }

        if (t === 1) {
          return 1;
        }

        if (!p) {
          p = 0.3;
        }

        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }

        return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
      },
      easeInOutElastic: function easeInOutElastic(t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;

        if (t === 0) {
          return 0;
        }

        if ((t /= 0.5) === 2) {
          return 1;
        }

        if (!p) {
          p = 0.45;
        }

        if (a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p / (2 * Math.PI) * Math.asin(1 / a);
        }

        if (t < 1) {
          return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
        }

        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
      },
      easeInBack: function easeInBack(t) {
        var s = 1.70158;
        return t * t * ((s + 1) * t - s);
      },
      easeOutBack: function easeOutBack(t) {
        var s = 1.70158;
        return (t = t - 1) * t * ((s + 1) * t + s) + 1;
      },
      easeInOutBack: function easeInOutBack(t) {
        var s = 1.70158;

        if ((t /= 0.5) < 1) {
          return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        }

        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
      },
      easeInBounce: function easeInBounce(t) {
        return 1 - effects.easeOutBounce(1 - t);
      },
      easeOutBounce: function easeOutBounce(t) {
        if (t < 1 / 2.75) {
          return 7.5625 * t * t;
        }

        if (t < 2 / 2.75) {
          return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
        }

        if (t < 2.5 / 2.75) {
          return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
        }

        return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
      },
      easeInOutBounce: function easeInOutBounce(t) {
        if (t < 0.5) {
          return effects.easeInBounce(t * 2) * 0.5;
        }

        return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
      }
    };
    module.exports = {
      effects: effects
    }; // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.easingEffects = effects;
  }, {
    "./helpers.core": 106
  }],
  108: [function (require, module, exports) {
    'use strict';

    var helpers = require('./helpers.core');
    /**
     * @alias Chart.helpers.options
     * @namespace
     */


    module.exports = {
      /**
       * Converts the given line height `value` in pixels for a specific font `size`.
       * @param {Number|String} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
       * @param {Number} size - The font size (in pixels) used to resolve relative `value`.
       * @returns {Number} The effective line height in pixels (size * 1.2 if value is invalid).
       * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
       * @since 2.7.0
       */
      toLineHeight: function toLineHeight(value, size) {
        var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);

        if (!matches || matches[1] === 'normal') {
          return size * 1.2;
        }

        value = +matches[2];

        switch (matches[3]) {
          case 'px':
            return value;

          case '%':
            value /= 100;
            break;

          default:
            break;
        }

        return size * value;
      },

      /**
       * Converts the given value into a padding object with pre-computed width/height.
       * @param {Number|Object} value - If a number, set the value to all TRBL component,
       *  else, if and object, use defined properties and sets undefined ones to 0.
       * @returns {Object} The padding values (top, right, bottom, left, width, height)
       * @since 2.7.0
       */
      toPadding: function toPadding(value) {
        var t, r, b, l;

        if (helpers.isObject(value)) {
          t = +value.top || 0;
          r = +value.right || 0;
          b = +value.bottom || 0;
          l = +value.left || 0;
        } else {
          t = r = b = l = +value || 0;
        }

        return {
          top: t,
          right: r,
          bottom: b,
          left: l,
          height: t + b,
          width: l + r
        };
      },

      /**
       * Evaluates the given `inputs` sequentially and returns the first defined value.
       * @param {Array[]} inputs - An array of values, falling back to the last value.
       * @param {Object} [context] - If defined and the current value is a function, the value
       * is called with `context` as first argument and the result becomes the new input.
       * @param {Number} [index] - If defined and the current value is an array, the value
       * at `index` become the new input.
       * @since 2.7.0
       */
      resolve: function resolve(inputs, context, index) {
        var i, ilen, value;

        for (i = 0, ilen = inputs.length; i < ilen; ++i) {
          value = inputs[i];

          if (value === undefined) {
            continue;
          }

          if (context !== undefined && typeof value === 'function') {
            value = value(context);
          }

          if (index !== undefined && helpers.isArray(value)) {
            value = value[index];
          }

          if (value !== undefined) {
            return value;
          }
        }
      }
    };
  }, {
    "./helpers.core": 106
  }],
  109: [function (require, module, exports) {
    'use strict';

    module.exports = require('./helpers.core');
    module.exports.easing = require('./helpers.easing');
    module.exports.canvas = require('./helpers.canvas');
    module.exports.options = require('./helpers.options');
  }, {
    "./helpers.canvas": 105,
    "./helpers.core": 106,
    "./helpers.easing": 107,
    "./helpers.options": 108
  }],
  110: [function (require, module, exports) {
    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */
    module.exports = {
      acquireContext: function acquireContext(item) {
        if (item && item.canvas) {
          // Support for any object associated to a canvas (including a context2d)
          item = item.canvas;
        }

        return item && item.getContext('2d') || null;
      }
    };
  }, {}],
  111: [function (require, module, exports) {
    /**
     * Chart.Platform implementation for targeting a web browser
     */
    'use strict';

    var helpers = require('../helpers/index');

    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];
    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */

    var EVENT_TYPES = {
      touchstart: 'mousedown',
      touchmove: 'mousemove',
      touchend: 'mouseup',
      pointerenter: 'mouseenter',
      pointerdown: 'mousedown',
      pointermove: 'mousemove',
      pointerup: 'mouseup',
      pointerleave: 'mouseout',
      pointerout: 'mouseout'
    };
    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {Number} Size in pixels or undefined if unknown.
     */

    function readUsedSize(element, property) {
      var value = helpers.getStyle(element, property);
      var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
      return matches ? Number(matches[1]) : undefined;
    }
    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */


    function initCanvas(canvas, config) {
      var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
      // returns null or '' if no explicit value has been set to the canvas attribute.

      var renderHeight = canvas.getAttribute('height');
      var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy

      canvas[EXPANDO_KEY] = {
        initial: {
          height: renderHeight,
          width: renderWidth,
          style: {
            display: style.display,
            height: style.height,
            width: style.width
          }
        }
      }; // Force canvas to display as block to avoid extra space caused by inline
      // elements, which would interfere with the responsive resize process.
      // https://github.com/chartjs/Chart.js/issues/2538

      style.display = style.display || 'block';

      if (renderWidth === null || renderWidth === '') {
        var displayWidth = readUsedSize(canvas, 'width');

        if (displayWidth !== undefined) {
          canvas.width = displayWidth;
        }
      }

      if (renderHeight === null || renderHeight === '') {
        if (canvas.style.height === '') {
          // If no explicit render height and style height, let's apply the aspect ratio,
          // which one can be specified by the user but also by charts as default option
          // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
          canvas.height = canvas.width / (config.options.aspectRatio || 2);
        } else {
          var displayHeight = readUsedSize(canvas, 'height');

          if (displayWidth !== undefined) {
            canvas.height = displayHeight;
          }
        }
      }

      return canvas;
    }
    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */


    var supportsEventListenerOptions = function () {
      var supports = false;

      try {
        var options = Object.defineProperty({}, 'passive', {
          get: function get() {
            supports = true;
          }
        });
        window.addEventListener('e', null, options);
      } catch (e) {// continue regardless of error
      }

      return supports;
    }(); // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287


    var eventListenerOptions = supportsEventListenerOptions ? {
      passive: true
    } : false;

    function addEventListener(node, type, listener) {
      node.addEventListener(type, listener, eventListenerOptions);
    }

    function _removeEventListener(node, type, listener) {
      node.removeEventListener(type, listener, eventListenerOptions);
    }

    function createEvent(type, chart, x, y, nativeEvent) {
      return {
        type: type,
        chart: chart,
        "native": nativeEvent || null,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
      };
    }

    function fromNativeEvent(event, chart) {
      var type = EVENT_TYPES[event.type] || event.type;
      var pos = helpers.getRelativePosition(event, chart);
      return createEvent(type, chart, pos.x, pos.y, event);
    }

    function throttled(fn, thisArg) {
      var ticking = false;
      var args = [];
      return function () {
        args = Array.prototype.slice.call(arguments);
        thisArg = thisArg || this;

        if (!ticking) {
          ticking = true;
          helpers.requestAnimFrame.call(window, function () {
            ticking = false;
            fn.apply(thisArg, args);
          });
        }
      };
    } // Implementation based on https://github.com/marcj/css-element-queries


    function createResizer(handler) {
      var resizer = document.createElement('div');
      var cls = CSS_PREFIX + 'size-monitor';
      var maxSize = 1000000;
      var style = 'position:absolute;' + 'left:0;' + 'top:0;' + 'right:0;' + 'bottom:0;' + 'overflow:hidden;' + 'pointer-events:none;' + 'visibility:hidden;' + 'z-index:-1;';
      resizer.style.cssText = style;
      resizer.className = cls;
      resizer.innerHTML = '<div class="' + cls + '-expand" style="' + style + '">' + '<div style="' + 'position:absolute;' + 'width:' + maxSize + 'px;' + 'height:' + maxSize + 'px;' + 'left:0;' + 'top:0">' + '</div>' + '</div>' + '<div class="' + cls + '-shrink" style="' + style + '">' + '<div style="' + 'position:absolute;' + 'width:200%;' + 'height:200%;' + 'left:0; ' + 'top:0">' + '</div>' + '</div>';
      var expand = resizer.childNodes[0];
      var shrink = resizer.childNodes[1];

      resizer._reset = function () {
        expand.scrollLeft = maxSize;
        expand.scrollTop = maxSize;
        shrink.scrollLeft = maxSize;
        shrink.scrollTop = maxSize;
      };

      var onScroll = function onScroll() {
        resizer._reset();

        handler();
      };

      addEventListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
      addEventListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));
      return resizer;
    } // https://davidwalsh.name/detect-node-insertion


    function watchForRender(node, handler) {
      var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

      var proxy = expando.renderProxy = function (e) {
        if (e.animationName === CSS_RENDER_ANIMATION) {
          handler();
        }
      };

      helpers.each(ANIMATION_START_EVENTS, function (type) {
        addEventListener(node, type, proxy);
      }); // #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
      // is removed then added back immediately (same animation frame?). Accessing the
      // `offsetParent` property will force a reflow and re-evaluate the CSS animation.
      // https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
      // https://github.com/chartjs/Chart.js/issues/4737

      expando.reflow = !!node.offsetParent;
      node.classList.add(CSS_RENDER_MONITOR);
    }

    function unwatchForRender(node) {
      var expando = node[EXPANDO_KEY] || {};
      var proxy = expando.renderProxy;

      if (proxy) {
        helpers.each(ANIMATION_START_EVENTS, function (type) {
          _removeEventListener(node, type, proxy);
        });
        delete expando.renderProxy;
      }

      node.classList.remove(CSS_RENDER_MONITOR);
    }

    function addResizeListener(node, listener, chart) {
      var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {}); // Let's keep track of this added resizer and thus avoid DOM query when removing it.

      var resizer = expando.resizer = createResizer(throttled(function () {
        if (expando.resizer) {
          return listener(createEvent('resize', chart));
        }
      })); // The resizer needs to be attached to the node parent, so we first need to be
      // sure that `node` is attached to the DOM before injecting the resizer element.

      watchForRender(node, function () {
        if (expando.resizer) {
          var container = node.parentNode;

          if (container && container !== resizer.parentNode) {
            container.insertBefore(resizer, container.firstChild);
          } // The container size might have changed, let's reset the resizer state.


          resizer._reset();
        }
      });
    }

    function removeResizeListener(node) {
      var expando = node[EXPANDO_KEY] || {};
      var resizer = expando.resizer;
      delete expando.resizer;
      unwatchForRender(node);

      if (resizer && resizer.parentNode) {
        resizer.parentNode.removeChild(resizer);
      }
    }

    function injectCSS(platform, css) {
      // http://stackoverflow.com/q/3922139
      var style = platform._style || document.createElement('style');

      if (!platform._style) {
        platform._style = style;
        css = '/* Chart.js */\n' + css;
        style.setAttribute('type', 'text/css');
        document.getElementsByTagName('head')[0].appendChild(style);
      }

      style.appendChild(document.createTextNode(css));
    }

    module.exports = {
      /**
       * This property holds whether this platform is enabled for the current environment.
       * Currently used by platform.js to select the proper implementation.
       * @private
       */
      _enabled: typeof window !== 'undefined' && typeof document !== 'undefined',
      initialize: function initialize() {
        var keyframes = 'from{opacity:0.99}to{opacity:1}';
        injectCSS(this, // DOM rendering detection
        // https://davidwalsh.name/detect-node-insertion
        '@-webkit-keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' + '@keyframes ' + CSS_RENDER_ANIMATION + '{' + keyframes + '}' + '.' + CSS_RENDER_MONITOR + '{' + '-webkit-animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' + 'animation:' + CSS_RENDER_ANIMATION + ' 0.001s;' + '}');
      },
      acquireContext: function acquireContext(item, config) {
        if (typeof item === 'string') {
          item = document.getElementById(item);
        } else if (item.length) {
          // Support for array based queries (such as jQuery)
          item = item[0];
        }

        if (item && item.canvas) {
          // Support for any object associated to a canvas (including a context2d)
          item = item.canvas;
        } // To prevent canvas fingerprinting, some add-ons undefine the getContext
        // method, for example: https://github.com/kkapsner/CanvasBlocker
        // https://github.com/chartjs/Chart.js/issues/2807


        var context = item && item.getContext && item.getContext('2d'); // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
        // inside an iframe or when running in a protected environment. We could guess the
        // types from their toString() value but let's keep things flexible and assume it's
        // a sufficient condition if the item has a context2D which has item as `canvas`.
        // https://github.com/chartjs/Chart.js/issues/3887
        // https://github.com/chartjs/Chart.js/issues/4102
        // https://github.com/chartjs/Chart.js/issues/4152

        if (context && context.canvas === item) {
          initCanvas(item, config);
          return context;
        }

        return null;
      },
      releaseContext: function releaseContext(context) {
        var canvas = context.canvas;

        if (!canvas[EXPANDO_KEY]) {
          return;
        }

        var initial = canvas[EXPANDO_KEY].initial;
        ['height', 'width'].forEach(function (prop) {
          var value = initial[prop];

          if (helpers.isNullOrUndef(value)) {
            canvas.removeAttribute(prop);
          } else {
            canvas.setAttribute(prop, value);
          }
        });
        helpers.each(initial.style || {}, function (value, key) {
          canvas.style[key] = value;
        }); // The canvas render size might have been changed (and thus the state stack discarded),
        // we can't use save() and restore() to restore the initial state. So make sure that at
        // least the canvas context is reset to the default state by setting the canvas width.
        // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html

        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
      },
      addEventListener: function (_addEventListener) {
        function addEventListener(_x5, _x6, _x7) {
          return _addEventListener.apply(this, arguments);
        }

        addEventListener.toString = function () {
          return _addEventListener.toString();
        };

        return addEventListener;
      }(function (chart, type, listener) {
        var canvas = chart.canvas;

        if (type === 'resize') {
          // Note: the resize event is not supported on all browsers.
          addResizeListener(canvas, listener, chart);
          return;
        }

        var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
        var proxies = expando.proxies || (expando.proxies = {});

        var proxy = proxies[chart.id + '_' + type] = function (event) {
          listener(fromNativeEvent(event, chart));
        };

        addEventListener(canvas, type, proxy);
      }),
      removeEventListener: function removeEventListener(chart, type, listener) {
        var canvas = chart.canvas;

        if (type === 'resize') {
          // Note: the resize event is not supported on all browsers.
          removeResizeListener(canvas, listener);
          return;
        }

        var expando = listener[EXPANDO_KEY] || {};
        var proxies = expando.proxies || {};
        var proxy = proxies[chart.id + '_' + type];

        if (!proxy) {
          return;
        }

        _removeEventListener(canvas, type, proxy);
      }
    }; // DEPRECATIONS

    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.addEvent = addEventListener;
    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */

    helpers.removeEvent = _removeEventListener;
  }, {
    "../helpers/index": 109
  }],
  112: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    var basic = require('./platform.basic');

    var dom = require('./platform.dom'); // @TODO Make possible to select another platform at build time.


    var implementation = dom._enabled ? dom : basic;
    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */

    module.exports = helpers.extend({
      /**
       * @since 2.7.0
       */
      initialize: function initialize() {},

      /**
       * Called at chart construction time, returns a context2d instance implementing
       * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
       * @param {*} item - The native item from which to acquire context (platform specific)
       * @param {Object} options - The chart options
       * @returns {CanvasRenderingContext2D} context2d instance
       */
      acquireContext: function acquireContext() {},

      /**
       * Called at chart destruction time, releases any resources associated to the context
       * previously returned by the acquireContext() method.
       * @param {CanvasRenderingContext2D} context - The context2d instance
       * @returns {Boolean} true if the method succeeded, else false
       */
      releaseContext: function releaseContext() {},

      /**
       * Registers the specified listener on the given chart.
       * @param {Chart} chart - Chart from which to listen for event
       * @param {String} type - The ({@link IEvent}) type to listen for
       * @param {Function} listener - Receives a notification (an object that implements
       * the {@link IEvent} interface) when an event of the specified type occurs.
       */
      addEventListener: function addEventListener() {},

      /**
       * Removes the specified listener previously registered with addEventListener.
       * @param {Chart} chart -Chart from which to remove the listener
       * @param {String} type - The ({@link IEvent}) type to remove
       * @param {Function} listener - The listener function to remove from the event target.
       */
      removeEventListener: function removeEventListener() {}
    }, implementation);
    /**
     * @interface IPlatform
     * Allows abstracting platform dependencies away from the chart
     * @borrows Chart.platform.acquireContext as acquireContext
     * @borrows Chart.platform.releaseContext as releaseContext
     * @borrows Chart.platform.addEventListener as addEventListener
     * @borrows Chart.platform.removeEventListener as removeEventListener
     */

    /**
     * @interface IEvent
     * @prop {String} type - The event type name, possible values are:
     * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
     * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
     * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
     * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
     * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
     */
  }, {
    "../helpers/index": 109,
    "./platform.basic": 110,
    "./platform.dom": 111
  }],
  113: [function (require, module, exports) {
    'use strict';

    module.exports = {};
    module.exports.filler = require('./plugin.filler');
    module.exports.legend = require('./plugin.legend');
    module.exports.title = require('./plugin.title');
  }, {
    "./plugin.filler": 114,
    "./plugin.legend": 115,
    "./plugin.title": 116
  }],
  114: [function (require, module, exports) {
    /**
     * Plugin based on discussion from the following Chart.js issues:
     * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569
     * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897
     */
    'use strict';

    var defaults = require('../core/core.defaults');

    var elements = require('../elements/index');

    var helpers = require('../helpers/index');

    defaults._set('global', {
      plugins: {
        filler: {
          propagate: true
        }
      }
    });

    var mappers = {
      dataset: function dataset(source) {
        var index = source.fill;
        var chart = source.chart;
        var meta = chart.getDatasetMeta(index);
        var visible = meta && chart.isDatasetVisible(index);
        var points = visible && meta.dataset._children || [];
        var length = points.length || 0;
        return !length ? null : function (point, i) {
          return i < length && points[i]._view || null;
        };
      },
      boundary: function boundary(source) {
        var boundary = source.boundary;
        var x = boundary ? boundary.x : null;
        var y = boundary ? boundary.y : null;
        return function (point) {
          return {
            x: x === null ? point.x : x,
            y: y === null ? point.y : y
          };
        };
      }
    }; // @todo if (fill[0] === '#')

    function decodeFill(el, index, count) {
      var model = el._model || {};
      var fill = model.fill;
      var target;

      if (fill === undefined) {
        fill = !!model.backgroundColor;
      }

      if (fill === false || fill === null) {
        return false;
      }

      if (fill === true) {
        return 'origin';
      }

      target = parseFloat(fill, 10);

      if (isFinite(target) && Math.floor(target) === target) {
        if (fill[0] === '-' || fill[0] === '+') {
          target = index + target;
        }

        if (target === index || target < 0 || target >= count) {
          return false;
        }

        return target;
      }

      switch (fill) {
        // compatibility
        case 'bottom':
          return 'start';

        case 'top':
          return 'end';

        case 'zero':
          return 'origin';
        // supported boundaries

        case 'origin':
        case 'start':
        case 'end':
          return fill;
        // invalid fill values

        default:
          return false;
      }
    }

    function computeBoundary(source) {
      var model = source.el._model || {};
      var scale = source.el._scale || {};
      var fill = source.fill;
      var target = null;
      var horizontal;

      if (isFinite(fill)) {
        return null;
      } // Backward compatibility: until v3, we still need to support boundary values set on
      // the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
      // controllers might still use it (e.g. the Smith chart).


      if (fill === 'start') {
        target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
      } else if (fill === 'end') {
        target = model.scaleTop === undefined ? scale.top : model.scaleTop;
      } else if (model.scaleZero !== undefined) {
        target = model.scaleZero;
      } else if (scale.getBasePosition) {
        target = scale.getBasePosition();
      } else if (scale.getBasePixel) {
        target = scale.getBasePixel();
      }

      if (target !== undefined && target !== null) {
        if (target.x !== undefined && target.y !== undefined) {
          return target;
        }

        if (typeof target === 'number' && isFinite(target)) {
          horizontal = scale.isHorizontal();
          return {
            x: horizontal ? target : null,
            y: horizontal ? null : target
          };
        }
      }

      return null;
    }

    function resolveTarget(sources, index, propagate) {
      var source = sources[index];
      var fill = source.fill;
      var visited = [index];
      var target;

      if (!propagate) {
        return fill;
      }

      while (fill !== false && visited.indexOf(fill) === -1) {
        if (!isFinite(fill)) {
          return fill;
        }

        target = sources[fill];

        if (!target) {
          return false;
        }

        if (target.visible) {
          return fill;
        }

        visited.push(fill);
        fill = target.fill;
      }

      return false;
    }

    function createMapper(source) {
      var fill = source.fill;
      var type = 'dataset';

      if (fill === false) {
        return null;
      }

      if (!isFinite(fill)) {
        type = 'boundary';
      }

      return mappers[type](source);
    }

    function isDrawable(point) {
      return point && !point.skip;
    }

    function drawArea(ctx, curve0, curve1, len0, len1) {
      var i;

      if (!len0 || !len1) {
        return;
      } // building first area curve (normal)


      ctx.moveTo(curve0[0].x, curve0[0].y);

      for (i = 1; i < len0; ++i) {
        helpers.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
      } // joining the two area curves


      ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y); // building opposite area curve (reverse)

      for (i = len1 - 1; i > 0; --i) {
        helpers.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
      }
    }

    function doFill(ctx, points, mapper, view, color, loop) {
      var count = points.length;
      var span = view.spanGaps;
      var curve0 = [];
      var curve1 = [];
      var len0 = 0;
      var len1 = 0;
      var i, ilen, index, p0, p1, d0, d1;
      ctx.beginPath();

      for (i = 0, ilen = count + !!loop; i < ilen; ++i) {
        index = i % count;
        p0 = points[index]._view;
        p1 = mapper(p0, index, view);
        d0 = isDrawable(p0);
        d1 = isDrawable(p1);

        if (d0 && d1) {
          len0 = curve0.push(p0);
          len1 = curve1.push(p1);
        } else if (len0 && len1) {
          if (!span) {
            drawArea(ctx, curve0, curve1, len0, len1);
            len0 = len1 = 0;
            curve0 = [];
            curve1 = [];
          } else {
            if (d0) {
              curve0.push(p0);
            }

            if (d1) {
              curve1.push(p1);
            }
          }
        }
      }

      drawArea(ctx, curve0, curve1, len0, len1);
      ctx.closePath();
      ctx.fillStyle = color;
      ctx.fill();
    }

    module.exports = {
      id: 'filler',
      afterDatasetsUpdate: function afterDatasetsUpdate(chart, options) {
        var count = (chart.data.datasets || []).length;
        var propagate = options.propagate;
        var sources = [];
        var meta, i, el, source;

        for (i = 0; i < count; ++i) {
          meta = chart.getDatasetMeta(i);
          el = meta.dataset;
          source = null;

          if (el && el._model && el instanceof elements.Line) {
            source = {
              visible: chart.isDatasetVisible(i),
              fill: decodeFill(el, i, count),
              chart: chart,
              el: el
            };
          }

          meta.$filler = source;
          sources.push(source);
        }

        for (i = 0; i < count; ++i) {
          source = sources[i];

          if (!source) {
            continue;
          }

          source.fill = resolveTarget(sources, i, propagate);
          source.boundary = computeBoundary(source);
          source.mapper = createMapper(source);
        }
      },
      beforeDatasetDraw: function beforeDatasetDraw(chart, args) {
        var meta = args.meta.$filler;

        if (!meta) {
          return;
        }

        var ctx = chart.ctx;
        var el = meta.el;
        var view = el._view;
        var points = el._children || [];
        var mapper = meta.mapper;
        var color = view.backgroundColor || defaults.global.defaultColor;

        if (mapper && color && points.length) {
          helpers.canvas.clipArea(ctx, chart.chartArea);
          doFill(ctx, points, mapper, view, color, el._loop);
          helpers.canvas.unclipArea(ctx);
        }
      }
    };
  }, {
    "../core/core.defaults": 89,
    "../elements/index": 104,
    "../helpers/index": 109
  }],
  115: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    var helpers = require('../helpers/index');

    var layouts = require('../core/core.layouts');

    var noop = helpers.noop;

    defaults._set('global', {
      legend: {
        display: true,
        position: 'top',
        fullWidth: true,
        reverse: false,
        weight: 1000,
        // a callback that will handle
        onClick: function onClick(e, legendItem) {
          var index = legendItem.datasetIndex;
          var ci = this.chart;
          var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment

          meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart

          ci.update();
        },
        onHover: null,
        labels: {
          boxWidth: 40,
          padding: 10,
          // Generates labels shown in the legend
          // Valid properties to return:
          // text : text to display
          // fillStyle : fill of coloured box
          // strokeStyle: stroke of coloured box
          // hidden : if this legend item refers to a hidden item
          // lineCap : cap style for line
          // lineDash
          // lineDashOffset :
          // lineJoin :
          // lineWidth :
          generateLabels: function generateLabels(chart) {
            var data = chart.data;
            return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
              return {
                text: dataset.label,
                fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                hidden: !chart.isDatasetVisible(i),
                lineCap: dataset.borderCapStyle,
                lineDash: dataset.borderDash,
                lineDashOffset: dataset.borderDashOffset,
                lineJoin: dataset.borderJoinStyle,
                lineWidth: dataset.borderWidth,
                strokeStyle: dataset.borderColor,
                pointStyle: dataset.pointStyle,
                // Below is extra data used for toggling the datasets
                datasetIndex: i
              };
            }, this) : [];
          }
        }
      },
      legendCallback: function legendCallback(chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');

        for (var i = 0; i < chart.data.datasets.length; i++) {
          text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');

          if (chart.data.datasets[i].label) {
            text.push(chart.data.datasets[i].label);
          }

          text.push('</li>');
        }

        text.push('</ul>');
        return text.join('');
      }
    });
    /**
     * Helper function to get the box width based on the usePointStyle option
     * @param labelopts {Object} the label options on the legend
     * @param fontSize {Number} the label font size
     * @return {Number} width of the color box area
     */


    function getBoxWidth(labelOpts, fontSize) {
      return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
    }
    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */


    var Legend = Element.extend({
      initialize: function initialize(config) {
        helpers.extend(this, config); // Contains hit boxes for each dataset (in dataset order)

        this.legendHitBoxes = []; // Are we in doughnut mode which has a different data type

        this.doughnutMode = false;
      },
      // These methods are ordered by lifecycle. Utilities then follow.
      // Any function defined here is inherited by all legend types.
      // Any function can be extended by the legend type
      beforeUpdate: noop,
      update: function update(maxWidth, maxHeight, margins) {
        var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

        me.beforeUpdate(); // Absorb the master measurements

        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins; // Dimensions

        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions(); // Labels

        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels(); // Fit

        me.beforeFit();
        me.fit();
        me.afterFit(); //

        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: noop,
      //
      beforeSetDimensions: noop,
      setDimensions: function setDimensions() {
        var me = this; // Set the unconstrained dimension before label rotation

        if (me.isHorizontal()) {
          // Reset position before calculating rotation
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight; // Reset position before calculating rotation

          me.top = 0;
          me.bottom = me.height;
        } // Reset padding


        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0; // Reset minSize

        me.minSize = {
          width: 0,
          height: 0
        };
      },
      afterSetDimensions: noop,
      //
      beforeBuildLabels: noop,
      buildLabels: function buildLabels() {
        var me = this;
        var labelOpts = me.options.labels || {};
        var legendItems = helpers.callback(labelOpts.generateLabels, [me.chart], me) || [];

        if (labelOpts.filter) {
          legendItems = legendItems.filter(function (item) {
            return labelOpts.filter(item, me.chart.data);
          });
        }

        if (me.options.reverse) {
          legendItems.reverse();
        }

        me.legendItems = legendItems;
      },
      afterBuildLabels: noop,
      //
      beforeFit: noop,
      fit: function fit() {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var display = opts.display;
        var ctx = me.ctx;
        var globalDefault = defaults.global;
        var valueOrDefault = helpers.valueOrDefault;
        var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
        var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
        var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
        var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily); // Reset hit boxes

        var hitboxes = me.legendHitBoxes = [];
        var minSize = me.minSize;
        var isHorizontal = me.isHorizontal();

        if (isHorizontal) {
          minSize.width = me.maxWidth; // fill all the width

          minSize.height = display ? 10 : 0;
        } else {
          minSize.width = display ? 10 : 0;
          minSize.height = me.maxHeight; // fill all the height
        } // Increase sizes here


        if (display) {
          ctx.font = labelFont;

          if (isHorizontal) {
            // Labels
            // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
            var lineWidths = me.lineWidths = [0];
            var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            helpers.each(me.legendItems, function (legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;

              if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                totalHeight += fontSize + labelOpts.padding;
                lineWidths[lineWidths.length] = me.left;
              } // Store the hitbox width and height here. Final position will be updated in `draw`


              hitboxes[i] = {
                left: 0,
                top: 0,
                width: width,
                height: fontSize
              };
              lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
            });
            minSize.height += totalHeight;
          } else {
            var vPadding = labelOpts.padding;
            var columnWidths = me.columnWidths = [];
            var totalWidth = labelOpts.padding;
            var currentColWidth = 0;
            var currentColHeight = 0;
            var itemHeight = fontSize + vPadding;
            helpers.each(me.legendItems, function (legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column

              if (currentColHeight + itemHeight > minSize.height) {
                totalWidth += currentColWidth + labelOpts.padding;
                columnWidths.push(currentColWidth); // previous column width

                currentColWidth = 0;
                currentColHeight = 0;
              } // Get max width


              currentColWidth = Math.max(currentColWidth, itemWidth);
              currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`

              hitboxes[i] = {
                left: 0,
                top: 0,
                width: itemWidth,
                height: fontSize
              };
            });
            totalWidth += currentColWidth;
            columnWidths.push(currentColWidth);
            minSize.width += totalWidth;
          }
        }

        me.width = minSize.width;
        me.height = minSize.height;
      },
      afterFit: noop,
      // Shared Methods
      isHorizontal: function isHorizontal() {
        return this.options.position === 'top' || this.options.position === 'bottom';
      },
      // Actually draw the legend on the canvas
      draw: function draw() {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var globalDefault = defaults.global;
        var lineDefault = globalDefault.elements.line;
        var legendWidth = me.width;
        var lineWidths = me.lineWidths;

        if (opts.display) {
          var ctx = me.ctx;
          var valueOrDefault = helpers.valueOrDefault;
          var fontColor = valueOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor);
          var fontSize = valueOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
          var fontStyle = valueOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
          var fontFamily = valueOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
          var labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
          var cursor; // Canvas setup

          ctx.textAlign = 'left';
          ctx.textBaseline = 'middle';
          ctx.lineWidth = 0.5;
          ctx.strokeStyle = fontColor; // for strikethrough effect

          ctx.fillStyle = fontColor; // render in correct colour

          ctx.font = labelFont;
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var hitboxes = me.legendHitBoxes; // current position

          var drawLegendBox = function drawLegendBox(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0) {
              return;
            } // Set the ctx for the box


            ctx.save();
            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
            ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx.lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
            var isLineWidthZero = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;

            if (ctx.setLineDash) {
              // IE 9 and 10 do not support line dash
              ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
            }

            if (opts.labels && opts.labels.usePointStyle) {
              // Recalculate x and y for drawPoint() because its expecting
              // x and y to be center of figure (instead of top left)
              var radius = fontSize * Math.SQRT2 / 2;
              var offSet = radius / Math.SQRT2;
              var centerX = x + offSet;
              var centerY = y + offSet; // Draw pointStyle as legend symbol

              helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
            } else {
              // Draw box as legend symbol
              if (!isLineWidthZero) {
                ctx.strokeRect(x, y, boxWidth, fontSize);
              }

              ctx.fillRect(x, y, boxWidth, fontSize);
            }

            ctx.restore();
          };

          var fillText = function fillText(x, y, legendItem, textWidth) {
            var halfFontSize = fontSize / 2;
            var xLeft = boxWidth + halfFontSize + x;
            var yMiddle = y + halfFontSize;
            ctx.fillText(legendItem.text, xLeft, yMiddle);

            if (legendItem.hidden) {
              // Strikethrough the text if hidden
              ctx.beginPath();
              ctx.lineWidth = 2;
              ctx.moveTo(xLeft, yMiddle);
              ctx.lineTo(xLeft + textWidth, yMiddle);
              ctx.stroke();
            }
          }; // Horizontal


          var isHorizontal = me.isHorizontal();

          if (isHorizontal) {
            cursor = {
              x: me.left + (legendWidth - lineWidths[0]) / 2,
              y: me.top + labelOpts.padding,
              line: 0
            };
          } else {
            cursor = {
              x: me.left + labelOpts.padding,
              y: me.top + labelOpts.padding,
              line: 0
            };
          }

          var itemHeight = fontSize + labelOpts.padding;
          helpers.each(me.legendItems, function (legendItem, i) {
            var textWidth = ctx.measureText(legendItem.text).width;
            var width = boxWidth + fontSize / 2 + textWidth;
            var x = cursor.x;
            var y = cursor.y;

            if (isHorizontal) {
              if (x + width >= legendWidth) {
                y = cursor.y += itemHeight;
                cursor.line++;
                x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
              }
            } else if (y + itemHeight > me.bottom) {
              x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
              y = cursor.y = me.top + labelOpts.padding;
              cursor.line++;
            }

            drawLegendBox(x, y, legendItem);
            hitboxes[i].left = x;
            hitboxes[i].top = y; // Fill the actual label

            fillText(x, y, legendItem, textWidth);

            if (isHorizontal) {
              cursor.x += width + labelOpts.padding;
            } else {
              cursor.y += itemHeight;
            }
          });
        }
      },

      /**
       * Handle an event
       * @private
       * @param {IEvent} event - The event to handle
       * @return {Boolean} true if a change occured
       */
      handleEvent: function handleEvent(e) {
        var me = this;
        var opts = me.options;
        var type = e.type === 'mouseup' ? 'click' : e.type;
        var changed = false;

        if (type === 'mousemove') {
          if (!opts.onHover) {
            return;
          }
        } else if (type === 'click') {
          if (!opts.onClick) {
            return;
          }
        } else {
          return;
        } // Chart event already has relative position in it


        var x = e.x;
        var y = e.y;

        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
          // See if we are touching one of the dataset boxes
          var lh = me.legendHitBoxes;

          for (var i = 0; i < lh.length; ++i) {
            var hitBox = lh[i];

            if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
              // Touching an element
              if (type === 'click') {
                // use e.native for backwards compatibility
                opts.onClick.call(me, e["native"], me.legendItems[i]);
                changed = true;
                break;
              } else if (type === 'mousemove') {
                // use e.native for backwards compatibility
                opts.onHover.call(me, e["native"], me.legendItems[i]);
                changed = true;
                break;
              }
            }
          }
        }

        return changed;
      }
    });

    function createNewLegendAndAttach(chart, legendOpts) {
      var legend = new Legend({
        ctx: chart.ctx,
        options: legendOpts,
        chart: chart
      });
      layouts.configure(chart, legend, legendOpts);
      layouts.addBox(chart, legend);
      chart.legend = legend;
    }

    module.exports = {
      id: 'legend',

      /**
       * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
       * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
       * the plugin, which one will be re-exposed in the chart.js file.
       * https://github.com/chartjs/Chart.js/pull/2640
       * @private
       */
      _element: Legend,
      beforeInit: function beforeInit(chart) {
        var legendOpts = chart.options.legend;

        if (legendOpts) {
          createNewLegendAndAttach(chart, legendOpts);
        }
      },
      beforeUpdate: function beforeUpdate(chart) {
        var legendOpts = chart.options.legend;
        var legend = chart.legend;

        if (legendOpts) {
          helpers.mergeIf(legendOpts, defaults.global.legend);

          if (legend) {
            layouts.configure(chart, legend, legendOpts);
            legend.options = legendOpts;
          } else {
            createNewLegendAndAttach(chart, legendOpts);
          }
        } else if (legend) {
          layouts.removeBox(chart, legend);
          delete chart.legend;
        }
      },
      afterEvent: function afterEvent(chart, e) {
        var legend = chart.legend;

        if (legend) {
          legend.handleEvent(e);
        }
      }
    };
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90,
    "../core/core.layouts": 94,
    "../helpers/index": 109
  }],
  116: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var Element = require('../core/core.element');

    var helpers = require('../helpers/index');

    var layouts = require('../core/core.layouts');

    var noop = helpers.noop;

    defaults._set('global', {
      title: {
        display: false,
        fontStyle: 'bold',
        fullWidth: true,
        lineHeight: 1.2,
        padding: 10,
        position: 'top',
        text: '',
        weight: 2000 // by default greater than legend (1000) to be above

      }
    });
    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */


    var Title = Element.extend({
      initialize: function initialize(config) {
        var me = this;
        helpers.extend(me, config); // Contains hit boxes for each dataset (in dataset order)

        me.legendHitBoxes = [];
      },
      // These methods are ordered by lifecycle. Utilities then follow.
      beforeUpdate: noop,
      update: function update(maxWidth, maxHeight, margins) {
        var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

        me.beforeUpdate(); // Absorb the master measurements

        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins; // Dimensions

        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions(); // Labels

        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels(); // Fit

        me.beforeFit();
        me.fit();
        me.afterFit(); //

        me.afterUpdate();
        return me.minSize;
      },
      afterUpdate: noop,
      //
      beforeSetDimensions: noop,
      setDimensions: function setDimensions() {
        var me = this; // Set the unconstrained dimension before label rotation

        if (me.isHorizontal()) {
          // Reset position before calculating rotation
          me.width = me.maxWidth;
          me.left = 0;
          me.right = me.width;
        } else {
          me.height = me.maxHeight; // Reset position before calculating rotation

          me.top = 0;
          me.bottom = me.height;
        } // Reset padding


        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0; // Reset minSize

        me.minSize = {
          width: 0,
          height: 0
        };
      },
      afterSetDimensions: noop,
      //
      beforeBuildLabels: noop,
      buildLabels: noop,
      afterBuildLabels: noop,
      //
      beforeFit: noop,
      fit: function fit() {
        var me = this;
        var valueOrDefault = helpers.valueOrDefault;
        var opts = me.options;
        var display = opts.display;
        var fontSize = valueOrDefault(opts.fontSize, defaults.global.defaultFontSize);
        var minSize = me.minSize;
        var lineCount = helpers.isArray(opts.text) ? opts.text.length : 1;
        var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
        var textSize = display ? lineCount * lineHeight + opts.padding * 2 : 0;

        if (me.isHorizontal()) {
          minSize.width = me.maxWidth; // fill all the width

          minSize.height = textSize;
        } else {
          minSize.width = textSize;
          minSize.height = me.maxHeight; // fill all the height
        }

        me.width = minSize.width;
        me.height = minSize.height;
      },
      afterFit: noop,
      // Shared Methods
      isHorizontal: function isHorizontal() {
        var pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
      },
      // Actually draw the title block on the canvas
      draw: function draw() {
        var me = this;
        var ctx = me.ctx;
        var valueOrDefault = helpers.valueOrDefault;
        var opts = me.options;
        var globalDefaults = defaults.global;

        if (opts.display) {
          var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
          var fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle);
          var fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily);
          var titleFont = helpers.fontString(fontSize, fontStyle, fontFamily);
          var lineHeight = helpers.options.toLineHeight(opts.lineHeight, fontSize);
          var offset = lineHeight / 2 + opts.padding;
          var rotation = 0;
          var top = me.top;
          var left = me.left;
          var bottom = me.bottom;
          var right = me.right;
          var maxWidth, titleX, titleY;
          ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour

          ctx.font = titleFont; // Horizontal

          if (me.isHorizontal()) {
            titleX = left + (right - left) / 2; // midpoint of the width

            titleY = top + offset;
            maxWidth = right - left;
          } else {
            titleX = opts.position === 'left' ? left + offset : right - offset;
            titleY = top + (bottom - top) / 2;
            maxWidth = bottom - top;
            rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
          }

          ctx.save();
          ctx.translate(titleX, titleY);
          ctx.rotate(rotation);
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          var text = opts.text;

          if (helpers.isArray(text)) {
            var y = 0;

            for (var i = 0; i < text.length; ++i) {
              ctx.fillText(text[i], 0, y, maxWidth);
              y += lineHeight;
            }
          } else {
            ctx.fillText(text, 0, 0, maxWidth);
          }

          ctx.restore();
        }
      }
    });

    function createNewTitleBlockAndAttach(chart, titleOpts) {
      var title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart: chart
      });
      layouts.configure(chart, title, titleOpts);
      layouts.addBox(chart, title);
      chart.titleBlock = title;
    }

    module.exports = {
      id: 'title',

      /**
       * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
       * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
       * the plugin, which one will be re-exposed in the chart.js file.
       * https://github.com/chartjs/Chart.js/pull/2640
       * @private
       */
      _element: Title,
      beforeInit: function beforeInit(chart) {
        var titleOpts = chart.options.title;

        if (titleOpts) {
          createNewTitleBlockAndAttach(chart, titleOpts);
        }
      },
      beforeUpdate: function beforeUpdate(chart) {
        var titleOpts = chart.options.title;
        var titleBlock = chart.titleBlock;

        if (titleOpts) {
          helpers.mergeIf(titleOpts, defaults.global.title);

          if (titleBlock) {
            layouts.configure(chart, titleBlock, titleOpts);
            titleBlock.options = titleOpts;
          } else {
            createNewTitleBlockAndAttach(chart, titleOpts);
          }
        } else if (titleBlock) {
          layouts.removeBox(chart, titleBlock);
          delete chart.titleBlock;
        }
      }
    };
  }, {
    "../core/core.defaults": 89,
    "../core/core.element": 90,
    "../core/core.layouts": 94,
    "../helpers/index": 109
  }],
  117: [function (require, module, exports) {
    'use strict';

    var Scale = require('../core/core.scale');

    var scaleService = require('../core/core.scaleService');

    module.exports = function () {
      // Default config for a category scale
      var defaultConfig = {
        position: 'bottom'
      };
      var DatasetScale = Scale.extend({
        /**
        * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
        * else fall back to data.labels
        * @private
        */
        getLabels: function getLabels() {
          var data = this.chart.data;
          return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
        },
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var labels = me.getLabels();
          me.minIndex = 0;
          me.maxIndex = labels.length - 1;
          var findIndex;

          if (me.options.ticks.min !== undefined) {
            // user specified min value
            findIndex = labels.indexOf(me.options.ticks.min);
            me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
          }

          if (me.options.ticks.max !== undefined) {
            // user specified max value
            findIndex = labels.indexOf(me.options.ticks.max);
            me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
          }

          me.min = labels[me.minIndex];
          me.max = labels[me.maxIndex];
        },
        buildTicks: function buildTicks() {
          var me = this;
          var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array

          me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          var me = this;
          var data = me.chart.data;
          var isHorizontal = me.isHorizontal();

          if (data.yLabels && !isHorizontal) {
            return me.getRightValue(data.datasets[datasetIndex].data[index]);
          }

          return me.ticks[index - me.minIndex];
        },
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: function getPixelForValue(value, index) {
          var me = this;
          var offset = me.options.offset; // 1 is added because we need the length but we have the indexes

          var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (offset ? 0 : 1), 1); // If value is a data object, then index is the index in the data array,
          // not the index of the scale. We need to change that.

          var valueCategory;

          if (value !== undefined && value !== null) {
            valueCategory = me.isHorizontal() ? value.x : value.y;
          }

          if (valueCategory !== undefined || value !== undefined && isNaN(index)) {
            var labels = me.getLabels();
            value = valueCategory || value;
            var idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
          }

          if (me.isHorizontal()) {
            var valueWidth = me.width / offsetAmt;
            var widthOffset = valueWidth * (index - me.minIndex);

            if (offset) {
              widthOffset += valueWidth / 2;
            }

            return me.left + Math.round(widthOffset);
          }

          var valueHeight = me.height / offsetAmt;
          var heightOffset = valueHeight * (index - me.minIndex);

          if (offset) {
            heightOffset += valueHeight / 2;
          }

          return me.top + Math.round(heightOffset);
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.ticks[index], index + this.minIndex, null);
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var offset = me.options.offset;
          var value;
          var offsetAmt = Math.max(me._ticks.length - (offset ? 0 : 1), 1);
          var horz = me.isHorizontal();
          var valueDimension = (horz ? me.width : me.height) / offsetAmt;
          pixel -= horz ? me.left : me.top;

          if (offset) {
            pixel -= valueDimension / 2;
          }

          if (pixel <= 0) {
            value = 0;
          } else {
            value = Math.round(pixel / valueDimension);
          }

          return value + me.minIndex;
        },
        getBasePixel: function getBasePixel() {
          return this.bottom;
        }
      });
      scaleService.registerScaleType('category', DatasetScale, defaultConfig);
    };
  }, {
    "../core/core.scale": 96,
    "../core/core.scaleService": 97
  }],
  118: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var helpers = require('../helpers/index');

    var scaleService = require('../core/core.scaleService');

    var Ticks = require('../core/core.ticks');

    module.exports = function (Chart) {
      var defaultConfig = {
        position: 'left',
        ticks: {
          callback: Ticks.formatters.linear
        }
      };
      var LinearScale = Chart.LinearScaleBase.extend({
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var isHorizontal = me.isHorizontal();
          var DEFAULT_MIN = 0;
          var DEFAULT_MAX = 1;

          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          } // First Calculate the range


          me.min = null;
          me.max = null;
          var hasStacks = opts.stacked;

          if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }

              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                hasStacks = true;
              }
            });
          }

          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
              opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');

              if (valuesPerStack[key] === undefined) {
                valuesPerStack[key] = {
                  positiveValues: [],
                  negativeValues: []
                };
              } // Store these per type


              var positiveValues = valuesPerStack[key].positiveValues;
              var negativeValues = valuesPerStack[key].negativeValues;

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  positiveValues[index] = positiveValues[index] || 0;
                  negativeValues[index] = negativeValues[index] || 0;

                  if (opts.relativePoints) {
                    positiveValues[index] = 100;
                  } else if (value < 0) {
                    negativeValues[index] += value;
                  } else {
                    positiveValues[index] += value;
                  }
                });
              }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
              var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
              var minVal = helpers.min(values);
              var maxVal = helpers.max(values);
              me.min = me.min === null ? minVal : Math.min(me.min, minVal);
              me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
          } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }

                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }
                });
              }
            });
          }

          me.min = isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
          me.max = isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero

          this.handleTickRangeOptions();
        },
        getTickLimit: function getTickLimit() {
          var maxTicks;
          var me = this;
          var tickOpts = me.options.ticks;

          if (me.isHorizontal()) {
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
          } else {
            // The factor of 2 used to scale the font size has been experimentally determined.
            var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, defaults.global.defaultFontSize);
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
          }

          return maxTicks;
        },
        // Called after the ticks are built. We need
        handleDirectionalChanges: function handleDirectionalChanges() {
          if (!this.isHorizontal()) {
            // We are in a vertical orientation. The top value is the highest. So reverse the array
            this.ticks.reverse();
          }
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        // Utils
        getPixelForValue: function getPixelForValue(value) {
          // This must be called after fit has been run so that
          // this.left, this.top, this.right, and this.bottom have been defined
          var me = this;
          var start = me.start;
          var rightValue = +me.getRightValue(value);
          var pixel;
          var range = me.end - start;

          if (me.isHorizontal()) {
            pixel = me.left + me.width / range * (rightValue - start);
          } else {
            pixel = me.bottom - me.height / range * (rightValue - start);
          }

          return pixel;
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var isHorizontal = me.isHorizontal();
          var innerDimension = isHorizontal ? me.width : me.height;
          var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
          return me.start + (me.end - me.start) * offset;
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.ticksAsNumbers[index]);
        }
      });
      scaleService.registerScaleType('linear', LinearScale, defaultConfig);
    };
  }, {
    "../core/core.defaults": 89,
    "../core/core.scaleService": 97,
    "../core/core.ticks": 98,
    "../helpers/index": 109
  }],
  119: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    var Scale = require('../core/core.scale');
    /**
     * Generate a set of linear ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {Array<Number>} array of tick values
     */


    function generateTicks(generationOptions, dataRange) {
      var ticks = []; // To get a "nice" value for the tick spacing, we will use the appropriately named
      // "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
      // for details.

      var factor;
      var precision;
      var spacing;

      if (generationOptions.stepSize && generationOptions.stepSize > 0) {
        spacing = generationOptions.stepSize;
      } else {
        var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
        spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
        precision = generationOptions.precision;

        if (precision !== undefined) {
          // If the user specified a precision, round to that number of decimal places
          factor = Math.pow(10, precision);
          spacing = Math.ceil(spacing * factor) / factor;
        }
      }

      var niceMin = Math.floor(dataRange.min / spacing) * spacing;
      var niceMax = Math.ceil(dataRange.max / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.

      if (!helpers.isNullOrUndef(generationOptions.min) && !helpers.isNullOrUndef(generationOptions.max) && generationOptions.stepSize) {
        // If very close to our whole number, use it.
        if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
          niceMin = generationOptions.min;
          niceMax = generationOptions.max;
        }
      }

      var numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.

      if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
        numSpaces = Math.round(numSpaces);
      } else {
        numSpaces = Math.ceil(numSpaces);
      }

      precision = 1;

      if (spacing < 1) {
        precision = Math.pow(10, 1 - Math.floor(helpers.log10(spacing)));
        niceMin = Math.round(niceMin * precision) / precision;
        niceMax = Math.round(niceMax * precision) / precision;
      }

      ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);

      for (var j = 1; j < numSpaces; ++j) {
        ticks.push(Math.round((niceMin + j * spacing) * precision) / precision);
      }

      ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
      return ticks;
    }

    module.exports = function (Chart) {
      var noop = helpers.noop;
      Chart.LinearScaleBase = Scale.extend({
        getRightValue: function getRightValue(value) {
          if (typeof value === 'string') {
            return +value;
          }

          return Scale.prototype.getRightValue.call(this, value);
        },
        handleTickRangeOptions: function handleTickRangeOptions() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
          // do nothing since that would make the chart weird. If the user really wants a weird chart
          // axis, they can manually override it

          if (tickOpts.beginAtZero) {
            var minSign = helpers.sign(me.min);
            var maxSign = helpers.sign(me.max);

            if (minSign < 0 && maxSign < 0) {
              // move the top up to 0
              me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
              // move the bottom down to 0
              me.min = 0;
            }
          }

          var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
          var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

          if (tickOpts.min !== undefined) {
            me.min = tickOpts.min;
          } else if (tickOpts.suggestedMin !== undefined) {
            if (me.min === null) {
              me.min = tickOpts.suggestedMin;
            } else {
              me.min = Math.min(me.min, tickOpts.suggestedMin);
            }
          }

          if (tickOpts.max !== undefined) {
            me.max = tickOpts.max;
          } else if (tickOpts.suggestedMax !== undefined) {
            if (me.max === null) {
              me.max = tickOpts.suggestedMax;
            } else {
              me.max = Math.max(me.max, tickOpts.suggestedMax);
            }
          }

          if (setMin !== setMax) {
            // We set the min or the max but not both.
            // So ensure that our range is good
            // Inverted or 0 length range can happen when
            // ticks.min is set, and no datasets are visible
            if (me.min >= me.max) {
              if (setMin) {
                me.max = me.min + 1;
              } else {
                me.min = me.max - 1;
              }
            }
          }

          if (me.min === me.max) {
            me.max++;

            if (!tickOpts.beginAtZero) {
              me.min--;
            }
          }
        },
        getTickLimit: noop,
        handleDirectionalChanges: noop,
        buildTicks: function buildTicks() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of
          // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
          // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
          // the graph. Make sure we always have at least 2 ticks

          var maxTicks = me.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          var numericGeneratorOptions = {
            maxTicks: maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            precision: tickOpts.precision,
            stepSize: helpers.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
          };
          var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
          me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the
          // range of the scale

          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);

          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this;
          me.ticksAsNumbers = me.ticks.slice();
          me.zeroLineIndex = me.ticks.indexOf(0);
          Scale.prototype.convertTicksToLabels.call(me);
        }
      });
    };
  }, {
    "../core/core.scale": 96,
    "../helpers/index": 109
  }],
  120: [function (require, module, exports) {
    'use strict';

    var helpers = require('../helpers/index');

    var Scale = require('../core/core.scale');

    var scaleService = require('../core/core.scaleService');

    var Ticks = require('../core/core.ticks');
    /**
     * Generate a set of logarithmic ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {Array<Number>} array of tick values
     */


    function generateTicks(generationOptions, dataRange) {
      var ticks = [];
      var valueOrDefault = helpers.valueOrDefault; // Figure out what the max number of ticks we can support it is based on the size of
      // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
      // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
      // the graph

      var tickVal = valueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
      var endExp = Math.floor(helpers.log10(dataRange.max));
      var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
      var exp, significand;

      if (tickVal === 0) {
        exp = Math.floor(helpers.log10(dataRange.minNotZero));
        significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
        ticks.push(tickVal);
        tickVal = significand * Math.pow(10, exp);
      } else {
        exp = Math.floor(helpers.log10(tickVal));
        significand = Math.floor(tickVal / Math.pow(10, exp));
      }

      var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

      do {
        ticks.push(tickVal);
        ++significand;

        if (significand === 10) {
          significand = 1;
          ++exp;
          precision = exp >= 0 ? 1 : precision;
        }

        tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
      } while (exp < endExp || exp === endExp && significand < endSignificand);

      var lastTick = valueOrDefault(generationOptions.max, tickVal);
      ticks.push(lastTick);
      return ticks;
    }

    module.exports = function (Chart) {
      var defaultConfig = {
        position: 'left',
        // label settings
        ticks: {
          callback: Ticks.formatters.logarithmic
        }
      };
      var LogarithmicScale = Scale.extend({
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var isHorizontal = me.isHorizontal();

          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          } // Calculate Range


          me.min = null;
          me.max = null;
          me.minNotZero = null;
          var hasStacks = opts.stacked;

          if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }

              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                hasStacks = true;
              }
            });
          }

          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [meta.type, // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
              opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                if (valuesPerStack[key] === undefined) {
                  valuesPerStack[key] = [];
                }

                helpers.each(dataset.data, function (rawValue, index) {
                  var values = valuesPerStack[key];
                  var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored

                  if (isNaN(value) || meta.data[index].hidden || value < 0) {
                    return;
                  }

                  values[index] = values[index] || 0;
                  values[index] += value;
                });
              }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
              if (valuesForType.length > 0) {
                var minVal = helpers.min(valuesForType);
                var maxVal = helpers.max(valuesForType);
                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
              }
            });
          } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue); // invalid, hidden and negative values are ignored

                  if (isNaN(value) || meta.data[index].hidden || value < 0) {
                    return;
                  }

                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }

                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }

                  if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                    me.minNotZero = value;
                  }
                });
              }
            });
          } // Common base implementation to handle ticks.min, ticks.max


          this.handleTickRangeOptions();
        },
        handleTickRangeOptions: function handleTickRangeOptions() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var valueOrDefault = helpers.valueOrDefault;
          var DEFAULT_MIN = 1;
          var DEFAULT_MAX = 10;
          me.min = valueOrDefault(tickOpts.min, me.min);
          me.max = valueOrDefault(tickOpts.max, me.max);

          if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
              me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
              me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
            } else {
              me.min = DEFAULT_MIN;
              me.max = DEFAULT_MAX;
            }
          }

          if (me.min === null) {
            me.min = Math.pow(10, Math.floor(helpers.log10(me.max)) - 1);
          }

          if (me.max === null) {
            me.max = me.min !== 0 ? Math.pow(10, Math.floor(helpers.log10(me.min)) + 1) : DEFAULT_MAX;
          }

          if (me.minNotZero === null) {
            if (me.min > 0) {
              me.minNotZero = me.min;
            } else if (me.max < 1) {
              me.minNotZero = Math.pow(10, Math.floor(helpers.log10(me.max)));
            } else {
              me.minNotZero = DEFAULT_MIN;
            }
          }
        },
        buildTicks: function buildTicks() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var reverse = !me.isHorizontal();
          var generationOptions = {
            min: tickOpts.min,
            max: tickOpts.max
          };
          var ticks = me.ticks = generateTicks(generationOptions, me); // At this point, we need to update our max and min given the tick values since we have expanded the
          // range of the scale

          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);

          if (tickOpts.reverse) {
            reverse = !reverse;
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }

          if (reverse) {
            ticks.reverse();
          }
        },
        convertTicksToLabels: function convertTicksToLabels() {
          this.tickValues = this.ticks.slice();
          Scale.prototype.convertTicksToLabels.call(this);
        },
        // Get the correct tooltip label
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.tickValues[index]);
        },

        /**
         * Returns the value of the first tick.
         * @param {Number} value - The minimum not zero value.
         * @return {Number} The first tick value.
         * @private
         */
        _getFirstTickValue: function _getFirstTickValue(value) {
          var exp = Math.floor(helpers.log10(value));
          var significand = Math.floor(value / Math.pow(10, exp));
          return significand * Math.pow(10, exp);
        },
        getPixelForValue: function getPixelForValue(value) {
          var me = this;
          var reverse = me.options.ticks.reverse;
          var log10 = helpers.log10;

          var firstTickValue = me._getFirstTickValue(me.minNotZero);

          var offset = 0;
          var innerDimension, pixel, start, end, sign;
          value = +me.getRightValue(value);

          if (reverse) {
            start = me.end;
            end = me.start;
            sign = -1;
          } else {
            start = me.start;
            end = me.end;
            sign = 1;
          }

          if (me.isHorizontal()) {
            innerDimension = me.width;
            pixel = reverse ? me.right : me.left;
          } else {
            innerDimension = me.height;
            sign *= -1; // invert, since the upper-left corner of the canvas is at pixel (0, 0)

            pixel = reverse ? me.top : me.bottom;
          }

          if (value !== start) {
            if (start === 0) {
              // include zero tick
              offset = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
              innerDimension -= offset;
              start = firstTickValue;
            }

            if (value !== 0) {
              offset += innerDimension / (log10(end) - log10(start)) * (log10(value) - log10(start));
            }

            pixel += sign * offset;
          }

          return pixel;
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var reverse = me.options.ticks.reverse;
          var log10 = helpers.log10;

          var firstTickValue = me._getFirstTickValue(me.minNotZero);

          var innerDimension, start, end, value;

          if (reverse) {
            start = me.end;
            end = me.start;
          } else {
            start = me.start;
            end = me.end;
          }

          if (me.isHorizontal()) {
            innerDimension = me.width;
            value = reverse ? me.right - pixel : pixel - me.left;
          } else {
            innerDimension = me.height;
            value = reverse ? pixel - me.top : me.bottom - pixel;
          }

          if (value !== start) {
            if (start === 0) {
              // include zero tick
              var offset = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
              value -= offset;
              innerDimension -= offset;
              start = firstTickValue;
            }

            value *= log10(end) - log10(start);
            value /= innerDimension;
            value = Math.pow(10, log10(start) + value);
          }

          return value;
        }
      });
      scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
    };
  }, {
    "../core/core.scale": 96,
    "../core/core.scaleService": 97,
    "../core/core.ticks": 98,
    "../helpers/index": 109
  }],
  121: [function (require, module, exports) {
    'use strict';

    var defaults = require('../core/core.defaults');

    var helpers = require('../helpers/index');

    var scaleService = require('../core/core.scaleService');

    var Ticks = require('../core/core.ticks');

    module.exports = function (Chart) {
      var globalDefaults = defaults.global;
      var defaultConfig = {
        display: true,
        // Boolean - Whether to animate scaling the chart from the centre
        animate: true,
        position: 'chartArea',
        angleLines: {
          display: true,
          color: 'rgba(0, 0, 0, 0.1)',
          lineWidth: 1
        },
        gridLines: {
          circular: false
        },
        // label settings
        ticks: {
          // Boolean - Show a backdrop to the scale label
          showLabelBackdrop: true,
          // String - The colour of the label backdrop
          backdropColor: 'rgba(255,255,255,0.75)',
          // Number - The backdrop padding above & below the label in pixels
          backdropPaddingY: 2,
          // Number - The backdrop padding to the side of the label in pixels
          backdropPaddingX: 2,
          callback: Ticks.formatters.linear
        },
        pointLabels: {
          // Boolean - if true, show point labels
          display: true,
          // Number - Point label font size in pixels
          fontSize: 10,
          // Function - Used to convert point labels
          callback: function callback(label) {
            return label;
          }
        }
      };

      function getValueCount(scale) {
        var opts = scale.options;
        return opts.angleLines.display || opts.pointLabels.display ? scale.chart.data.labels.length : 0;
      }

      function getPointLabelFontOptions(scale) {
        var pointLabelOptions = scale.options.pointLabels;
        var fontSize = helpers.valueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
        var fontStyle = helpers.valueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
        var fontFamily = helpers.valueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
        var font = helpers.fontString(fontSize, fontStyle, fontFamily);
        return {
          size: fontSize,
          style: fontStyle,
          family: fontFamily,
          font: font
        };
      }

      function measureLabelSize(ctx, fontSize, label) {
        if (helpers.isArray(label)) {
          return {
            w: helpers.longestText(ctx, ctx.font, label),
            h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
          };
        }

        return {
          w: ctx.measureText(label).width,
          h: fontSize
        };
      }

      function determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) {
          return {
            start: pos - size / 2,
            end: pos + size / 2
          };
        } else if (angle < min || angle > max) {
          return {
            start: pos - size - 5,
            end: pos
          };
        }

        return {
          start: pos,
          end: pos + size + 5
        };
      }
      /**
       * Helper function to fit a radial linear scale with point labels
       */


      function fitWithPointLabels(scale) {
        /*
         * Right, this is really confusing and there is a lot of maths going on here
         * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
         *
         * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
         *
         * Solution:
         *
         * We assume the radius of the polygon is half the size of the canvas at first
         * at each index we check if the text overlaps.
         *
         * Where it does, we store that angle and that index.
         *
         * After finding the largest index and angle we calculate how much we need to remove
         * from the shape radius to move the point inwards by that x.
         *
         * We average the left and right distances to get the maximum shape radius that can fit in the box
         * along with labels.
         *
         * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
         * on each side, removing that from the size, halving it and adding the left x protrusion width.
         *
         * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
         * and position it in the most space efficient manner
         *
         * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
         */
        var plFont = getPointLabelFontOptions(scale); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
        // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points

        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        var furthestLimits = {
          r: scale.width,
          l: 0,
          t: scale.height,
          b: 0
        };
        var furthestAngles = {};
        var i, textSize, pointPosition;
        scale.ctx.font = plFont.font;
        scale._pointLabelSizes = [];
        var valueCount = getValueCount(scale);

        for (i = 0; i < valueCount; i++) {
          pointPosition = scale.getPointPosition(i, largestPossibleRadius);
          textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
          scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle

          var angleRadians = scale.getIndexAngle(i);
          var angle = helpers.toDegrees(angleRadians) % 360;
          var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

          if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
          }

          if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
          }

          if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
          }

          if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
          }
        }

        scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
      }
      /**
       * Helper function to fit a radial linear scale with no point labels
       */


      function _fit(scale) {
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        scale.drawingArea = Math.round(largestPossibleRadius);
        scale.setCenterPoint(0, 0, 0, 0);
      }

      function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
          return 'center';
        } else if (angle < 180) {
          return 'left';
        }

        return 'right';
      }

      function fillText(ctx, text, position, fontSize) {
        if (helpers.isArray(text)) {
          var y = position.y;
          var spacing = 1.5 * fontSize;

          for (var i = 0; i < text.length; ++i) {
            ctx.fillText(text[i], position.x, y);
            y += spacing;
          }
        } else {
          ctx.fillText(text, position.x, position.y);
        }
      }

      function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
          position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
          position.y -= textSize.h;
        }
      }

      function drawPointLabels(scale) {
        var ctx = scale.ctx;
        var opts = scale.options;
        var angleLineOpts = opts.angleLines;
        var pointLabelOpts = opts.pointLabels;
        ctx.lineWidth = angleLineOpts.lineWidth;
        ctx.strokeStyle = angleLineOpts.color;
        var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max); // Point Label Font

        var plFont = getPointLabelFontOptions(scale);
        ctx.textBaseline = 'top';

        for (var i = getValueCount(scale) - 1; i >= 0; i--) {
          if (angleLineOpts.display) {
            var outerPosition = scale.getPointPosition(i, outerDistance);
            ctx.beginPath();
            ctx.moveTo(scale.xCenter, scale.yCenter);
            ctx.lineTo(outerPosition.x, outerPosition.y);
            ctx.stroke();
            ctx.closePath();
          }

          if (pointLabelOpts.display) {
            // Extra 3px out for some label spacing
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5); // Keep this in loop since we may support array properties here

            var pointLabelFontColor = helpers.valueAtIndexOrDefault(pointLabelOpts.fontColor, i, globalDefaults.defaultFontColor);
            ctx.font = plFont.font;
            ctx.fillStyle = pointLabelFontColor;
            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers.toDegrees(angleRadians);
            ctx.textAlign = getTextAlignForAngle(angle);
            adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
            fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
          }
        }
      }

      function drawRadiusLine(scale, gridLineOpts, radius, index) {
        var ctx = scale.ctx;
        ctx.strokeStyle = helpers.valueAtIndexOrDefault(gridLineOpts.color, index - 1);
        ctx.lineWidth = helpers.valueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);

        if (scale.options.gridLines.circular) {
          // Draw circular arcs between the points
          ctx.beginPath();
          ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
          ctx.closePath();
          ctx.stroke();
        } else {
          // Draw straight lines connecting each index
          var valueCount = getValueCount(scale);

          if (valueCount === 0) {
            return;
          }

          ctx.beginPath();
          var pointPosition = scale.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);

          for (var i = 1; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
          }

          ctx.closePath();
          ctx.stroke();
        }
      }

      function numberOrZero(param) {
        return helpers.isNumber(param) ? param : 0;
      }

      var LinearRadialScale = Chart.LinearScaleBase.extend({
        setDimensions: function setDimensions() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // Set the unconstrained dimension before label rotation

          me.width = me.maxWidth;
          me.height = me.maxHeight;
          me.xCenter = Math.round(me.width / 2);
          me.yCenter = Math.round(me.height / 2);
          var minSize = helpers.min([me.height, me.width]);
          var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
        },
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var chart = me.chart;
          var min = Number.POSITIVE_INFINITY;
          var max = Number.NEGATIVE_INFINITY;
          helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
              var meta = chart.getDatasetMeta(datasetIndex);
              helpers.each(dataset.data, function (rawValue, index) {
                var value = +me.getRightValue(rawValue);

                if (isNaN(value) || meta.data[index].hidden) {
                  return;
                }

                min = Math.min(value, min);
                max = Math.max(value, max);
              });
            }
          });
          me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
          me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero

          me.handleTickRangeOptions();
        },
        getTickLimit: function getTickLimit() {
          var tickOpts = this.options.ticks;
          var tickFontSize = helpers.valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this;
          Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me); // Point labels

          me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function fit() {
          if (this.options.pointLabels.display) {
            fitWithPointLabels(this);
          } else {
            _fit(this);
          }
        },

        /**
         * Set radius reductions and determine new radius and center point
         * @private
         */
        setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
          var me = this;
          var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
          var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
          var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
          var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
          radiusReductionLeft = numberOrZero(radiusReductionLeft);
          radiusReductionRight = numberOrZero(radiusReductionRight);
          radiusReductionTop = numberOrZero(radiusReductionTop);
          radiusReductionBottom = numberOrZero(radiusReductionBottom);
          me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
          me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
          var me = this;
          var maxRight = me.width - rightMovement - me.drawingArea;
          var maxLeft = leftMovement + me.drawingArea;
          var maxTop = topMovement + me.drawingArea;
          var maxBottom = me.height - bottomMovement - me.drawingArea;
          me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
          me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
        },
        getIndexAngle: function getIndexAngle(index) {
          var angleMultiplier = Math.PI * 2 / getValueCount(this);
          var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
          var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle

          return index * angleMultiplier + startAngleRadians;
        },
        getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {
          var me = this;

          if (value === null) {
            return 0; // null always in center
          } // Take into account half font size + the yPadding of the top value


          var scalingFactor = me.drawingArea / (me.max - me.min);

          if (me.options.ticks.reverse) {
            return (me.max - value) * scalingFactor;
          }

          return (value - me.min) * scalingFactor;
        },
        getPointPosition: function getPointPosition(index, distanceFromCenter) {
          var me = this;
          var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
          return {
            x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
            y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
          };
        },
        getPointPositionForValue: function getPointPositionForValue(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function getBasePosition() {
          var me = this;
          var min = me.min;
          var max = me.max;
          return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
        },
        draw: function draw() {
          var me = this;
          var opts = me.options;
          var gridLineOpts = opts.gridLines;
          var tickOpts = opts.ticks;
          var valueOrDefault = helpers.valueOrDefault;

          if (opts.display) {
            var ctx = me.ctx;
            var startAngle = this.getIndexAngle(0); // Tick Font

            var tickFontSize = valueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            var tickFontStyle = valueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
            var tickFontFamily = valueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
            helpers.each(me.ticks, function (label, index) {
              // Don't draw a centre value (if it is minimum)
              if (index > 0 || tickOpts.reverse) {
                var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]); // Draw circular lines around the scale

                if (gridLineOpts.display && index !== 0) {
                  drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                }

                if (tickOpts.display) {
                  var tickFontColor = valueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                  ctx.font = tickLabelFont;
                  ctx.save();
                  ctx.translate(me.xCenter, me.yCenter);
                  ctx.rotate(startAngle);

                  if (tickOpts.showLabelBackdrop) {
                    var labelWidth = ctx.measureText(label).width;
                    ctx.fillStyle = tickOpts.backdropColor;
                    ctx.fillRect(-labelWidth / 2 - tickOpts.backdropPaddingX, -yCenterOffset - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                  }

                  ctx.textAlign = 'center';
                  ctx.textBaseline = 'middle';
                  ctx.fillStyle = tickFontColor;
                  ctx.fillText(label, 0, -yCenterOffset);
                  ctx.restore();
                }
              }
            });

            if (opts.angleLines.display || opts.pointLabels.display) {
              drawPointLabels(me);
            }
          }
        }
      });
      scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
    };
  }, {
    "../core/core.defaults": 89,
    "../core/core.scaleService": 97,
    "../core/core.ticks": 98,
    "../helpers/index": 109
  }],
  122: [function (require, module, exports) {
    /* global window: false */
    'use strict';

    var moment = require('moment');

    moment = typeof moment === 'function' ? moment : window.moment;

    var defaults = require('../core/core.defaults');

    var helpers = require('../helpers/index');

    var Scale = require('../core/core.scale');

    var scaleService = require('../core/core.scaleService'); // Integer constants are from the ES6 spec.


    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var INTERVALS = {
      millisecond: {
        common: true,
        size: 1,
        steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
      },
      second: {
        common: true,
        size: 1000,
        steps: [1, 2, 5, 10, 15, 30]
      },
      minute: {
        common: true,
        size: 60000,
        steps: [1, 2, 5, 10, 15, 30]
      },
      hour: {
        common: true,
        size: 3600000,
        steps: [1, 2, 3, 6, 12]
      },
      day: {
        common: true,
        size: 86400000,
        steps: [1, 2, 5]
      },
      week: {
        common: false,
        size: 604800000,
        steps: [1, 2, 3, 4]
      },
      month: {
        common: true,
        size: 2.628e9,
        steps: [1, 2, 3]
      },
      quarter: {
        common: false,
        size: 7.884e9,
        steps: [1, 2, 3, 4]
      },
      year: {
        common: true,
        size: 3.154e10
      }
    };
    var UNITS = Object.keys(INTERVALS);

    function sorter(a, b) {
      return a - b;
    }

    function arrayUnique(items) {
      var hash = {};
      var out = [];
      var i, ilen, item;

      for (i = 0, ilen = items.length; i < ilen; ++i) {
        item = items[i];

        if (!hash[item]) {
          hash[item] = true;
          out.push(item);
        }
      }

      return out;
    }
    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {Number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {String} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */


    function buildLookupTable(timestamps, min, max, distribution) {
      if (distribution === 'linear' || !timestamps.length) {
        return [{
          time: min,
          pos: 0
        }, {
          time: max,
          pos: 1
        }];
      }

      var table = [];
      var items = [min];
      var i, ilen, prev, curr, next;

      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
        curr = timestamps[i];

        if (curr > min && curr < max) {
          items.push(curr);
        }
      }

      items.push(max);

      for (i = 0, ilen = items.length; i < ilen; ++i) {
        next = items[i + 1];
        prev = items[i - 1];
        curr = items[i]; // only add points that breaks the scale linearity

        if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
          table.push({
            time: curr,
            pos: i / (ilen - 1)
          });
        }
      }

      return table;
    } // @see adapted from http://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/


    function lookup(table, key, value) {
      var lo = 0;
      var hi = table.length - 1;
      var mid, i0, i1;

      while (lo >= 0 && lo <= hi) {
        mid = lo + hi >> 1;
        i0 = table[mid - 1] || null;
        i1 = table[mid];

        if (!i0) {
          // given value is outside table (before first item)
          return {
            lo: null,
            hi: i1
          };
        } else if (i1[key] < value) {
          lo = mid + 1;
        } else if (i0[key] > value) {
          hi = mid - 1;
        } else {
          return {
            lo: i0,
            hi: i1
          };
        }
      } // given value is outside table (after last item)


      return {
        lo: i1,
        hi: null
      };
    }
    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */


    function interpolate(table, skey, sval, tkey) {
      var range = lookup(table, skey, sval); // Note: the lookup table ALWAYS contains at least 2 items (min and max)

      var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
      var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
      var span = next[skey] - prev[skey];
      var ratio = span ? (sval - prev[skey]) / span : 0;
      var offset = (next[tkey] - prev[tkey]) * ratio;
      return prev[tkey] + offset;
    }
    /**
     * Convert the given value to a moment object using the given time options.
     * @see http://momentjs.com/docs/#/parsing/
     */


    function momentify(value, options) {
      var parser = options.parser;
      var format = options.parser || options.format;

      if (typeof parser === 'function') {
        return parser(value);
      }

      if (typeof value === 'string' && typeof format === 'string') {
        return moment(value, format);
      }

      if (!(value instanceof moment)) {
        value = moment(value);
      }

      if (value.isValid()) {
        return value;
      } // Labels are in an incompatible moment format and no `parser` has been provided.
      // The user might still use the deprecated `format` option to convert his inputs.


      if (typeof format === 'function') {
        return format(value);
      }

      return value;
    }

    function parse(input, scale) {
      if (helpers.isNullOrUndef(input)) {
        return null;
      }

      var options = scale.options.time;
      var value = momentify(scale.getRightValue(input), options);

      if (!value.isValid()) {
        return null;
      }

      if (options.round) {
        value.startOf(options.round);
      }

      return value.valueOf();
    }
    /**
     * Returns the number of unit to skip to be able to display up to `capacity` number of ticks
     * in `unit` for the given `min` / `max` range and respecting the interval steps constraints.
     */


    function determineStepSize(min, max, unit, capacity) {
      var range = max - min;
      var interval = INTERVALS[unit];
      var milliseconds = interval.size;
      var steps = interval.steps;
      var i, ilen, factor;

      if (!steps) {
        return Math.ceil(range / (capacity * milliseconds));
      }

      for (i = 0, ilen = steps.length; i < ilen; ++i) {
        factor = steps[i];

        if (Math.ceil(range / (milliseconds * factor)) <= capacity) {
          break;
        }
      }

      return factor;
    }
    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */


    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
      var ilen = UNITS.length;
      var i, interval, factor;

      for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
        interval = INTERVALS[UNITS[i]];
        factor = interval.steps ? interval.steps[interval.steps.length - 1] : MAX_INTEGER;

        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
          return UNITS[i];
        }
      }

      return UNITS[ilen - 1];
    }
    /**
     * Figures out what unit to format a set of ticks with
     */


    function determineUnitForFormatting(ticks, minUnit, min, max) {
      var duration = moment.duration(moment(max).diff(moment(min)));
      var ilen = UNITS.length;
      var i, unit;

      for (i = ilen - 1; i >= UNITS.indexOf(minUnit); i--) {
        unit = UNITS[i];

        if (INTERVALS[unit].common && duration.as(unit) >= ticks.length) {
          return unit;
        }
      }

      return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }

    function determineMajorUnit(unit) {
      for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
        if (INTERVALS[UNITS[i]].common) {
          return UNITS[i];
        }
      }
    }
    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit, aligned on the `major` unit and using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */


    function generate(min, max, capacity, options) {
      var timeOpts = options.time;
      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
      var major = determineMajorUnit(minor);
      var stepSize = helpers.valueOrDefault(timeOpts.stepSize, timeOpts.unitStepSize);
      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
      var majorTicksEnabled = options.ticks.major.enabled;
      var interval = INTERVALS[minor];
      var first = moment(min);
      var last = moment(max);
      var ticks = [];
      var time;

      if (!stepSize) {
        stepSize = determineStepSize(min, max, minor, capacity);
      } // For 'week' unit, handle the first day of week option


      if (weekday) {
        first = first.isoWeekday(weekday);
        last = last.isoWeekday(weekday);
      } // Align first/last ticks on unit


      first = first.startOf(weekday ? 'day' : minor);
      last = last.startOf(weekday ? 'day' : minor); // Make sure that the last tick include max

      if (last < max) {
        last.add(1, minor);
      }

      time = moment(first);

      if (majorTicksEnabled && major && !weekday && !timeOpts.round) {
        // Align the first tick on the previous `minor` unit aligned on the `major` unit:
        // we first aligned time on the previous `major` unit then add the number of full
        // stepSize there is between first and the previous major time.
        time.startOf(major);
        time.add(~~((first - time) / (interval.size * stepSize)) * stepSize, minor);
      }

      for (; time < last; time.add(stepSize, minor)) {
        ticks.push(+time);
      }

      ticks.push(+time);
      return ticks;
    }
    /**
     * Returns the right and left offsets from edges in the form of {left, right}.
     * Offsets are added when the `offset` option is true.
     */


    function computeOffsets(table, ticks, min, max, options) {
      var left = 0;
      var right = 0;
      var upper, lower;

      if (options.offset && ticks.length) {
        if (!options.time.min) {
          upper = ticks.length > 1 ? ticks[1] : max;
          lower = ticks[0];
          left = (interpolate(table, 'time', upper, 'pos') - interpolate(table, 'time', lower, 'pos')) / 2;
        }

        if (!options.time.max) {
          upper = ticks[ticks.length - 1];
          lower = ticks.length > 1 ? ticks[ticks.length - 2] : min;
          right = (interpolate(table, 'time', upper, 'pos') - interpolate(table, 'time', lower, 'pos')) / 2;
        }
      }

      return {
        left: left,
        right: right
      };
    }

    function ticksFromTimestamps(values, majorUnit) {
      var ticks = [];
      var i, ilen, value, major;

      for (i = 0, ilen = values.length; i < ilen; ++i) {
        value = values[i];
        major = majorUnit ? value === +moment(value).startOf(majorUnit) : false;
        ticks.push({
          value: value,
          major: major
        });
      }

      return ticks;
    }

    function determineLabelFormat(data, timeOpts) {
      var i, momentDate, hasTime;
      var ilen = data.length; // find the label with the most parts (milliseconds, minutes, etc.)
      // format all labels with the same level of detail as the most specific label

      for (i = 0; i < ilen; i++) {
        momentDate = momentify(data[i], timeOpts);

        if (momentDate.millisecond() !== 0) {
          return 'MMM D, YYYY h:mm:ss.SSS a';
        }

        if (momentDate.second() !== 0 || momentDate.minute() !== 0 || momentDate.hour() !== 0) {
          hasTime = true;
        }
      }

      if (hasTime) {
        return 'MMM D, YYYY h:mm:ss a';
      }

      return 'MMM D, YYYY';
    }

    module.exports = function () {
      var defaultConfig = {
        position: 'bottom',

        /**
         * Data distribution along the scale:
         * - 'linear': data are spread according to their time (distances can vary),
         * - 'series': data are spread at the same distance from each other.
         * @see https://github.com/chartjs/Chart.js/pull/4507
         * @since 2.7.0
         */
        distribution: 'linear',

        /**
         * Scale boundary strategy (bypassed by min/max time options)
         * - `data`: make sure data are fully visible, ticks outside are removed
         * - `ticks`: make sure ticks are fully visible, data outside are truncated
         * @see https://github.com/chartjs/Chart.js/pull/4556
         * @since 2.7.0
         */
        bounds: 'data',
        time: {
          parser: false,
          // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
          format: false,
          // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
          unit: false,
          // false == automatic or override with week, month, year, etc.
          round: false,
          // none, or override with week, month, year, etc.
          displayFormat: false,
          // DEPRECATED
          isoWeekday: false,
          // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
          minUnit: 'millisecond',
          // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
          displayFormats: {
            millisecond: 'h:mm:ss.SSS a',
            // 11:20:01.123 AM,
            second: 'h:mm:ss a',
            // 11:20:01 AM
            minute: 'h:mm a',
            // 11:20 AM
            hour: 'hA',
            // 5PM
            day: 'MMM D',
            // Sep 4
            week: 'll',
            // Week 46, or maybe "[W]WW - YYYY" ?
            month: 'MMM YYYY',
            // Sept 2015
            quarter: '[Q]Q - YYYY',
            // Q3
            year: 'YYYY' // 2015

          }
        },
        ticks: {
          autoSkip: false,

          /**
           * Ticks generation input values:
           * - 'auto': generates "optimal" ticks based on scale size and time options.
           * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
           * - 'labels': generates ticks from user given `data.labels` values ONLY.
           * @see https://github.com/chartjs/Chart.js/pull/4507
           * @since 2.7.0
           */
          source: 'auto',
          major: {
            enabled: false
          }
        }
      };
      var TimeScale = Scale.extend({
        initialize: function initialize() {
          if (!moment) {
            throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
          }

          this.mergeTicksOptions();
          Scale.prototype.initialize.call(this);
        },
        update: function update() {
          var me = this;
          var options = me.options; // DEPRECATIONS: output a message only one time per update

          if (options.time && options.time.format) {
            console.warn('options.time.format is deprecated and replaced by options.time.parser.');
          }

          return Scale.prototype.update.apply(me, arguments);
        },

        /**
         * Allows data to be referenced via 't' attribute
         */
        getRightValue: function getRightValue(rawValue) {
          if (rawValue && rawValue.t !== undefined) {
            rawValue = rawValue.t;
          }

          return Scale.prototype.getRightValue.call(this, rawValue);
        },
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var chart = me.chart;
          var timeOpts = me.options.time;
          var unit = timeOpts.unit || 'day';
          var min = MAX_INTEGER;
          var max = MIN_INTEGER;
          var timestamps = [];
          var datasets = [];
          var labels = [];
          var i, j, ilen, jlen, data, timestamp; // Convert labels to timestamps

          for (i = 0, ilen = chart.data.labels.length; i < ilen; ++i) {
            labels.push(parse(chart.data.labels[i], me));
          } // Convert data to timestamps


          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              data = chart.data.datasets[i].data; // Let's consider that all data have the same format.

              if (helpers.isObject(data[0])) {
                datasets[i] = [];

                for (j = 0, jlen = data.length; j < jlen; ++j) {
                  timestamp = parse(data[j], me);
                  timestamps.push(timestamp);
                  datasets[i][j] = timestamp;
                }
              } else {
                timestamps.push.apply(timestamps, labels);
                datasets[i] = labels.slice(0);
              }
            } else {
              datasets[i] = [];
            }
          }

          if (labels.length) {
            // Sort labels **after** data have been converted
            labels = arrayUnique(labels).sort(sorter);
            min = Math.min(min, labels[0]);
            max = Math.max(max, labels[labels.length - 1]);
          }

          if (timestamps.length) {
            timestamps = arrayUnique(timestamps).sort(sorter);
            min = Math.min(min, timestamps[0]);
            max = Math.max(max, timestamps[timestamps.length - 1]);
          }

          min = parse(timeOpts.min, me) || min;
          max = parse(timeOpts.max, me) || max; // In case there is no valid min/max, set limits based on unit time option

          min = min === MAX_INTEGER ? +moment().startOf(unit) : min;
          max = max === MIN_INTEGER ? +moment().endOf(unit) + 1 : max; // Make sure that max is strictly higher than min (required by the lookup table)

          me.min = Math.min(min, max);
          me.max = Math.max(min + 1, max); // PRIVATE

          me._horizontal = me.isHorizontal();
          me._table = [];
          me._timestamps = {
            data: timestamps,
            datasets: datasets,
            labels: labels
          };
        },
        buildTicks: function buildTicks() {
          var me = this;
          var min = me.min;
          var max = me.max;
          var options = me.options;
          var timeOpts = options.time;
          var timestamps = [];
          var ticks = [];
          var i, ilen, timestamp;

          switch (options.ticks.source) {
            case 'data':
              timestamps = me._timestamps.data;
              break;

            case 'labels':
              timestamps = me._timestamps.labels;
              break;

            case 'auto':
            default:
              timestamps = generate(min, max, me.getLabelCapacity(min), options);
          }

          if (options.bounds === 'ticks' && timestamps.length) {
            min = timestamps[0];
            max = timestamps[timestamps.length - 1];
          } // Enforce limits with user min/max options


          min = parse(timeOpts.min, me) || min;
          max = parse(timeOpts.max, me) || max; // Remove ticks outside the min/max range

          for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
            timestamp = timestamps[i];

            if (timestamp >= min && timestamp <= max) {
              ticks.push(timestamp);
            }
          }

          me.min = min;
          me.max = max; // PRIVATE

          me._unit = timeOpts.unit || determineUnitForFormatting(ticks, timeOpts.minUnit, me.min, me.max);
          me._majorUnit = determineMajorUnit(me._unit);
          me._table = buildLookupTable(me._timestamps.data, min, max, options.distribution);
          me._offsets = computeOffsets(me._table, ticks, min, max, options);
          me._labelFormat = determineLabelFormat(me._timestamps.data, timeOpts);
          return ticksFromTimestamps(ticks, me._majorUnit);
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          var me = this;
          var data = me.chart.data;
          var timeOpts = me.options.time;
          var label = data.labels && index < data.labels.length ? data.labels[index] : '';
          var value = data.datasets[datasetIndex].data[index];

          if (helpers.isObject(value)) {
            label = me.getRightValue(value);
          }

          if (timeOpts.tooltipFormat) {
            return momentify(label, timeOpts).format(timeOpts.tooltipFormat);
          }

          if (typeof label === 'string') {
            return label;
          }

          return momentify(label, timeOpts).format(me._labelFormat);
        },

        /**
         * Function to format an individual tick mark
         * @private
         */
        tickFormatFunction: function tickFormatFunction(tick, index, ticks, formatOverride) {
          var me = this;
          var options = me.options;
          var time = tick.valueOf();
          var formats = options.time.displayFormats;
          var minorFormat = formats[me._unit];
          var majorUnit = me._majorUnit;
          var majorFormat = formats[majorUnit];
          var majorTime = tick.clone().startOf(majorUnit).valueOf();
          var majorTickOpts = options.ticks.major;
          var major = majorTickOpts.enabled && majorUnit && majorFormat && time === majorTime;
          var label = tick.format(formatOverride ? formatOverride : major ? majorFormat : minorFormat);
          var tickOpts = major ? majorTickOpts : options.ticks.minor;
          var formatter = helpers.valueOrDefault(tickOpts.callback, tickOpts.userCallback);
          return formatter ? formatter(label, index, ticks) : label;
        },
        convertTicksToLabels: function convertTicksToLabels(ticks) {
          var labels = [];
          var i, ilen;

          for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            labels.push(this.tickFormatFunction(moment(ticks[i].value), i, ticks));
          }

          return labels;
        },

        /**
         * @private
         */
        getPixelForOffset: function getPixelForOffset(time) {
          var me = this;
          var size = me._horizontal ? me.width : me.height;
          var start = me._horizontal ? me.left : me.top;
          var pos = interpolate(me._table, 'time', time, 'pos');
          return start + size * (me._offsets.left + pos) / (me._offsets.left + 1 + me._offsets.right);
        },
        getPixelForValue: function getPixelForValue(value, index, datasetIndex) {
          var me = this;
          var time = null;

          if (index !== undefined && datasetIndex !== undefined) {
            time = me._timestamps.datasets[datasetIndex][index];
          }

          if (time === null) {
            time = parse(value, me);
          }

          if (time !== null) {
            return me.getPixelForOffset(time);
          }
        },
        getPixelForTick: function getPixelForTick(index) {
          var ticks = this.getTicks();
          return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var size = me._horizontal ? me.width : me.height;
          var start = me._horizontal ? me.left : me.top;
          var pos = (size ? (pixel - start) / size : 0) * (me._offsets.left + 1 + me._offsets.left) - me._offsets.right;
          var time = interpolate(me._table, 'pos', pos, 'time');
          return moment(time);
        },

        /**
         * Crude approximation of what the label width might be
         * @private
         */
        getLabelWidth: function getLabelWidth(label) {
          var me = this;
          var ticksOpts = me.options.ticks;
          var tickLabelWidth = me.ctx.measureText(label).width;
          var angle = helpers.toRadians(ticksOpts.maxRotation);
          var cosRotation = Math.cos(angle);
          var sinRotation = Math.sin(angle);
          var tickFontSize = helpers.valueOrDefault(ticksOpts.fontSize, defaults.global.defaultFontSize);
          return tickLabelWidth * cosRotation + tickFontSize * sinRotation;
        },

        /**
         * @private
         */
        getLabelCapacity: function getLabelCapacity(exampleTime) {
          var me = this;
          var formatOverride = me.options.time.displayFormats.millisecond; // Pick the longest format for guestimation

          var exampleLabel = me.tickFormatFunction(moment(exampleTime), 0, [], formatOverride);
          var tickLabelWidth = me.getLabelWidth(exampleLabel);
          var innerWidth = me.isHorizontal() ? me.width : me.height;
          var capacity = Math.floor(innerWidth / tickLabelWidth);
          return capacity > 0 ? capacity : 1;
        }
      });
      scaleService.registerScaleType('time', TimeScale, defaultConfig);
    };
  }, {
    "../core/core.defaults": 89,
    "../core/core.scale": 96,
    "../core/core.scaleService": 97,
    "../helpers/index": 109,
    "moment": 464
  }],
  123: [function (require, module, exports) {
    /* MIT license */
    var colorNames = require('color-name');

    module.exports = {
      getRgba: getRgba,
      getHsla: getHsla,
      getRgb: getRgb,
      getHsl: getHsl,
      getHwb: getHwb,
      getAlpha: getAlpha,
      hexString: hexString,
      rgbString: rgbString,
      rgbaString: rgbaString,
      percentString: percentString,
      percentaString: percentaString,
      hslString: hslString,
      hslaString: hslaString,
      hwbString: hwbString,
      keyword: keyword
    };

    function getRgba(string) {
      if (!string) {
        return;
      }

      var abbr = /^#([a-fA-F0-9]{3,4})$/i,
          hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
          rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
          per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
          keyword = /(\w+)/;
      var rgb = [0, 0, 0],
          a = 1,
          match = string.match(abbr),
          hexAlpha = "";

      if (match) {
        match = match[1];
        hexAlpha = match[3];

        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }

        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];

        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }

        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i + 1]);
        }

        a = parseFloat(match[4]);
      } else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }

        a = parseFloat(match[4]);
      } else if (match = string.match(keyword)) {
        if (match[1] == "transparent") {
          return [0, 0, 0, 0];
        }

        rgb = colorNames[match[1]];

        if (!rgb) {
          return;
        }
      }

      for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
      }

      if (!a && a != 0) {
        a = 1;
      } else {
        a = scale(a, 0, 1);
      }

      rgb[3] = a;
      return rgb;
    }

    function getHsla(string) {
      if (!string) {
        return;
      }

      var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hsl);

      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            s = scale(parseFloat(match[2]), 0, 100),
            l = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
    }

    function getHwb(string) {
      if (!string) {
        return;
      }

      var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hwb);

      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            w = scale(parseFloat(match[2]), 0, 100),
            b = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
    }

    function getRgb(string) {
      var rgba = getRgba(string);
      return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
      var vals = getRgba(string);

      if (vals) {
        return vals[3];
      } else if (vals = getHsla(string)) {
        return vals[3];
      } else if (vals = getHwb(string)) {
        return vals[3];
      }
    } // generators


    function hexString(rgba, a) {
      var a = a !== undefined && rgba.length === 3 ? a : rgba[3];
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : "");
    }

    function rgbString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return rgbaString(rgba, alpha);
      }

      return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
      if (alpha === undefined) {
        alpha = rgba[3] !== undefined ? rgba[3] : 1;
      }

      return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return percentaString(rgba, alpha);
      }

      var r = Math.round(rgba[0] / 255 * 100),
          g = Math.round(rgba[1] / 255 * 100),
          b = Math.round(rgba[2] / 255 * 100);
      return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
      var r = Math.round(rgba[0] / 255 * 100),
          g = Math.round(rgba[1] / 255 * 100),
          b = Math.round(rgba[2] / 255 * 100);
      return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
      if (alpha < 1 || hsla[3] && hsla[3] < 1) {
        return hslaString(hsla, alpha);
      }

      return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
      if (alpha === undefined) {
        alpha = hsla[3] !== undefined ? hsla[3] : 1;
      }

      return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
    } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)


    function hwbString(hwb, alpha) {
      if (alpha === undefined) {
        alpha = hwb[3] !== undefined ? hwb[3] : 1;
      }

      return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    } // helpers


    function scale(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    } //create a list of reverse color names


    var reverseNames = {};

    for (var name in colorNames) {
      reverseNames[colorNames[name]] = name;
    }
  }, {
    "color-name": 129
  }],
  124: [function (require, module, exports) {
    /* MIT license */
    var convert = require('color-convert');

    var string = require('chartjs-color-string');

    var Color = function Color(obj) {
      if (obj instanceof Color) {
        return obj;
      }

      if (!(this instanceof Color)) {
        return new Color(obj);
      }

      this.valid = false;
      this.values = {
        rgb: [0, 0, 0],
        hsl: [0, 0, 0],
        hsv: [0, 0, 0],
        hwb: [0, 0, 0],
        cmyk: [0, 0, 0, 0],
        alpha: 1
      }; // parse Color() argument

      var vals;

      if (typeof obj === 'string') {
        vals = string.getRgba(obj);

        if (vals) {
          this.setValues('rgb', vals);
        } else if (vals = string.getHsla(obj)) {
          this.setValues('hsl', vals);
        } else if (vals = string.getHwb(obj)) {
          this.setValues('hwb', vals);
        }
      } else if (_typeof2(obj) === 'object') {
        vals = obj;

        if (vals.r !== undefined || vals.red !== undefined) {
          this.setValues('rgb', vals);
        } else if (vals.l !== undefined || vals.lightness !== undefined) {
          this.setValues('hsl', vals);
        } else if (vals.v !== undefined || vals.value !== undefined) {
          this.setValues('hsv', vals);
        } else if (vals.w !== undefined || vals.whiteness !== undefined) {
          this.setValues('hwb', vals);
        } else if (vals.c !== undefined || vals.cyan !== undefined) {
          this.setValues('cmyk', vals);
        }
      }
    };

    Color.prototype = {
      isValid: function isValid() {
        return this.valid;
      },
      rgb: function rgb() {
        return this.setSpace('rgb', arguments);
      },
      hsl: function hsl() {
        return this.setSpace('hsl', arguments);
      },
      hsv: function hsv() {
        return this.setSpace('hsv', arguments);
      },
      hwb: function hwb() {
        return this.setSpace('hwb', arguments);
      },
      cmyk: function cmyk() {
        return this.setSpace('cmyk', arguments);
      },
      rgbArray: function rgbArray() {
        return this.values.rgb;
      },
      hslArray: function hslArray() {
        return this.values.hsl;
      },
      hsvArray: function hsvArray() {
        return this.values.hsv;
      },
      hwbArray: function hwbArray() {
        var values = this.values;

        if (values.alpha !== 1) {
          return values.hwb.concat([values.alpha]);
        }

        return values.hwb;
      },
      cmykArray: function cmykArray() {
        return this.values.cmyk;
      },
      rgbaArray: function rgbaArray() {
        var values = this.values;
        return values.rgb.concat([values.alpha]);
      },
      hslaArray: function hslaArray() {
        var values = this.values;
        return values.hsl.concat([values.alpha]);
      },
      alpha: function alpha(val) {
        if (val === undefined) {
          return this.values.alpha;
        }

        this.setValues('alpha', val);
        return this;
      },
      red: function red(val) {
        return this.setChannel('rgb', 0, val);
      },
      green: function green(val) {
        return this.setChannel('rgb', 1, val);
      },
      blue: function blue(val) {
        return this.setChannel('rgb', 2, val);
      },
      hue: function hue(val) {
        if (val) {
          val %= 360;
          val = val < 0 ? 360 + val : val;
        }

        return this.setChannel('hsl', 0, val);
      },
      saturation: function saturation(val) {
        return this.setChannel('hsl', 1, val);
      },
      lightness: function lightness(val) {
        return this.setChannel('hsl', 2, val);
      },
      saturationv: function saturationv(val) {
        return this.setChannel('hsv', 1, val);
      },
      whiteness: function whiteness(val) {
        return this.setChannel('hwb', 1, val);
      },
      blackness: function blackness(val) {
        return this.setChannel('hwb', 2, val);
      },
      value: function value(val) {
        return this.setChannel('hsv', 2, val);
      },
      cyan: function cyan(val) {
        return this.setChannel('cmyk', 0, val);
      },
      magenta: function magenta(val) {
        return this.setChannel('cmyk', 1, val);
      },
      yellow: function yellow(val) {
        return this.setChannel('cmyk', 2, val);
      },
      black: function black(val) {
        return this.setChannel('cmyk', 3, val);
      },
      hexString: function hexString() {
        return string.hexString(this.values.rgb);
      },
      rgbString: function rgbString() {
        return string.rgbString(this.values.rgb, this.values.alpha);
      },
      rgbaString: function rgbaString() {
        return string.rgbaString(this.values.rgb, this.values.alpha);
      },
      percentString: function percentString() {
        return string.percentString(this.values.rgb, this.values.alpha);
      },
      hslString: function hslString() {
        return string.hslString(this.values.hsl, this.values.alpha);
      },
      hslaString: function hslaString() {
        return string.hslaString(this.values.hsl, this.values.alpha);
      },
      hwbString: function hwbString() {
        return string.hwbString(this.values.hwb, this.values.alpha);
      },
      keyword: function keyword() {
        return string.keyword(this.values.rgb, this.values.alpha);
      },
      rgbNumber: function rgbNumber() {
        var rgb = this.values.rgb;
        return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
      },
      luminosity: function luminosity() {
        // http://www.w3.org/TR/WCAG20/#relativeluminancedef
        var rgb = this.values.rgb;
        var lum = [];

        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }

        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function contrast(color2) {
        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();

        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }

        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function level(color2) {
        var contrastRatio = this.contrast(color2);

        if (contrastRatio >= 7.1) {
          return 'AAA';
        }

        return contrastRatio >= 4.5 ? 'AA' : '';
      },
      dark: function dark() {
        // YIQ equation from http://24ways.org/2010/calculating-color-contrast
        var rgb = this.values.rgb;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
        return yiq < 128;
      },
      light: function light() {
        return !this.dark();
      },
      negate: function negate() {
        var rgb = [];

        for (var i = 0; i < 3; i++) {
          rgb[i] = 255 - this.values.rgb[i];
        }

        this.setValues('rgb', rgb);
        return this;
      },
      lighten: function lighten(ratio) {
        var hsl = this.values.hsl;
        hsl[2] += hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      darken: function darken(ratio) {
        var hsl = this.values.hsl;
        hsl[2] -= hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      saturate: function saturate(ratio) {
        var hsl = this.values.hsl;
        hsl[1] += hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      desaturate: function desaturate(ratio) {
        var hsl = this.values.hsl;
        hsl[1] -= hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      whiten: function whiten(ratio) {
        var hwb = this.values.hwb;
        hwb[1] += hwb[1] * ratio;
        this.setValues('hwb', hwb);
        return this;
      },
      blacken: function blacken(ratio) {
        var hwb = this.values.hwb;
        hwb[2] += hwb[2] * ratio;
        this.setValues('hwb', hwb);
        return this;
      },
      greyscale: function greyscale() {
        var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale

        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        this.setValues('rgb', [val, val, val]);
        return this;
      },
      clearer: function clearer(ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha - alpha * ratio);
        return this;
      },
      opaquer: function opaquer(ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha + alpha * ratio);
        return this;
      },
      rotate: function rotate(degrees) {
        var hsl = this.values.hsl;
        var hue = (hsl[0] + degrees) % 360;
        hsl[0] = hue < 0 ? 360 + hue : hue;
        this.setValues('hsl', hsl);
        return this;
      },

      /**
       * Ported from sass implementation in C
       * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
       */
      mix: function mix(mixinColor, weight) {
        var color1 = this;
        var color2 = mixinColor;
        var p = weight === undefined ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
      },
      toJSON: function toJSON() {
        return this.rgb();
      },
      clone: function clone() {
        // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
        // making the final build way to big to embed in Chart.js. So let's do it manually,
        // assuming that values to clone are 1 dimension arrays containing only numbers,
        // except 'alpha' which is a number.
        var result = new Color();
        var source = this.values;
        var target = result.values;
        var value, type;

        for (var prop in source) {
          if (source.hasOwnProperty(prop)) {
            value = source[prop];
            type = {}.toString.call(value);

            if (type === '[object Array]') {
              target[prop] = value.slice(0);
            } else if (type === '[object Number]') {
              target[prop] = value;
            } else {
              console.error('unexpected color value:', value);
            }
          }
        }

        return result;
      }
    };
    Color.prototype.spaces = {
      rgb: ['red', 'green', 'blue'],
      hsl: ['hue', 'saturation', 'lightness'],
      hsv: ['hue', 'saturation', 'value'],
      hwb: ['hue', 'whiteness', 'blackness'],
      cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };
    Color.prototype.maxes = {
      rgb: [255, 255, 255],
      hsl: [360, 100, 100],
      hsv: [360, 100, 100],
      hwb: [360, 100, 100],
      cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
      var values = this.values;
      var vals = {};

      for (var i = 0; i < space.length; i++) {
        vals[space.charAt(i)] = values[space][i];
      }

      if (values.alpha !== 1) {
        vals.a = values.alpha;
      } // {r: 255, g: 255, b: 255, a: 0.4}


      return vals;
    };

    Color.prototype.setValues = function (space, vals) {
      var values = this.values;
      var spaces = this.spaces;
      var maxes = this.maxes;
      var alpha = 1;
      var i;
      this.valid = true;

      if (space === 'alpha') {
        alpha = vals;
      } else if (vals.length) {
        // [10, 10, 10]
        values[space] = vals.slice(0, space.length);
        alpha = vals[space.length];
      } else if (vals[space.charAt(0)] !== undefined) {
        // {r: 10, g: 10, b: 10}
        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[space.charAt(i)];
        }

        alpha = vals.a;
      } else if (vals[spaces[space][0]] !== undefined) {
        // {red: 10, green: 10, blue: 10}
        var chans = spaces[space];

        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[chans[i]];
        }

        alpha = vals.alpha;
      }

      values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));

      if (space === 'alpha') {
        return false;
      }

      var capped; // cap values of the space prior converting all values

      for (i = 0; i < space.length; i++) {
        capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
        values[space][i] = Math.round(capped);
      } // convert to all the other color spaces


      for (var sname in spaces) {
        if (sname !== space) {
          values[sname] = convert[space][sname](values[space]);
        }
      }

      return true;
    };

    Color.prototype.setSpace = function (space, args) {
      var vals = args[0];

      if (vals === undefined) {
        // color.rgb()
        return this.getValues(space);
      } // color.rgb(10, 10, 10)


      if (typeof vals === 'number') {
        vals = Array.prototype.slice.call(args);
      }

      this.setValues(space, vals);
      return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
      var svalues = this.values[space];

      if (val === undefined) {
        // color.red()
        return svalues[index];
      } else if (val === svalues[index]) {
        // color.red(color.red())
        return this;
      } // color.red(100)


      svalues[index] = val;
      this.setValues(space, svalues);
      return this;
    };

    if (typeof window !== 'undefined') {
      window.Color = Color;
    }

    module.exports = Color;
  }, {
    "chartjs-color-string": 123,
    "color-convert": 126
  }],
  125: [function (require, module, exports) {
    /* MIT license */
    module.exports = {
      rgb2hsl: rgb2hsl,
      rgb2hsv: rgb2hsv,
      rgb2hwb: rgb2hwb,
      rgb2cmyk: rgb2cmyk,
      rgb2keyword: rgb2keyword,
      rgb2xyz: rgb2xyz,
      rgb2lab: rgb2lab,
      rgb2lch: rgb2lch,
      hsl2rgb: hsl2rgb,
      hsl2hsv: hsl2hsv,
      hsl2hwb: hsl2hwb,
      hsl2cmyk: hsl2cmyk,
      hsl2keyword: hsl2keyword,
      hsv2rgb: hsv2rgb,
      hsv2hsl: hsv2hsl,
      hsv2hwb: hsv2hwb,
      hsv2cmyk: hsv2cmyk,
      hsv2keyword: hsv2keyword,
      hwb2rgb: hwb2rgb,
      hwb2hsl: hwb2hsl,
      hwb2hsv: hwb2hsv,
      hwb2cmyk: hwb2cmyk,
      hwb2keyword: hwb2keyword,
      cmyk2rgb: cmyk2rgb,
      cmyk2hsl: cmyk2hsl,
      cmyk2hsv: cmyk2hsv,
      cmyk2hwb: cmyk2hwb,
      cmyk2keyword: cmyk2keyword,
      keyword2rgb: keyword2rgb,
      keyword2hsl: keyword2hsl,
      keyword2hsv: keyword2hsv,
      keyword2hwb: keyword2hwb,
      keyword2cmyk: keyword2cmyk,
      keyword2lab: keyword2lab,
      keyword2xyz: keyword2xyz,
      xyz2rgb: xyz2rgb,
      xyz2lab: xyz2lab,
      xyz2lch: xyz2lch,
      lab2xyz: lab2xyz,
      lab2rgb: lab2rgb,
      lab2lch: lab2lch,
      lch2lab: lch2lab,
      lch2xyz: lch2xyz,
      lch2rgb: lch2rgb
    };

    function rgb2hsl(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h,
          s,
          l;
      if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;
      h = Math.min(h * 60, 360);
      if (h < 0) h += 360;
      l = (min + max) / 2;
      if (max == min) s = 0;else if (l <= 0.5) s = delta / (max + min);else s = delta / (2 - max - min);
      return [h, s * 100, l * 100];
    }

    function rgb2hsv(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          delta = max - min,
          h,
          s,
          v;
      if (max == 0) s = 0;else s = delta / max * 1000 / 10;
      if (max == min) h = 0;else if (r == max) h = (g - b) / delta;else if (g == max) h = 2 + (b - r) / delta;else if (b == max) h = 4 + (r - g) / delta;
      h = Math.min(h * 60, 360);
      if (h < 0) h += 360;
      v = max / 255 * 1000 / 10;
      return [h, s, v];
    }

    function rgb2hwb(rgb) {
      var r = rgb[0],
          g = rgb[1],
          b = rgb[2],
          h = rgb2hsl(rgb)[0],
          w = 1 / 255 * Math.min(r, Math.min(g, b)),
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    }

    function rgb2cmyk(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255,
          c,
          m,
          y,
          k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    }

    function rgb2keyword(rgb) {
      return reverseKeywords[JSON.stringify(rgb)];
    }

    function rgb2xyz(rgb) {
      var r = rgb[0] / 255,
          g = rgb[1] / 255,
          b = rgb[2] / 255; // assume sRGB

      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    }

    function rgb2lab(rgb) {
      var xyz = rgb2xyz(rgb),
          x = xyz[0],
          y = xyz[1],
          z = xyz[2],
          l,
          a,
          b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    }

    function rgb2lch(args) {
      return lab2lch(rgb2lab(args));
    }

    function hsl2rgb(hsl) {
      var h = hsl[0] / 360,
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          t1,
          t2,
          t3,
          rgb,
          val;

      if (s == 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5) t2 = l * (1 + s);else t2 = l + s - l * s;
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];

      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        t3 < 0 && t3++;
        t3 > 1 && t3--;
        if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;else if (2 * t3 < 1) val = t2;else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;else val = t1;
        rgb[i] = val * 255;
      }

      return rgb;
    }

    function hsl2hsv(hsl) {
      var h = hsl[0],
          s = hsl[1] / 100,
          l = hsl[2] / 100,
          sv,
          v;

      if (l === 0) {
        // no need to do calc on black
        // also avoids divide by 0 error
        return [0, 0, 0];
      }

      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      v = (l + s) / 2;
      sv = 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    }

    function hsl2hwb(args) {
      return rgb2hwb(hsl2rgb(args));
    }

    function hsl2cmyk(args) {
      return rgb2cmyk(hsl2rgb(args));
    }

    function hsl2keyword(args) {
      return rgb2keyword(hsl2rgb(args));
    }

    function hsv2rgb(hsv) {
      var h = hsv[0] / 60,
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          hi = Math.floor(h) % 6;
      var f = h - Math.floor(h),
          p = 255 * v * (1 - s),
          q = 255 * v * (1 - s * f),
          t = 255 * v * (1 - s * (1 - f)),
          v = 255 * v;

      switch (hi) {
        case 0:
          return [v, t, p];

        case 1:
          return [q, v, p];

        case 2:
          return [p, v, t];

        case 3:
          return [p, q, v];

        case 4:
          return [t, p, v];

        case 5:
          return [v, p, q];
      }
    }

    function hsv2hsl(hsv) {
      var h = hsv[0],
          s = hsv[1] / 100,
          v = hsv[2] / 100,
          sl,
          l;
      l = (2 - s) * v;
      sl = s * v;
      sl /= l <= 1 ? l : 2 - l;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }

    function hsv2hwb(args) {
      return rgb2hwb(hsv2rgb(args));
    }

    function hsv2cmyk(args) {
      return rgb2cmyk(hsv2rgb(args));
    }

    function hsv2keyword(args) {
      return rgb2keyword(hsv2rgb(args));
    } // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


    function hwb2rgb(hwb) {
      var h = hwb[0] / 360,
          wh = hwb[1] / 100,
          bl = hwb[2] / 100,
          ratio = wh + bl,
          i,
          v,
          f,
          n; // wh + bl cant be > 1

      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;

      if ((i & 0x01) != 0) {
        f = 1 - f;
      }

      n = wh + f * (v - wh); // linear interpolation

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;

        case 1:
          r = n;
          g = v;
          b = wh;
          break;

        case 2:
          r = wh;
          g = v;
          b = n;
          break;

        case 3:
          r = wh;
          g = n;
          b = v;
          break;

        case 4:
          r = n;
          g = wh;
          b = v;
          break;

        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }

      return [r * 255, g * 255, b * 255];
    }

    function hwb2hsl(args) {
      return rgb2hsl(hwb2rgb(args));
    }

    function hwb2hsv(args) {
      return rgb2hsv(hwb2rgb(args));
    }

    function hwb2cmyk(args) {
      return rgb2cmyk(hwb2rgb(args));
    }

    function hwb2keyword(args) {
      return rgb2keyword(hwb2rgb(args));
    }

    function cmyk2rgb(cmyk) {
      var c = cmyk[0] / 100,
          m = cmyk[1] / 100,
          y = cmyk[2] / 100,
          k = cmyk[3] / 100,
          r,
          g,
          b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    }

    function cmyk2hsl(args) {
      return rgb2hsl(cmyk2rgb(args));
    }

    function cmyk2hsv(args) {
      return rgb2hsv(cmyk2rgb(args));
    }

    function cmyk2hwb(args) {
      return rgb2hwb(cmyk2rgb(args));
    }

    function cmyk2keyword(args) {
      return rgb2keyword(cmyk2rgb(args));
    }

    function xyz2rgb(xyz) {
      var x = xyz[0] / 100,
          y = xyz[1] / 100,
          z = xyz[2] / 100,
          r,
          g,
          b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;
      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;
      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    }

    function xyz2lab(xyz) {
      var x = xyz[0],
          y = xyz[1],
          z = xyz[2],
          l,
          a,
          b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    }

    function xyz2lch(args) {
      return lab2lch(xyz2lab(args));
    }

    function lab2xyz(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          x,
          y,
          z,
          y2;

      if (l <= 8) {
        y = l * 100 / 903.3;
        y2 = 7.787 * (y / 100) + 16 / 116;
      } else {
        y = 100 * Math.pow((l + 16) / 116, 3);
        y2 = Math.pow(y / 100, 1 / 3);
      }

      x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);
      z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);
      return [x, y, z];
    }

    function lab2lch(lab) {
      var l = lab[0],
          a = lab[1],
          b = lab[2],
          hr,
          h,
          c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;

      if (h < 0) {
        h += 360;
      }

      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    }

    function lab2rgb(args) {
      return xyz2rgb(lab2xyz(args));
    }

    function lch2lab(lch) {
      var l = lch[0],
          c = lch[1],
          h = lch[2],
          a,
          b,
          hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    }

    function lch2xyz(args) {
      return lab2xyz(lch2lab(args));
    }

    function lch2rgb(args) {
      return lab2rgb(lch2lab(args));
    }

    function keyword2rgb(keyword) {
      return cssKeywords[keyword];
    }

    function keyword2hsl(args) {
      return rgb2hsl(keyword2rgb(args));
    }

    function keyword2hsv(args) {
      return rgb2hsv(keyword2rgb(args));
    }

    function keyword2hwb(args) {
      return rgb2hwb(keyword2rgb(args));
    }

    function keyword2cmyk(args) {
      return rgb2cmyk(keyword2rgb(args));
    }

    function keyword2lab(args) {
      return rgb2lab(keyword2rgb(args));
    }

    function keyword2xyz(args) {
      return rgb2xyz(keyword2rgb(args));
    }

    var cssKeywords = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      grey: [128, 128, 128],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      rebeccapurple: [102, 51, 153],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };
    var reverseKeywords = {};

    for (var key in cssKeywords) {
      reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
    }
  }, {}],
  126: [function (require, module, exports) {
    var conversions = require("./conversions");

    var convert = function convert() {
      return new Converter();
    };

    for (var func in conversions) {
      // export Raw versions
      convert[func + "Raw"] = function (func) {
        // accept array or plain args
        return function (arg) {
          if (typeof arg == "number") arg = Array.prototype.slice.call(arguments);
          return conversions[func](arg);
        };
      }(func);

      var pair = /(\w+)2(\w+)/.exec(func),
          from = pair[1],
          to = pair[2]; // export rgb2hsl and ["rgb"]["hsl"]

      convert[from] = convert[from] || {};

      convert[from][to] = convert[func] = function (func) {
        return function (arg) {
          if (typeof arg == "number") arg = Array.prototype.slice.call(arguments);
          var val = conversions[func](arg);
          if (typeof val == "string" || val === undefined) return val; // keyword

          for (var i = 0; i < val.length; i++) {
            val[i] = Math.round(val[i]);
          }

          return val;
        };
      }(func);
    }
    /* Converter does lazy conversion and caching */


    var Converter = function Converter() {
      this.convs = {};
    };
    /* Either get the values for a space or
      set the values for a space, depending on args */


    Converter.prototype.routeSpace = function (space, args) {
      var values = args[0];

      if (values === undefined) {
        // color.rgb()
        return this.getValues(space);
      } // color.rgb(10, 10, 10)


      if (typeof values == "number") {
        values = Array.prototype.slice.call(args);
      }

      return this.setValues(space, values);
    };
    /* Set the values for a space, invalidating cache */


    Converter.prototype.setValues = function (space, values) {
      this.space = space;
      this.convs = {};
      this.convs[space] = values;
      return this;
    };
    /* Get the values for a space. If there's already
      a conversion for the space, fetch it, otherwise
      compute it */


    Converter.prototype.getValues = function (space) {
      var vals = this.convs[space];

      if (!vals) {
        var fspace = this.space,
            from = this.convs[fspace];
        vals = convert[fspace][space](from);
        this.convs[space] = vals;
      }

      return vals;
    };

    ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (space) {
      Converter.prototype[space] = function (vals) {
        return this.routeSpace(space, arguments);
      };
    });
    module.exports = convert;
  }, {
    "./conversions": 125
  }],
  127: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer;

    var Querystring = require('querystring');

    var Url = require('url');

    var defaultRequest = require('./request');

    var btoa;

    if (typeof Buffer === 'function') {
      btoa = btoaBuffer;
    } else {
      btoa = window.btoa;
    }
    /**
     * Export `ClientOAuth2` class.
     */


    module.exports = ClientOAuth2;
    /**
     * Default headers for executing OAuth 2.0 flows.
     */

    var DEFAULT_HEADERS = {
      'Accept': 'application/json, application/x-www-form-urlencoded',
      'Content-Type': 'application/x-www-form-urlencoded'
      /**
       * Format error response types to regular strings for displaying to clients.
       *
       * Reference: http://tools.ietf.org/html/rfc6749#section-4.1.2.1
       */

    };
    var ERROR_RESPONSES = {
      'invalid_request': ['The request is missing a required parameter, includes an', 'invalid parameter value, includes a parameter more than', 'once, or is otherwise malformed.'].join(' '),
      'invalid_client': ['Client authentication failed (e.g., unknown client, no', 'client authentication included, or unsupported', 'authentication method).'].join(' '),
      'invalid_grant': ['The provided authorization grant (e.g., authorization', 'code, resource owner credentials) or refresh token is', 'invalid, expired, revoked, does not match the redirection', 'URI used in the authorization request, or was issued to', 'another client.'].join(' '),
      'unauthorized_client': ['The client is not authorized to request an authorization', 'code using this method.'].join(' '),
      'unsupported_grant_type': ['The authorization grant type is not supported by the', 'authorization server.'].join(' '),
      'access_denied': ['The resource owner or authorization server denied the request.'].join(' '),
      'unsupported_response_type': ['The authorization server does not support obtaining', 'an authorization code using this method.'].join(' '),
      'invalid_scope': ['The requested scope is invalid, unknown, or malformed.'].join(' '),
      'server_error': ['The authorization server encountered an unexpected', 'condition that prevented it from fulfilling the request.', '(This error code is needed because a 500 Internal Server', 'Error HTTP status code cannot be returned to the client', 'via an HTTP redirect.)'].join(' '),
      'temporarily_unavailable': ['The authorization server is currently unable to handle', 'the request due to a temporary overloading or maintenance', 'of the server.'].join(' ')
      /**
       * Support base64 in node like how it works in the browser.
       *
       * @param  {string} string
       * @return {string}
       */

    };

    function btoaBuffer(string) {
      return Buffer.from(string).toString('base64');
    }
    /**
     * Check if properties exist on an object and throw when they aren't.
     *
     * @throws {TypeError} If an expected property is missing.
     *
     * @param {Object}    obj
     * @param {...string} props
     */


    function expects(obj) {
      for (var i = 1; i < arguments.length; i++) {
        var prop = arguments[i];

        if (obj[prop] == null) {
          throw new TypeError('Expected "' + prop + '" to exist');
        }
      }
    }
    /**
     * Pull an authentication error from the response data.
     *
     * @param  {Object} data
     * @return {string}
     */


    function getAuthError(body) {
      var message = ERROR_RESPONSES[body.error] || body.error_description || body.error;

      if (message) {
        var err = new Error(message);
        err.body = body;
        err.code = 'EAUTH';
        return err;
      }
    }
    /**
     * Attempt to parse response body as JSON, fall back to parsing as a query string.
     *
     * @param {string} body
     * @return {Object}
     */


    function parseResponseBody(body) {
      try {
        return JSON.parse(body);
      } catch (e) {
        return Querystring.parse(body);
      }
    }
    /**
     * Sanitize the scopes option to be a string.
     *
     * @param  {Array}  scopes
     * @return {string}
     */


    function sanitizeScope(scopes) {
      return Array.isArray(scopes) ? scopes.join(' ') : toString(scopes);
    }
    /**
     * Create a request uri based on an options object and token type.
     *
     * @param  {Object} options
     * @param  {string} tokenType
     * @return {string}
     */


    function createUri(options, tokenType) {
      // Check the required parameters are set.
      expects(options, 'clientId', 'authorizationUri');
      return options.authorizationUri + '?' + Querystring.stringify(Object.assign({
        client_id: options.clientId,
        redirect_uri: options.redirectUri,
        scope: sanitizeScope(options.scopes),
        response_type: tokenType,
        state: options.state
      }, options.query));
    }
    /**
     * Create basic auth header.
     *
     * @param  {string} username
     * @param  {string} password
     * @return {string}
     */


    function auth(username, password) {
      return 'Basic ' + btoa(toString(username) + ':' + toString(password));
    }
    /**
     * Ensure a value is a string.
     *
     * @param  {string} str
     * @return {string}
     */


    function toString(str) {
      return str == null ? '' : String(str);
    }
    /**
     * Merge request options from an options object.
     */


    function requestOptions(requestOptions, options) {
      return {
        url: requestOptions.url,
        method: requestOptions.method,
        body: Object.assign({}, requestOptions.body, options.body),
        query: Object.assign({}, requestOptions.query, options.query),
        headers: Object.assign({}, requestOptions.headers, options.headers)
      };
    }
    /**
     * Construct an object that can handle the multiple OAuth 2.0 flows.
     *
     * @param {Object} options
     */


    function ClientOAuth2(options, request) {
      this.options = options;
      this.request = request || defaultRequest;
      this.code = new CodeFlow(this);
      this.token = new TokenFlow(this);
      this.owner = new OwnerFlow(this);
      this.credentials = new CredentialsFlow(this);
      this.jwt = new JwtBearerFlow(this);
    }
    /**
     * Alias the token constructor.
     *
     * @type {Function}
     */


    ClientOAuth2.Token = ClientOAuth2Token;
    /**
     * Create a new token from existing data.
     *
     * @param  {string} access
     * @param  {string} [refresh]
     * @param  {string} [type]
     * @param  {Object} [data]
     * @return {Object}
     */

    ClientOAuth2.prototype.createToken = function (access, refresh, type, data) {
      var options = Object.assign({}, data, typeof access === 'string' ? {
        access_token: access
      } : access, typeof refresh === 'string' ? {
        refresh_token: refresh
      } : refresh, typeof type === 'string' ? {
        token_type: type
      } : type);
      return new ClientOAuth2.Token(this, options);
    };
    /**
     * Using the built-in request method, we'll automatically attempt to parse
     * the response.
     *
     * @param  {Object}  options
     * @return {Promise}
     */


    ClientOAuth2.prototype._request = function (options) {
      var url = options.url;
      var body = Querystring.stringify(options.body);
      var query = Querystring.stringify(options.query);

      if (query) {
        url += (url.indexOf('?') === -1 ? '?' : '&') + query;
      }

      return this.request(options.method, url, body, options.headers).then(function (res) {
        var body = parseResponseBody(res.body);
        var authErr = getAuthError(body);

        if (authErr) {
          return Promise.reject(authErr);
        }

        if (res.status < 200 || res.status >= 399) {
          var statusErr = new Error('HTTP status ' + res.status);
          statusErr.status = res.status;
          statusErr.body = res.body;
          statusErr.code = 'ESTATUS';
          return Promise.reject(statusErr);
        }

        return body;
      });
    };
    /**
     * General purpose client token generator.
     *
     * @param {Object} client
     * @param {Object} data
     */


    function ClientOAuth2Token(client, data) {
      this.client = client;
      this.data = data;
      this.tokenType = data.token_type && data.token_type.toLowerCase();
      this.accessToken = data.access_token;
      this.refreshToken = data.refresh_token;
      this.expiresIn(Number(data.expires_in));
    }
    /**
     * Expire the token after some time.
     *
     * @param  {number|Date} duration Seconds from now to expire, or a date to expire on.
     * @return {Date}
     */


    ClientOAuth2Token.prototype.expiresIn = function (duration) {
      if (typeof duration === 'number') {
        this.expires = new Date();
        this.expires.setSeconds(this.expires.getSeconds() + duration);
      } else if (duration instanceof Date) {
        this.expires = new Date(duration.getTime());
      } else {
        throw new TypeError('Unknown duration: ' + duration);
      }

      return this.expires;
    };
    /**
     * Sign a standardised request object with user authentication information.
     *
     * @param  {Object} requestObject
     * @return {Object}
     */


    ClientOAuth2Token.prototype.sign = function (requestObject) {
      if (!this.accessToken) {
        throw new Error('Unable to sign without access token');
      }

      requestObject.headers = requestObject.headers || {};

      if (this.tokenType === 'bearer') {
        requestObject.headers.Authorization = 'Bearer ' + this.accessToken;
      } else {
        var parts = requestObject.url.split('#');
        var token = 'access_token=' + this.accessToken;
        var url = parts[0].replace(/[?&]access_token=[^&#]/, '');
        var fragment = parts[1] ? '#' + parts[1] : ''; // Prepend the correct query string parameter to the url.

        requestObject.url = url + (url.indexOf('?') > -1 ? '&' : '?') + token + fragment; // Attempt to avoid storing the url in proxies, since the access token
        // is exposed in the query parameters.

        requestObject.headers.Pragma = 'no-store';
        requestObject.headers['Cache-Control'] = 'no-store';
      }

      return requestObject;
    };
    /**
     * Refresh a user access token with the supplied token.
     *
     * @param  {Object}  opts
     * @return {Promise}
     */


    ClientOAuth2Token.prototype.refresh = function (opts) {
      var self = this;
      var options = Object.assign({}, this.client.options, opts);

      if (!this.refreshToken) {
        return Promise.reject(new Error('No refresh token'));
      }

      return this.client._request(requestOptions({
        url: options.accessTokenUri,
        method: 'POST',
        headers: Object.assign({}, DEFAULT_HEADERS, {
          Authorization: auth(options.clientId, options.clientSecret)
        }),
        body: {
          refresh_token: this.refreshToken,
          grant_type: 'refresh_token'
        }
      }, options)).then(function (data) {
        return self.client.createToken(Object.assign({}, self.data, data));
      });
    };
    /**
     * Check whether the token has expired.
     *
     * @return {boolean}
     */


    ClientOAuth2Token.prototype.expired = function () {
      return Date.now() > this.expires.getTime();
    };
    /**
     * Support resource owner password credentials OAuth 2.0 grant.
     *
     * Reference: http://tools.ietf.org/html/rfc6749#section-4.3
     *
     * @param {ClientOAuth2} client
     */


    function OwnerFlow(client) {
      this.client = client;
    }
    /**
     * Make a request on behalf of the user credentials to get an access token.
     *
     * @param  {string}  username
     * @param  {string}  password
     * @param  {Object}  [opts]
     * @return {Promise}
     */


    OwnerFlow.prototype.getToken = function (username, password, opts) {
      var self = this;
      var options = Object.assign({}, this.client.options, opts);
      return this.client._request(requestOptions({
        url: options.accessTokenUri,
        method: 'POST',
        headers: Object.assign({}, DEFAULT_HEADERS, {
          Authorization: auth(options.clientId, options.clientSecret)
        }),
        body: {
          scope: sanitizeScope(options.scopes),
          username: username,
          password: password,
          grant_type: 'password'
        }
      }, options)).then(function (data) {
        return self.client.createToken(data);
      });
    };
    /**
     * Support implicit OAuth 2.0 grant.
     *
     * Reference: http://tools.ietf.org/html/rfc6749#section-4.2
     *
     * @param {ClientOAuth2} client
     */


    function TokenFlow(client) {
      this.client = client;
    }
    /**
     * Get the uri to redirect the user to for implicit authentication.
     *
     * @param  {Object} [opts]
     * @return {string}
     */


    TokenFlow.prototype.getUri = function (opts) {
      var options = Object.assign({}, this.client.options, opts);
      return createUri(options, 'token');
    };
    /**
     * Get the user access token from the uri.
     *
     * @param  {string|Object} uri
     * @param  {Object}        [opts]
     * @return {Promise}
     */


    TokenFlow.prototype.getToken = function (uri, opts) {
      var options = Object.assign({}, this.client.options, opts);
      var url = _typeof2(uri) === 'object' ? uri : Url.parse(uri, true);
      var expectedUrl = Url.parse(options.redirectUri);

      if (typeof url.pathname === 'string' && url.pathname !== expectedUrl.pathname) {
        return Promise.reject(new TypeError('Redirected path should match configured path, but got: ' + url.pathname));
      } // If no query string or fragment exists, we won't be able to parse
      // any useful information from the uri.


      if (!url.hash && !url.search) {
        return Promise.reject(new TypeError('Unable to process uri: ' + uri));
      } // Extract data from both the fragment and query string. The fragment is most
      // important, but the query string is also used because some OAuth 2.0
      // implementations (Instagram) have a bug where state is passed via query.


      var data = Object.assign({}, typeof url.query === 'string' ? Querystring.parse(url.query) : url.query || {}, typeof url.hash === 'string' ? Querystring.parse(url.hash.substr(1)) : url.hash || {});
      var err = getAuthError(data); // Check if the query string was populated with a known error.

      if (err) {
        return Promise.reject(err);
      } // Check whether the state matches.


      if (options.state != null && data.state !== options.state) {
        return Promise.reject(new TypeError('Invalid state: ' + data.state));
      } // Initalize a new token and return.


      return Promise.resolve(this.client.createToken(data));
    };
    /**
     * Support client credentials OAuth 2.0 grant.
     *
     * Reference: http://tools.ietf.org/html/rfc6749#section-4.4
     *
     * @param {ClientOAuth2} client
     */


    function CredentialsFlow(client) {
      this.client = client;
    }
    /**
     * Request an access token using the client credentials.
     *
     * @param  {Object}  [opts]
     * @return {Promise}
     */


    CredentialsFlow.prototype.getToken = function (opts) {
      var self = this;
      var options = Object.assign({}, this.client.options, opts);
      expects(options, 'clientId', 'clientSecret', 'accessTokenUri');
      return this.client._request(requestOptions({
        url: options.accessTokenUri,
        method: 'POST',
        headers: Object.assign({}, DEFAULT_HEADERS, {
          Authorization: auth(options.clientId, options.clientSecret)
        }),
        body: {
          scope: sanitizeScope(options.scopes),
          grant_type: 'client_credentials'
        }
      }, options)).then(function (data) {
        return self.client.createToken(data);
      });
    };
    /**
     * Support authorization code OAuth 2.0 grant.
     *
     * Reference: http://tools.ietf.org/html/rfc6749#section-4.1
     *
     * @param {ClientOAuth2} client
     */


    function CodeFlow(client) {
      this.client = client;
    }
    /**
     * Generate the uri for doing the first redirect.
     *
     * @param  {Object} [opts]
     * @return {string}
     */


    CodeFlow.prototype.getUri = function (opts) {
      var options = Object.assign({}, this.client.options, opts);
      return createUri(options, 'code');
    };
    /**
     * Get the code token from the redirected uri and make another request for
     * the user access token.
     *
     * @param  {string|Object} uri
     * @param  {Object}        [opts]
     * @return {Promise}
     */


    CodeFlow.prototype.getToken = function (uri, opts) {
      var self = this;
      var options = Object.assign({}, this.client.options, opts);
      expects(options, 'clientId', 'accessTokenUri');
      var url = _typeof2(uri) === 'object' ? uri : Url.parse(uri, true);

      if (typeof options.redirectUri === 'string' && typeof url.pathname === 'string' && url.pathname !== Url.parse(options.redirectUri).pathname) {
        return Promise.reject(new TypeError('Redirected path should match configured path, but got: ' + url.pathname));
      }

      if (!url.query) {
        return Promise.reject(new TypeError('Unable to process uri: ' + uri));
      }

      var data = typeof url.query === 'string' ? Querystring.parse(url.query) : url.query || {};
      var err = getAuthError(data);

      if (err) {
        return Promise.reject(err);
      }

      if (options.state != null && data.state !== options.state) {
        return Promise.reject(new TypeError('Invalid state: ' + data.state));
      } // Check whether the response code is set.


      if (!data.code) {
        return Promise.reject(new TypeError('Missing code, unable to request token'));
      }

      var headers = Object.assign({}, DEFAULT_HEADERS);
      var body = {
        code: data.code,
        grant_type: 'authorization_code',
        redirect_uri: options.redirectUri // `client_id`: REQUIRED, if the client is not authenticating with the
        // authorization server as described in Section 3.2.1.
        // Reference: https://tools.ietf.org/html/rfc6749#section-3.2.1

      };

      if (options.clientSecret) {
        headers.Authorization = auth(options.clientId, options.clientSecret);
      } else {
        body.client_id = options.clientId;
      }

      return this.client._request(requestOptions({
        url: options.accessTokenUri,
        method: 'POST',
        headers: headers,
        body: body
      }, options)).then(function (data) {
        return self.client.createToken(data);
      });
    };
    /**
     * Support JSON Web Token (JWT) Bearer Token OAuth 2.0 grant.
     *
     * Reference: https://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer-12#section-2.1
     *
     * @param {ClientOAuth2} client
     */


    function JwtBearerFlow(client) {
      this.client = client;
    }
    /**
     * Request an access token using a JWT token.
     *
     * @param  {string} token     A JWT token.
     * @param  {Object} [opts]
     * @return {Promise}
     */


    JwtBearerFlow.prototype.getToken = function (token, opts) {
      var self = this;
      var options = Object.assign({}, this.client.options, opts);
      var headers = Object.assign({}, DEFAULT_HEADERS);
      expects(options, 'accessTokenUri'); // Authentication of the client is optional, as described in
      // Section 3.2.1 of OAuth 2.0 [RFC6749]

      if (options.clientId) {
        headers['Authorization'] = auth(options.clientId, options.clientSecret);
      }

      return this.client._request(requestOptions({
        url: options.accessTokenUri,
        method: 'POST',
        headers: headers,
        body: {
          scope: sanitizeScope(options.scopes),
          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          assertion: token
        }
      }, options)).then(function (data) {
        return self.client.createToken(data);
      });
    };
  }, {
    "./request": 128,
    "querystring": 467,
    "safe-buffer": 64,
    "url": 468
  }],
  128: [function (require, module, exports) {
    /**
     * Make a request using `XMLHttpRequest`.
     *
     * @param   {string}  method
     * @param   {string}  url
     * @param   {string}  body
     * @param   {Object}  headers
     * @returns {Promise}
     */
    module.exports = function request(method, url, body, headers) {
      return new Promise(function (resolve, reject) {
        var xhr = new window.XMLHttpRequest();
        xhr.open(method, url);

        xhr.onload = function () {
          return resolve({
            status: xhr.status,
            body: xhr.responseText
          });
        };

        xhr.onerror = xhr.onabort = function () {
          return reject(new Error(xhr.statusText || 'XHR aborted: ' + url));
        };

        Object.keys(headers).forEach(function (header) {
          xhr.setRequestHeader(header, headers[header]);
        });
        xhr.send(body);
      });
    };
  }, {}],
  129: [function (require, module, exports) {
    'use strict';

    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }, {}],
  130: [function (require, module, exports) {
    require('../../modules/core.regexp.escape');

    module.exports = require('../../modules/_core').RegExp.escape;
  }, {
    "../../modules/_core": 152,
    "../../modules/core.regexp.escape": 259
  }],
  131: [function (require, module, exports) {
    module.exports = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };
  }, {}],
  132: [function (require, module, exports) {
    var cof = require('./_cof');

    module.exports = function (it, msg) {
      if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
      return +it;
    };
  }, {
    "./_cof": 147
  }],
  133: [function (require, module, exports) {
    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = require('./_wks')('unscopables');

    var ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});

    module.exports = function (key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };
  }, {
    "./_hide": 171,
    "./_wks": 257
  }],
  134: [function (require, module, exports) {
    'use strict';

    var at = require('./_string-at')(true); // `AdvanceStringIndex` abstract operation
    // https://tc39.github.io/ecma262/#sec-advancestringindex


    module.exports = function (S, index, unicode) {
      return index + (unicode ? at(S, index).length : 1);
    };
  }, {
    "./_string-at": 234
  }],
  135: [function (require, module, exports) {
    module.exports = function (it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
        throw TypeError(name + ': incorrect invocation!');
      }

      return it;
    };
  }, {}],
  136: [function (require, module, exports) {
    var isObject = require('./_is-object');

    module.exports = function (it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };
  }, {
    "./_is-object": 180
  }],
  137: [function (require, module, exports) {
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    'use strict';

    var toObject = require('./_to-object');

    var toAbsoluteIndex = require('./_to-absolute-index');

    var toLength = require('./_to-length');

    module.exports = [].copyWithin || function copyWithin(target
    /* = 0 */
    , start
    /* = 0, end = @length */
    ) {
      var O = toObject(this);
      var len = toLength(O.length);
      var to = toAbsoluteIndex(target, len);
      var from = toAbsoluteIndex(start, len);
      var end = arguments.length > 2 ? arguments[2] : undefined;
      var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
      var inc = 1;

      if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
      }

      while (count-- > 0) {
        if (from in O) O[to] = O[from];else delete O[to];
        to += inc;
        from += inc;
      }

      return O;
    };
  }, {
    "./_to-absolute-index": 242,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  138: [function (require, module, exports) {
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    'use strict';

    var toObject = require('./_to-object');

    var toAbsoluteIndex = require('./_to-absolute-index');

    var toLength = require('./_to-length');

    module.exports = function fill(value
    /* , start = 0, end = @length */
    ) {
      var O = toObject(this);
      var length = toLength(O.length);
      var aLen = arguments.length;
      var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
      var end = aLen > 2 ? arguments[2] : undefined;
      var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

      while (endPos > index) {
        O[index++] = value;
      }

      return O;
    };
  }, {
    "./_to-absolute-index": 242,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  139: [function (require, module, exports) {
    var forOf = require('./_for-of');

    module.exports = function (iter, ITERATOR) {
      var result = [];
      forOf(iter, false, result.push, result, ITERATOR);
      return result;
    };
  }, {
    "./_for-of": 168
  }],
  140: [function (require, module, exports) {
    // false -> Array#indexOf
    // true  -> Array#includes
    var toIObject = require('./_to-iobject');

    var toLength = require('./_to-length');

    var toAbsoluteIndex = require('./_to-absolute-index');

    module.exports = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = toIObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value; // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare

        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++]; // eslint-disable-next-line no-self-compare

          if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
        } else for (; length > index; index++) {
          if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
        }
        return !IS_INCLUDES && -1;
      };
    };
  }, {
    "./_to-absolute-index": 242,
    "./_to-iobject": 245,
    "./_to-length": 246
  }],
  141: [function (require, module, exports) {
    // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex
    var ctx = require('./_ctx');

    var IObject = require('./_iobject');

    var toObject = require('./_to-object');

    var toLength = require('./_to-length');

    var asc = require('./_array-species-create');

    module.exports = function (TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || asc;
      return function ($this, callbackfn, that) {
        var O = toObject($this);
        var self = IObject(O);
        var f = ctx(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;

        for (; length > index; index++) {
          if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);

            if (TYPE) {
              if (IS_MAP) result[index] = res; // map
              else if (res) switch (TYPE) {
                  case 3:
                    return true;
                  // some

                  case 5:
                    return val;
                  // find

                  case 6:
                    return index;
                  // findIndex

                  case 2:
                    result.push(val);
                  // filter
                } else if (IS_EVERY) return false; // every
            }
          }
        }

        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };
  }, {
    "./_array-species-create": 144,
    "./_ctx": 154,
    "./_iobject": 176,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  142: [function (require, module, exports) {
    var aFunction = require('./_a-function');

    var toObject = require('./_to-object');

    var IObject = require('./_iobject');

    var toLength = require('./_to-length');

    module.exports = function (that, callbackfn, aLen, memo, isRight) {
      aFunction(callbackfn);
      var O = toObject(that);
      var self = IObject(O);
      var length = toLength(O.length);
      var index = isRight ? length - 1 : 0;
      var i = isRight ? -1 : 1;
      if (aLen < 2) for (;;) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }

        index += i;

        if (isRight ? index < 0 : length <= index) {
          throw TypeError('Reduce of empty array with no initial value');
        }
      }

      for (; isRight ? index >= 0 : length > index; index += i) {
        if (index in self) {
          memo = callbackfn(memo, self[index], index, O);
        }
      }

      return memo;
    };
  }, {
    "./_a-function": 131,
    "./_iobject": 176,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  143: [function (require, module, exports) {
    var isObject = require('./_is-object');

    var isArray = require('./_is-array');

    var SPECIES = require('./_wks')('species');

    module.exports = function (original) {
      var C;

      if (isArray(original)) {
        C = original.constructor; // cross-realm fallback

        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

        if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      }

      return C === undefined ? Array : C;
    };
  }, {
    "./_is-array": 178,
    "./_is-object": 180,
    "./_wks": 257
  }],
  144: [function (require, module, exports) {
    // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
    var speciesConstructor = require('./_array-species-constructor');

    module.exports = function (original, length) {
      return new (speciesConstructor(original))(length);
    };
  }, {
    "./_array-species-constructor": 143
  }],
  145: [function (require, module, exports) {
    'use strict';

    var aFunction = require('./_a-function');

    var isObject = require('./_is-object');

    var invoke = require('./_invoke');

    var arraySlice = [].slice;
    var factories = {};

    var construct = function construct(F, len, args) {
      if (!(len in factories)) {
        for (var n = [], i = 0; i < len; i++) {
          n[i] = 'a[' + i + ']';
        } // eslint-disable-next-line no-new-func


        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
      }

      return factories[len](F, args);
    };

    module.exports = Function.bind || function bind(that
    /* , ...args */
    ) {
      var fn = aFunction(this);
      var partArgs = arraySlice.call(arguments, 1);

      var bound = function bound()
      /* args... */
      {
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
      };

      if (isObject(fn.prototype)) bound.prototype = fn.prototype;
      return bound;
    };
  }, {
    "./_a-function": 131,
    "./_invoke": 175,
    "./_is-object": 180
  }],
  146: [function (require, module, exports) {
    // getting tag from 19.1.3.6 Object.prototype.toString()
    var cof = require('./_cof');

    var TAG = require('./_wks')('toStringTag'); // ES3 wrong here


    var ARG = cof(function () {
      return arguments;
    }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

    var tryGet = function tryGet(it, key) {
      try {
        return it[key];
      } catch (e) {
        /* empty */
      }
    };

    module.exports = function (it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
      : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
      : ARG ? cof(O) // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };
  }, {
    "./_cof": 147,
    "./_wks": 257
  }],
  147: [function (require, module, exports) {
    var toString = {}.toString;

    module.exports = function (it) {
      return toString.call(it).slice(8, -1);
    };
  }, {}],
  148: [function (require, module, exports) {
    'use strict';

    var dP = require('./_object-dp').f;

    var create = require('./_object-create');

    var redefineAll = require('./_redefine-all');

    var ctx = require('./_ctx');

    var anInstance = require('./_an-instance');

    var forOf = require('./_for-of');

    var $iterDefine = require('./_iter-define');

    var step = require('./_iter-step');

    var setSpecies = require('./_set-species');

    var DESCRIPTORS = require('./_descriptors');

    var fastKey = require('./_meta').fastKey;

    var validate = require('./_validate-collection');

    var SIZE = DESCRIPTORS ? '_s' : 'size';

    var getEntry = function getEntry(that, key) {
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return that._i[index]; // frozen object case

      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };

    module.exports = {
      getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME; // collection type

          that._i = create(null); // index

          that._f = undefined; // first entry

          that._l = undefined; // last entry

          that[SIZE] = 0; // size

          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear() {
            for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }

            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function _delete(key) {
            var that = validate(this, NAME);
            var entry = getEntry(that, key);

            if (entry) {
              var next = entry.n;
              var prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            }

            return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn
          /* , that = undefined */
          ) {
            validate(this, NAME);
            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
            var entry;

            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this); // revert to the last existing entry

              while (entry && entry.r) {
                entry = entry.p;
              }
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key) {
            return !!getEntry(validate(this, NAME), key);
          }
        });
        if (DESCRIPTORS) dP(C.prototype, 'size', {
          get: function get() {
            return validate(this, NAME)[SIZE];
          }
        });
        return C;
      },
      def: function def(that, key, value) {
        var entry = getEntry(that, key);
        var prev, index; // change existing entry

        if (entry) {
          entry.v = value; // create new entry
        } else {
          that._l = entry = {
            i: index = fastKey(key, true),
            // <- index
            k: key,
            // <- key
            v: value,
            // <- value
            p: prev = that._l,
            // <- previous entry
            n: undefined,
            // <- next entry
            r: false // <- removed

          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++; // add to index

          if (index !== 'F') that._i[index] = entry;
        }

        return that;
      },
      getEntry: getEntry,
      setStrong: function setStrong(C, NAME, IS_MAP) {
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function (iterated, kind) {
          this._t = validate(iterated, NAME); // target

          this._k = kind; // kind

          this._l = undefined; // previous
        }, function () {
          var that = this;
          var kind = that._k;
          var entry = that._l; // revert to the last existing entry

          while (entry && entry.r) {
            entry = entry.p;
          } // get next entry


          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            // or finish the iteration
            that._t = undefined;
            return step(1);
          } // return step by kind


          if (kind == 'keys') return step(0, entry.k);
          if (kind == 'values') return step(0, entry.v);
          return step(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

        setSpecies(NAME);
      }
    };
  }, {
    "./_an-instance": 135,
    "./_ctx": 154,
    "./_descriptors": 158,
    "./_for-of": 168,
    "./_iter-define": 184,
    "./_iter-step": 186,
    "./_meta": 194,
    "./_object-create": 199,
    "./_object-dp": 200,
    "./_redefine-all": 219,
    "./_set-species": 228,
    "./_validate-collection": 254
  }],
  149: [function (require, module, exports) {
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var classof = require('./_classof');

    var from = require('./_array-from-iterable');

    module.exports = function (NAME) {
      return function toJSON() {
        if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return from(this);
      };
    };
  }, {
    "./_array-from-iterable": 139,
    "./_classof": 146
  }],
  150: [function (require, module, exports) {
    'use strict';

    var redefineAll = require('./_redefine-all');

    var getWeak = require('./_meta').getWeak;

    var anObject = require('./_an-object');

    var isObject = require('./_is-object');

    var anInstance = require('./_an-instance');

    var forOf = require('./_for-of');

    var createArrayMethod = require('./_array-methods');

    var $has = require('./_has');

    var validate = require('./_validate-collection');

    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var id = 0; // fallback for uncaught frozen keys

    var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
      return that._l || (that._l = new UncaughtFrozenStore());
    };

    var UncaughtFrozenStore = function UncaughtFrozenStore() {
      this.a = [];
    };

    var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
      return arrayFind(store.a, function (it) {
        return it[0] === key;
      });
    };

    UncaughtFrozenStore.prototype = {
      get: function get(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
      },
      has: function has(key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function set(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;else this.a.push([key, value]);
      },
      'delete': function _delete(key) {
        var index = arrayFindIndex(this.a, function (it) {
          return it[0] === key;
        });
        if (~index) this.a.splice(index, 1);
        return !!~index;
      }
    };
    module.exports = {
      getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME; // collection type

          that._i = id++; // collection id

          that._l = undefined; // leak store for uncaught frozen objects

          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function _delete(key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
            return data && $has(data, this._i) && delete data[this._i];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
            return data && $has(data, this._i);
          }
        });
        return C;
      },
      def: function def(that, key, value) {
        var data = getWeak(anObject(key), true);
        if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
        return that;
      },
      ufstore: uncaughtFrozenStore
    };
  }, {
    "./_an-instance": 135,
    "./_an-object": 136,
    "./_array-methods": 141,
    "./_for-of": 168,
    "./_has": 170,
    "./_is-object": 180,
    "./_meta": 194,
    "./_redefine-all": 219,
    "./_validate-collection": 254
  }],
  151: [function (require, module, exports) {
    'use strict';

    var global = require('./_global');

    var $export = require('./_export');

    var redefine = require('./_redefine');

    var redefineAll = require('./_redefine-all');

    var meta = require('./_meta');

    var forOf = require('./_for-of');

    var anInstance = require('./_an-instance');

    var isObject = require('./_is-object');

    var fails = require('./_fails');

    var $iterDetect = require('./_iter-detect');

    var setToStringTag = require('./_set-to-string-tag');

    var inheritIfRequired = require('./_inherit-if-required');

    module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = global[NAME];
      var C = Base;
      var ADDER = IS_MAP ? 'set' : 'add';
      var proto = C && C.prototype;
      var O = {};

      var fixMethod = function fixMethod(KEY) {
        var fn = proto[KEY];
        redefine(proto, KEY, KEY == 'delete' ? function (a) {
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'has' ? function has(a) {
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'get' ? function get(a) {
          return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'add' ? function add(a) {
          fn.call(this, a === 0 ? 0 : a);
          return this;
        } : function set(a, b) {
          fn.call(this, a === 0 ? 0 : a, b);
          return this;
        });
      };

      if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
        new C().entries().next();
      }))) {
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
        meta.NEED = true;
      } else {
        var instance = new C(); // early implementations not supports chaining

        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false

        var THROWS_ON_PRIMITIVES = fails(function () {
          instance.has(1);
        }); // most early implementations doesn't supports iterables, most modern - not close it correctly

        var ACCEPT_ITERABLES = $iterDetect(function (iter) {
          new C(iter);
        }); // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same

        var BUGGY_ZERO = !IS_WEAK && fails(function () {
          // V8 ~ Chromium 42- fails only with 5+ elements
          var $instance = new C();
          var index = 5;

          while (index--) {
            $instance[ADDER](index, index);
          }

          return !$instance.has(-0);
        });

        if (!ACCEPT_ITERABLES) {
          C = wrapper(function (target, iterable) {
            anInstance(target, C, NAME);
            var that = inheritIfRequired(new Base(), target, C);
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
            return that;
          });
          C.prototype = proto;
          proto.constructor = C;
        }

        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }

        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

        if (IS_WEAK && proto.clear) delete proto.clear;
      }

      setToStringTag(C, NAME);
      O[NAME] = C;
      $export($export.G + $export.W + $export.F * (C != Base), O);
      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
      return C;
    };
  }, {
    "./_an-instance": 135,
    "./_export": 162,
    "./_fails": 164,
    "./_for-of": 168,
    "./_global": 169,
    "./_inherit-if-required": 174,
    "./_is-object": 180,
    "./_iter-detect": 185,
    "./_meta": 194,
    "./_redefine": 220,
    "./_redefine-all": 219,
    "./_set-to-string-tag": 229
  }],
  152: [function (require, module, exports) {
    var core = module.exports = {
      version: '2.6.3'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  }, {}],
  153: [function (require, module, exports) {
    'use strict';

    var $defineProperty = require('./_object-dp');

    var createDesc = require('./_property-desc');

    module.exports = function (object, index, value) {
      if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
    };
  }, {
    "./_object-dp": 200,
    "./_property-desc": 218
  }],
  154: [function (require, module, exports) {
    // optional / simple context binding
    var aFunction = require('./_a-function');

    module.exports = function (fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;

      switch (length) {
        case 1:
          return function (a) {
            return fn.call(that, a);
          };

        case 2:
          return function (a, b) {
            return fn.call(that, a, b);
          };

        case 3:
          return function (a, b, c) {
            return fn.call(that, a, b, c);
          };
      }

      return function ()
      /* ...args */
      {
        return fn.apply(that, arguments);
      };
    };
  }, {
    "./_a-function": 131
  }],
  155: [function (require, module, exports) {
    'use strict'; // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

    var fails = require('./_fails');

    var getTime = Date.prototype.getTime;
    var $toISOString = Date.prototype.toISOString;

    var lz = function lz(num) {
      return num > 9 ? num : '0' + num;
    }; // PhantomJS / old WebKit has a broken implementations


    module.exports = fails(function () {
      return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
    }) || !fails(function () {
      $toISOString.call(new Date(NaN));
    }) ? function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var d = this;
      var y = d.getUTCFullYear();
      var m = d.getUTCMilliseconds();
      var s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    } : $toISOString;
  }, {
    "./_fails": 164
  }],
  156: [function (require, module, exports) {
    'use strict';

    var anObject = require('./_an-object');

    var toPrimitive = require('./_to-primitive');

    var NUMBER = 'number';

    module.exports = function (hint) {
      if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
      return toPrimitive(anObject(this), hint != NUMBER);
    };
  }, {
    "./_an-object": 136,
    "./_to-primitive": 248
  }],
  157: [function (require, module, exports) {
    // 7.2.1 RequireObjectCoercible(argument)
    module.exports = function (it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };
  }, {}],
  158: [function (require, module, exports) {
    // Thank's IE8 for his funny defineProperty
    module.exports = !require('./_fails')(function () {
      return Object.defineProperty({}, 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });
  }, {
    "./_fails": 164
  }],
  159: [function (require, module, exports) {
    var isObject = require('./_is-object');

    var document = require('./_global').document; // typeof document.createElement is 'object' in old IE


    var is = isObject(document) && isObject(document.createElement);

    module.exports = function (it) {
      return is ? document.createElement(it) : {};
    };
  }, {
    "./_global": 169,
    "./_is-object": 180
  }],
  160: [function (require, module, exports) {
    // IE 8- don't enum bug keys
    module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
  }, {}],
  161: [function (require, module, exports) {
    // all enumerable object keys, includes symbols
    var getKeys = require('./_object-keys');

    var gOPS = require('./_object-gops');

    var pIE = require('./_object-pie');

    module.exports = function (it) {
      var result = getKeys(it);
      var getSymbols = gOPS.f;

      if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = pIE.f;
        var i = 0;
        var key;

        while (symbols.length > i) {
          if (isEnum.call(it, key = symbols[i++])) result.push(key);
        }
      }

      return result;
    };
  }, {
    "./_object-gops": 206,
    "./_object-keys": 209,
    "./_object-pie": 210
  }],
  162: [function (require, module, exports) {
    var global = require('./_global');

    var core = require('./_core');

    var hide = require('./_hide');

    var redefine = require('./_redefine');

    var ctx = require('./_ctx');

    var PROTOTYPE = 'prototype';

    var $export = function $export(type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
      var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
      var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
      var key, own, out, exp;
      if (IS_GLOBAL) source = name;

      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

        out = (own ? target : source)[key]; // bind timers to global for call from export context

        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

        if (target) redefine(target, key, out, type & $export.U); // export

        if (exports[key] != out) hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };

    global.core = core; // type bitmap

    $export.F = 1; // forced

    $export.G = 2; // global

    $export.S = 4; // static

    $export.P = 8; // proto

    $export.B = 16; // bind

    $export.W = 32; // wrap

    $export.U = 64; // safe

    $export.R = 128; // real proto method for `library`

    module.exports = $export;
  }, {
    "./_core": 152,
    "./_ctx": 154,
    "./_global": 169,
    "./_hide": 171,
    "./_redefine": 220
  }],
  163: [function (require, module, exports) {
    var MATCH = require('./_wks')('match');

    module.exports = function (KEY) {
      var re = /./;

      try {
        '/./'[KEY](re);
      } catch (e) {
        try {
          re[MATCH] = false;
          return !'/./'[KEY](re);
        } catch (f) {
          /* empty */
        }
      }

      return true;
    };
  }, {
    "./_wks": 257
  }],
  164: [function (require, module, exports) {
    module.exports = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };
  }, {}],
  165: [function (require, module, exports) {
    'use strict';

    require('./es6.regexp.exec');

    var redefine = require('./_redefine');

    var hide = require('./_hide');

    var fails = require('./_fails');

    var defined = require('./_defined');

    var wks = require('./_wks');

    var regexpExec = require('./_regexp-exec');

    var SPECIES = wks('species');
    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
      // #replace needs built-in support for named groups.
      // #match works fine because it just return the exec results, even if it has
      // a "grops" property.
      var re = /./;

      re.exec = function () {
        var result = [];
        result.groups = {
          a: '7'
        };
        return result;
      };

      return ''.replace(re, '$<a>') !== '7';
    });

    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function () {
      // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      var re = /(?:)/;
      var originalExec = re.exec;

      re.exec = function () {
        return originalExec.apply(this, arguments);
      };

      var result = 'ab'.split(re);
      return result.length === 2 && result[0] === 'a' && result[1] === 'b';
    }();

    module.exports = function (KEY, length, exec) {
      var SYMBOL = wks(KEY);
      var DELEGATES_TO_SYMBOL = !fails(function () {
        // String methods call symbol-named RegEp methods
        var O = {};

        O[SYMBOL] = function () {
          return 7;
        };

        return ''[KEY](O) != 7;
      });
      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;

        re.exec = function () {
          execCalled = true;
          return null;
        };

        if (KEY === 'split') {
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};

          re.constructor[SPECIES] = function () {
            return re;
          };
        }

        re[SYMBOL]('');
        return !execCalled;
      }) : undefined;

      if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
        var nativeRegExpMethod = /./[SYMBOL];
        var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
          if (regexp.exec === regexpExec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              // The native String method already delegates to @@method (this
              // polyfilled function), leasing to infinite recursion.
              // We avoid it by directly calling the native @@method method.
              return {
                done: true,
                value: nativeRegExpMethod.call(regexp, str, arg2)
              };
            }

            return {
              done: true,
              value: nativeMethod.call(str, regexp, arg2)
            };
          }

          return {
            done: false
          };
        });
        var strfn = fns[0];
        var rxfn = fns[1];
        redefine(String.prototype, KEY, strfn);
        hide(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) {
          return rxfn.call(string, this, arg);
        } // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) {
          return rxfn.call(string, this);
        });
      }
    };
  }, {
    "./_defined": 157,
    "./_fails": 164,
    "./_hide": 171,
    "./_redefine": 220,
    "./_regexp-exec": 222,
    "./_wks": 257,
    "./es6.regexp.exec": 354
  }],
  166: [function (require, module, exports) {
    'use strict'; // 21.2.5.3 get RegExp.prototype.flags

    var anObject = require('./_an-object');

    module.exports = function () {
      var that = anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };
  }, {
    "./_an-object": 136
  }],
  167: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

    var isArray = require('./_is-array');

    var isObject = require('./_is-object');

    var toLength = require('./_to-length');

    var ctx = require('./_ctx');

    var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

    function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
      var targetIndex = start;
      var sourceIndex = 0;
      var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
      var element, spreadable;

      while (sourceIndex < sourceLen) {
        if (sourceIndex in source) {
          element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
          spreadable = false;

          if (isObject(element)) {
            spreadable = element[IS_CONCAT_SPREADABLE];
            spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
          }

          if (spreadable && depth > 0) {
            targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
          } else {
            if (targetIndex >= 0x1fffffffffffff) throw TypeError();
            target[targetIndex] = element;
          }

          targetIndex++;
        }

        sourceIndex++;
      }

      return targetIndex;
    }

    module.exports = flattenIntoArray;
  }, {
    "./_ctx": 154,
    "./_is-array": 178,
    "./_is-object": 180,
    "./_to-length": 246,
    "./_wks": 257
  }],
  168: [function (require, module, exports) {
    var ctx = require('./_ctx');

    var call = require('./_iter-call');

    var isArrayIter = require('./_is-array-iter');

    var anObject = require('./_an-object');

    var toLength = require('./_to-length');

    var getIterFn = require('./core.get-iterator-method');

    var BREAK = {};
    var RETURN = {};

    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () {
        return iterable;
      } : getIterFn(iterable);
      var f = ctx(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

      if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = call(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };

    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
  }, {
    "./_an-object": 136,
    "./_ctx": 154,
    "./_is-array-iter": 177,
    "./_iter-call": 182,
    "./_to-length": 246,
    "./core.get-iterator-method": 258
  }],
  169: [function (require, module, exports) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  }, {}],
  170: [function (require, module, exports) {
    var hasOwnProperty = {}.hasOwnProperty;

    module.exports = function (it, key) {
      return hasOwnProperty.call(it, key);
    };
  }, {}],
  171: [function (require, module, exports) {
    var dP = require('./_object-dp');

    var createDesc = require('./_property-desc');

    module.exports = require('./_descriptors') ? function (object, key, value) {
      return dP.f(object, key, createDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };
  }, {
    "./_descriptors": 158,
    "./_object-dp": 200,
    "./_property-desc": 218
  }],
  172: [function (require, module, exports) {
    var document = require('./_global').document;

    module.exports = document && document.documentElement;
  }, {
    "./_global": 169
  }],
  173: [function (require, module, exports) {
    module.exports = !require('./_descriptors') && !require('./_fails')(function () {
      return Object.defineProperty(require('./_dom-create')('div'), 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });
  }, {
    "./_descriptors": 158,
    "./_dom-create": 159,
    "./_fails": 164
  }],
  174: [function (require, module, exports) {
    var isObject = require('./_is-object');

    var setPrototypeOf = require('./_set-proto').set;

    module.exports = function (that, target, C) {
      var S = target.constructor;
      var P;

      if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
        setPrototypeOf(that, P);
      }

      return that;
    };
  }, {
    "./_is-object": 180,
    "./_set-proto": 227
  }],
  175: [function (require, module, exports) {
    // fast apply, http://jsperf.lnkit.com/fast-apply/5
    module.exports = function (fn, args, that) {
      var un = that === undefined;

      switch (args.length) {
        case 0:
          return un ? fn() : fn.call(that);

        case 1:
          return un ? fn(args[0]) : fn.call(that, args[0]);

        case 2:
          return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

        case 3:
          return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

        case 4:
          return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
      }

      return fn.apply(that, args);
    };
  }, {}],
  176: [function (require, module, exports) {
    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var cof = require('./_cof'); // eslint-disable-next-line no-prototype-builtins


    module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return cof(it) == 'String' ? it.split('') : Object(it);
    };
  }, {
    "./_cof": 147
  }],
  177: [function (require, module, exports) {
    // check on default Array iterator
    var Iterators = require('./_iterators');

    var ITERATOR = require('./_wks')('iterator');

    var ArrayProto = Array.prototype;

    module.exports = function (it) {
      return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
    };
  }, {
    "./_iterators": 187,
    "./_wks": 257
  }],
  178: [function (require, module, exports) {
    // 7.2.2 IsArray(argument)
    var cof = require('./_cof');

    module.exports = Array.isArray || function isArray(arg) {
      return cof(arg) == 'Array';
    };
  }, {
    "./_cof": 147
  }],
  179: [function (require, module, exports) {
    // 20.1.2.3 Number.isInteger(number)
    var isObject = require('./_is-object');

    var floor = Math.floor;

    module.exports = function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
  }, {
    "./_is-object": 180
  }],
  180: [function (require, module, exports) {
    module.exports = function (it) {
      return _typeof2(it) === 'object' ? it !== null : typeof it === 'function';
    };
  }, {}],
  181: [function (require, module, exports) {
    // 7.2.8 IsRegExp(argument)
    var isObject = require('./_is-object');

    var cof = require('./_cof');

    var MATCH = require('./_wks')('match');

    module.exports = function (it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
    };
  }, {
    "./_cof": 147,
    "./_is-object": 180,
    "./_wks": 257
  }],
  182: [function (require, module, exports) {
    // call something on iterator step with safe closing on error
    var anObject = require('./_an-object');

    module.exports = function (iterator, fn, value, entries) {
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
      }
    };
  }, {
    "./_an-object": 136
  }],
  183: [function (require, module, exports) {
    'use strict';

    var create = require('./_object-create');

    var descriptor = require('./_property-desc');

    var setToStringTag = require('./_set-to-string-tag');

    var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

    require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
      return this;
    });

    module.exports = function (Constructor, NAME, next) {
      Constructor.prototype = create(IteratorPrototype, {
        next: descriptor(1, next)
      });
      setToStringTag(Constructor, NAME + ' Iterator');
    };
  }, {
    "./_hide": 171,
    "./_object-create": 199,
    "./_property-desc": 218,
    "./_set-to-string-tag": 229,
    "./_wks": 257
  }],
  184: [function (require, module, exports) {
    'use strict';

    var LIBRARY = require('./_library');

    var $export = require('./_export');

    var redefine = require('./_redefine');

    var hide = require('./_hide');

    var Iterators = require('./_iterators');

    var $iterCreate = require('./_iter-create');

    var setToStringTag = require('./_set-to-string-tag');

    var getPrototypeOf = require('./_object-gpo');

    var ITERATOR = require('./_wks')('iterator');

    var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';

    var returnThis = function returnThis() {
      return this;
    };

    module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      $iterCreate(Constructor, NAME, next);

      var getMethod = function getMethod(kind) {
        if (!BUGGY && kind in proto) return proto[kind];

        switch (kind) {
          case KEYS:
            return function keys() {
              return new Constructor(this, kind);
            };

          case VALUES:
            return function values() {
              return new Constructor(this, kind);
            };
        }

        return function entries() {
          return new Constructor(this, kind);
        };
      };

      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype; // Fix native

      if ($anyNative) {
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          // Set @@toStringTag to native iterators
          setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

          if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
        }
      } // fix Array#{values, @@iterator}.name in V8 / FF


      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;

        $default = function values() {
          return $native.call(this);
        };
      } // Define iterator


      if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        hide(proto, ITERATOR, $default);
      } // Plug for library


      Iterators[NAME] = $default;
      Iterators[TAG] = returnThis;

      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }

      return methods;
    };
  }, {
    "./_export": 162,
    "./_hide": 171,
    "./_iter-create": 183,
    "./_iterators": 187,
    "./_library": 188,
    "./_object-gpo": 207,
    "./_redefine": 220,
    "./_set-to-string-tag": 229,
    "./_wks": 257
  }],
  185: [function (require, module, exports) {
    var ITERATOR = require('./_wks')('iterator');

    var SAFE_CLOSING = false;

    try {
      var riter = [7][ITERATOR]();

      riter['return'] = function () {
        SAFE_CLOSING = true;
      }; // eslint-disable-next-line no-throw-literal


      Array.from(riter, function () {
        throw 2;
      });
    } catch (e) {
      /* empty */
    }

    module.exports = function (exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return false;
      var safe = false;

      try {
        var arr = [7];
        var iter = arr[ITERATOR]();

        iter.next = function () {
          return {
            done: safe = true
          };
        };

        arr[ITERATOR] = function () {
          return iter;
        };

        exec(arr);
      } catch (e) {
        /* empty */
      }

      return safe;
    };
  }, {
    "./_wks": 257
  }],
  186: [function (require, module, exports) {
    module.exports = function (done, value) {
      return {
        value: value,
        done: !!done
      };
    };
  }, {}],
  187: [function (require, module, exports) {
    module.exports = {};
  }, {}],
  188: [function (require, module, exports) {
    module.exports = false;
  }, {}],
  189: [function (require, module, exports) {
    // 20.2.2.14 Math.expm1(x)
    var $expm1 = Math.expm1;
    module.exports = !$expm1 // Old FF bug
    || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
    || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
    } : $expm1;
  }, {}],
  190: [function (require, module, exports) {
    // 20.2.2.16 Math.fround(x)
    var sign = require('./_math-sign');

    var pow = Math.pow;
    var EPSILON = pow(2, -52);
    var EPSILON32 = pow(2, -23);
    var MAX32 = pow(2, 127) * (2 - EPSILON32);
    var MIN32 = pow(2, -126);

    var roundTiesToEven = function roundTiesToEven(n) {
      return n + 1 / EPSILON - 1 / EPSILON;
    };

    module.exports = Math.fround || function fround(x) {
      var $abs = Math.abs(x);
      var $sign = sign(x);
      var a, result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs); // eslint-disable-next-line no-self-compare

      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    };
  }, {
    "./_math-sign": 193
  }],
  191: [function (require, module, exports) {
    // 20.2.2.20 Math.log1p(x)
    module.exports = Math.log1p || function log1p(x) {
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
    };
  }, {}],
  192: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
      if (arguments.length === 0 // eslint-disable-next-line no-self-compare
      || x != x // eslint-disable-next-line no-self-compare
      || inLow != inLow // eslint-disable-next-line no-self-compare
      || inHigh != inHigh // eslint-disable-next-line no-self-compare
      || outLow != outLow // eslint-disable-next-line no-self-compare
      || outHigh != outHigh) return NaN;
      if (x === Infinity || x === -Infinity) return x;
      return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
    };
  }, {}],
  193: [function (require, module, exports) {
    // 20.2.2.28 Math.sign(x)
    module.exports = Math.sign || function sign(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };
  }, {}],
  194: [function (require, module, exports) {
    var META = require('./_uid')('meta');

    var isObject = require('./_is-object');

    var has = require('./_has');

    var setDesc = require('./_object-dp').f;

    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var FREEZE = !require('./_fails')(function () {
      return isExtensible(Object.preventExtensions({}));
    });

    var setMeta = function setMeta(it) {
      setDesc(it, META, {
        value: {
          i: 'O' + ++id,
          // object ID
          w: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return primitive with prefix
      if (!isObject(it)) return _typeof2(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMeta(it); // return object ID
      }

      return it[META].i;
    };

    var getWeak = function getWeak(it, create) {
      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMeta(it); // return hash weak collections IDs
      }

      return it[META].w;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
      return it;
    };

    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
  }, {
    "./_fails": 164,
    "./_has": 170,
    "./_is-object": 180,
    "./_object-dp": 200,
    "./_uid": 252
  }],
  195: [function (require, module, exports) {
    var Map = require('./es6.map');

    var $export = require('./_export');

    var shared = require('./_shared')('metadata');

    var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

    var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
      var targetMetadata = store.get(target);

      if (!targetMetadata) {
        if (!create) return undefined;
        store.set(target, targetMetadata = new Map());
      }

      var keyMetadata = targetMetadata.get(targetKey);

      if (!keyMetadata) {
        if (!create) return undefined;
        targetMetadata.set(targetKey, keyMetadata = new Map());
      }

      return keyMetadata;
    };

    var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
    };

    var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
    };

    var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
      getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
    };

    var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
      var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
      var keys = [];
      if (metadataMap) metadataMap.forEach(function (_, key) {
        keys.push(key);
      });
      return keys;
    };

    var toMetaKey = function toMetaKey(it) {
      return it === undefined || _typeof2(it) == 'symbol' ? it : String(it);
    };

    var exp = function exp(O) {
      $export($export.S, 'Reflect', O);
    };

    module.exports = {
      store: store,
      map: getOrCreateMetadataMap,
      has: ordinaryHasOwnMetadata,
      get: ordinaryGetOwnMetadata,
      set: ordinaryDefineOwnMetadata,
      keys: ordinaryOwnMetadataKeys,
      key: toMetaKey,
      exp: exp
    };
  }, {
    "./_export": 162,
    "./_shared": 231,
    "./es6.map": 289,
    "./es6.weak-map": 396
  }],
  196: [function (require, module, exports) {
    var global = require('./_global');

    var macrotask = require('./_task').set;

    var Observer = global.MutationObserver || global.WebKitMutationObserver;
    var process = global.process;
    var Promise = global.Promise;
    var isNode = require('./_cof')(process) == 'process';

    module.exports = function () {
      var head, last, notify;

      var flush = function flush() {
        var parent, fn;
        if (isNode && (parent = process.domain)) parent.exit();

        while (head) {
          fn = head.fn;
          head = head.next;

          try {
            fn();
          } catch (e) {
            if (head) notify();else last = undefined;
            throw e;
          }
        }

        last = undefined;
        if (parent) parent.enter();
      }; // Node.js


      if (isNode) {
        notify = function notify() {
          process.nextTick(flush);
        }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

      } else if (Observer && !(global.navigator && global.navigator.standalone)) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, {
          characterData: true
        }); // eslint-disable-line no-new

        notify = function notify() {
          node.data = toggle = !toggle;
        }; // environments with maybe non-completely correct, but existent Promise

      } else if (Promise && Promise.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        var promise = Promise.resolve(undefined);

        notify = function notify() {
          promise.then(flush);
        }; // for other environments - macrotask based on:
        // - setImmediate
        // - MessageChannel
        // - window.postMessag
        // - onreadystatechange
        // - setTimeout

      } else {
        notify = function notify() {
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(global, flush);
        };
      }

      return function (fn) {
        var task = {
          fn: fn,
          next: undefined
        };
        if (last) last.next = task;

        if (!head) {
          head = task;
          notify();
        }

        last = task;
      };
    };
  }, {
    "./_cof": 147,
    "./_global": 169,
    "./_task": 241
  }],
  197: [function (require, module, exports) {
    'use strict'; // 25.4.1.5 NewPromiseCapability(C)

    var aFunction = require('./_a-function');

    function PromiseCapability(C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve);
      this.reject = aFunction(reject);
    }

    module.exports.f = function (C) {
      return new PromiseCapability(C);
    };
  }, {
    "./_a-function": 131
  }],
  198: [function (require, module, exports) {
    'use strict'; // 19.1.2.1 Object.assign(target, source, ...)

    var getKeys = require('./_object-keys');

    var gOPS = require('./_object-gops');

    var pIE = require('./_object-pie');

    var toObject = require('./_to-object');

    var IObject = require('./_iobject');

    var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

    module.exports = !$assign || require('./_fails')(function () {
      var A = {};
      var B = {}; // eslint-disable-next-line no-undef

      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) {
        B[k] = k;
      });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source) {
      // eslint-disable-line no-unused-vars
      var T = toObject(target);
      var aLen = arguments.length;
      var index = 1;
      var getSymbols = gOPS.f;
      var isEnum = pIE.f;

      while (aLen > index) {
        var S = IObject(arguments[index++]);
        var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
        var length = keys.length;
        var j = 0;
        var key;

        while (length > j) {
          if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
        }
      }

      return T;
    } : $assign;
  }, {
    "./_fails": 164,
    "./_iobject": 176,
    "./_object-gops": 206,
    "./_object-keys": 209,
    "./_object-pie": 210,
    "./_to-object": 247
  }],
  199: [function (require, module, exports) {
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    var anObject = require('./_an-object');

    var dPs = require('./_object-dps');

    var enumBugKeys = require('./_enum-bug-keys');

    var IE_PROTO = require('./_shared-key')('IE_PROTO');

    var Empty = function Empty() {
      /* empty */
    };

    var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

    var _createDict2 = function createDict() {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = require('./_dom-create')('iframe');

      var i = enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';

      require('./_html').appendChild(iframe);

      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);

      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      _createDict2 = iframeDocument.F;

      while (i--) {
        delete _createDict2[PROTOTYPE][enumBugKeys[i]];
      }

      return _createDict2();
    };

    module.exports = Object.create || function create(O, Properties) {
      var result;

      if (O !== null) {
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty();
        Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

        result[IE_PROTO] = O;
      } else result = _createDict2();

      return Properties === undefined ? result : dPs(result, Properties);
    };
  }, {
    "./_an-object": 136,
    "./_dom-create": 159,
    "./_enum-bug-keys": 160,
    "./_html": 172,
    "./_object-dps": 201,
    "./_shared-key": 230
  }],
  200: [function (require, module, exports) {
    var anObject = require('./_an-object');

    var IE8_DOM_DEFINE = require('./_ie8-dom-define');

    var toPrimitive = require('./_to-primitive');

    var dP = Object.defineProperty;
    exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
      } catch (e) {
        /* empty */
      }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
  }, {
    "./_an-object": 136,
    "./_descriptors": 158,
    "./_ie8-dom-define": 173,
    "./_to-primitive": 248
  }],
  201: [function (require, module, exports) {
    var dP = require('./_object-dp');

    var anObject = require('./_an-object');

    var getKeys = require('./_object-keys');

    module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var keys = getKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;

      while (length > i) {
        dP.f(O, P = keys[i++], Properties[P]);
      }

      return O;
    };
  }, {
    "./_an-object": 136,
    "./_descriptors": 158,
    "./_object-dp": 200,
    "./_object-keys": 209
  }],
  202: [function (require, module, exports) {
    'use strict'; // Forced replacement prototype accessors methods

    module.exports = require('./_library') || !require('./_fails')(function () {
      var K = Math.random(); // In FF throws only define methods
      // eslint-disable-next-line no-undef, no-useless-call

      __defineSetter__.call(null, K, function () {
        /* empty */
      });

      delete require('./_global')[K];
    });
  }, {
    "./_fails": 164,
    "./_global": 169,
    "./_library": 188
  }],
  203: [function (require, module, exports) {
    var pIE = require('./_object-pie');

    var createDesc = require('./_property-desc');

    var toIObject = require('./_to-iobject');

    var toPrimitive = require('./_to-primitive');

    var has = require('./_has');

    var IE8_DOM_DEFINE = require('./_ie8-dom-define');

    var gOPD = Object.getOwnPropertyDescriptor;
    exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
      O = toIObject(O);
      P = toPrimitive(P, true);
      if (IE8_DOM_DEFINE) try {
        return gOPD(O, P);
      } catch (e) {
        /* empty */
      }
      if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
    };
  }, {
    "./_descriptors": 158,
    "./_has": 170,
    "./_ie8-dom-define": 173,
    "./_object-pie": 210,
    "./_property-desc": 218,
    "./_to-iobject": 245,
    "./_to-primitive": 248
  }],
  204: [function (require, module, exports) {
    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var toIObject = require('./_to-iobject');

    var gOPN = require('./_object-gopn').f;

    var toString = {}.toString;
    var windowNames = (typeof window === "undefined" ? "undefined" : _typeof2(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function getWindowNames(it) {
      try {
        return gOPN(it);
      } catch (e) {
        return windowNames.slice();
      }
    };

    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
    };
  }, {
    "./_object-gopn": 205,
    "./_to-iobject": 245
  }],
  205: [function (require, module, exports) {
    // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    var $keys = require('./_object-keys-internal');

    var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return $keys(O, hiddenKeys);
    };
  }, {
    "./_enum-bug-keys": 160,
    "./_object-keys-internal": 208
  }],
  206: [function (require, module, exports) {
    exports.f = Object.getOwnPropertySymbols;
  }, {}],
  207: [function (require, module, exports) {
    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    var has = require('./_has');

    var toObject = require('./_to-object');

    var IE_PROTO = require('./_shared-key')('IE_PROTO');

    var ObjectProto = Object.prototype;

    module.exports = Object.getPrototypeOf || function (O) {
      O = toObject(O);
      if (has(O, IE_PROTO)) return O[IE_PROTO];

      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      }

      return O instanceof Object ? ObjectProto : null;
    };
  }, {
    "./_has": 170,
    "./_shared-key": 230,
    "./_to-object": 247
  }],
  208: [function (require, module, exports) {
    var has = require('./_has');

    var toIObject = require('./_to-iobject');

    var arrayIndexOf = require('./_array-includes')(false);

    var IE_PROTO = require('./_shared-key')('IE_PROTO');

    module.exports = function (object, names) {
      var O = toIObject(object);
      var i = 0;
      var result = [];
      var key;

      for (key in O) {
        if (key != IE_PROTO) has(O, key) && result.push(key);
      } // Don't enum bug & hidden keys


      while (names.length > i) {
        if (has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }
      }

      return result;
    };
  }, {
    "./_array-includes": 140,
    "./_has": 170,
    "./_shared-key": 230,
    "./_to-iobject": 245
  }],
  209: [function (require, module, exports) {
    // 19.1.2.14 / 15.2.3.14 Object.keys(O)
    var $keys = require('./_object-keys-internal');

    var enumBugKeys = require('./_enum-bug-keys');

    module.exports = Object.keys || function keys(O) {
      return $keys(O, enumBugKeys);
    };
  }, {
    "./_enum-bug-keys": 160,
    "./_object-keys-internal": 208
  }],
  210: [function (require, module, exports) {
    exports.f = {}.propertyIsEnumerable;
  }, {}],
  211: [function (require, module, exports) {
    // most Object methods by ES6 should accept primitives
    var $export = require('./_export');

    var core = require('./_core');

    var fails = require('./_fails');

    module.exports = function (KEY, exec) {
      var fn = (core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);
      $export($export.S + $export.F * fails(function () {
        fn(1);
      }), 'Object', exp);
    };
  }, {
    "./_core": 152,
    "./_export": 162,
    "./_fails": 164
  }],
  212: [function (require, module, exports) {
    var getKeys = require('./_object-keys');

    var toIObject = require('./_to-iobject');

    var isEnum = require('./_object-pie').f;

    module.exports = function (isEntries) {
      return function (it) {
        var O = toIObject(it);
        var keys = getKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;

        while (length > i) {
          if (isEnum.call(O, key = keys[i++])) {
            result.push(isEntries ? [key, O[key]] : O[key]);
          }
        }

        return result;
      };
    };
  }, {
    "./_object-keys": 209,
    "./_object-pie": 210,
    "./_to-iobject": 245
  }],
  213: [function (require, module, exports) {
    // all object keys, includes non-enumerable and symbols
    var gOPN = require('./_object-gopn');

    var gOPS = require('./_object-gops');

    var anObject = require('./_an-object');

    var Reflect = require('./_global').Reflect;

    module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
      var keys = gOPN.f(anObject(it));
      var getSymbols = gOPS.f;
      return getSymbols ? keys.concat(getSymbols(it)) : keys;
    };
  }, {
    "./_an-object": 136,
    "./_global": 169,
    "./_object-gopn": 205,
    "./_object-gops": 206
  }],
  214: [function (require, module, exports) {
    var $parseFloat = require('./_global').parseFloat;

    var $trim = require('./_string-trim').trim;

    module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
      var string = $trim(String(str), 3);
      var result = $parseFloat(string);
      return result === 0 && string.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;
  }, {
    "./_global": 169,
    "./_string-trim": 239,
    "./_string-ws": 240
  }],
  215: [function (require, module, exports) {
    var $parseInt = require('./_global').parseInt;

    var $trim = require('./_string-trim').trim;

    var ws = require('./_string-ws');

    var hex = /^[-+]?0[xX]/;
    module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
      var string = $trim(String(str), 3);
      return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
    } : $parseInt;
  }, {
    "./_global": 169,
    "./_string-trim": 239,
    "./_string-ws": 240
  }],
  216: [function (require, module, exports) {
    module.exports = function (exec) {
      try {
        return {
          e: false,
          v: exec()
        };
      } catch (e) {
        return {
          e: true,
          v: e
        };
      }
    };
  }, {}],
  217: [function (require, module, exports) {
    var anObject = require('./_an-object');

    var isObject = require('./_is-object');

    var newPromiseCapability = require('./_new-promise-capability');

    module.exports = function (C, x) {
      anObject(C);
      if (isObject(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };
  }, {
    "./_an-object": 136,
    "./_is-object": 180,
    "./_new-promise-capability": 197
  }],
  218: [function (require, module, exports) {
    module.exports = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };
  }, {}],
  219: [function (require, module, exports) {
    var redefine = require('./_redefine');

    module.exports = function (target, src, safe) {
      for (var key in src) {
        redefine(target, key, src[key], safe);
      }

      return target;
    };
  }, {
    "./_redefine": 220
  }],
  220: [function (require, module, exports) {
    var global = require('./_global');

    var hide = require('./_hide');

    var has = require('./_has');

    var SRC = require('./_uid')('src');

    var TO_STRING = 'toString';
    var $toString = Function[TO_STRING];
    var TPL = ('' + $toString).split(TO_STRING);

    require('./_core').inspectSource = function (it) {
      return $toString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) has(val, 'name') || hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

      if (O === global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        hide(O, key, val);
      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
  }, {
    "./_core": 152,
    "./_global": 169,
    "./_has": 170,
    "./_hide": 171,
    "./_uid": 252
  }],
  221: [function (require, module, exports) {
    'use strict';

    var classof = require('./_classof');

    var builtinExec = RegExp.prototype.exec; // `RegExpExec` abstract operation
    // https://tc39.github.io/ecma262/#sec-regexpexec

    module.exports = function (R, S) {
      var exec = R.exec;

      if (typeof exec === 'function') {
        var result = exec.call(R, S);

        if (_typeof2(result) !== 'object') {
          throw new TypeError('RegExp exec method returned something other than an Object or null');
        }

        return result;
      }

      if (classof(R) !== 'RegExp') {
        throw new TypeError('RegExp#exec called on incompatible receiver');
      }

      return builtinExec.call(R, S);
    };
  }, {
    "./_classof": 146
  }],
  222: [function (require, module, exports) {
    'use strict';

    var regexpFlags = require('./_flags');

    var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
    // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
    // which loads this file before patching the method.

    var nativeReplace = String.prototype.replace;
    var patchedExec = nativeExec;
    var LAST_INDEX = 'lastIndex';

    var UPDATES_LAST_INDEX_WRONG = function () {
      var re1 = /a/,
          re2 = /b*/g;
      nativeExec.call(re1, 'a');
      nativeExec.call(re2, 'a');
      return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
    }(); // nonparticipating capturing group, copied from es5-shim's String#split patch.


    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

    if (PATCH) {
      patchedExec = function exec(str) {
        var re = this;
        var lastIndex, reCopy, match, i;

        if (NPCG_INCLUDED) {
          reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
        }

        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
        match = nativeExec.call(re, str);

        if (UPDATES_LAST_INDEX_WRONG && match) {
          re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
        }

        if (NPCG_INCLUDED && match && match.length > 1) {
          // Fix browsers whose `exec` methods don't consistently return `undefined`
          // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
          // eslint-disable-next-line no-loop-func
          nativeReplace.call(match[0], reCopy, function () {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
        }

        return match;
      };
    }

    module.exports = patchedExec;
  }, {
    "./_flags": 166
  }],
  223: [function (require, module, exports) {
    module.exports = function (regExp, replace) {
      var replacer = replace === Object(replace) ? function (part) {
        return replace[part];
      } : replace;
      return function (it) {
        return String(it).replace(regExp, replacer);
      };
    };
  }, {}],
  224: [function (require, module, exports) {
    // 7.2.9 SameValue(x, y)
    module.exports = Object.is || function is(x, y) {
      // eslint-disable-next-line no-self-compare
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
  }, {}],
  225: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

    var $export = require('./_export');

    var aFunction = require('./_a-function');

    var ctx = require('./_ctx');

    var forOf = require('./_for-of');

    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, {
        from: function from(source
        /* , mapFn, thisArg */
        ) {
          var mapFn = arguments[1];
          var mapping, A, n, cb;
          aFunction(this);
          mapping = mapFn !== undefined;
          if (mapping) aFunction(mapFn);
          if (source == undefined) return new this();
          A = [];

          if (mapping) {
            n = 0;
            cb = ctx(mapFn, arguments[2], 2);
            forOf(source, false, function (nextItem) {
              A.push(cb(nextItem, n++));
            });
          } else {
            forOf(source, false, A.push, A);
          }

          return new this(A);
        }
      });
    };
  }, {
    "./_a-function": 131,
    "./_ctx": 154,
    "./_export": 162,
    "./_for-of": 168
  }],
  226: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

    var $export = require('./_export');

    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, {
        of: function of() {
          var length = arguments.length;
          var A = new Array(length);

          while (length--) {
            A[length] = arguments[length];
          }

          return new this(A);
        }
      });
    };
  }, {
    "./_export": 162
  }],
  227: [function (require, module, exports) {
    // Works with __proto__ only. Old v8 can't work with null proto objects.

    /* eslint-disable no-proto */
    var isObject = require('./_is-object');

    var anObject = require('./_an-object');

    var check = function check(O, proto) {
      anObject(O);
      if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
    };

    module.exports = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function (test, buggy, set) {
        try {
          set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch (e) {
          buggy = true;
        }

        return function setPrototypeOf(O, proto) {
          check(O, proto);
          if (buggy) O.__proto__ = proto;else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
      check: check
    };
  }, {
    "./_an-object": 136,
    "./_ctx": 154,
    "./_is-object": 180,
    "./_object-gopd": 203
  }],
  228: [function (require, module, exports) {
    'use strict';

    var global = require('./_global');

    var dP = require('./_object-dp');

    var DESCRIPTORS = require('./_descriptors');

    var SPECIES = require('./_wks')('species');

    module.exports = function (KEY) {
      var C = global[KEY];
      if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
        configurable: true,
        get: function get() {
          return this;
        }
      });
    };
  }, {
    "./_descriptors": 158,
    "./_global": 169,
    "./_object-dp": 200,
    "./_wks": 257
  }],
  229: [function (require, module, exports) {
    var def = require('./_object-dp').f;

    var has = require('./_has');

    var TAG = require('./_wks')('toStringTag');

    module.exports = function (it, tag, stat) {
      if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
        configurable: true,
        value: tag
      });
    };
  }, {
    "./_has": 170,
    "./_object-dp": 200,
    "./_wks": 257
  }],
  230: [function (require, module, exports) {
    var shared = require('./_shared')('keys');

    var uid = require('./_uid');

    module.exports = function (key) {
      return shared[key] || (shared[key] = uid(key));
    };
  }, {
    "./_shared": 231,
    "./_uid": 252
  }],
  231: [function (require, module, exports) {
    var core = require('./_core');

    var global = require('./_global');

    var SHARED = '__core-js_shared__';
    var store = global[SHARED] || (global[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: core.version,
      mode: require('./_library') ? 'pure' : 'global',
      copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
    });
  }, {
    "./_core": 152,
    "./_global": 169,
    "./_library": 188
  }],
  232: [function (require, module, exports) {
    // 7.3.20 SpeciesConstructor(O, defaultConstructor)
    var anObject = require('./_an-object');

    var aFunction = require('./_a-function');

    var SPECIES = require('./_wks')('species');

    module.exports = function (O, D) {
      var C = anObject(O).constructor;
      var S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
    };
  }, {
    "./_a-function": 131,
    "./_an-object": 136,
    "./_wks": 257
  }],
  233: [function (require, module, exports) {
    'use strict';

    var fails = require('./_fails');

    module.exports = function (method, arg) {
      return !!method && fails(function () {
        // eslint-disable-next-line no-useless-call
        arg ? method.call(null, function () {
          /* empty */
        }, 1) : method.call(null);
      });
    };
  }, {
    "./_fails": 164
  }],
  234: [function (require, module, exports) {
    var toInteger = require('./_to-integer');

    var defined = require('./_defined'); // true  -> String#at
    // false -> String#codePointAt


    module.exports = function (TO_STRING) {
      return function (that, pos) {
        var s = String(defined(that));
        var i = toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };
  }, {
    "./_defined": 157,
    "./_to-integer": 244
  }],
  235: [function (require, module, exports) {
    // helper for String#{startsWith, endsWith, includes}
    var isRegExp = require('./_is-regexp');

    var defined = require('./_defined');

    module.exports = function (that, searchString, NAME) {
      if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(defined(that));
    };
  }, {
    "./_defined": 157,
    "./_is-regexp": 181
  }],
  236: [function (require, module, exports) {
    var $export = require('./_export');

    var fails = require('./_fails');

    var defined = require('./_defined');

    var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)

    var createHTML = function createHTML(string, tag, attribute, value) {
      var S = String(defined(string));
      var p1 = '<' + tag;
      if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
      return p1 + '>' + S + '</' + tag + '>';
    };

    module.exports = function (NAME, exec) {
      var O = {};
      O[NAME] = exec(createHTML);
      $export($export.P + $export.F * fails(function () {
        var test = ''[NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
      }), 'String', O);
    };
  }, {
    "./_defined": 157,
    "./_export": 162,
    "./_fails": 164
  }],
  237: [function (require, module, exports) {
    // https://github.com/tc39/proposal-string-pad-start-end
    var toLength = require('./_to-length');

    var repeat = require('./_string-repeat');

    var defined = require('./_defined');

    module.exports = function (that, maxLength, fillString, left) {
      var S = String(defined(that));
      var stringLength = S.length;
      var fillStr = fillString === undefined ? ' ' : String(fillString);
      var intMaxLength = toLength(maxLength);
      if (intMaxLength <= stringLength || fillStr == '') return S;
      var fillLen = intMaxLength - stringLength;
      var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
      return left ? stringFiller + S : S + stringFiller;
    };
  }, {
    "./_defined": 157,
    "./_string-repeat": 238,
    "./_to-length": 246
  }],
  238: [function (require, module, exports) {
    'use strict';

    var toInteger = require('./_to-integer');

    var defined = require('./_defined');

    module.exports = function repeat(count) {
      var str = String(defined(this));
      var res = '';
      var n = toInteger(count);
      if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");

      for (; n > 0; (n >>>= 1) && (str += str)) {
        if (n & 1) res += str;
      }

      return res;
    };
  }, {
    "./_defined": 157,
    "./_to-integer": 244
  }],
  239: [function (require, module, exports) {
    var $export = require('./_export');

    var defined = require('./_defined');

    var fails = require('./_fails');

    var spaces = require('./_string-ws');

    var space = '[' + spaces + ']';
    var non = "\u200B\x85";
    var ltrim = RegExp('^' + space + space + '*');
    var rtrim = RegExp(space + space + '*$');

    var exporter = function exporter(KEY, exec, ALIAS) {
      var exp = {};
      var FORCE = fails(function () {
        return !!spaces[KEY]() || non[KEY]() != non;
      });
      var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
      if (ALIAS) exp[ALIAS] = fn;
      $export($export.P + $export.F * FORCE, 'String', exp);
    }; // 1 -> String#trimLeft
    // 2 -> String#trimRight
    // 3 -> String#trim


    var trim = exporter.trim = function (string, TYPE) {
      string = String(defined(string));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };

    module.exports = exporter;
  }, {
    "./_defined": 157,
    "./_export": 162,
    "./_fails": 164,
    "./_string-ws": 240
  }],
  240: [function (require, module, exports) {
    module.exports = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }, {}],
  241: [function (require, module, exports) {
    var ctx = require('./_ctx');

    var invoke = require('./_invoke');

    var html = require('./_html');

    var cel = require('./_dom-create');

    var global = require('./_global');

    var process = global.process;
    var setTask = global.setImmediate;
    var clearTask = global.clearImmediate;
    var MessageChannel = global.MessageChannel;
    var Dispatch = global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;

    var run = function run() {
      var id = +this; // eslint-disable-next-line no-prototype-builtins

      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };

    var listener = function listener(event) {
      run.call(event.data);
    }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;

        while (arguments.length > i) {
          args.push(arguments[i++]);
        }

        queue[++counter] = function () {
          // eslint-disable-next-line no-new-func
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };

        defer(counter);
        return counter;
      };

      clearTask = function clearImmediate(id) {
        delete queue[id];
      }; // Node.js 0.8-


      if (require('./_cof')(process) == 'process') {
        defer = function defer(id) {
          process.nextTick(ctx(run, id, 1));
        }; // Sphere (JS game engine) Dispatch API

      } else if (Dispatch && Dispatch.now) {
        defer = function defer(id) {
          Dispatch.now(ctx(run, id, 1));
        }; // Browsers with MessageChannel, includes WebWorkers

      } else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function defer(id) {
          global.postMessage(id + '', '*');
        };

        global.addEventListener('message', listener, false); // IE8-
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function defer(id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
            html.removeChild(this);
            run.call(id);
          };
        }; // Rest old browsers

      } else {
        defer = function defer(id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }

    module.exports = {
      set: setTask,
      clear: clearTask
    };
  }, {
    "./_cof": 147,
    "./_ctx": 154,
    "./_dom-create": 159,
    "./_global": 169,
    "./_html": 172,
    "./_invoke": 175
  }],
  242: [function (require, module, exports) {
    var toInteger = require('./_to-integer');

    var max = Math.max;
    var min = Math.min;

    module.exports = function (index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    };
  }, {
    "./_to-integer": 244
  }],
  243: [function (require, module, exports) {
    // https://tc39.github.io/ecma262/#sec-toindex
    var toInteger = require('./_to-integer');

    var toLength = require('./_to-length');

    module.exports = function (it) {
      if (it === undefined) return 0;
      var number = toInteger(it);
      var length = toLength(number);
      if (number !== length) throw RangeError('Wrong length!');
      return length;
    };
  }, {
    "./_to-integer": 244,
    "./_to-length": 246
  }],
  244: [function (require, module, exports) {
    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;

    module.exports = function (it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };
  }, {}],
  245: [function (require, module, exports) {
    // to indexed object, toObject with fallback for non-array-like ES3 strings
    var IObject = require('./_iobject');

    var defined = require('./_defined');

    module.exports = function (it) {
      return IObject(defined(it));
    };
  }, {
    "./_defined": 157,
    "./_iobject": 176
  }],
  246: [function (require, module, exports) {
    // 7.1.15 ToLength
    var toInteger = require('./_to-integer');

    var min = Math.min;

    module.exports = function (it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };
  }, {
    "./_to-integer": 244
  }],
  247: [function (require, module, exports) {
    // 7.1.13 ToObject(argument)
    var defined = require('./_defined');

    module.exports = function (it) {
      return Object(defined(it));
    };
  }, {
    "./_defined": 157
  }],
  248: [function (require, module, exports) {
    // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject = require('./_is-object'); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string


    module.exports = function (it, S) {
      if (!isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };
  }, {
    "./_is-object": 180
  }],
  249: [function (require, module, exports) {
    'use strict';

    if (require('./_descriptors')) {
      var LIBRARY = require('./_library');

      var global = require('./_global');

      var fails = require('./_fails');

      var $export = require('./_export');

      var $typed = require('./_typed');

      var $buffer = require('./_typed-buffer');

      var ctx = require('./_ctx');

      var anInstance = require('./_an-instance');

      var propertyDesc = require('./_property-desc');

      var hide = require('./_hide');

      var redefineAll = require('./_redefine-all');

      var toInteger = require('./_to-integer');

      var toLength = require('./_to-length');

      var toIndex = require('./_to-index');

      var toAbsoluteIndex = require('./_to-absolute-index');

      var toPrimitive = require('./_to-primitive');

      var has = require('./_has');

      var classof = require('./_classof');

      var isObject = require('./_is-object');

      var toObject = require('./_to-object');

      var isArrayIter = require('./_is-array-iter');

      var create = require('./_object-create');

      var getPrototypeOf = require('./_object-gpo');

      var gOPN = require('./_object-gopn').f;

      var getIterFn = require('./core.get-iterator-method');

      var uid = require('./_uid');

      var wks = require('./_wks');

      var createArrayMethod = require('./_array-methods');

      var createArrayIncludes = require('./_array-includes');

      var speciesConstructor = require('./_species-constructor');

      var ArrayIterators = require('./es6.array.iterator');

      var Iterators = require('./_iterators');

      var $iterDetect = require('./_iter-detect');

      var setSpecies = require('./_set-species');

      var arrayFill = require('./_array-fill');

      var arrayCopyWithin = require('./_array-copy-within');

      var $DP = require('./_object-dp');

      var $GOPD = require('./_object-gopd');

      var dP = $DP.f;
      var gOPD = $GOPD.f;
      var RangeError = global.RangeError;
      var TypeError = global.TypeError;
      var Uint8Array = global.Uint8Array;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var PROTOTYPE = 'prototype';
      var ArrayProto = Array[PROTOTYPE];
      var $ArrayBuffer = $buffer.ArrayBuffer;
      var $DataView = $buffer.DataView;
      var arrayForEach = createArrayMethod(0);
      var arrayFilter = createArrayMethod(2);
      var arraySome = createArrayMethod(3);
      var arrayEvery = createArrayMethod(4);
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var arrayIncludes = createArrayIncludes(true);
      var arrayIndexOf = createArrayIncludes(false);
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var arrayLastIndexOf = ArrayProto.lastIndexOf;
      var arrayReduce = ArrayProto.reduce;
      var arrayReduceRight = ArrayProto.reduceRight;
      var arrayJoin = ArrayProto.join;
      var arraySort = ArrayProto.sort;
      var arraySlice = ArrayProto.slice;
      var arrayToString = ArrayProto.toString;
      var arrayToLocaleString = ArrayProto.toLocaleString;
      var ITERATOR = wks('iterator');
      var TAG = wks('toStringTag');
      var TYPED_CONSTRUCTOR = uid('typed_constructor');
      var DEF_CONSTRUCTOR = uid('def_constructor');
      var ALL_CONSTRUCTORS = $typed.CONSTR;
      var TYPED_ARRAY = $typed.TYPED;
      var VIEW = $typed.VIEW;
      var WRONG_LENGTH = 'Wrong length!';
      var $map = createArrayMethod(1, function (O, length) {
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
      });
      var LITTLE_ENDIAN = fails(function () {
        // eslint-disable-next-line no-undef
        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
      });
      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
        new Uint8Array(1).set({});
      });

      var toOffset = function toOffset(it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
        return offset;
      };

      var validate = function validate(it) {
        if (isObject(it) && TYPED_ARRAY in it) return it;
        throw TypeError(it + ' is not a typed array!');
      };

      var allocate = function allocate(C, length) {
        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
          throw TypeError('It is not a typed array constructor!');
        }

        return new C(length);
      };

      var speciesFromList = function speciesFromList(O, list) {
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
      };

      var fromList = function fromList(C, list) {
        var index = 0;
        var length = list.length;
        var result = allocate(C, length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      };

      var addGetter = function addGetter(it, key, internal) {
        dP(it, key, {
          get: function get() {
            return this._d[internal];
          }
        });
      };

      var $from = function from(source
      /* , mapfn, thisArg */
      ) {
        var O = toObject(source);
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iterFn = getIterFn(O);
        var i, length, values, result, step, iterator;

        if (iterFn != undefined && !isArrayIter(iterFn)) {
          for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
            values.push(step.value);
          }

          O = values;
        }

        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);

        for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }

        return result;
      };

      var $of = function of()
      /* ...items */
      {
        var index = 0;
        var length = arguments.length;
        var result = allocate(this, length);

        while (length > index) {
          result[index] = arguments[index++];
        }

        return result;
      }; // iOS Safari 6.x fails here


      var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
        arrayToLocaleString.call(new Uint8Array(1));
      });

      var $toLocaleString = function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
      };

      var proto = {
        copyWithin: function copyWithin(target, start
        /* , end */
        ) {
          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn
        /* , thisArg */
        ) {
          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value
        /* , start, end */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate
        /* , thisArg */
        ) {
          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate
        /* , thisArg */
        ) {
          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn
        /* , thisArg */
        ) {
          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement
        /* , fromIndex */
        ) {
          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement
        /* , fromIndex */
        ) {
          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator) {
          // eslint-disable-line no-unused-vars
          return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement
        /* , fromIndex */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn
        /* , thisArg */
        ) {
          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn
        /* , initialValue */
        ) {
          // eslint-disable-line no-unused-vars
          return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse() {
          var that = this;
          var length = validate(that).length;
          var middle = Math.floor(length / 2);
          var index = 0;
          var value;

          while (index < middle) {
            value = that[index];
            that[index++] = that[--length];
            that[length] = value;
          }

          return that;
        },
        some: function some(callbackfn
        /* , thisArg */
        ) {
          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn) {
          return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end) {
          var O = validate(this);
          var length = O.length;
          var $begin = toAbsoluteIndex(begin, length);
          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
        }
      };

      var $slice = function slice(start, end) {
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
      };

      var $set = function set(arrayLike
      /* , offset */
      ) {
        validate(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError(WRONG_LENGTH);

        while (index < len) {
          this[offset + index] = src[index++];
        }
      };

      var $iterators = {
        entries: function entries() {
          return arrayEntries.call(validate(this));
        },
        keys: function keys() {
          return arrayKeys.call(validate(this));
        },
        values: function values() {
          return arrayValues.call(validate(this));
        }
      };

      var isTAIndex = function isTAIndex(target, key) {
        return isObject(target) && target[TYPED_ARRAY] && _typeof2(key) != 'symbol' && key in target && String(+key) == String(key);
      };

      var $getDesc = function getOwnPropertyDescriptor(target, key) {
        return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
      };

      var $setDesc = function defineProperty(target, key, desc) {
        if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') // TODO: add validation descriptor w/o calling accessors
        && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
          target[key] = desc.value;
          return target;
        }

        return dP(target, key, desc);
      };

      if (!ALL_CONSTRUCTORS) {
        $GOPD.f = $getDesc;
        $DP.f = $setDesc;
      }

      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty: $setDesc
      });

      if (fails(function () {
        arrayToString.call({});
      })) {
        arrayToString = arrayToLocaleString = function toString() {
          return arrayJoin.call(this);
        };
      }

      var $TypedArrayPrototype$ = redefineAll({}, proto);
      redefineAll($TypedArrayPrototype$, $iterators);
      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
      redefineAll($TypedArrayPrototype$, {
        slice: $slice,
        set: $set,
        constructor: function constructor() {
          /* noop */
        },
        toString: arrayToString,
        toLocaleString: $toLocaleString
      });
      addGetter($TypedArrayPrototype$, 'buffer', 'b');
      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
      addGetter($TypedArrayPrototype$, 'byteLength', 'l');
      addGetter($TypedArrayPrototype$, 'length', 'e');
      dP($TypedArrayPrototype$, TAG, {
        get: function get() {
          return this[TYPED_ARRAY];
        }
      }); // eslint-disable-next-line max-statements

      module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
        CLAMPED = !!CLAMPED;
        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + KEY;
        var SETTER = 'set' + KEY;
        var TypedArray = global[NAME];
        var Base = TypedArray || {};
        var TAC = TypedArray && getPrototypeOf(TypedArray);
        var FORCED = !TypedArray || !$typed.ABV;
        var O = {};
        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];

        var getter = function getter(that, index) {
          var data = that._d;
          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };

        var setter = function setter(that, index, value) {
          var data = that._d;
          if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };

        var addElement = function addElement(that, index) {
          dP(that, index, {
            get: function get() {
              return getter(this, index);
            },
            set: function set(value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };

        if (FORCED) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME, '_d');
            var index = 0;
            var offset = 0;
            var buffer, byteLength, length, klass;

            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new $ArrayBuffer(byteLength);
            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              buffer = data;
              offset = toOffset($offset, BYTES);
              var $len = data.byteLength;

              if ($length === undefined) {
                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                byteLength = $len - offset;
                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
              }

              length = byteLength / BYTES;
            } else if (TYPED_ARRAY in data) {
              return fromList(TypedArray, data);
            } else {
              return $from.call(TypedArray, data);
            }

            hide(that, '_d', {
              b: buffer,
              o: offset,
              l: byteLength,
              e: length,
              v: new $DataView(buffer)
            });

            while (index < length) {
              addElement(that, index++);
            }
          });
          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
          hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if (!fails(function () {
          TypedArray(1);
        }) || !fails(function () {
          new TypedArray(-1); // eslint-disable-line no-new
        }) || !$iterDetect(function (iter) {
          new TypedArray(); // eslint-disable-line no-new

          new TypedArray(null); // eslint-disable-line no-new

          new TypedArray(1.5); // eslint-disable-line no-new

          new TypedArray(iter); // eslint-disable-line no-new
        }, true)) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME);
            var klass; // `ws` module bug, temporarily remove validation length for Uint8Array
            // https://github.com/websockets/ws/pull/645

            if (!isObject(data)) return new Base(toIndex(data));

            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
            }

            if (TYPED_ARRAY in data) return fromList(TypedArray, data);
            return $from.call(TypedArray, data);
          });
          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
          });
          TypedArray[PROTOTYPE] = TypedArrayPrototype;
          if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
        }

        var $nativeIterator = TypedArrayPrototype[ITERATOR];
        var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
        var $iterator = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
          dP(TypedArrayPrototype, TAG, {
            get: function get() {
              return NAME;
            }
          });
        }

        O[NAME] = TypedArray;
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
        $export($export.S, NAME, {
          BYTES_PER_ELEMENT: BYTES
        });
        $export($export.S + $export.F * fails(function () {
          Base.of.call(TypedArray, 1);
        }), NAME, {
          from: $from,
          of: $of
        });
        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
        $export($export.P, NAME, proto);
        setSpecies(NAME);
        $export($export.P + $export.F * FORCED_SET, NAME, {
          set: $set
        });
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
        $export($export.P + $export.F * fails(function () {
          new TypedArray(1).slice();
        }), NAME, {
          slice: $slice
        });
        $export($export.P + $export.F * (fails(function () {
          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
        }) || !fails(function () {
          TypedArrayPrototype.toLocaleString.call([1, 2]);
        })), NAME, {
          toLocaleString: $toLocaleString
        });
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
      };
    } else module.exports = function () {
      /* empty */
    };
  }, {
    "./_an-instance": 135,
    "./_array-copy-within": 137,
    "./_array-fill": 138,
    "./_array-includes": 140,
    "./_array-methods": 141,
    "./_classof": 146,
    "./_ctx": 154,
    "./_descriptors": 158,
    "./_export": 162,
    "./_fails": 164,
    "./_global": 169,
    "./_has": 170,
    "./_hide": 171,
    "./_is-array-iter": 177,
    "./_is-object": 180,
    "./_iter-detect": 185,
    "./_iterators": 187,
    "./_library": 188,
    "./_object-create": 199,
    "./_object-dp": 200,
    "./_object-gopd": 203,
    "./_object-gopn": 205,
    "./_object-gpo": 207,
    "./_property-desc": 218,
    "./_redefine-all": 219,
    "./_set-species": 228,
    "./_species-constructor": 232,
    "./_to-absolute-index": 242,
    "./_to-index": 243,
    "./_to-integer": 244,
    "./_to-length": 246,
    "./_to-object": 247,
    "./_to-primitive": 248,
    "./_typed": 251,
    "./_typed-buffer": 250,
    "./_uid": 252,
    "./_wks": 257,
    "./core.get-iterator-method": 258,
    "./es6.array.iterator": 270
  }],
  250: [function (require, module, exports) {
    'use strict';

    var global = require('./_global');

    var DESCRIPTORS = require('./_descriptors');

    var LIBRARY = require('./_library');

    var $typed = require('./_typed');

    var hide = require('./_hide');

    var redefineAll = require('./_redefine-all');

    var fails = require('./_fails');

    var anInstance = require('./_an-instance');

    var toInteger = require('./_to-integer');

    var toLength = require('./_to-length');

    var toIndex = require('./_to-index');

    var gOPN = require('./_object-gopn').f;

    var dP = require('./_object-dp').f;

    var arrayFill = require('./_array-fill');

    var setToStringTag = require('./_set-to-string-tag');

    var ARRAY_BUFFER = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE = 'prototype';
    var WRONG_LENGTH = 'Wrong length!';
    var WRONG_INDEX = 'Wrong index!';
    var $ArrayBuffer = global[ARRAY_BUFFER];
    var $DataView = global[DATA_VIEW];
    var Math = global.Math;
    var RangeError = global.RangeError; // eslint-disable-next-line no-shadow-restricted-names

    var Infinity = global.Infinity;
    var BaseBuffer = $ArrayBuffer;
    var abs = Math.abs;
    var pow = Math.pow;
    var floor = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;
    var BUFFER = 'buffer';
    var BYTE_LENGTH = 'byteLength';
    var BYTE_OFFSET = 'byteOffset';
    var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
    var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
    var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET; // IEEE754 conversions based on https://github.com/feross/ieee754

    function packIEEE754(value, mLen, nBytes) {
      var buffer = new Array(nBytes);
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
      var i = 0;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      var e, m, c;
      value = abs(value); // eslint-disable-next-line no-self-compare

      if (value != value || value === Infinity) {
        // eslint-disable-next-line no-self-compare
        m = value != value ? 1 : 0;
        e = eMax;
      } else {
        e = floor(log(value) / LN2);

        if (value * (c = pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {
        ;
      }

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {
        ;
      }

      buffer[--i] |= s * 128;
      return buffer;
    }

    function unpackIEEE754(buffer, mLen, nBytes) {
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = eLen - 7;
      var i = nBytes - 1;
      var s = buffer[i--];
      var e = s & 127;
      var m;
      s >>= 7;

      for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {
        ;
      }

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {
        ;
      }

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * pow(2, e - mLen);
    }

    function unpackI32(bytes) {
      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
    }

    function packI8(it) {
      return [it & 0xff];
    }

    function packI16(it) {
      return [it & 0xff, it >> 8 & 0xff];
    }

    function packI32(it) {
      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
    }

    function packF64(it) {
      return packIEEE754(it, 52, 8);
    }

    function packF32(it) {
      return packIEEE754(it, 23, 4);
    }

    function addGetter(C, key, internal) {
      dP(C[PROTOTYPE], key, {
        get: function get() {
          return this[internal];
        }
      });
    }

    function get(view, bytes, index, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = store.slice(start, start + bytes);
      return isLittleEndian ? pack : pack.reverse();
    }

    function set(view, bytes, index, conversion, value, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = conversion(+value);

      for (var i = 0; i < bytes; i++) {
        store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
      }
    }

    if (!$typed.ABV) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = toIndex(length);
        this._b = arrayFill.call(new Array(byteLength), 0);
        this[$LENGTH] = byteLength;
      };

      $DataView = function DataView(buffer, byteOffset, byteLength) {
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH];
        var offset = toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
      };

      if (DESCRIPTORS) {
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
      }

      redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset
        /* , littleEndian */
        ) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset
        /* , littleEndian */
        ) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset
        /* , littleEndian */
        ) {
          return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset
        /* , littleEndian */
        ) {
          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset
        /* , littleEndian */
        ) {
          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset
        /* , littleEndian */
        ) {
          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value
        /* , littleEndian */
        ) {
          set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
      });
    } else {
      if (!fails(function () {
        $ArrayBuffer(1);
      }) || !fails(function () {
        new $ArrayBuffer(-1); // eslint-disable-line no-new
      }) || fails(function () {
        new $ArrayBuffer(); // eslint-disable-line no-new

        new $ArrayBuffer(1.5); // eslint-disable-line no-new

        new $ArrayBuffer(NaN); // eslint-disable-line no-new

        return $ArrayBuffer.name != ARRAY_BUFFER;
      })) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer);
          return new BaseBuffer(toIndex(length));
        };

        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];

        for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
          if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
        }

        if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
      } // iOS Safari 7.x bug


      var view = new $DataView(new $ArrayBuffer(2));
      var $setInt8 = $DataView[PROTOTYPE].setInt8;
      view.setInt8(0, 2147483648);
      view.setInt8(1, 2147483649);
      if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
      }, true);
    }

    setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    setToStringTag($DataView, DATA_VIEW);
    hide($DataView[PROTOTYPE], $typed.VIEW, true);
    exports[ARRAY_BUFFER] = $ArrayBuffer;
    exports[DATA_VIEW] = $DataView;
  }, {
    "./_an-instance": 135,
    "./_array-fill": 138,
    "./_descriptors": 158,
    "./_fails": 164,
    "./_global": 169,
    "./_hide": 171,
    "./_library": 188,
    "./_object-dp": 200,
    "./_object-gopn": 205,
    "./_redefine-all": 219,
    "./_set-to-string-tag": 229,
    "./_to-index": 243,
    "./_to-integer": 244,
    "./_to-length": 246,
    "./_typed": 251
  }],
  251: [function (require, module, exports) {
    var global = require('./_global');

    var hide = require('./_hide');

    var uid = require('./_uid');

    var TYPED = uid('typed_array');
    var VIEW = uid('view');
    var ABV = !!(global.ArrayBuffer && global.DataView);
    var CONSTR = ABV;
    var i = 0;
    var l = 9;
    var Typed;
    var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

    while (i < l) {
      if (Typed = global[TypedArrayConstructors[i++]]) {
        hide(Typed.prototype, TYPED, true);
        hide(Typed.prototype, VIEW, true);
      } else CONSTR = false;
    }

    module.exports = {
      ABV: ABV,
      CONSTR: CONSTR,
      TYPED: TYPED,
      VIEW: VIEW
    };
  }, {
    "./_global": 169,
    "./_hide": 171,
    "./_uid": 252
  }],
  252: [function (require, module, exports) {
    var id = 0;
    var px = Math.random();

    module.exports = function (key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };
  }, {}],
  253: [function (require, module, exports) {
    var global = require('./_global');

    var navigator = global.navigator;
    module.exports = navigator && navigator.userAgent || '';
  }, {
    "./_global": 169
  }],
  254: [function (require, module, exports) {
    var isObject = require('./_is-object');

    module.exports = function (it, TYPE) {
      if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
      return it;
    };
  }, {
    "./_is-object": 180
  }],
  255: [function (require, module, exports) {
    var global = require('./_global');

    var core = require('./_core');

    var LIBRARY = require('./_library');

    var wksExt = require('./_wks-ext');

    var defineProperty = require('./_object-dp').f;

    module.exports = function (name) {
      var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
      if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
        value: wksExt.f(name)
      });
    };
  }, {
    "./_core": 152,
    "./_global": 169,
    "./_library": 188,
    "./_object-dp": 200,
    "./_wks-ext": 256
  }],
  256: [function (require, module, exports) {
    exports.f = require('./_wks');
  }, {
    "./_wks": 257
  }],
  257: [function (require, module, exports) {
    var store = require('./_shared')('wks');

    var uid = require('./_uid');

    var _Symbol3 = require('./_global').Symbol;

    var USE_SYMBOL = typeof _Symbol3 == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] = USE_SYMBOL && _Symbol3[name] || (USE_SYMBOL ? _Symbol3 : uid)('Symbol.' + name));
    };

    $exports.store = store;
  }, {
    "./_global": 169,
    "./_shared": 231,
    "./_uid": 252
  }],
  258: [function (require, module, exports) {
    var classof = require('./_classof');

    var ITERATOR = require('./_wks')('iterator');

    var Iterators = require('./_iterators');

    module.exports = require('./_core').getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
    };
  }, {
    "./_classof": 146,
    "./_core": 152,
    "./_iterators": 187,
    "./_wks": 257
  }],
  259: [function (require, module, exports) {
    // https://github.com/benjamingr/RexExp.escape
    var $export = require('./_export');

    var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

    $export($export.S, 'RegExp', {
      escape: function escape(it) {
        return $re(it);
      }
    });
  }, {
    "./_export": 162,
    "./_replacer": 223
  }],
  260: [function (require, module, exports) {
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    var $export = require('./_export');

    $export($export.P, 'Array', {
      copyWithin: require('./_array-copy-within')
    });

    require('./_add-to-unscopables')('copyWithin');
  }, {
    "./_add-to-unscopables": 133,
    "./_array-copy-within": 137,
    "./_export": 162
  }],
  261: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $every = require('./_array-methods')(4);

    $export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
      // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
      every: function every(callbackfn
      /* , thisArg */
      ) {
        return $every(this, callbackfn, arguments[1]);
      }
    });
  }, {
    "./_array-methods": 141,
    "./_export": 162,
    "./_strict-method": 233
  }],
  262: [function (require, module, exports) {
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    var $export = require('./_export');

    $export($export.P, 'Array', {
      fill: require('./_array-fill')
    });

    require('./_add-to-unscopables')('fill');
  }, {
    "./_add-to-unscopables": 133,
    "./_array-fill": 138,
    "./_export": 162
  }],
  263: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $filter = require('./_array-methods')(2);

    $export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
      // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
      filter: function filter(callbackfn
      /* , thisArg */
      ) {
        return $filter(this, callbackfn, arguments[1]);
      }
    });
  }, {
    "./_array-methods": 141,
    "./_export": 162,
    "./_strict-method": 233
  }],
  264: [function (require, module, exports) {
    'use strict'; // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

    var $export = require('./_export');

    var $find = require('./_array-methods')(6);

    var KEY = 'findIndex';
    var forced = true; // Shouldn't skip holes

    if (KEY in []) Array(1)[KEY](function () {
      forced = false;
    });
    $export($export.P + $export.F * forced, 'Array', {
      findIndex: function findIndex(callbackfn
      /* , that = undefined */
      ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });

    require('./_add-to-unscopables')(KEY);
  }, {
    "./_add-to-unscopables": 133,
    "./_array-methods": 141,
    "./_export": 162
  }],
  265: [function (require, module, exports) {
    'use strict'; // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

    var $export = require('./_export');

    var $find = require('./_array-methods')(5);

    var KEY = 'find';
    var forced = true; // Shouldn't skip holes

    if (KEY in []) Array(1)[KEY](function () {
      forced = false;
    });
    $export($export.P + $export.F * forced, 'Array', {
      find: function find(callbackfn
      /* , that = undefined */
      ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });

    require('./_add-to-unscopables')(KEY);
  }, {
    "./_add-to-unscopables": 133,
    "./_array-methods": 141,
    "./_export": 162
  }],
  266: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $forEach = require('./_array-methods')(0);

    var STRICT = require('./_strict-method')([].forEach, true);

    $export($export.P + $export.F * !STRICT, 'Array', {
      // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
      forEach: function forEach(callbackfn
      /* , thisArg */
      ) {
        return $forEach(this, callbackfn, arguments[1]);
      }
    });
  }, {
    "./_array-methods": 141,
    "./_export": 162,
    "./_strict-method": 233
  }],
  267: [function (require, module, exports) {
    'use strict';

    var ctx = require('./_ctx');

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var call = require('./_iter-call');

    var isArrayIter = require('./_is-array-iter');

    var toLength = require('./_to-length');

    var createProperty = require('./_create-property');

    var getIterFn = require('./core.get-iterator-method');

    $export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
      Array.from(iter);
    }), 'Array', {
      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
      from: function from(arrayLike
      /* , mapfn = undefined, thisArg = undefined */
      ) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var index = 0;
        var iterFn = getIterFn(O);
        var length, result, step, iterator;
        if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

        if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
          }
        } else {
          length = toLength(O.length);

          for (result = new C(length); length > index; index++) {
            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
          }
        }

        result.length = index;
        return result;
      }
    });
  }, {
    "./_create-property": 153,
    "./_ctx": 154,
    "./_export": 162,
    "./_is-array-iter": 177,
    "./_iter-call": 182,
    "./_iter-detect": 185,
    "./_to-length": 246,
    "./_to-object": 247,
    "./core.get-iterator-method": 258
  }],
  268: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $indexOf = require('./_array-includes')(false);

    var $native = [].indexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
    $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
      // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
      indexOf: function indexOf(searchElement
      /* , fromIndex = 0 */
      ) {
        return NEGATIVE_ZERO // convert -0 to +0
        ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
      }
    });
  }, {
    "./_array-includes": 140,
    "./_export": 162,
    "./_strict-method": 233
  }],
  269: [function (require, module, exports) {
    // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
    var $export = require('./_export');

    $export($export.S, 'Array', {
      isArray: require('./_is-array')
    });
  }, {
    "./_export": 162,
    "./_is-array": 178
  }],
  270: [function (require, module, exports) {
    'use strict';

    var addToUnscopables = require('./_add-to-unscopables');

    var step = require('./_iter-step');

    var Iterators = require('./_iterators');

    var toIObject = require('./_to-iobject'); // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()


    module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
      this._t = toIObject(iterated); // target

      this._i = 0; // next index

      this._k = kind; // kind
      // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;

      if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
      }

      if (kind == 'keys') return step(0, index);
      if (kind == 'values') return step(0, O[index]);
      return step(0, [index, O[index]]);
    }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

    Iterators.Arguments = Iterators.Array;
    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');
  }, {
    "./_add-to-unscopables": 133,
    "./_iter-define": 184,
    "./_iter-step": 186,
    "./_iterators": 187,
    "./_to-iobject": 245
  }],
  271: [function (require, module, exports) {
    'use strict'; // 22.1.3.13 Array.prototype.join(separator)

    var $export = require('./_export');

    var toIObject = require('./_to-iobject');

    var arrayJoin = [].join; // fallback for not array-like strings

    $export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
      join: function join(separator) {
        return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
      }
    });
  }, {
    "./_export": 162,
    "./_iobject": 176,
    "./_strict-method": 233,
    "./_to-iobject": 245
  }],
  272: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toIObject = require('./_to-iobject');

    var toInteger = require('./_to-integer');

    var toLength = require('./_to-length');

    var $native = [].lastIndexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
    $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
      // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
      lastIndexOf: function lastIndexOf(searchElement
      /* , fromIndex = @[*-1] */
      ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
        var O = toIObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;

        for (; index >= 0; index--) {
          if (index in O) if (O[index] === searchElement) return index || 0;
        }

        return -1;
      }
    });
  }, {
    "./_export": 162,
    "./_strict-method": 233,
    "./_to-integer": 244,
    "./_to-iobject": 245,
    "./_to-length": 246
  }],
  273: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $map = require('./_array-methods')(1);

    $export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
      // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
      map: function map(callbackfn
      /* , thisArg */
      ) {
        return $map(this, callbackfn, arguments[1]);
      }
    });
  }, {
    "./_array-methods": 141,
    "./_export": 162,
    "./_strict-method": 233
  }],
  274: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var createProperty = require('./_create-property'); // WebKit Array.of isn't generic


    $export($export.S + $export.F * require('./_fails')(function () {
      function F() {
        /* empty */
      }

      return !(Array.of.call(F) instanceof F);
    }), 'Array', {
      // 22.1.2.3 Array.of( ...items)
      of: function of()
      /* ...args */
      {
        var index = 0;
        var aLen = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(aLen);

        while (aLen > index) {
          createProperty(result, index, arguments[index++]);
        }

        result.length = aLen;
        return result;
      }
    });
  }, {
    "./_create-property": 153,
    "./_export": 162,
    "./_fails": 164
  }],
  275: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $reduce = require('./_array-reduce');

    $export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
      // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
      reduceRight: function reduceRight(callbackfn
      /* , initialValue */
      ) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], true);
      }
    });
  }, {
    "./_array-reduce": 142,
    "./_export": 162,
    "./_strict-method": 233
  }],
  276: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $reduce = require('./_array-reduce');

    $export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
      // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
      reduce: function reduce(callbackfn
      /* , initialValue */
      ) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], false);
      }
    });
  }, {
    "./_array-reduce": 142,
    "./_export": 162,
    "./_strict-method": 233
  }],
  277: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var html = require('./_html');

    var cof = require('./_cof');

    var toAbsoluteIndex = require('./_to-absolute-index');

    var toLength = require('./_to-length');

    var arraySlice = [].slice; // fallback for not array-like ES3 strings and DOM objects

    $export($export.P + $export.F * require('./_fails')(function () {
      if (html) arraySlice.call(html);
    }), 'Array', {
      slice: function slice(begin, end) {
        var len = toLength(this.length);
        var klass = cof(this);
        end = end === undefined ? len : end;
        if (klass == 'Array') return arraySlice.call(this, begin, end);
        var start = toAbsoluteIndex(begin, len);
        var upTo = toAbsoluteIndex(end, len);
        var size = toLength(upTo - start);
        var cloned = new Array(size);
        var i = 0;

        for (; i < size; i++) {
          cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
        }

        return cloned;
      }
    });
  }, {
    "./_cof": 147,
    "./_export": 162,
    "./_fails": 164,
    "./_html": 172,
    "./_to-absolute-index": 242,
    "./_to-length": 246
  }],
  278: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $some = require('./_array-methods')(3);

    $export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
      // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
      some: function some(callbackfn
      /* , thisArg */
      ) {
        return $some(this, callbackfn, arguments[1]);
      }
    });
  }, {
    "./_array-methods": 141,
    "./_export": 162,
    "./_strict-method": 233
  }],
  279: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var aFunction = require('./_a-function');

    var toObject = require('./_to-object');

    var fails = require('./_fails');

    var $sort = [].sort;
    var test = [1, 2, 3];
    $export($export.P + $export.F * (fails(function () {
      // IE8-
      test.sort(undefined);
    }) || !fails(function () {
      // V8 bug
      test.sort(null); // Old WebKit
    }) || !require('./_strict-method')($sort)), 'Array', {
      // 22.1.3.25 Array.prototype.sort(comparefn)
      sort: function sort(comparefn) {
        return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
      }
    });
  }, {
    "./_a-function": 131,
    "./_export": 162,
    "./_fails": 164,
    "./_strict-method": 233,
    "./_to-object": 247
  }],
  280: [function (require, module, exports) {
    require('./_set-species')('Array');
  }, {
    "./_set-species": 228
  }],
  281: [function (require, module, exports) {
    // 20.3.3.1 / 15.9.4.4 Date.now()
    var $export = require('./_export');

    $export($export.S, 'Date', {
      now: function now() {
        return new Date().getTime();
      }
    });
  }, {
    "./_export": 162
  }],
  282: [function (require, module, exports) {
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var $export = require('./_export');

    var toISOString = require('./_date-to-iso-string'); // PhantomJS / old WebKit has a broken implementations


    $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
      toISOString: toISOString
    });
  }, {
    "./_date-to-iso-string": 155,
    "./_export": 162
  }],
  283: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var toPrimitive = require('./_to-primitive');

    $export($export.P + $export.F * require('./_fails')(function () {
      return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
        toISOString: function toISOString() {
          return 1;
        }
      }) !== 1;
    }), 'Date', {
      // eslint-disable-next-line no-unused-vars
      toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
      }
    });
  }, {
    "./_export": 162,
    "./_fails": 164,
    "./_to-object": 247,
    "./_to-primitive": 248
  }],
  284: [function (require, module, exports) {
    var TO_PRIMITIVE = require('./_wks')('toPrimitive');

    var proto = Date.prototype;
    if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
  }, {
    "./_date-to-primitive": 156,
    "./_hide": 171,
    "./_wks": 257
  }],
  285: [function (require, module, exports) {
    var DateProto = Date.prototype;
    var INVALID_DATE = 'Invalid Date';
    var TO_STRING = 'toString';
    var $toString = DateProto[TO_STRING];
    var getTime = DateProto.getTime;

    if (new Date(NaN) + '' != INVALID_DATE) {
      require('./_redefine')(DateProto, TO_STRING, function toString() {
        var value = getTime.call(this); // eslint-disable-next-line no-self-compare

        return value === value ? $toString.call(this) : INVALID_DATE;
      });
    }
  }, {
    "./_redefine": 220
  }],
  286: [function (require, module, exports) {
    // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
    var $export = require('./_export');

    $export($export.P, 'Function', {
      bind: require('./_bind')
    });
  }, {
    "./_bind": 145,
    "./_export": 162
  }],
  287: [function (require, module, exports) {
    'use strict';

    var isObject = require('./_is-object');

    var getPrototypeOf = require('./_object-gpo');

    var HAS_INSTANCE = require('./_wks')('hasInstance');

    var FunctionProto = Function.prototype; // 19.2.3.6 Function.prototype[@@hasInstance](V)

    if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {
      value: function value(O) {
        if (typeof this != 'function' || !isObject(O)) return false;
        if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

        while (O = getPrototypeOf(O)) {
          if (this.prototype === O) return true;
        }

        return false;
      }
    });
  }, {
    "./_is-object": 180,
    "./_object-dp": 200,
    "./_object-gpo": 207,
    "./_wks": 257
  }],
  288: [function (require, module, exports) {
    var dP = require('./_object-dp').f;

    var FProto = Function.prototype;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME = 'name'; // 19.2.4.2 name

    NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
      configurable: true,
      get: function get() {
        try {
          return ('' + this).match(nameRE)[1];
        } catch (e) {
          return '';
        }
      }
    });
  }, {
    "./_descriptors": 158,
    "./_object-dp": 200
  }],
  289: [function (require, module, exports) {
    'use strict';

    var strong = require('./_collection-strong');

    var validate = require('./_validate-collection');

    var MAP = 'Map'; // 23.1 Map Objects

    module.exports = require('./_collection')(MAP, function (get) {
      return function Map() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    }, {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = strong.getEntry(validate(this, MAP), key);
        return entry && entry.v;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
      }
    }, strong, true);
  }, {
    "./_collection": 151,
    "./_collection-strong": 148,
    "./_validate-collection": 254
  }],
  290: [function (require, module, exports) {
    // 20.2.2.3 Math.acosh(x)
    var $export = require('./_export');

    var log1p = require('./_math-log1p');

    var sqrt = Math.sqrt;
    var $acosh = Math.acosh;
    $export($export.S + $export.F * !($acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
    && Math.floor($acosh(Number.MAX_VALUE)) == 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
    && $acosh(Infinity) == Infinity), 'Math', {
      acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });
  }, {
    "./_export": 162,
    "./_math-log1p": 191
  }],
  291: [function (require, module, exports) {
    // 20.2.2.5 Math.asinh(x)
    var $export = require('./_export');

    var $asinh = Math.asinh;

    function asinh(x) {
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
    } // Tor Browser bug: Math.asinh(0) -> -0


    $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
      asinh: asinh
    });
  }, {
    "./_export": 162
  }],
  292: [function (require, module, exports) {
    // 20.2.2.7 Math.atanh(x)
    var $export = require('./_export');

    var $atanh = Math.atanh; // Tor Browser bug: Math.atanh(-0) -> 0

    $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
      atanh: function atanh(x) {
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
      }
    });
  }, {
    "./_export": 162
  }],
  293: [function (require, module, exports) {
    // 20.2.2.9 Math.cbrt(x)
    var $export = require('./_export');

    var sign = require('./_math-sign');

    $export($export.S, 'Math', {
      cbrt: function cbrt(x) {
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
      }
    });
  }, {
    "./_export": 162,
    "./_math-sign": 193
  }],
  294: [function (require, module, exports) {
    // 20.2.2.11 Math.clz32(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
      }
    });
  }, {
    "./_export": 162
  }],
  295: [function (require, module, exports) {
    // 20.2.2.12 Math.cosh(x)
    var $export = require('./_export');

    var exp = Math.exp;
    $export($export.S, 'Math', {
      cosh: function cosh(x) {
        return (exp(x = +x) + exp(-x)) / 2;
      }
    });
  }, {
    "./_export": 162
  }],
  296: [function (require, module, exports) {
    // 20.2.2.14 Math.expm1(x)
    var $export = require('./_export');

    var $expm1 = require('./_math-expm1');

    $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
      expm1: $expm1
    });
  }, {
    "./_export": 162,
    "./_math-expm1": 189
  }],
  297: [function (require, module, exports) {
    // 20.2.2.16 Math.fround(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      fround: require('./_math-fround')
    });
  }, {
    "./_export": 162,
    "./_math-fround": 190
  }],
  298: [function (require, module, exports) {
    // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
    var $export = require('./_export');

    var abs = Math.abs;
    $export($export.S, 'Math', {
      hypot: function hypot(value1, value2) {
        // eslint-disable-line no-unused-vars
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;

        while (i < aLen) {
          arg = abs(arguments[i++]);

          if (larg < arg) {
            div = larg / arg;
            sum = sum * div * div + 1;
            larg = arg;
          } else if (arg > 0) {
            div = arg / larg;
            sum += div * div;
          } else sum += arg;
        }

        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
      }
    });
  }, {
    "./_export": 162
  }],
  299: [function (require, module, exports) {
    // 20.2.2.18 Math.imul(x, y)
    var $export = require('./_export');

    var $imul = Math.imul; // some WebKit versions fails with big numbers, some has wrong arity

    $export($export.S + $export.F * require('./_fails')(function () {
      return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
    }), 'Math', {
      imul: function imul(x, y) {
        var UINT16 = 0xffff;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });
  }, {
    "./_export": 162,
    "./_fails": 164
  }],
  300: [function (require, module, exports) {
    // 20.2.2.21 Math.log10(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      log10: function log10(x) {
        return Math.log(x) * Math.LOG10E;
      }
    });
  }, {
    "./_export": 162
  }],
  301: [function (require, module, exports) {
    // 20.2.2.20 Math.log1p(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      log1p: require('./_math-log1p')
    });
  }, {
    "./_export": 162,
    "./_math-log1p": 191
  }],
  302: [function (require, module, exports) {
    // 20.2.2.22 Math.log2(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      log2: function log2(x) {
        return Math.log(x) / Math.LN2;
      }
    });
  }, {
    "./_export": 162
  }],
  303: [function (require, module, exports) {
    // 20.2.2.28 Math.sign(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      sign: require('./_math-sign')
    });
  }, {
    "./_export": 162,
    "./_math-sign": 193
  }],
  304: [function (require, module, exports) {
    // 20.2.2.30 Math.sinh(x)
    var $export = require('./_export');

    var expm1 = require('./_math-expm1');

    var exp = Math.exp; // V8 near Chromium 38 has a problem with very small numbers

    $export($export.S + $export.F * require('./_fails')(function () {
      return !Math.sinh(-2e-17) != -2e-17;
    }), 'Math', {
      sinh: function sinh(x) {
        return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
      }
    });
  }, {
    "./_export": 162,
    "./_fails": 164,
    "./_math-expm1": 189
  }],
  305: [function (require, module, exports) {
    // 20.2.2.33 Math.tanh(x)
    var $export = require('./_export');

    var expm1 = require('./_math-expm1');

    var exp = Math.exp;
    $export($export.S, 'Math', {
      tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });
  }, {
    "./_export": 162,
    "./_math-expm1": 189
  }],
  306: [function (require, module, exports) {
    // 20.2.2.34 Math.trunc(x)
    var $export = require('./_export');

    $export($export.S, 'Math', {
      trunc: function trunc(it) {
        return (it > 0 ? Math.floor : Math.ceil)(it);
      }
    });
  }, {
    "./_export": 162
  }],
  307: [function (require, module, exports) {
    'use strict';

    var global = require('./_global');

    var has = require('./_has');

    var cof = require('./_cof');

    var inheritIfRequired = require('./_inherit-if-required');

    var toPrimitive = require('./_to-primitive');

    var fails = require('./_fails');

    var gOPN = require('./_object-gopn').f;

    var gOPD = require('./_object-gopd').f;

    var dP = require('./_object-dp').f;

    var $trim = require('./_string-trim').trim;

    var NUMBER = 'Number';
    var $Number = global[NUMBER];
    var Base = $Number;
    var proto = $Number.prototype; // Opera ~12 has broken Object#toString

    var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
    var TRIM = 'trim' in String.prototype; // 7.1.3 ToNumber(argument)

    var toNumber = function toNumber(argument) {
      var it = toPrimitive(argument, false);

      if (typeof it == 'string' && it.length > 2) {
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0);
        var third, radix, maxCode;

        if (first === 43 || first === 45) {
          third = it.charCodeAt(2);
          if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
          switch (it.charCodeAt(1)) {
            case 66:
            case 98:
              radix = 2;
              maxCode = 49;
              break;
            // fast equal /^0b[01]+$/i

            case 79:
            case 111:
              radix = 8;
              maxCode = 55;
              break;
            // fast equal /^0o[0-7]+$/i

            default:
              return +it;
          }

          for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
            code = digits.charCodeAt(i); // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols

            if (code < 48 || code > maxCode) return NaN;
          }

          return parseInt(digits, radix);
        }
      }

      return +it;
    };

    if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
      $Number = function Number(value) {
        var it = arguments.length < 1 ? 0 : value;
        var that = this;
        return that instanceof $Number // check on 1..constructor(foo) case
        && (BROKEN_COF ? fails(function () {
          proto.valueOf.call(that);
        }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
      };

      for (var keys = require('./_descriptors') ? gOPN(Base) : ( // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES6 (in case, if modules with ES6 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
        if (has(Base, key = keys[j]) && !has($Number, key)) {
          dP($Number, key, gOPD(Base, key));
        }
      }

      $Number.prototype = proto;
      proto.constructor = $Number;

      require('./_redefine')(global, NUMBER, $Number);
    }
  }, {
    "./_cof": 147,
    "./_descriptors": 158,
    "./_fails": 164,
    "./_global": 169,
    "./_has": 170,
    "./_inherit-if-required": 174,
    "./_object-create": 199,
    "./_object-dp": 200,
    "./_object-gopd": 203,
    "./_object-gopn": 205,
    "./_redefine": 220,
    "./_string-trim": 239,
    "./_to-primitive": 248
  }],
  308: [function (require, module, exports) {
    // 20.1.2.1 Number.EPSILON
    var $export = require('./_export');

    $export($export.S, 'Number', {
      EPSILON: Math.pow(2, -52)
    });
  }, {
    "./_export": 162
  }],
  309: [function (require, module, exports) {
    // 20.1.2.2 Number.isFinite(number)
    var $export = require('./_export');

    var _isFinite = require('./_global').isFinite;

    $export($export.S, 'Number', {
      isFinite: function isFinite(it) {
        return typeof it == 'number' && _isFinite(it);
      }
    });
  }, {
    "./_export": 162,
    "./_global": 169
  }],
  310: [function (require, module, exports) {
    // 20.1.2.3 Number.isInteger(number)
    var $export = require('./_export');

    $export($export.S, 'Number', {
      isInteger: require('./_is-integer')
    });
  }, {
    "./_export": 162,
    "./_is-integer": 179
  }],
  311: [function (require, module, exports) {
    // 20.1.2.4 Number.isNaN(number)
    var $export = require('./_export');

    $export($export.S, 'Number', {
      isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare
        return number != number;
      }
    });
  }, {
    "./_export": 162
  }],
  312: [function (require, module, exports) {
    // 20.1.2.5 Number.isSafeInteger(number)
    var $export = require('./_export');

    var isInteger = require('./_is-integer');

    var abs = Math.abs;
    $export($export.S, 'Number', {
      isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 0x1fffffffffffff;
      }
    });
  }, {
    "./_export": 162,
    "./_is-integer": 179
  }],
  313: [function (require, module, exports) {
    // 20.1.2.6 Number.MAX_SAFE_INTEGER
    var $export = require('./_export');

    $export($export.S, 'Number', {
      MAX_SAFE_INTEGER: 0x1fffffffffffff
    });
  }, {
    "./_export": 162
  }],
  314: [function (require, module, exports) {
    // 20.1.2.10 Number.MIN_SAFE_INTEGER
    var $export = require('./_export');

    $export($export.S, 'Number', {
      MIN_SAFE_INTEGER: -0x1fffffffffffff
    });
  }, {
    "./_export": 162
  }],
  315: [function (require, module, exports) {
    var $export = require('./_export');

    var $parseFloat = require('./_parse-float'); // 20.1.2.12 Number.parseFloat(string)


    $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
      parseFloat: $parseFloat
    });
  }, {
    "./_export": 162,
    "./_parse-float": 214
  }],
  316: [function (require, module, exports) {
    var $export = require('./_export');

    var $parseInt = require('./_parse-int'); // 20.1.2.13 Number.parseInt(string, radix)


    $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
      parseInt: $parseInt
    });
  }, {
    "./_export": 162,
    "./_parse-int": 215
  }],
  317: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toInteger = require('./_to-integer');

    var aNumberValue = require('./_a-number-value');

    var repeat = require('./_string-repeat');

    var $toFixed = 1.0.toFixed;
    var floor = Math.floor;
    var data = [0, 0, 0, 0, 0, 0];
    var ERROR = 'Number.toFixed: incorrect invocation!';
    var ZERO = '0';

    var multiply = function multiply(n, c) {
      var i = -1;
      var c2 = c;

      while (++i < 6) {
        c2 += n * data[i];
        data[i] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function divide(n) {
      var i = 6;
      var c = 0;

      while (--i >= 0) {
        c += data[i];
        data[i] = floor(c / n);
        c = c % n * 1e7;
      }
    };

    var numToString = function numToString() {
      var i = 6;
      var s = '';

      while (--i >= 0) {
        if (s !== '' || i === 0 || data[i] !== 0) {
          var t = String(data[i]);
          s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
        }
      }

      return s;
    };

    var pow = function pow(x, n, acc) {
      return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
    };

    var log = function log(x) {
      var n = 0;
      var x2 = x;

      while (x2 >= 4096) {
        n += 12;
        x2 /= 4096;
      }

      while (x2 >= 2) {
        n += 1;
        x2 /= 2;
      }

      return n;
    };

    $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !require('./_fails')(function () {
      // V8 ~ Android 4.3-
      $toFixed.call({});
    })), 'Number', {
      toFixed: function toFixed(fractionDigits) {
        var x = aNumberValue(this, ERROR);
        var f = toInteger(fractionDigits);
        var s = '';
        var m = ZERO;
        var e, z, j, k;
        if (f < 0 || f > 20) throw RangeError(ERROR); // eslint-disable-next-line no-self-compare

        if (x != x) return 'NaN';
        if (x <= -1e21 || x >= 1e21) return String(x);

        if (x < 0) {
          s = '-';
          x = -x;
        }

        if (x > 1e-21) {
          e = log(x * pow(2, 69, 1)) - 69;
          z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
          z *= 0x10000000000000;
          e = 52 - e;

          if (e > 0) {
            multiply(0, z);
            j = f;

            while (j >= 7) {
              multiply(1e7, 0);
              j -= 7;
            }

            multiply(pow(10, j, 1), 0);
            j = e - 1;

            while (j >= 23) {
              divide(1 << 23);
              j -= 23;
            }

            divide(1 << j);
            multiply(1, 1);
            divide(2);
            m = numToString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            m = numToString() + repeat.call(ZERO, f);
          }
        }

        if (f > 0) {
          k = m.length;
          m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
        } else {
          m = s + m;
        }

        return m;
      }
    });
  }, {
    "./_a-number-value": 132,
    "./_export": 162,
    "./_fails": 164,
    "./_string-repeat": 238,
    "./_to-integer": 244
  }],
  318: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $fails = require('./_fails');

    var aNumberValue = require('./_a-number-value');

    var $toPrecision = 1.0.toPrecision;
    $export($export.P + $export.F * ($fails(function () {
      // IE7-
      return $toPrecision.call(1, undefined) !== '1';
    }) || !$fails(function () {
      // V8 ~ Android 4.3-
      $toPrecision.call({});
    })), 'Number', {
      toPrecision: function toPrecision(precision) {
        var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
        return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
      }
    });
  }, {
    "./_a-number-value": 132,
    "./_export": 162,
    "./_fails": 164
  }],
  319: [function (require, module, exports) {
    // 19.1.3.1 Object.assign(target, source)
    var $export = require('./_export');

    $export($export.S + $export.F, 'Object', {
      assign: require('./_object-assign')
    });
  }, {
    "./_export": 162,
    "./_object-assign": 198
  }],
  320: [function (require, module, exports) {
    var $export = require('./_export'); // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


    $export($export.S, 'Object', {
      create: require('./_object-create')
    });
  }, {
    "./_export": 162,
    "./_object-create": 199
  }],
  321: [function (require, module, exports) {
    var $export = require('./_export'); // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)


    $export($export.S + $export.F * !require('./_descriptors'), 'Object', {
      defineProperties: require('./_object-dps')
    });
  }, {
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-dps": 201
  }],
  322: [function (require, module, exports) {
    var $export = require('./_export'); // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)


    $export($export.S + $export.F * !require('./_descriptors'), 'Object', {
      defineProperty: require('./_object-dp').f
    });
  }, {
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-dp": 200
  }],
  323: [function (require, module, exports) {
    // 19.1.2.5 Object.freeze(O)
    var isObject = require('./_is-object');

    var meta = require('./_meta').onFreeze;

    require('./_object-sap')('freeze', function ($freeze) {
      return function freeze(it) {
        return $freeze && isObject(it) ? $freeze(meta(it)) : it;
      };
    });
  }, {
    "./_is-object": 180,
    "./_meta": 194,
    "./_object-sap": 211
  }],
  324: [function (require, module, exports) {
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    var toIObject = require('./_to-iobject');

    var $getOwnPropertyDescriptor = require('./_object-gopd').f;

    require('./_object-sap')('getOwnPropertyDescriptor', function () {
      return function getOwnPropertyDescriptor(it, key) {
        return $getOwnPropertyDescriptor(toIObject(it), key);
      };
    });
  }, {
    "./_object-gopd": 203,
    "./_object-sap": 211,
    "./_to-iobject": 245
  }],
  325: [function (require, module, exports) {
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    require('./_object-sap')('getOwnPropertyNames', function () {
      return require('./_object-gopn-ext').f;
    });
  }, {
    "./_object-gopn-ext": 204,
    "./_object-sap": 211
  }],
  326: [function (require, module, exports) {
    // 19.1.2.9 Object.getPrototypeOf(O)
    var toObject = require('./_to-object');

    var $getPrototypeOf = require('./_object-gpo');

    require('./_object-sap')('getPrototypeOf', function () {
      return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
      };
    });
  }, {
    "./_object-gpo": 207,
    "./_object-sap": 211,
    "./_to-object": 247
  }],
  327: [function (require, module, exports) {
    // 19.1.2.11 Object.isExtensible(O)
    var isObject = require('./_is-object');

    require('./_object-sap')('isExtensible', function ($isExtensible) {
      return function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
      };
    });
  }, {
    "./_is-object": 180,
    "./_object-sap": 211
  }],
  328: [function (require, module, exports) {
    // 19.1.2.12 Object.isFrozen(O)
    var isObject = require('./_is-object');

    require('./_object-sap')('isFrozen', function ($isFrozen) {
      return function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
      };
    });
  }, {
    "./_is-object": 180,
    "./_object-sap": 211
  }],
  329: [function (require, module, exports) {
    // 19.1.2.13 Object.isSealed(O)
    var isObject = require('./_is-object');

    require('./_object-sap')('isSealed', function ($isSealed) {
      return function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
      };
    });
  }, {
    "./_is-object": 180,
    "./_object-sap": 211
  }],
  330: [function (require, module, exports) {
    // 19.1.3.10 Object.is(value1, value2)
    var $export = require('./_export');

    $export($export.S, 'Object', {
      is: require('./_same-value')
    });
  }, {
    "./_export": 162,
    "./_same-value": 224
  }],
  331: [function (require, module, exports) {
    // 19.1.2.14 Object.keys(O)
    var toObject = require('./_to-object');

    var $keys = require('./_object-keys');

    require('./_object-sap')('keys', function () {
      return function keys(it) {
        return $keys(toObject(it));
      };
    });
  }, {
    "./_object-keys": 209,
    "./_object-sap": 211,
    "./_to-object": 247
  }],
  332: [function (require, module, exports) {
    // 19.1.2.15 Object.preventExtensions(O)
    var isObject = require('./_is-object');

    var meta = require('./_meta').onFreeze;

    require('./_object-sap')('preventExtensions', function ($preventExtensions) {
      return function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
      };
    });
  }, {
    "./_is-object": 180,
    "./_meta": 194,
    "./_object-sap": 211
  }],
  333: [function (require, module, exports) {
    // 19.1.2.17 Object.seal(O)
    var isObject = require('./_is-object');

    var meta = require('./_meta').onFreeze;

    require('./_object-sap')('seal', function ($seal) {
      return function seal(it) {
        return $seal && isObject(it) ? $seal(meta(it)) : it;
      };
    });
  }, {
    "./_is-object": 180,
    "./_meta": 194,
    "./_object-sap": 211
  }],
  334: [function (require, module, exports) {
    // 19.1.3.19 Object.setPrototypeOf(O, proto)
    var $export = require('./_export');

    $export($export.S, 'Object', {
      setPrototypeOf: require('./_set-proto').set
    });
  }, {
    "./_export": 162,
    "./_set-proto": 227
  }],
  335: [function (require, module, exports) {
    'use strict'; // 19.1.3.6 Object.prototype.toString()

    var classof = require('./_classof');

    var test = {};
    test[require('./_wks')('toStringTag')] = 'z';

    if (test + '' != '[object z]') {
      require('./_redefine')(Object.prototype, 'toString', function toString() {
        return '[object ' + classof(this) + ']';
      }, true);
    }
  }, {
    "./_classof": 146,
    "./_redefine": 220,
    "./_wks": 257
  }],
  336: [function (require, module, exports) {
    var $export = require('./_export');

    var $parseFloat = require('./_parse-float'); // 18.2.4 parseFloat(string)


    $export($export.G + $export.F * (parseFloat != $parseFloat), {
      parseFloat: $parseFloat
    });
  }, {
    "./_export": 162,
    "./_parse-float": 214
  }],
  337: [function (require, module, exports) {
    var $export = require('./_export');

    var $parseInt = require('./_parse-int'); // 18.2.5 parseInt(string, radix)


    $export($export.G + $export.F * (parseInt != $parseInt), {
      parseInt: $parseInt
    });
  }, {
    "./_export": 162,
    "./_parse-int": 215
  }],
  338: [function (require, module, exports) {
    'use strict';

    var LIBRARY = require('./_library');

    var global = require('./_global');

    var ctx = require('./_ctx');

    var classof = require('./_classof');

    var $export = require('./_export');

    var isObject = require('./_is-object');

    var aFunction = require('./_a-function');

    var anInstance = require('./_an-instance');

    var forOf = require('./_for-of');

    var speciesConstructor = require('./_species-constructor');

    var task = require('./_task').set;

    var microtask = require('./_microtask')();

    var newPromiseCapabilityModule = require('./_new-promise-capability');

    var perform = require('./_perform');

    var userAgent = require('./_user-agent');

    var promiseResolve = require('./_promise-resolve');

    var PROMISE = 'Promise';
    var TypeError = global.TypeError;
    var process = global.process;
    var versions = process && process.versions;
    var v8 = versions && versions.v8 || '';
    var $Promise = global[PROMISE];
    var isNode = classof(process) == 'process';

    var empty = function empty() {
      /* empty */
    };

    var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
    var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
    var USE_NATIVE = !!function () {
      try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);

        var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
          exec(empty, empty);
        }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


        return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // we can't detect it synchronously, so just check versions
        && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
      } catch (e) {
        /* empty */
      }
    }(); // helpers

    var isThenable = function isThenable(it) {
      var then;
      return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };

    var notify = function notify(promise, isReject) {
      if (promise._n) return;
      promise._n = true;
      var chain = promise._c;
      microtask(function () {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;

        var run = function run(reaction) {
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then, exited;

          try {
            if (handler) {
              if (!ok) {
                if (promise._h == 2) onHandleUnhandled(promise);
                promise._h = 1;
              }

              if (handler === true) result = value;else {
                if (domain) domain.enter();
                result = handler(value); // may throw

                if (domain) {
                  domain.exit();
                  exited = true;
                }
              }

              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (e) {
            if (domain && !exited) domain.exit();
            reject(e);
          }
        };

        while (chain.length > i) {
          run(chain[i++]);
        } // variable length - can't use forEach


        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
      });
    };

    var onUnhandled = function onUnhandled(promise) {
      task.call(global, function () {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;

        if (unhandled) {
          result = perform(function () {
            if (isNode) {
              process.emit('unhandledRejection', value, promise);
            } else if (handler = global.onunhandledrejection) {
              handler({
                promise: promise,
                reason: value
              });
            } else if ((console = global.console) && console.error) {
              console.error('Unhandled promise rejection', value);
            }
          }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

          promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        }

        promise._a = undefined;
        if (unhandled && result.e) throw result.v;
      });
    };

    var isUnhandled = function isUnhandled(promise) {
      return promise._h !== 1 && (promise._a || promise._c).length === 0;
    };

    var onHandleUnhandled = function onHandleUnhandled(promise) {
      task.call(global, function () {
        var handler;

        if (isNode) {
          process.emit('rejectionHandled', promise);
        } else if (handler = global.onrejectionhandled) {
          handler({
            promise: promise,
            reason: promise._v
          });
        }
      });
    };

    var $reject = function $reject(value) {
      var promise = this;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap

      promise._v = value;
      promise._s = 2;
      if (!promise._a) promise._a = promise._c.slice();
      notify(promise, true);
    };

    var $resolve = function $resolve(value) {
      var promise = this;
      var then;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap

      try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");

        if (then = isThenable(value)) {
          microtask(function () {
            var wrapper = {
              _w: promise,
              _d: false
            }; // wrap

            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          promise._v = value;
          promise._s = 1;
          notify(promise, false);
        }
      } catch (e) {
        $reject.call({
          _w: promise,
          _d: false
        }, e); // wrap
      }
    }; // constructor polyfill


    if (!USE_NATIVE) {
      // 25.4.3.1 Promise(executor)
      $Promise = function Promise(executor) {
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);

        try {
          executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch (err) {
          $reject.call(this, err);
        }
      }; // eslint-disable-next-line no-unused-vars


      Internal = function Promise(executor) {
        this._c = []; // <- awaiting reactions

        this._a = undefined; // <- checked in isUnhandled reactions

        this._s = 0; // <- state

        this._d = false; // <- done

        this._v = undefined; // <- value

        this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

        this._n = false; // <- notify
      };

      Internal.prototype = require('./_redefine-all')($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
          var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          reaction.domain = isNode ? process.domain : undefined;

          this._c.push(reaction);

          if (this._a) this._a.push(reaction);
          if (this._s) notify(this, false);
          return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function _catch(onRejected) {
          return this.then(undefined, onRejected);
        }
      });

      OwnPromiseCapability = function OwnPromiseCapability() {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject = ctx($reject, promise, 1);
      };

      newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
        return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
      };
    }

    $export($export.G + $export.W + $export.F * !USE_NATIVE, {
      Promise: $Promise
    });

    require('./_set-to-string-tag')($Promise, PROMISE);

    require('./_set-species')(PROMISE);

    Wrapper = require('./_core')[PROMISE]; // statics

    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x) {
        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
      }
    });
    $export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
      $Promise.all(iter)['catch'](empty);
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function () {
          var values = [];
          var index = 0;
          var remaining = 1;
          forOf(iterable, false, function (promise) {
            var $index = index++;
            var alreadyCalled = false;
            values.push(undefined);
            remaining++;
            C.resolve(promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[$index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function () {
          forOf(iterable, false, function (promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (result.e) reject(result.v);
        return capability.promise;
      }
    });
  }, {
    "./_a-function": 131,
    "./_an-instance": 135,
    "./_classof": 146,
    "./_core": 152,
    "./_ctx": 154,
    "./_export": 162,
    "./_for-of": 168,
    "./_global": 169,
    "./_is-object": 180,
    "./_iter-detect": 185,
    "./_library": 188,
    "./_microtask": 196,
    "./_new-promise-capability": 197,
    "./_perform": 216,
    "./_promise-resolve": 217,
    "./_redefine-all": 219,
    "./_set-species": 228,
    "./_set-to-string-tag": 229,
    "./_species-constructor": 232,
    "./_task": 241,
    "./_user-agent": 253,
    "./_wks": 257
  }],
  339: [function (require, module, exports) {
    // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
    var $export = require('./_export');

    var aFunction = require('./_a-function');

    var anObject = require('./_an-object');

    var rApply = (require('./_global').Reflect || {}).apply;
    var fApply = Function.apply; // MS Edge argumentsList argument is optional

    $export($export.S + $export.F * !require('./_fails')(function () {
      rApply(function () {
        /* empty */
      });
    }), 'Reflect', {
      apply: function apply(target, thisArgument, argumentsList) {
        var T = aFunction(target);
        var L = anObject(argumentsList);
        return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
      }
    });
  }, {
    "./_a-function": 131,
    "./_an-object": 136,
    "./_export": 162,
    "./_fails": 164,
    "./_global": 169
  }],
  340: [function (require, module, exports) {
    // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
    var $export = require('./_export');

    var create = require('./_object-create');

    var aFunction = require('./_a-function');

    var anObject = require('./_an-object');

    var isObject = require('./_is-object');

    var fails = require('./_fails');

    var bind = require('./_bind');

    var rConstruct = (require('./_global').Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it

    var NEW_TARGET_BUG = fails(function () {
      function F() {
        /* empty */
      }

      return !(rConstruct(function () {
        /* empty */
      }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails(function () {
      rConstruct(function () {
        /* empty */
      });
    });
    $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
      construct: function construct(Target, args
      /* , newTarget */
      ) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

        if (Target == newTarget) {
          // w/o altered newTarget, optimization for 0-4 arguments
          switch (args.length) {
            case 0:
              return new Target();

            case 1:
              return new Target(args[0]);

            case 2:
              return new Target(args[0], args[1]);

            case 3:
              return new Target(args[0], args[1], args[2]);

            case 4:
              return new Target(args[0], args[1], args[2], args[3]);
          } // w/o altered newTarget, lot of arguments case


          var $args = [null];
          $args.push.apply($args, args);
          return new (bind.apply(Target, $args))();
        } // with altered newTarget, not support built-in constructors


        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : Object.prototype);
        var result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
  }, {
    "./_a-function": 131,
    "./_an-object": 136,
    "./_bind": 145,
    "./_export": 162,
    "./_fails": 164,
    "./_global": 169,
    "./_is-object": 180,
    "./_object-create": 199
  }],
  341: [function (require, module, exports) {
    // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
    var dP = require('./_object-dp');

    var $export = require('./_export');

    var anObject = require('./_an-object');

    var toPrimitive = require('./_to-primitive'); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


    $export($export.S + $export.F * require('./_fails')(function () {
      // eslint-disable-next-line no-undef
      Reflect.defineProperty(dP.f({}, 1, {
        value: 1
      }), 1, {
        value: 2
      });
    }), 'Reflect', {
      defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        propertyKey = toPrimitive(propertyKey, true);
        anObject(attributes);

        try {
          dP.f(target, propertyKey, attributes);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_fails": 164,
    "./_object-dp": 200,
    "./_to-primitive": 248
  }],
  342: [function (require, module, exports) {
    // 26.1.4 Reflect.deleteProperty(target, propertyKey)
    var $export = require('./_export');

    var gOPD = require('./_object-gopd').f;

    var anObject = require('./_an-object');

    $export($export.S, 'Reflect', {
      deleteProperty: function deleteProperty(target, propertyKey) {
        var desc = gOPD(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_object-gopd": 203
  }],
  343: [function (require, module, exports) {
    'use strict'; // 26.1.5 Reflect.enumerate(target)

    var $export = require('./_export');

    var anObject = require('./_an-object');

    var Enumerate = function Enumerate(iterated) {
      this._t = anObject(iterated); // target

      this._i = 0; // next index

      var keys = this._k = []; // keys

      var key;

      for (key in iterated) {
        keys.push(key);
      }
    };

    require('./_iter-create')(Enumerate, 'Object', function () {
      var that = this;
      var keys = that._k;
      var key;

      do {
        if (that._i >= keys.length) return {
          value: undefined,
          done: true
        };
      } while (!((key = keys[that._i++]) in that._t));

      return {
        value: key,
        done: false
      };
    });

    $export($export.S, 'Reflect', {
      enumerate: function enumerate(target) {
        return new Enumerate(target);
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_iter-create": 183
  }],
  344: [function (require, module, exports) {
    // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
    var gOPD = require('./_object-gopd');

    var $export = require('./_export');

    var anObject = require('./_an-object');

    $export($export.S, 'Reflect', {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return gOPD.f(anObject(target), propertyKey);
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_object-gopd": 203
  }],
  345: [function (require, module, exports) {
    // 26.1.8 Reflect.getPrototypeOf(target)
    var $export = require('./_export');

    var getProto = require('./_object-gpo');

    var anObject = require('./_an-object');

    $export($export.S, 'Reflect', {
      getPrototypeOf: function getPrototypeOf(target) {
        return getProto(anObject(target));
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_object-gpo": 207
  }],
  346: [function (require, module, exports) {
    // 26.1.6 Reflect.get(target, propertyKey [, receiver])
    var gOPD = require('./_object-gopd');

    var getPrototypeOf = require('./_object-gpo');

    var has = require('./_has');

    var $export = require('./_export');

    var isObject = require('./_is-object');

    var anObject = require('./_an-object');

    function get(target, propertyKey
    /* , receiver */
    ) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var desc, proto;
      if (anObject(target) === receiver) return target[propertyKey];
      if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
      if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
    }

    $export($export.S, 'Reflect', {
      get: get
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_has": 170,
    "./_is-object": 180,
    "./_object-gopd": 203,
    "./_object-gpo": 207
  }],
  347: [function (require, module, exports) {
    // 26.1.9 Reflect.has(target, propertyKey)
    var $export = require('./_export');

    $export($export.S, 'Reflect', {
      has: function has(target, propertyKey) {
        return propertyKey in target;
      }
    });
  }, {
    "./_export": 162
  }],
  348: [function (require, module, exports) {
    // 26.1.10 Reflect.isExtensible(target)
    var $export = require('./_export');

    var anObject = require('./_an-object');

    var $isExtensible = Object.isExtensible;
    $export($export.S, 'Reflect', {
      isExtensible: function isExtensible(target) {
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162
  }],
  349: [function (require, module, exports) {
    // 26.1.11 Reflect.ownKeys(target)
    var $export = require('./_export');

    $export($export.S, 'Reflect', {
      ownKeys: require('./_own-keys')
    });
  }, {
    "./_export": 162,
    "./_own-keys": 213
  }],
  350: [function (require, module, exports) {
    // 26.1.12 Reflect.preventExtensions(target)
    var $export = require('./_export');

    var anObject = require('./_an-object');

    var $preventExtensions = Object.preventExtensions;
    $export($export.S, 'Reflect', {
      preventExtensions: function preventExtensions(target) {
        anObject(target);

        try {
          if ($preventExtensions) $preventExtensions(target);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
  }, {
    "./_an-object": 136,
    "./_export": 162
  }],
  351: [function (require, module, exports) {
    // 26.1.14 Reflect.setPrototypeOf(target, proto)
    var $export = require('./_export');

    var setProto = require('./_set-proto');

    if (setProto) $export($export.S, 'Reflect', {
      setPrototypeOf: function setPrototypeOf(target, proto) {
        setProto.check(target, proto);

        try {
          setProto.set(target, proto);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
  }, {
    "./_export": 162,
    "./_set-proto": 227
  }],
  352: [function (require, module, exports) {
    // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
    var dP = require('./_object-dp');

    var gOPD = require('./_object-gopd');

    var getPrototypeOf = require('./_object-gpo');

    var has = require('./_has');

    var $export = require('./_export');

    var createDesc = require('./_property-desc');

    var anObject = require('./_an-object');

    var isObject = require('./_is-object');

    function set(target, propertyKey, V
    /* , receiver */
    ) {
      var receiver = arguments.length < 4 ? target : arguments[3];
      var ownDesc = gOPD.f(anObject(target), propertyKey);
      var existingDescriptor, proto;

      if (!ownDesc) {
        if (isObject(proto = getPrototypeOf(target))) {
          return set(proto, propertyKey, V, receiver);
        }

        ownDesc = createDesc(0);
      }

      if (has(ownDesc, 'value')) {
        if (ownDesc.writable === false || !isObject(receiver)) return false;

        if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
          if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
          existingDescriptor.value = V;
          dP.f(receiver, propertyKey, existingDescriptor);
        } else dP.f(receiver, propertyKey, createDesc(0, V));

        return true;
      }

      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
    }

    $export($export.S, 'Reflect', {
      set: set
    });
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_has": 170,
    "./_is-object": 180,
    "./_object-dp": 200,
    "./_object-gopd": 203,
    "./_object-gpo": 207,
    "./_property-desc": 218
  }],
  353: [function (require, module, exports) {
    var global = require('./_global');

    var inheritIfRequired = require('./_inherit-if-required');

    var dP = require('./_object-dp').f;

    var gOPN = require('./_object-gopn').f;

    var isRegExp = require('./_is-regexp');

    var $flags = require('./_flags');

    var $RegExp = global.RegExp;
    var Base = $RegExp;
    var proto = $RegExp.prototype;
    var re1 = /a/g;
    var re2 = /a/g; // "new" creates a new object, old webkit buggy here

    var CORRECT_NEW = new $RegExp(re1) !== re1;

    if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
      re2[require('./_wks')('match')] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

      return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
    }))) {
      $RegExp = function RegExp(p, f) {
        var tiRE = this instanceof $RegExp;
        var piRE = isRegExp(p);
        var fiU = f === undefined;
        return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
      };

      var proxy = function proxy(key) {
        key in $RegExp || dP($RegExp, key, {
          configurable: true,
          get: function get() {
            return Base[key];
          },
          set: function set(it) {
            Base[key] = it;
          }
        });
      };

      for (var keys = gOPN(Base), i = 0; keys.length > i;) {
        proxy(keys[i++]);
      }

      proto.constructor = $RegExp;
      $RegExp.prototype = proto;

      require('./_redefine')(global, 'RegExp', $RegExp);
    }

    require('./_set-species')('RegExp');
  }, {
    "./_descriptors": 158,
    "./_fails": 164,
    "./_flags": 166,
    "./_global": 169,
    "./_inherit-if-required": 174,
    "./_is-regexp": 181,
    "./_object-dp": 200,
    "./_object-gopn": 205,
    "./_redefine": 220,
    "./_set-species": 228,
    "./_wks": 257
  }],
  354: [function (require, module, exports) {
    'use strict';

    var regexpExec = require('./_regexp-exec');

    require('./_export')({
      target: 'RegExp',
      proto: true,
      forced: regexpExec !== /./.exec
    }, {
      exec: regexpExec
    });
  }, {
    "./_export": 162,
    "./_regexp-exec": 222
  }],
  355: [function (require, module, exports) {
    // 21.2.5.3 get RegExp.prototype.flags()
    if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
      configurable: true,
      get: require('./_flags')
    });
  }, {
    "./_descriptors": 158,
    "./_flags": 166,
    "./_object-dp": 200
  }],
  356: [function (require, module, exports) {
    'use strict';

    var anObject = require('./_an-object');

    var toLength = require('./_to-length');

    var advanceStringIndex = require('./_advance-string-index');

    var regExpExec = require('./_regexp-exec-abstract'); // @@match logic


    require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
      return [// `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = defined(this);
        var fn = regexp == undefined ? undefined : regexp[MATCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      }, // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative($match, regexp, this);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        if (!rx.global) return regExpExec(rx, S);
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;

        while ((result = regExpExec(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          n++;
        }

        return n === 0 ? null : A;
      }];
    });
  }, {
    "./_advance-string-index": 134,
    "./_an-object": 136,
    "./_fix-re-wks": 165,
    "./_regexp-exec-abstract": 221,
    "./_to-length": 246
  }],
  357: [function (require, module, exports) {
    'use strict';

    var anObject = require('./_an-object');

    var toObject = require('./_to-object');

    var toLength = require('./_to-length');

    var toInteger = require('./_to-integer');

    var advanceStringIndex = require('./_advance-string-index');

    var regExpExec = require('./_regexp-exec-abstract');

    var max = Math.max;
    var min = Math.min;
    var floor = Math.floor;
    var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

    var maybeToString = function maybeToString(it) {
      return it === undefined ? it : String(it);
    }; // @@replace logic


    require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
      return [// `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = defined(this);
        var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
      }, // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        var res = maybeCallNative($replace, regexp, this, replaceValue);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);
        var global = rx.global;

        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }

        var results = [];

        while (true) {
          var result = regExpExec(rx, S);
          if (result === null) break;
          results.push(result);
          if (!global) break;
          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        }

        var accumulatedResult = '';
        var nextSourcePosition = 0;

        for (var i = 0; i < results.length; i++) {
          result = results[i];
          var matched = String(result[0]);
          var position = max(min(toInteger(result.index), S.length), 0);
          var captures = []; // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

          for (var j = 1; j < result.length; j++) {
            captures.push(maybeToString(result[j]));
          }

          var namedCaptures = result.groups;

          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }

          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }

        return accumulatedResult + S.slice(nextSourcePosition);
      }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

      function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }

        return $replace.call(replacement, symbols, function (match, ch) {
          var capture;

          switch (ch.charAt(0)) {
            case '$':
              return '$';

            case '&':
              return matched;

            case '`':
              return str.slice(0, position);

            case "'":
              return str.slice(tailPos);

            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;

            default:
              // \d\d?
              var n = +ch;
              if (n === 0) return match;

              if (n > m) {
                var f = floor(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }

              capture = captures[n - 1];
          }

          return capture === undefined ? '' : capture;
        });
      }
    });
  }, {
    "./_advance-string-index": 134,
    "./_an-object": 136,
    "./_fix-re-wks": 165,
    "./_regexp-exec-abstract": 221,
    "./_to-integer": 244,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  358: [function (require, module, exports) {
    'use strict';

    var anObject = require('./_an-object');

    var sameValue = require('./_same-value');

    var regExpExec = require('./_regexp-exec-abstract'); // @@search logic


    require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
      return [// `String.prototype.search` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.search
      function search(regexp) {
        var O = defined(this);
        var fn = regexp == undefined ? undefined : regexp[SEARCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      }, // `RegExp.prototype[@@search]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
      function (regexp) {
        var res = maybeCallNative($search, regexp, this);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        var previousLastIndex = rx.lastIndex;
        if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
        var result = regExpExec(rx, S);
        if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
        return result === null ? -1 : result.index;
      }];
    });
  }, {
    "./_an-object": 136,
    "./_fix-re-wks": 165,
    "./_regexp-exec-abstract": 221,
    "./_same-value": 224
  }],
  359: [function (require, module, exports) {
    'use strict';

    var isRegExp = require('./_is-regexp');

    var anObject = require('./_an-object');

    var speciesConstructor = require('./_species-constructor');

    var advanceStringIndex = require('./_advance-string-index');

    var toLength = require('./_to-length');

    var callRegExpExec = require('./_regexp-exec-abstract');

    var regexpExec = require('./_regexp-exec');

    var fails = require('./_fails');

    var $min = Math.min;
    var $push = [].push;
    var $SPLIT = 'split';
    var LENGTH = 'length';
    var LAST_INDEX = 'lastIndex';
    var MAX_UINT32 = 0xffffffff; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

    var SUPPORTS_Y = !fails(function () {
      RegExp(MAX_UINT32, 'y');
    }); // @@split logic

    require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
      var internalSplit;

      if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function internalSplit(separator, limit) {
          var string = String(this);
          if (separator === undefined && limit === 0) return []; // If `separator` is not a regex, use native split

          if (!isRegExp(separator)) return $split.call(string, separator, limit);
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0; // Make `global` and avoid `lastIndex` issues by working with a copy

          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;

          while (match = regexpExec.call(separatorCopy, string)) {
            lastIndex = separatorCopy[LAST_INDEX];

            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
              lastLength = match[0][LENGTH];
              lastLastIndex = lastIndex;
              if (output[LENGTH] >= splitLimit) break;
            }

            if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
          }

          if (lastLastIndex === string[LENGTH]) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));

          return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
        }; // Chakra, V8

      } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
        internalSplit = function internalSplit(separator, limit) {
          return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
        };
      } else {
        internalSplit = $split;
      }

      return [// `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = defined(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
      }, // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        var C = speciesConstructor(rx, RegExp);
        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.

        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];

        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;

          if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
            q = advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;

            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }

            q = p = e;
          }
        }

        A.push(S.slice(p));
        return A;
      }];
    });
  }, {
    "./_advance-string-index": 134,
    "./_an-object": 136,
    "./_fails": 164,
    "./_fix-re-wks": 165,
    "./_is-regexp": 181,
    "./_regexp-exec": 222,
    "./_regexp-exec-abstract": 221,
    "./_species-constructor": 232,
    "./_to-length": 246
  }],
  360: [function (require, module, exports) {
    'use strict';

    require('./es6.regexp.flags');

    var anObject = require('./_an-object');

    var $flags = require('./_flags');

    var DESCRIPTORS = require('./_descriptors');

    var TO_STRING = 'toString';
    var $toString = /./[TO_STRING];

    var define = function define(fn) {
      require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
    }; // 21.2.5.14 RegExp.prototype.toString()


    if (require('./_fails')(function () {
      return $toString.call({
        source: 'a',
        flags: 'b'
      }) != '/a/b';
    })) {
      define(function toString() {
        var R = anObject(this);
        return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
      }); // FF44- RegExp#toString has a wrong name
    } else if ($toString.name != TO_STRING) {
      define(function toString() {
        return $toString.call(this);
      });
    }
  }, {
    "./_an-object": 136,
    "./_descriptors": 158,
    "./_fails": 164,
    "./_flags": 166,
    "./_redefine": 220,
    "./es6.regexp.flags": 355
  }],
  361: [function (require, module, exports) {
    'use strict';

    var strong = require('./_collection-strong');

    var validate = require('./_validate-collection');

    var SET = 'Set'; // 23.2 Set Objects

    module.exports = require('./_collection')(SET, function (get) {
      return function Set() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    }, {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
      }
    }, strong);
  }, {
    "./_collection": 151,
    "./_collection-strong": 148,
    "./_validate-collection": 254
  }],
  362: [function (require, module, exports) {
    'use strict'; // B.2.3.2 String.prototype.anchor(name)

    require('./_string-html')('anchor', function (createHTML) {
      return function anchor(name) {
        return createHTML(this, 'a', 'name', name);
      };
    });
  }, {
    "./_string-html": 236
  }],
  363: [function (require, module, exports) {
    'use strict'; // B.2.3.3 String.prototype.big()

    require('./_string-html')('big', function (createHTML) {
      return function big() {
        return createHTML(this, 'big', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  364: [function (require, module, exports) {
    'use strict'; // B.2.3.4 String.prototype.blink()

    require('./_string-html')('blink', function (createHTML) {
      return function blink() {
        return createHTML(this, 'blink', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  365: [function (require, module, exports) {
    'use strict'; // B.2.3.5 String.prototype.bold()

    require('./_string-html')('bold', function (createHTML) {
      return function bold() {
        return createHTML(this, 'b', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  366: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $at = require('./_string-at')(false);

    $export($export.P, 'String', {
      // 21.1.3.3 String.prototype.codePointAt(pos)
      codePointAt: function codePointAt(pos) {
        return $at(this, pos);
      }
    });
  }, {
    "./_export": 162,
    "./_string-at": 234
  }],
  367: [function (require, module, exports) {
    // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
    'use strict';

    var $export = require('./_export');

    var toLength = require('./_to-length');

    var context = require('./_string-context');

    var ENDS_WITH = 'endsWith';
    var $endsWith = ''[ENDS_WITH];
    $export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
      endsWith: function endsWith(searchString
      /* , endPosition = @length */
      ) {
        var that = context(this, searchString, ENDS_WITH);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
        var search = String(searchString);
        return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
      }
    });
  }, {
    "./_export": 162,
    "./_fails-is-regexp": 163,
    "./_string-context": 235,
    "./_to-length": 246
  }],
  368: [function (require, module, exports) {
    'use strict'; // B.2.3.6 String.prototype.fixed()

    require('./_string-html')('fixed', function (createHTML) {
      return function fixed() {
        return createHTML(this, 'tt', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  369: [function (require, module, exports) {
    'use strict'; // B.2.3.7 String.prototype.fontcolor(color)

    require('./_string-html')('fontcolor', function (createHTML) {
      return function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
      };
    });
  }, {
    "./_string-html": 236
  }],
  370: [function (require, module, exports) {
    'use strict'; // B.2.3.8 String.prototype.fontsize(size)

    require('./_string-html')('fontsize', function (createHTML) {
      return function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
      };
    });
  }, {
    "./_string-html": 236
  }],
  371: [function (require, module, exports) {
    var $export = require('./_export');

    var toAbsoluteIndex = require('./_to-absolute-index');

    var fromCharCode = String.fromCharCode;
    var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

    $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
      // 21.1.2.2 String.fromCodePoint(...codePoints)
      fromCodePoint: function fromCodePoint(x) {
        // eslint-disable-line no-unused-vars
        var res = [];
        var aLen = arguments.length;
        var i = 0;
        var code;

        while (aLen > i) {
          code = +arguments[i++];
          if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
          res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
        }

        return res.join('');
      }
    });
  }, {
    "./_export": 162,
    "./_to-absolute-index": 242
  }],
  372: [function (require, module, exports) {
    // 21.1.3.7 String.prototype.includes(searchString, position = 0)
    'use strict';

    var $export = require('./_export');

    var context = require('./_string-context');

    var INCLUDES = 'includes';
    $export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
      includes: function includes(searchString
      /* , position = 0 */
      ) {
        return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
  }, {
    "./_export": 162,
    "./_fails-is-regexp": 163,
    "./_string-context": 235
  }],
  373: [function (require, module, exports) {
    'use strict'; // B.2.3.9 String.prototype.italics()

    require('./_string-html')('italics', function (createHTML) {
      return function italics() {
        return createHTML(this, 'i', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  374: [function (require, module, exports) {
    'use strict';

    var $at = require('./_string-at')(true); // 21.1.3.27 String.prototype[@@iterator]()


    require('./_iter-define')(String, 'String', function (iterated) {
      this._t = String(iterated); // target

      this._i = 0; // next index
      // 21.1.5.2.1 %StringIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return {
        value: undefined,
        done: true
      };
      point = $at(O, index);
      this._i += point.length;
      return {
        value: point,
        done: false
      };
    });
  }, {
    "./_iter-define": 184,
    "./_string-at": 234
  }],
  375: [function (require, module, exports) {
    'use strict'; // B.2.3.10 String.prototype.link(url)

    require('./_string-html')('link', function (createHTML) {
      return function link(url) {
        return createHTML(this, 'a', 'href', url);
      };
    });
  }, {
    "./_string-html": 236
  }],
  376: [function (require, module, exports) {
    var $export = require('./_export');

    var toIObject = require('./_to-iobject');

    var toLength = require('./_to-length');

    $export($export.S, 'String', {
      // 21.1.2.4 String.raw(callSite, ...substitutions)
      raw: function raw(callSite) {
        var tpl = toIObject(callSite.raw);
        var len = toLength(tpl.length);
        var aLen = arguments.length;
        var res = [];
        var i = 0;

        while (len > i) {
          res.push(String(tpl[i++]));
          if (i < aLen) res.push(String(arguments[i]));
        }

        return res.join('');
      }
    });
  }, {
    "./_export": 162,
    "./_to-iobject": 245,
    "./_to-length": 246
  }],
  377: [function (require, module, exports) {
    var $export = require('./_export');

    $export($export.P, 'String', {
      // 21.1.3.13 String.prototype.repeat(count)
      repeat: require('./_string-repeat')
    });
  }, {
    "./_export": 162,
    "./_string-repeat": 238
  }],
  378: [function (require, module, exports) {
    'use strict'; // B.2.3.11 String.prototype.small()

    require('./_string-html')('small', function (createHTML) {
      return function small() {
        return createHTML(this, 'small', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  379: [function (require, module, exports) {
    // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
    'use strict';

    var $export = require('./_export');

    var toLength = require('./_to-length');

    var context = require('./_string-context');

    var STARTS_WITH = 'startsWith';
    var $startsWith = ''[STARTS_WITH];
    $export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString
      /* , position = 0 */
      ) {
        var that = context(this, searchString, STARTS_WITH);
        var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
      }
    });
  }, {
    "./_export": 162,
    "./_fails-is-regexp": 163,
    "./_string-context": 235,
    "./_to-length": 246
  }],
  380: [function (require, module, exports) {
    'use strict'; // B.2.3.12 String.prototype.strike()

    require('./_string-html')('strike', function (createHTML) {
      return function strike() {
        return createHTML(this, 'strike', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  381: [function (require, module, exports) {
    'use strict'; // B.2.3.13 String.prototype.sub()

    require('./_string-html')('sub', function (createHTML) {
      return function sub() {
        return createHTML(this, 'sub', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  382: [function (require, module, exports) {
    'use strict'; // B.2.3.14 String.prototype.sup()

    require('./_string-html')('sup', function (createHTML) {
      return function sup() {
        return createHTML(this, 'sup', '', '');
      };
    });
  }, {
    "./_string-html": 236
  }],
  383: [function (require, module, exports) {
    'use strict'; // 21.1.3.25 String.prototype.trim()

    require('./_string-trim')('trim', function ($trim) {
      return function trim() {
        return $trim(this, 3);
      };
    });
  }, {
    "./_string-trim": 239
  }],
  384: [function (require, module, exports) {
    'use strict'; // ECMAScript 6 symbols shim

    var global = require('./_global');

    var has = require('./_has');

    var DESCRIPTORS = require('./_descriptors');

    var $export = require('./_export');

    var redefine = require('./_redefine');

    var META = require('./_meta').KEY;

    var $fails = require('./_fails');

    var shared = require('./_shared');

    var setToStringTag = require('./_set-to-string-tag');

    var uid = require('./_uid');

    var wks = require('./_wks');

    var wksExt = require('./_wks-ext');

    var wksDefine = require('./_wks-define');

    var enumKeys = require('./_enum-keys');

    var isArray = require('./_is-array');

    var anObject = require('./_an-object');

    var isObject = require('./_is-object');

    var toIObject = require('./_to-iobject');

    var toPrimitive = require('./_to-primitive');

    var createDesc = require('./_property-desc');

    var _create = require('./_object-create');

    var gOPNExt = require('./_object-gopn-ext');

    var $GOPD = require('./_object-gopd');

    var $DP = require('./_object-dp');

    var $keys = require('./_object-keys');

    var gOPD = $GOPD.f;
    var dP = $DP.f;
    var gOPN = gOPNExt.f;
    var $Symbol = global.Symbol;
    var $JSON = global.JSON;

    var _stringify = $JSON && $JSON.stringify;

    var PROTOTYPE = 'prototype';
    var HIDDEN = wks('_hidden');
    var TO_PRIMITIVE = wks('toPrimitive');
    var isEnum = {}.propertyIsEnumerable;
    var SymbolRegistry = shared('symbol-registry');
    var AllSymbols = shared('symbols');
    var OPSymbols = shared('op-symbols');
    var ObjectProto = Object[PROTOTYPE];
    var USE_NATIVE = typeof $Symbol == 'function';
    var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

    var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

    var setSymbolDesc = DESCRIPTORS && $fails(function () {
      return _create(dP({}, 'a', {
        get: function get() {
          return dP(this, 'a', {
            value: 7
          }).a;
        }
      })).a != 7;
    }) ? function (it, key, D) {
      var protoDesc = gOPD(ObjectProto, key);
      if (protoDesc) delete ObjectProto[key];
      dP(it, key, D);
      if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
    } : dP;

    var wrap = function wrap(tag) {
      var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

      sym._k = tag;
      return sym;
    };

    var isSymbol = USE_NATIVE && _typeof2($Symbol.iterator) == 'symbol' ? function (it) {
      return _typeof2(it) == 'symbol';
    } : function (it) {
      return it instanceof $Symbol;
    };

    var $defineProperty = function defineProperty(it, key, D) {
      if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
      anObject(it);
      key = toPrimitive(key, true);
      anObject(D);

      if (has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _create(D, {
            enumerable: createDesc(0, false)
          });
        }

        return setSymbolDesc(it, key, D);
      }

      return dP(it, key, D);
    };

    var $defineProperties = function defineProperties(it, P) {
      anObject(it);
      var keys = enumKeys(P = toIObject(P));
      var i = 0;
      var l = keys.length;
      var key;

      while (l > i) {
        $defineProperty(it, key = keys[i++], P[key]);
      }

      return it;
    };

    var $create = function create(it, P) {
      return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key = toPrimitive(key, true));
      if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
      return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      it = toIObject(it);
      key = toPrimitive(key, true);
      if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
      var D = gOPD(it, key);
      if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = gOPN(toIObject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
      }

      return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var IS_OP = it === ObjectProto;
      var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
      }

      return result;
    }; // 19.4.1.1 Symbol([description])


    if (!USE_NATIVE) {
      $Symbol = function _Symbol4() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

        var $set = function $set(value) {
          if (this === ObjectProto) $set.call(OPSymbols, value);
          if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        };

        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
          configurable: true,
          set: $set
        });
        return wrap(tag);
      };

      redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return this._k;
      });
      $GOPD.f = $getOwnPropertyDescriptor;
      $DP.f = $defineProperty;
      require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
      require('./_object-pie').f = $propertyIsEnumerable;
      require('./_object-gops').f = $getOwnPropertySymbols;

      if (DESCRIPTORS && !require('./_library')) {
        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }

      wksExt.f = function (name) {
        return wrap(wks(name));
      };
    }

    $export($export.G + $export.W + $export.F * !USE_NATIVE, {
      Symbol: $Symbol
    });

    for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
      wks(es6Symbols[j++]);
    }

    for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
      wksDefine(wellKnownSymbols[k++]);
    }

    $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
      // 19.4.2.1 Symbol.for(key)
      'for': function _for(key) {
        return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
      },
      // 19.4.2.5 Symbol.keyFor(sym)
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

        for (var key in SymbolRegistry) {
          if (SymbolRegistry[key] === sym) return key;
        }
      },
      useSetter: function useSetter() {
        setter = true;
      },
      useSimple: function useSimple() {
        setter = false;
      }
    });
    $export($export.S + $export.F * !USE_NATIVE, 'Object', {
      // 19.1.2.2 Object.create(O [, Properties])
      create: $create,
      // 19.1.2.4 Object.defineProperty(O, P, Attributes)
      defineProperty: $defineProperty,
      // 19.1.2.3 Object.defineProperties(O, Properties)
      defineProperties: $defineProperties,
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      // 19.1.2.7 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $getOwnPropertyNames,
      // 19.1.2.8 Object.getOwnPropertySymbols(O)
      getOwnPropertySymbols: $getOwnPropertySymbols
    }); // 24.3.2 JSON.stringify(value [, replacer [, space]])

    $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
      var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
      // WebKit converts symbol values to JSON as null
      // V8 throws on boxed symbols

      return _stringify([S]) != '[null]' || _stringify({
        a: S
      }) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it) {
        var args = [it];
        var i = 1;
        var replacer, $replacer;

        while (arguments.length > i) {
          args.push(arguments[i++]);
        }

        $replacer = replacer = args[1];
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

        if (!isArray(replacer)) replacer = function replacer(key, value) {
          if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

    $Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

    setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

    setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

    setToStringTag(global.JSON, 'JSON', true);
  }, {
    "./_an-object": 136,
    "./_descriptors": 158,
    "./_enum-keys": 161,
    "./_export": 162,
    "./_fails": 164,
    "./_global": 169,
    "./_has": 170,
    "./_hide": 171,
    "./_is-array": 178,
    "./_is-object": 180,
    "./_library": 188,
    "./_meta": 194,
    "./_object-create": 199,
    "./_object-dp": 200,
    "./_object-gopd": 203,
    "./_object-gopn": 205,
    "./_object-gopn-ext": 204,
    "./_object-gops": 206,
    "./_object-keys": 209,
    "./_object-pie": 210,
    "./_property-desc": 218,
    "./_redefine": 220,
    "./_set-to-string-tag": 229,
    "./_shared": 231,
    "./_to-iobject": 245,
    "./_to-primitive": 248,
    "./_uid": 252,
    "./_wks": 257,
    "./_wks-define": 255,
    "./_wks-ext": 256
  }],
  385: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var $typed = require('./_typed');

    var buffer = require('./_typed-buffer');

    var anObject = require('./_an-object');

    var toAbsoluteIndex = require('./_to-absolute-index');

    var toLength = require('./_to-length');

    var isObject = require('./_is-object');

    var ArrayBuffer = require('./_global').ArrayBuffer;

    var speciesConstructor = require('./_species-constructor');

    var $ArrayBuffer = buffer.ArrayBuffer;
    var $DataView = buffer.DataView;
    var $isView = $typed.ABV && ArrayBuffer.isView;
    var $slice = $ArrayBuffer.prototype.slice;
    var VIEW = $typed.VIEW;
    var ARRAY_BUFFER = 'ArrayBuffer';
    $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
      ArrayBuffer: $ArrayBuffer
    });
    $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
      // 24.1.3.1 ArrayBuffer.isView(arg)
      isView: function isView(it) {
        return $isView && $isView(it) || isObject(it) && VIEW in it;
      }
    });
    $export($export.P + $export.U + $export.F * require('./_fails')(function () {
      return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
    }), ARRAY_BUFFER, {
      // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
      slice: function slice(start, end) {
        if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix

        var len = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, len);
        var fin = toAbsoluteIndex(end === undefined ? len : end, len);
        var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
        var viewS = new $DataView(this);
        var viewT = new $DataView(result);
        var index = 0;

        while (first < fin) {
          viewT.setUint8(index++, viewS.getUint8(first++));
        }

        return result;
      }
    });

    require('./_set-species')(ARRAY_BUFFER);
  }, {
    "./_an-object": 136,
    "./_export": 162,
    "./_fails": 164,
    "./_global": 169,
    "./_is-object": 180,
    "./_set-species": 228,
    "./_species-constructor": 232,
    "./_to-absolute-index": 242,
    "./_to-length": 246,
    "./_typed": 251,
    "./_typed-buffer": 250
  }],
  386: [function (require, module, exports) {
    var $export = require('./_export');

    $export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
      DataView: require('./_typed-buffer').DataView
    });
  }, {
    "./_export": 162,
    "./_typed": 251,
    "./_typed-buffer": 250
  }],
  387: [function (require, module, exports) {
    require('./_typed-array')('Float32', 4, function (init) {
      return function Float32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  388: [function (require, module, exports) {
    require('./_typed-array')('Float64', 8, function (init) {
      return function Float64Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  389: [function (require, module, exports) {
    require('./_typed-array')('Int16', 2, function (init) {
      return function Int16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  390: [function (require, module, exports) {
    require('./_typed-array')('Int32', 4, function (init) {
      return function Int32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  391: [function (require, module, exports) {
    require('./_typed-array')('Int8', 1, function (init) {
      return function Int8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  392: [function (require, module, exports) {
    require('./_typed-array')('Uint16', 2, function (init) {
      return function Uint16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  393: [function (require, module, exports) {
    require('./_typed-array')('Uint32', 4, function (init) {
      return function Uint32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  394: [function (require, module, exports) {
    require('./_typed-array')('Uint8', 1, function (init) {
      return function Uint8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
  }, {
    "./_typed-array": 249
  }],
  395: [function (require, module, exports) {
    require('./_typed-array')('Uint8', 1, function (init) {
      return function Uint8ClampedArray(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    }, true);
  }, {
    "./_typed-array": 249
  }],
  396: [function (require, module, exports) {
    'use strict';

    var each = require('./_array-methods')(0);

    var redefine = require('./_redefine');

    var meta = require('./_meta');

    var assign = require('./_object-assign');

    var weak = require('./_collection-weak');

    var isObject = require('./_is-object');

    var fails = require('./_fails');

    var validate = require('./_validate-collection');

    var WEAK_MAP = 'WeakMap';
    var getWeak = meta.getWeak;
    var isExtensible = Object.isExtensible;
    var uncaughtFrozenStore = weak.ufstore;
    var tmp = {};
    var InternalMap;

    var wrapper = function wrapper(get) {
      return function WeakMap() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    };

    var methods = {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        if (isObject(key)) {
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
          return data ? data[this._i] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return weak.def(validate(this, WEAK_MAP), key, value);
      }
    }; // 23.3 WeakMap Objects

    var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true); // IE11 WeakMap frozen keys fix


    if (fails(function () {
      return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
    })) {
      InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
      assign(InternalMap.prototype, methods);
      meta.NEED = true;
      each(['delete', 'has', 'get', 'set'], function (key) {
        var proto = $WeakMap.prototype;
        var method = proto[key];
        redefine(proto, key, function (a, b) {
          // store frozen objects on internal weakmap shim
          if (isObject(a) && !isExtensible(a)) {
            if (!this._f) this._f = new InternalMap();

            var result = this._f[key](a, b);

            return key == 'set' ? this : result; // store all the rest on native weakmap
          }

          return method.call(this, a, b);
        });
      });
    }
  }, {
    "./_array-methods": 141,
    "./_collection": 151,
    "./_collection-weak": 150,
    "./_fails": 164,
    "./_is-object": 180,
    "./_meta": 194,
    "./_object-assign": 198,
    "./_redefine": 220,
    "./_validate-collection": 254
  }],
  397: [function (require, module, exports) {
    'use strict';

    var weak = require('./_collection-weak');

    var validate = require('./_validate-collection');

    var WEAK_SET = 'WeakSet'; // 23.4 WeakSet Objects

    require('./_collection')(WEAK_SET, function (get) {
      return function WeakSet() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    }, {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return weak.def(validate(this, WEAK_SET), value, true);
      }
    }, weak, false, true);
  }, {
    "./_collection": 151,
    "./_collection-weak": 150,
    "./_validate-collection": 254
  }],
  398: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

    var $export = require('./_export');

    var flattenIntoArray = require('./_flatten-into-array');

    var toObject = require('./_to-object');

    var toLength = require('./_to-length');

    var aFunction = require('./_a-function');

    var arraySpeciesCreate = require('./_array-species-create');

    $export($export.P, 'Array', {
      flatMap: function flatMap(callbackfn
      /* , thisArg */
      ) {
        var O = toObject(this);
        var sourceLen, A;
        aFunction(callbackfn);
        sourceLen = toLength(O.length);
        A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
        return A;
      }
    });

    require('./_add-to-unscopables')('flatMap');
  }, {
    "./_a-function": 131,
    "./_add-to-unscopables": 133,
    "./_array-species-create": 144,
    "./_export": 162,
    "./_flatten-into-array": 167,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  399: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

    var $export = require('./_export');

    var flattenIntoArray = require('./_flatten-into-array');

    var toObject = require('./_to-object');

    var toLength = require('./_to-length');

    var toInteger = require('./_to-integer');

    var arraySpeciesCreate = require('./_array-species-create');

    $export($export.P, 'Array', {
      flatten: function flatten()
      /* depthArg = 1 */
      {
        var depthArg = arguments[0];
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
        return A;
      }
    });

    require('./_add-to-unscopables')('flatten');
  }, {
    "./_add-to-unscopables": 133,
    "./_array-species-create": 144,
    "./_export": 162,
    "./_flatten-into-array": 167,
    "./_to-integer": 244,
    "./_to-length": 246,
    "./_to-object": 247
  }],
  400: [function (require, module, exports) {
    'use strict'; // https://github.com/tc39/Array.prototype.includes

    var $export = require('./_export');

    var $includes = require('./_array-includes')(true);

    $export($export.P, 'Array', {
      includes: function includes(el
      /* , fromIndex = 0 */
      ) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
      }
    });

    require('./_add-to-unscopables')('includes');
  }, {
    "./_add-to-unscopables": 133,
    "./_array-includes": 140,
    "./_export": 162
  }],
  401: [function (require, module, exports) {
    // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
    var $export = require('./_export');

    var microtask = require('./_microtask')();

    var process = require('./_global').process;

    var isNode = require('./_cof')(process) == 'process';
    $export($export.G, {
      asap: function asap(fn) {
        var domain = isNode && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
      }
    });
  }, {
    "./_cof": 147,
    "./_export": 162,
    "./_global": 169,
    "./_microtask": 196
  }],
  402: [function (require, module, exports) {
    // https://github.com/ljharb/proposal-is-error
    var $export = require('./_export');

    var cof = require('./_cof');

    $export($export.S, 'Error', {
      isError: function isError(it) {
        return cof(it) === 'Error';
      }
    });
  }, {
    "./_cof": 147,
    "./_export": 162
  }],
  403: [function (require, module, exports) {
    // https://github.com/tc39/proposal-global
    var $export = require('./_export');

    $export($export.G, {
      global: require('./_global')
    });
  }, {
    "./_export": 162,
    "./_global": 169
  }],
  404: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
    require('./_set-collection-from')('Map');
  }, {
    "./_set-collection-from": 225
  }],
  405: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
    require('./_set-collection-of')('Map');
  }, {
    "./_set-collection-of": 226
  }],
  406: [function (require, module, exports) {
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = require('./_export');

    $export($export.P + $export.R, 'Map', {
      toJSON: require('./_collection-to-json')('Map')
    });
  }, {
    "./_collection-to-json": 149,
    "./_export": 162
  }],
  407: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    $export($export.S, 'Math', {
      clamp: function clamp(x, lower, upper) {
        return Math.min(upper, Math.max(lower, x));
      }
    });
  }, {
    "./_export": 162
  }],
  408: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    $export($export.S, 'Math', {
      DEG_PER_RAD: Math.PI / 180
    });
  }, {
    "./_export": 162
  }],
  409: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    var RAD_PER_DEG = 180 / Math.PI;
    $export($export.S, 'Math', {
      degrees: function degrees(radians) {
        return radians * RAD_PER_DEG;
      }
    });
  }, {
    "./_export": 162
  }],
  410: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    var scale = require('./_math-scale');

    var fround = require('./_math-fround');

    $export($export.S, 'Math', {
      fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
        return fround(scale(x, inLow, inHigh, outLow, outHigh));
      }
    });
  }, {
    "./_export": 162,
    "./_math-fround": 190,
    "./_math-scale": 192
  }],
  411: [function (require, module, exports) {
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');

    $export($export.S, 'Math', {
      iaddh: function iaddh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
      }
    });
  }, {
    "./_export": 162
  }],
  412: [function (require, module, exports) {
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');

    $export($export.S, 'Math', {
      imulh: function imulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >> 16;
        var v1 = $v >> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
      }
    });
  }, {
    "./_export": 162
  }],
  413: [function (require, module, exports) {
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');

    $export($export.S, 'Math', {
      isubh: function isubh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
      }
    });
  }, {
    "./_export": 162
  }],
  414: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    $export($export.S, 'Math', {
      RAD_PER_DEG: 180 / Math.PI
    });
  }, {
    "./_export": 162
  }],
  415: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    var DEG_PER_RAD = Math.PI / 180;
    $export($export.S, 'Math', {
      radians: function radians(degrees) {
        return degrees * DEG_PER_RAD;
      }
    });
  }, {
    "./_export": 162
  }],
  416: [function (require, module, exports) {
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = require('./_export');

    $export($export.S, 'Math', {
      scale: require('./_math-scale')
    });
  }, {
    "./_export": 162,
    "./_math-scale": 192
  }],
  417: [function (require, module, exports) {
    // http://jfbastien.github.io/papers/Math.signbit.html
    var $export = require('./_export');

    $export($export.S, 'Math', {
      signbit: function signbit(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
      }
    });
  }, {
    "./_export": 162
  }],
  418: [function (require, module, exports) {
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = require('./_export');

    $export($export.S, 'Math', {
      umulh: function umulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >>> 16;
        var v1 = $v >>> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
      }
    });
  }, {
    "./_export": 162
  }],
  419: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var aFunction = require('./_a-function');

    var $defineProperty = require('./_object-dp'); // B.2.2.2 Object.prototype.__defineGetter__(P, getter)


    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __defineGetter__: function __defineGetter__(P, getter) {
        $defineProperty.f(toObject(this), P, {
          get: aFunction(getter),
          enumerable: true,
          configurable: true
        });
      }
    });
  }, {
    "./_a-function": 131,
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-dp": 200,
    "./_object-forced-pam": 202,
    "./_to-object": 247
  }],
  420: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var aFunction = require('./_a-function');

    var $defineProperty = require('./_object-dp'); // B.2.2.3 Object.prototype.__defineSetter__(P, setter)


    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __defineSetter__: function __defineSetter__(P, setter) {
        $defineProperty.f(toObject(this), P, {
          set: aFunction(setter),
          enumerable: true,
          configurable: true
        });
      }
    });
  }, {
    "./_a-function": 131,
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-dp": 200,
    "./_object-forced-pam": 202,
    "./_to-object": 247
  }],
  421: [function (require, module, exports) {
    // https://github.com/tc39/proposal-object-values-entries
    var $export = require('./_export');

    var $entries = require('./_object-to-array')(true);

    $export($export.S, 'Object', {
      entries: function entries(it) {
        return $entries(it);
      }
    });
  }, {
    "./_export": 162,
    "./_object-to-array": 212
  }],
  422: [function (require, module, exports) {
    // https://github.com/tc39/proposal-object-getownpropertydescriptors
    var $export = require('./_export');

    var ownKeys = require('./_own-keys');

    var toIObject = require('./_to-iobject');

    var gOPD = require('./_object-gopd');

    var createProperty = require('./_create-property');

    $export($export.S, 'Object', {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIObject(object);
        var getDesc = gOPD.f;
        var keys = ownKeys(O);
        var result = {};
        var i = 0;
        var key, desc;

        while (keys.length > i) {
          desc = getDesc(O, key = keys[i++]);
          if (desc !== undefined) createProperty(result, key, desc);
        }

        return result;
      }
    });
  }, {
    "./_create-property": 153,
    "./_export": 162,
    "./_object-gopd": 203,
    "./_own-keys": 213,
    "./_to-iobject": 245
  }],
  423: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var toPrimitive = require('./_to-primitive');

    var getPrototypeOf = require('./_object-gpo');

    var getOwnPropertyDescriptor = require('./_object-gopd').f; // B.2.2.4 Object.prototype.__lookupGetter__(P)


    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;

        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.get;
        } while (O = getPrototypeOf(O));
      }
    });
  }, {
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-forced-pam": 202,
    "./_object-gopd": 203,
    "./_object-gpo": 207,
    "./_to-object": 247,
    "./_to-primitive": 248
  }],
  424: [function (require, module, exports) {
    'use strict';

    var $export = require('./_export');

    var toObject = require('./_to-object');

    var toPrimitive = require('./_to-primitive');

    var getPrototypeOf = require('./_object-gpo');

    var getOwnPropertyDescriptor = require('./_object-gopd').f; // B.2.2.5 Object.prototype.__lookupSetter__(P)


    require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
      __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;

        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.set;
        } while (O = getPrototypeOf(O));
      }
    });
  }, {
    "./_descriptors": 158,
    "./_export": 162,
    "./_object-forced-pam": 202,
    "./_object-gopd": 203,
    "./_object-gpo": 207,
    "./_to-object": 247,
    "./_to-primitive": 248
  }],
  425: [function (require, module, exports) {
    // https://github.com/tc39/proposal-object-values-entries
    var $export = require('./_export');

    var $values = require('./_object-to-array')(false);

    $export($export.S, 'Object', {
      values: function values(it) {
        return $values(it);
      }
    });
  }, {
    "./_export": 162,
    "./_object-to-array": 212
  }],
  426: [function (require, module, exports) {
    'use strict'; // https://github.com/zenparsing/es-observable

    var $export = require('./_export');

    var global = require('./_global');

    var core = require('./_core');

    var microtask = require('./_microtask')();

    var OBSERVABLE = require('./_wks')('observable');

    var aFunction = require('./_a-function');

    var anObject = require('./_an-object');

    var anInstance = require('./_an-instance');

    var redefineAll = require('./_redefine-all');

    var hide = require('./_hide');

    var forOf = require('./_for-of');

    var RETURN = forOf.RETURN;

    var getMethod = function getMethod(fn) {
      return fn == null ? undefined : aFunction(fn);
    };

    var cleanupSubscription = function cleanupSubscription(subscription) {
      var cleanup = subscription._c;

      if (cleanup) {
        subscription._c = undefined;
        cleanup();
      }
    };

    var subscriptionClosed = function subscriptionClosed(subscription) {
      return subscription._o === undefined;
    };

    var closeSubscription = function closeSubscription(subscription) {
      if (!subscriptionClosed(subscription)) {
        subscription._o = undefined;
        cleanupSubscription(subscription);
      }
    };

    var Subscription = function Subscription(observer, subscriber) {
      anObject(observer);
      this._c = undefined;
      this._o = observer;
      observer = new SubscriptionObserver(this);

      try {
        var cleanup = subscriber(observer);
        var subscription = cleanup;

        if (cleanup != null) {
          if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
            subscription.unsubscribe();
          };else aFunction(cleanup);
          this._c = cleanup;
        }
      } catch (e) {
        observer.error(e);
        return;
      }

      if (subscriptionClosed(this)) cleanupSubscription(this);
    };

    Subscription.prototype = redefineAll({}, {
      unsubscribe: function unsubscribe() {
        closeSubscription(this);
      }
    });

    var SubscriptionObserver = function SubscriptionObserver(subscription) {
      this._s = subscription;
    };

    SubscriptionObserver.prototype = redefineAll({}, {
      next: function next(value) {
        var subscription = this._s;

        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;

          try {
            var m = getMethod(observer.next);
            if (m) return m.call(observer, value);
          } catch (e) {
            try {
              closeSubscription(subscription);
            } finally {
              throw e;
            }
          }
        }
      },
      error: function error(value) {
        var subscription = this._s;
        if (subscriptionClosed(subscription)) throw value;
        var observer = subscription._o;
        subscription._o = undefined;

        try {
          var m = getMethod(observer.error);
          if (!m) throw value;
          value = m.call(observer, value);
        } catch (e) {
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        }

        cleanupSubscription(subscription);
        return value;
      },
      complete: function complete(value) {
        var subscription = this._s;

        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;
          subscription._o = undefined;

          try {
            var m = getMethod(observer.complete);
            value = m ? m.call(observer, value) : undefined;
          } catch (e) {
            try {
              cleanupSubscription(subscription);
            } finally {
              throw e;
            }
          }

          cleanupSubscription(subscription);
          return value;
        }
      }
    });

    var $Observable = function Observable(subscriber) {
      anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
    };

    redefineAll($Observable.prototype, {
      subscribe: function subscribe(observer) {
        return new Subscription(observer, this._f);
      },
      forEach: function forEach(fn) {
        var that = this;
        return new (core.Promise || global.Promise)(function (resolve, reject) {
          aFunction(fn);
          var subscription = that.subscribe({
            next: function next(value) {
              try {
                return fn(value);
              } catch (e) {
                reject(e);
                subscription.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
        });
      }
    });
    redefineAll($Observable, {
      from: function from(x) {
        var C = typeof this === 'function' ? this : $Observable;
        var method = getMethod(anObject(x)[OBSERVABLE]);

        if (method) {
          var observable = anObject(method.call(x));
          return observable.constructor === C ? observable : new C(function (observer) {
            return observable.subscribe(observer);
          });
        }

        return new C(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              try {
                if (forOf(x, false, function (it) {
                  observer.next(it);
                  if (done) return RETURN;
                }) === RETURN) return;
              } catch (e) {
                if (done) throw e;
                observer.error(e);
                return;
              }

              observer.complete();
            }
          });
          return function () {
            done = true;
          };
        });
      },
      of: function of() {
        for (var i = 0, l = arguments.length, items = new Array(l); i < l;) {
          items[i] = arguments[i++];
        }

        return new (typeof this === 'function' ? this : $Observable)(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              for (var j = 0; j < items.length; ++j) {
                observer.next(items[j]);
                if (done) return;
              }

              observer.complete();
            }
          });
          return function () {
            done = true;
          };
        });
      }
    });
    hide($Observable.prototype, OBSERVABLE, function () {
      return this;
    });
    $export($export.G, {
      Observable: $Observable
    });

    require('./_set-species')('Observable');
  }, {
    "./_a-function": 131,
    "./_an-instance": 135,
    "./_an-object": 136,
    "./_core": 152,
    "./_export": 162,
    "./_for-of": 168,
    "./_global": 169,
    "./_hide": 171,
    "./_microtask": 196,
    "./_redefine-all": 219,
    "./_set-species": 228,
    "./_wks": 257
  }],
  427: [function (require, module, exports) {
    // https://github.com/tc39/proposal-promise-finally
    'use strict';

    var $export = require('./_export');

    var core = require('./_core');

    var global = require('./_global');

    var speciesConstructor = require('./_species-constructor');

    var promiseResolve = require('./_promise-resolve');

    $export($export.P + $export.R, 'Promise', {
      'finally': function _finally(onFinally) {
        var C = speciesConstructor(this, core.Promise || global.Promise);
        var isFunction = typeof onFinally == 'function';
        return this.then(isFunction ? function (x) {
          return promiseResolve(C, onFinally()).then(function () {
            return x;
          });
        } : onFinally, isFunction ? function (e) {
          return promiseResolve(C, onFinally()).then(function () {
            throw e;
          });
        } : onFinally);
      }
    });
  }, {
    "./_core": 152,
    "./_export": 162,
    "./_global": 169,
    "./_promise-resolve": 217,
    "./_species-constructor": 232
  }],
  428: [function (require, module, exports) {
    'use strict'; // https://github.com/tc39/proposal-promise-try

    var $export = require('./_export');

    var newPromiseCapability = require('./_new-promise-capability');

    var perform = require('./_perform');

    $export($export.S, 'Promise', {
      'try': function _try(callbackfn) {
        var promiseCapability = newPromiseCapability.f(this);
        var result = perform(callbackfn);
        (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
        return promiseCapability.promise;
      }
    });
  }, {
    "./_export": 162,
    "./_new-promise-capability": 197,
    "./_perform": 216
  }],
  429: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var toMetaKey = metadata.key;
    var ordinaryDefineOwnMetadata = metadata.set;
    metadata.exp({
      defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
        ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195
  }],
  430: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var toMetaKey = metadata.key;
    var getOrCreateMetadataMap = metadata.map;
    var store = metadata.store;
    metadata.exp({
      deleteMetadata: function deleteMetadata(metadataKey, target
      /* , targetKey */
      ) {
        var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
        var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
        if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
        if (metadataMap.size) return true;
        var targetMetadata = store.get(target);
        targetMetadata['delete'](targetKey);
        return !!targetMetadata.size || store['delete'](target);
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195
  }],
  431: [function (require, module, exports) {
    var Set = require('./es6.set');

    var from = require('./_array-from-iterable');

    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var getPrototypeOf = require('./_object-gpo');

    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;

    var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
      var oKeys = ordinaryOwnMetadataKeys(O, P);
      var parent = getPrototypeOf(O);
      if (parent === null) return oKeys;
      var pKeys = ordinaryMetadataKeys(parent, P);
      return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
    };

    metadata.exp({
      getMetadataKeys: function getMetadataKeys(target
      /* , targetKey */
      ) {
        return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_array-from-iterable": 139,
    "./_metadata": 195,
    "./_object-gpo": 207,
    "./es6.set": 361
  }],
  432: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var getPrototypeOf = require('./_object-gpo');

    var ordinaryHasOwnMetadata = metadata.has;
    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;

    var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
    };

    metadata.exp({
      getMetadata: function getMetadata(metadataKey, target
      /* , targetKey */
      ) {
        return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195,
    "./_object-gpo": 207
  }],
  433: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;
    metadata.exp({
      getOwnMetadataKeys: function getOwnMetadataKeys(target
      /* , targetKey */
      ) {
        return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195
  }],
  434: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;
    metadata.exp({
      getOwnMetadata: function getOwnMetadata(metadataKey, target
      /* , targetKey */
      ) {
        return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195
  }],
  435: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var getPrototypeOf = require('./_object-gpo');

    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;

    var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return true;
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
    };

    metadata.exp({
      hasMetadata: function hasMetadata(metadataKey, target
      /* , targetKey */
      ) {
        return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195,
    "./_object-gpo": 207
  }],
  436: [function (require, module, exports) {
    var metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;
    metadata.exp({
      hasOwnMetadata: function hasOwnMetadata(metadataKey, target
      /* , targetKey */
      ) {
        return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
      }
    });
  }, {
    "./_an-object": 136,
    "./_metadata": 195
  }],
  437: [function (require, module, exports) {
    var $metadata = require('./_metadata');

    var anObject = require('./_an-object');

    var aFunction = require('./_a-function');

    var toMetaKey = $metadata.key;
    var ordinaryDefineOwnMetadata = $metadata.set;
    $metadata.exp({
      metadata: function metadata(metadataKey, metadataValue) {
        return function decorator(target, targetKey) {
          ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
        };
      }
    });
  }, {
    "./_a-function": 131,
    "./_an-object": 136,
    "./_metadata": 195
  }],
  438: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
    require('./_set-collection-from')('Set');
  }, {
    "./_set-collection-from": 225
  }],
  439: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
    require('./_set-collection-of')('Set');
  }, {
    "./_set-collection-of": 226
  }],
  440: [function (require, module, exports) {
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = require('./_export');

    $export($export.P + $export.R, 'Set', {
      toJSON: require('./_collection-to-json')('Set')
    });
  }, {
    "./_collection-to-json": 149,
    "./_export": 162
  }],
  441: [function (require, module, exports) {
    'use strict'; // https://github.com/mathiasbynens/String.prototype.at

    var $export = require('./_export');

    var $at = require('./_string-at')(true);

    $export($export.P, 'String', {
      at: function at(pos) {
        return $at(this, pos);
      }
    });
  }, {
    "./_export": 162,
    "./_string-at": 234
  }],
  442: [function (require, module, exports) {
    'use strict'; // https://tc39.github.io/String.prototype.matchAll/

    var $export = require('./_export');

    var defined = require('./_defined');

    var toLength = require('./_to-length');

    var isRegExp = require('./_is-regexp');

    var getFlags = require('./_flags');

    var RegExpProto = RegExp.prototype;

    var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
      this._r = regexp;
      this._s = string;
    };

    require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
      var match = this._r.exec(this._s);

      return {
        value: match,
        done: match === null
      };
    });

    $export($export.P, 'String', {
      matchAll: function matchAll(regexp) {
        defined(this);
        if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
        var S = String(this);
        var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
        var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
        rx.lastIndex = toLength(regexp.lastIndex);
        return new $RegExpStringIterator(rx, S);
      }
    });
  }, {
    "./_defined": 157,
    "./_export": 162,
    "./_flags": 166,
    "./_is-regexp": 181,
    "./_iter-create": 183,
    "./_to-length": 246
  }],
  443: [function (require, module, exports) {
    'use strict'; // https://github.com/tc39/proposal-string-pad-start-end

    var $export = require('./_export');

    var $pad = require('./_string-pad');

    var userAgent = require('./_user-agent'); // https://github.com/zloirock/core-js/issues/280


    $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
      padEnd: function padEnd(maxLength
      /* , fillString = ' ' */
      ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
      }
    });
  }, {
    "./_export": 162,
    "./_string-pad": 237,
    "./_user-agent": 253
  }],
  444: [function (require, module, exports) {
    'use strict'; // https://github.com/tc39/proposal-string-pad-start-end

    var $export = require('./_export');

    var $pad = require('./_string-pad');

    var userAgent = require('./_user-agent'); // https://github.com/zloirock/core-js/issues/280


    $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
      padStart: function padStart(maxLength
      /* , fillString = ' ' */
      ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
      }
    });
  }, {
    "./_export": 162,
    "./_string-pad": 237,
    "./_user-agent": 253
  }],
  445: [function (require, module, exports) {
    'use strict'; // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

    require('./_string-trim')('trimLeft', function ($trim) {
      return function trimLeft() {
        return $trim(this, 1);
      };
    }, 'trimStart');
  }, {
    "./_string-trim": 239
  }],
  446: [function (require, module, exports) {
    'use strict'; // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

    require('./_string-trim')('trimRight', function ($trim) {
      return function trimRight() {
        return $trim(this, 2);
      };
    }, 'trimEnd');
  }, {
    "./_string-trim": 239
  }],
  447: [function (require, module, exports) {
    require('./_wks-define')('asyncIterator');
  }, {
    "./_wks-define": 255
  }],
  448: [function (require, module, exports) {
    require('./_wks-define')('observable');
  }, {
    "./_wks-define": 255
  }],
  449: [function (require, module, exports) {
    // https://github.com/tc39/proposal-global
    var $export = require('./_export');

    $export($export.S, 'System', {
      global: require('./_global')
    });
  }, {
    "./_export": 162,
    "./_global": 169
  }],
  450: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
    require('./_set-collection-from')('WeakMap');
  }, {
    "./_set-collection-from": 225
  }],
  451: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
    require('./_set-collection-of')('WeakMap');
  }, {
    "./_set-collection-of": 226
  }],
  452: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
    require('./_set-collection-from')('WeakSet');
  }, {
    "./_set-collection-from": 225
  }],
  453: [function (require, module, exports) {
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
    require('./_set-collection-of')('WeakSet');
  }, {
    "./_set-collection-of": 226
  }],
  454: [function (require, module, exports) {
    var $iterators = require('./es6.array.iterator');

    var getKeys = require('./_object-keys');

    var redefine = require('./_redefine');

    var global = require('./_global');

    var hide = require('./_hide');

    var Iterators = require('./_iterators');

    var wks = require('./_wks');

    var ITERATOR = wks('iterator');
    var TO_STRING_TAG = wks('toStringTag');
    var ArrayValues = Iterators.Array;
    var DOMIterables = {
      CSSRuleList: true,
      // TODO: Not spec compliant, should be false.
      CSSStyleDeclaration: false,
      CSSValueList: false,
      ClientRectList: false,
      DOMRectList: false,
      DOMStringList: false,
      DOMTokenList: true,
      DataTransferItemList: false,
      FileList: false,
      HTMLAllCollection: false,
      HTMLCollection: false,
      HTMLFormElement: false,
      HTMLSelectElement: false,
      MediaList: true,
      // TODO: Not spec compliant, should be false.
      MimeTypeArray: false,
      NamedNodeMap: false,
      NodeList: true,
      PaintRequestList: false,
      Plugin: false,
      PluginArray: false,
      SVGLengthList: false,
      SVGNumberList: false,
      SVGPathSegList: false,
      SVGPointList: false,
      SVGStringList: false,
      SVGTransformList: false,
      SourceBufferList: false,
      StyleSheetList: true,
      // TODO: Not spec compliant, should be false.
      TextTrackCueList: false,
      TextTrackList: false,
      TouchList: false
    };

    for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
      var NAME = collections[i];
      var explicit = DOMIterables[NAME];
      var Collection = global[NAME];
      var proto = Collection && Collection.prototype;
      var key;

      if (proto) {
        if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
        if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = ArrayValues;
        if (explicit) for (key in $iterators) {
          if (!proto[key]) redefine(proto, key, $iterators[key], true);
        }
      }
    }
  }, {
    "./_global": 169,
    "./_hide": 171,
    "./_iterators": 187,
    "./_object-keys": 209,
    "./_redefine": 220,
    "./_wks": 257,
    "./es6.array.iterator": 270
  }],
  455: [function (require, module, exports) {
    var $export = require('./_export');

    var $task = require('./_task');

    $export($export.G + $export.B, {
      setImmediate: $task.set,
      clearImmediate: $task.clear
    });
  }, {
    "./_export": 162,
    "./_task": 241
  }],
  456: [function (require, module, exports) {
    // ie9- setTimeout & setInterval additional parameters fix
    var global = require('./_global');

    var $export = require('./_export');

    var userAgent = require('./_user-agent');

    var slice = [].slice;
    var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

    var wrap = function wrap(set) {
      return function (fn, time
      /* , ...args */
      ) {
        var boundArgs = arguments.length > 2;
        var args = boundArgs ? slice.call(arguments, 2) : false;
        return set(boundArgs ? function () {
          // eslint-disable-next-line no-new-func
          (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
        } : fn, time);
      };
    };

    $export($export.G + $export.B + $export.F * MSIE, {
      setTimeout: wrap(global.setTimeout),
      setInterval: wrap(global.setInterval)
    });
  }, {
    "./_export": 162,
    "./_global": 169,
    "./_user-agent": 253
  }],
  457: [function (require, module, exports) {
    require('./modules/es6.symbol');

    require('./modules/es6.object.create');

    require('./modules/es6.object.define-property');

    require('./modules/es6.object.define-properties');

    require('./modules/es6.object.get-own-property-descriptor');

    require('./modules/es6.object.get-prototype-of');

    require('./modules/es6.object.keys');

    require('./modules/es6.object.get-own-property-names');

    require('./modules/es6.object.freeze');

    require('./modules/es6.object.seal');

    require('./modules/es6.object.prevent-extensions');

    require('./modules/es6.object.is-frozen');

    require('./modules/es6.object.is-sealed');

    require('./modules/es6.object.is-extensible');

    require('./modules/es6.object.assign');

    require('./modules/es6.object.is');

    require('./modules/es6.object.set-prototype-of');

    require('./modules/es6.object.to-string');

    require('./modules/es6.function.bind');

    require('./modules/es6.function.name');

    require('./modules/es6.function.has-instance');

    require('./modules/es6.parse-int');

    require('./modules/es6.parse-float');

    require('./modules/es6.number.constructor');

    require('./modules/es6.number.to-fixed');

    require('./modules/es6.number.to-precision');

    require('./modules/es6.number.epsilon');

    require('./modules/es6.number.is-finite');

    require('./modules/es6.number.is-integer');

    require('./modules/es6.number.is-nan');

    require('./modules/es6.number.is-safe-integer');

    require('./modules/es6.number.max-safe-integer');

    require('./modules/es6.number.min-safe-integer');

    require('./modules/es6.number.parse-float');

    require('./modules/es6.number.parse-int');

    require('./modules/es6.math.acosh');

    require('./modules/es6.math.asinh');

    require('./modules/es6.math.atanh');

    require('./modules/es6.math.cbrt');

    require('./modules/es6.math.clz32');

    require('./modules/es6.math.cosh');

    require('./modules/es6.math.expm1');

    require('./modules/es6.math.fround');

    require('./modules/es6.math.hypot');

    require('./modules/es6.math.imul');

    require('./modules/es6.math.log10');

    require('./modules/es6.math.log1p');

    require('./modules/es6.math.log2');

    require('./modules/es6.math.sign');

    require('./modules/es6.math.sinh');

    require('./modules/es6.math.tanh');

    require('./modules/es6.math.trunc');

    require('./modules/es6.string.from-code-point');

    require('./modules/es6.string.raw');

    require('./modules/es6.string.trim');

    require('./modules/es6.string.iterator');

    require('./modules/es6.string.code-point-at');

    require('./modules/es6.string.ends-with');

    require('./modules/es6.string.includes');

    require('./modules/es6.string.repeat');

    require('./modules/es6.string.starts-with');

    require('./modules/es6.string.anchor');

    require('./modules/es6.string.big');

    require('./modules/es6.string.blink');

    require('./modules/es6.string.bold');

    require('./modules/es6.string.fixed');

    require('./modules/es6.string.fontcolor');

    require('./modules/es6.string.fontsize');

    require('./modules/es6.string.italics');

    require('./modules/es6.string.link');

    require('./modules/es6.string.small');

    require('./modules/es6.string.strike');

    require('./modules/es6.string.sub');

    require('./modules/es6.string.sup');

    require('./modules/es6.date.now');

    require('./modules/es6.date.to-json');

    require('./modules/es6.date.to-iso-string');

    require('./modules/es6.date.to-string');

    require('./modules/es6.date.to-primitive');

    require('./modules/es6.array.is-array');

    require('./modules/es6.array.from');

    require('./modules/es6.array.of');

    require('./modules/es6.array.join');

    require('./modules/es6.array.slice');

    require('./modules/es6.array.sort');

    require('./modules/es6.array.for-each');

    require('./modules/es6.array.map');

    require('./modules/es6.array.filter');

    require('./modules/es6.array.some');

    require('./modules/es6.array.every');

    require('./modules/es6.array.reduce');

    require('./modules/es6.array.reduce-right');

    require('./modules/es6.array.index-of');

    require('./modules/es6.array.last-index-of');

    require('./modules/es6.array.copy-within');

    require('./modules/es6.array.fill');

    require('./modules/es6.array.find');

    require('./modules/es6.array.find-index');

    require('./modules/es6.array.species');

    require('./modules/es6.array.iterator');

    require('./modules/es6.regexp.constructor');

    require('./modules/es6.regexp.exec');

    require('./modules/es6.regexp.to-string');

    require('./modules/es6.regexp.flags');

    require('./modules/es6.regexp.match');

    require('./modules/es6.regexp.replace');

    require('./modules/es6.regexp.search');

    require('./modules/es6.regexp.split');

    require('./modules/es6.promise');

    require('./modules/es6.map');

    require('./modules/es6.set');

    require('./modules/es6.weak-map');

    require('./modules/es6.weak-set');

    require('./modules/es6.typed.array-buffer');

    require('./modules/es6.typed.data-view');

    require('./modules/es6.typed.int8-array');

    require('./modules/es6.typed.uint8-array');

    require('./modules/es6.typed.uint8-clamped-array');

    require('./modules/es6.typed.int16-array');

    require('./modules/es6.typed.uint16-array');

    require('./modules/es6.typed.int32-array');

    require('./modules/es6.typed.uint32-array');

    require('./modules/es6.typed.float32-array');

    require('./modules/es6.typed.float64-array');

    require('./modules/es6.reflect.apply');

    require('./modules/es6.reflect.construct');

    require('./modules/es6.reflect.define-property');

    require('./modules/es6.reflect.delete-property');

    require('./modules/es6.reflect.enumerate');

    require('./modules/es6.reflect.get');

    require('./modules/es6.reflect.get-own-property-descriptor');

    require('./modules/es6.reflect.get-prototype-of');

    require('./modules/es6.reflect.has');

    require('./modules/es6.reflect.is-extensible');

    require('./modules/es6.reflect.own-keys');

    require('./modules/es6.reflect.prevent-extensions');

    require('./modules/es6.reflect.set');

    require('./modules/es6.reflect.set-prototype-of');

    require('./modules/es7.array.includes');

    require('./modules/es7.array.flat-map');

    require('./modules/es7.array.flatten');

    require('./modules/es7.string.at');

    require('./modules/es7.string.pad-start');

    require('./modules/es7.string.pad-end');

    require('./modules/es7.string.trim-left');

    require('./modules/es7.string.trim-right');

    require('./modules/es7.string.match-all');

    require('./modules/es7.symbol.async-iterator');

    require('./modules/es7.symbol.observable');

    require('./modules/es7.object.get-own-property-descriptors');

    require('./modules/es7.object.values');

    require('./modules/es7.object.entries');

    require('./modules/es7.object.define-getter');

    require('./modules/es7.object.define-setter');

    require('./modules/es7.object.lookup-getter');

    require('./modules/es7.object.lookup-setter');

    require('./modules/es7.map.to-json');

    require('./modules/es7.set.to-json');

    require('./modules/es7.map.of');

    require('./modules/es7.set.of');

    require('./modules/es7.weak-map.of');

    require('./modules/es7.weak-set.of');

    require('./modules/es7.map.from');

    require('./modules/es7.set.from');

    require('./modules/es7.weak-map.from');

    require('./modules/es7.weak-set.from');

    require('./modules/es7.global');

    require('./modules/es7.system.global');

    require('./modules/es7.error.is-error');

    require('./modules/es7.math.clamp');

    require('./modules/es7.math.deg-per-rad');

    require('./modules/es7.math.degrees');

    require('./modules/es7.math.fscale');

    require('./modules/es7.math.iaddh');

    require('./modules/es7.math.isubh');

    require('./modules/es7.math.imulh');

    require('./modules/es7.math.rad-per-deg');

    require('./modules/es7.math.radians');

    require('./modules/es7.math.scale');

    require('./modules/es7.math.umulh');

    require('./modules/es7.math.signbit');

    require('./modules/es7.promise.finally');

    require('./modules/es7.promise.try');

    require('./modules/es7.reflect.define-metadata');

    require('./modules/es7.reflect.delete-metadata');

    require('./modules/es7.reflect.get-metadata');

    require('./modules/es7.reflect.get-metadata-keys');

    require('./modules/es7.reflect.get-own-metadata');

    require('./modules/es7.reflect.get-own-metadata-keys');

    require('./modules/es7.reflect.has-metadata');

    require('./modules/es7.reflect.has-own-metadata');

    require('./modules/es7.reflect.metadata');

    require('./modules/es7.asap');

    require('./modules/es7.observable');

    require('./modules/web.timers');

    require('./modules/web.immediate');

    require('./modules/web.dom.iterable');

    module.exports = require('./modules/_core');
  }, {
    "./modules/_core": 152,
    "./modules/es6.array.copy-within": 260,
    "./modules/es6.array.every": 261,
    "./modules/es6.array.fill": 262,
    "./modules/es6.array.filter": 263,
    "./modules/es6.array.find": 265,
    "./modules/es6.array.find-index": 264,
    "./modules/es6.array.for-each": 266,
    "./modules/es6.array.from": 267,
    "./modules/es6.array.index-of": 268,
    "./modules/es6.array.is-array": 269,
    "./modules/es6.array.iterator": 270,
    "./modules/es6.array.join": 271,
    "./modules/es6.array.last-index-of": 272,
    "./modules/es6.array.map": 273,
    "./modules/es6.array.of": 274,
    "./modules/es6.array.reduce": 276,
    "./modules/es6.array.reduce-right": 275,
    "./modules/es6.array.slice": 277,
    "./modules/es6.array.some": 278,
    "./modules/es6.array.sort": 279,
    "./modules/es6.array.species": 280,
    "./modules/es6.date.now": 281,
    "./modules/es6.date.to-iso-string": 282,
    "./modules/es6.date.to-json": 283,
    "./modules/es6.date.to-primitive": 284,
    "./modules/es6.date.to-string": 285,
    "./modules/es6.function.bind": 286,
    "./modules/es6.function.has-instance": 287,
    "./modules/es6.function.name": 288,
    "./modules/es6.map": 289,
    "./modules/es6.math.acosh": 290,
    "./modules/es6.math.asinh": 291,
    "./modules/es6.math.atanh": 292,
    "./modules/es6.math.cbrt": 293,
    "./modules/es6.math.clz32": 294,
    "./modules/es6.math.cosh": 295,
    "./modules/es6.math.expm1": 296,
    "./modules/es6.math.fround": 297,
    "./modules/es6.math.hypot": 298,
    "./modules/es6.math.imul": 299,
    "./modules/es6.math.log10": 300,
    "./modules/es6.math.log1p": 301,
    "./modules/es6.math.log2": 302,
    "./modules/es6.math.sign": 303,
    "./modules/es6.math.sinh": 304,
    "./modules/es6.math.tanh": 305,
    "./modules/es6.math.trunc": 306,
    "./modules/es6.number.constructor": 307,
    "./modules/es6.number.epsilon": 308,
    "./modules/es6.number.is-finite": 309,
    "./modules/es6.number.is-integer": 310,
    "./modules/es6.number.is-nan": 311,
    "./modules/es6.number.is-safe-integer": 312,
    "./modules/es6.number.max-safe-integer": 313,
    "./modules/es6.number.min-safe-integer": 314,
    "./modules/es6.number.parse-float": 315,
    "./modules/es6.number.parse-int": 316,
    "./modules/es6.number.to-fixed": 317,
    "./modules/es6.number.to-precision": 318,
    "./modules/es6.object.assign": 319,
    "./modules/es6.object.create": 320,
    "./modules/es6.object.define-properties": 321,
    "./modules/es6.object.define-property": 322,
    "./modules/es6.object.freeze": 323,
    "./modules/es6.object.get-own-property-descriptor": 324,
    "./modules/es6.object.get-own-property-names": 325,
    "./modules/es6.object.get-prototype-of": 326,
    "./modules/es6.object.is": 330,
    "./modules/es6.object.is-extensible": 327,
    "./modules/es6.object.is-frozen": 328,
    "./modules/es6.object.is-sealed": 329,
    "./modules/es6.object.keys": 331,
    "./modules/es6.object.prevent-extensions": 332,
    "./modules/es6.object.seal": 333,
    "./modules/es6.object.set-prototype-of": 334,
    "./modules/es6.object.to-string": 335,
    "./modules/es6.parse-float": 336,
    "./modules/es6.parse-int": 337,
    "./modules/es6.promise": 338,
    "./modules/es6.reflect.apply": 339,
    "./modules/es6.reflect.construct": 340,
    "./modules/es6.reflect.define-property": 341,
    "./modules/es6.reflect.delete-property": 342,
    "./modules/es6.reflect.enumerate": 343,
    "./modules/es6.reflect.get": 346,
    "./modules/es6.reflect.get-own-property-descriptor": 344,
    "./modules/es6.reflect.get-prototype-of": 345,
    "./modules/es6.reflect.has": 347,
    "./modules/es6.reflect.is-extensible": 348,
    "./modules/es6.reflect.own-keys": 349,
    "./modules/es6.reflect.prevent-extensions": 350,
    "./modules/es6.reflect.set": 352,
    "./modules/es6.reflect.set-prototype-of": 351,
    "./modules/es6.regexp.constructor": 353,
    "./modules/es6.regexp.exec": 354,
    "./modules/es6.regexp.flags": 355,
    "./modules/es6.regexp.match": 356,
    "./modules/es6.regexp.replace": 357,
    "./modules/es6.regexp.search": 358,
    "./modules/es6.regexp.split": 359,
    "./modules/es6.regexp.to-string": 360,
    "./modules/es6.set": 361,
    "./modules/es6.string.anchor": 362,
    "./modules/es6.string.big": 363,
    "./modules/es6.string.blink": 364,
    "./modules/es6.string.bold": 365,
    "./modules/es6.string.code-point-at": 366,
    "./modules/es6.string.ends-with": 367,
    "./modules/es6.string.fixed": 368,
    "./modules/es6.string.fontcolor": 369,
    "./modules/es6.string.fontsize": 370,
    "./modules/es6.string.from-code-point": 371,
    "./modules/es6.string.includes": 372,
    "./modules/es6.string.italics": 373,
    "./modules/es6.string.iterator": 374,
    "./modules/es6.string.link": 375,
    "./modules/es6.string.raw": 376,
    "./modules/es6.string.repeat": 377,
    "./modules/es6.string.small": 378,
    "./modules/es6.string.starts-with": 379,
    "./modules/es6.string.strike": 380,
    "./modules/es6.string.sub": 381,
    "./modules/es6.string.sup": 382,
    "./modules/es6.string.trim": 383,
    "./modules/es6.symbol": 384,
    "./modules/es6.typed.array-buffer": 385,
    "./modules/es6.typed.data-view": 386,
    "./modules/es6.typed.float32-array": 387,
    "./modules/es6.typed.float64-array": 388,
    "./modules/es6.typed.int16-array": 389,
    "./modules/es6.typed.int32-array": 390,
    "./modules/es6.typed.int8-array": 391,
    "./modules/es6.typed.uint16-array": 392,
    "./modules/es6.typed.uint32-array": 393,
    "./modules/es6.typed.uint8-array": 394,
    "./modules/es6.typed.uint8-clamped-array": 395,
    "./modules/es6.weak-map": 396,
    "./modules/es6.weak-set": 397,
    "./modules/es7.array.flat-map": 398,
    "./modules/es7.array.flatten": 399,
    "./modules/es7.array.includes": 400,
    "./modules/es7.asap": 401,
    "./modules/es7.error.is-error": 402,
    "./modules/es7.global": 403,
    "./modules/es7.map.from": 404,
    "./modules/es7.map.of": 405,
    "./modules/es7.map.to-json": 406,
    "./modules/es7.math.clamp": 407,
    "./modules/es7.math.deg-per-rad": 408,
    "./modules/es7.math.degrees": 409,
    "./modules/es7.math.fscale": 410,
    "./modules/es7.math.iaddh": 411,
    "./modules/es7.math.imulh": 412,
    "./modules/es7.math.isubh": 413,
    "./modules/es7.math.rad-per-deg": 414,
    "./modules/es7.math.radians": 415,
    "./modules/es7.math.scale": 416,
    "./modules/es7.math.signbit": 417,
    "./modules/es7.math.umulh": 418,
    "./modules/es7.object.define-getter": 419,
    "./modules/es7.object.define-setter": 420,
    "./modules/es7.object.entries": 421,
    "./modules/es7.object.get-own-property-descriptors": 422,
    "./modules/es7.object.lookup-getter": 423,
    "./modules/es7.object.lookup-setter": 424,
    "./modules/es7.object.values": 425,
    "./modules/es7.observable": 426,
    "./modules/es7.promise.finally": 427,
    "./modules/es7.promise.try": 428,
    "./modules/es7.reflect.define-metadata": 429,
    "./modules/es7.reflect.delete-metadata": 430,
    "./modules/es7.reflect.get-metadata": 432,
    "./modules/es7.reflect.get-metadata-keys": 431,
    "./modules/es7.reflect.get-own-metadata": 434,
    "./modules/es7.reflect.get-own-metadata-keys": 433,
    "./modules/es7.reflect.has-metadata": 435,
    "./modules/es7.reflect.has-own-metadata": 436,
    "./modules/es7.reflect.metadata": 437,
    "./modules/es7.set.from": 438,
    "./modules/es7.set.of": 439,
    "./modules/es7.set.to-json": 440,
    "./modules/es7.string.at": 441,
    "./modules/es7.string.match-all": 442,
    "./modules/es7.string.pad-end": 443,
    "./modules/es7.string.pad-start": 444,
    "./modules/es7.string.trim-left": 445,
    "./modules/es7.string.trim-right": 446,
    "./modules/es7.symbol.async-iterator": 447,
    "./modules/es7.symbol.observable": 448,
    "./modules/es7.system.global": 449,
    "./modules/es7.weak-map.from": 450,
    "./modules/es7.weak-map.of": 451,
    "./modules/es7.weak-set.from": 452,
    "./modules/es7.weak-set.of": 453,
    "./modules/web.dom.iterable": 454,
    "./modules/web.immediate": 455,
    "./modules/web.timers": 456
  }],
  "cSREod": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        /*
         * Datalist polyfill - https://github.com/mfranzke/datalist-polyfill
         * @license Copyright(c) 2017 by Maximilian Franzke
         * Supported by Christian, Johannes, @mitchhentges, @mertenhanisch, @ailintom, @Kravimir, @mischah, @hryamzik, @ottoville, @IceCreamYou, @wlekin, @eddr, @beebee1987, @mricherzhagen, @acespace90, @damien-git and @nexces - many thanks for that !
         */

        /*
         * A minimal and dependency-free vanilla JavaScript datalist polyfill.
         * Supports all standard's functionality as well as mimics other browsers behavior.
         * Tests for native support of an inputs elements datalist functionality.
         * Elsewhere the functionality gets emulated by a select element.
         */
        (function () {
          'use strict'; // Performance: Set local variables

          var dcmnt = window.document,
              ua = window.navigator.userAgent,
              // Feature detection
          datalistSupported = 'list' in dcmnt.createElement('input') && Boolean(dcmnt.createElement('datalist') && window.HTMLDataListElement),
              // IE & EDGE browser detection via UserAgent
          // TODO: obviously ugly. But sadly necessary until Microsoft enhances the UX within EDGE (compare to https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9573654/)
          // adapted out of https://gist.github.com/gaboratorium/25f08b76eb82b1e7b91b01a0448f8b1d :
          isGteIE10 = Boolean(ua.match(/Trident\/[6-7]\./)),
              isEDGE = Boolean(ua.indexOf('Edge/') !== -1); // Let's break here, if it's even already supported ... and not IE10+ or EDGE

          if (datalistSupported && !isGteIE10 && !isEDGE) {
            return false;
          } // .matches polyfill
          // TODO: probably needs enhancement on the expected to be supported browsers


          if (!Element.prototype.matches) {
            Element.prototype.matches = Element.prototype.msMatchesSelector;
          } // Define some global settings and configurations


          var touched = false,
              // Speaking variables for the different keycodes
          keyENTER = 13,
              keyESC = 27,
              keyUP = 38,
              keyDOWN = 40,
              // Defining the text / value seperator for displaying the value and text values ...
          textValueSeperator = ' / ',
              // ... and defining the different input types that are supported by this polyfill
          supportedTypes = ['text', 'email', 'number', 'search', 'tel', 'url'],
              // Classes for elements
          classNameInput = 'polyfilled',
              classNamePolyfillingSelect = 'polyfilling',
              // Defining a most likely unique polyfill string
          uniquePolyfillString = '###[P0LYFlLLed]###'; // Differentiate for touch interactions, adapted by https://medium.com/@david.gilbertson/the-only-way-to-detect-touch-with-javascript-7791a3346685

          window.addEventListener('touchstart', function onFirstTouch() {
            touched = true;
            window.removeEventListener('touchstart', onFirstTouch);
          }); // For observing any changes to the option elements within the datalist elements, define MutationObserver initially

          var MutationObserver = window.MutationObserver || window.WebKitMutationObserver,
              obs; // Define a new observer

          if (typeof MutationObserver !== 'undefined') {
            obs = new MutationObserver(function (mutations) {
              var datalistNeedsAnUpdate = false; // Look through all mutations that just occured

              mutations.forEach(function (mutation) {
                // Look through all added nodes of this mutation
                for (var j = 0; j < mutation.addedNodes.length; ++j) {
                  if (mutation.target.tagName.toLowerCase() === 'datalist') {
                    datalistNeedsAnUpdate = mutation.target;
                  }
                }
              });

              if (datalistNeedsAnUpdate) {
                var input = dcmnt.querySelector('input[list="' + datalistNeedsAnUpdate.id + '"]');

                if (getInputValue(input) !== '') {
                  // Prepare the options and toggle the visiblity afterwards
                  toggleVisibility(prepOptions(datalistNeedsAnUpdate, input).length, datalistNeedsAnUpdate.getElementsByClassName(classNamePolyfillingSelect)[0]);
                }
              }
            });
          } // Function regarding the inputs interactions on keyup event


          var inputInputList = function inputInputList(event) {
            var input = event.target,
                datalist = input.list,
                keyOpen = event.keyCode === keyUP || event.keyCode === keyDOWN; // Check for whether the events target was an input and still check for an existing instance of the datalist and polyfilling select

            if (input.tagName.toLowerCase() !== 'input' || datalist === null) {
              return;
            } // Handling IE10+ & EDGE


            if (isGteIE10 || isEDGE) {
              // On keypress check for value
              if (getInputValue(input) !== '' && !keyOpen && event.keyCode !== keyENTER && event.keyCode !== keyESC && ( // As only EDGE doesn't trigger the input event after selecting an item via mouse, we need to differentiate here
              isGteIE10 || input.type === 'text')) {
                updateIEOptions(input, datalist); // TODO: Check whether this update is necessary depending on the options values

                input.focus();
              }

              return;
            }

            var visible = false,
                // Creating the select if there's no instance so far (e.g. because of that it hasn't been handled or it has been dynamically inserted)
            datalistSelect = datalist.getElementsByClassName(classNamePolyfillingSelect)[0] || setUpPolyfillingSelect(input, datalist); // On an ESC or ENTER key press within the input, let's break here and afterwards hide the datalist select, but if the input contains a value or one of the opening keys have been pressed ...

            if (event.keyCode !== keyESC && event.keyCode !== keyENTER && (getInputValue(input) !== '' || keyOpen) && datalistSelect !== undefined) {
              // ... prepare the options
              if (prepOptions(datalist, input).length > 0) {
                visible = true;
              }

              var firstEntry = 0,
                  lastEntry = datalistSelect.options.length - 1; // ... preselect best fitting index

              if (touched) {
                datalistSelect.selectedIndex = firstEntry;
              } else if (keyOpen && input.getAttribute('type') !== 'number') {
                datalistSelect.selectedIndex = event.keyCode === keyUP ? lastEntry : firstEntry; // ... and on arrow up or down keys, focus the select

                datalistSelect.focus();
              }
            } // Toggle the visibility of the datalist select according to previous checks


            toggleVisibility(visible, datalistSelect);
          }; // On keypress check all options for that as a substring, save the original value as a data-attribute and preset that inputs value (for sorting) for all option values (probably as well enhanced by a token)


          var updateIEOptions = function updateIEOptions(input, datalist) {
            var inputValue = getInputValue(input); // Loop through the options

            Array.prototype.slice.call(datalist.options, 0).forEach(function (option) {
              // We're using .getAttribute instead of .dataset here for IE10
              var dataOriginalvalue = option.getAttribute('data-originalvalue'),
                  originalValue = dataOriginalvalue || option.value; // In case of that the original value hasn't been saved as data so far, do that now

              if (!dataOriginalvalue) {
                // We're using .setAttribute instead of .dataset here for IE10
                option.setAttribute('data-originalvalue', originalValue);
              } // As we'd manipulate the value in the next step, we'd like to put in that value as either a label or text if none of those exist


              if (!option.label && !option.text) {
                option.label = originalValue;
              }
              /*
              Check for whether the current option is a valid suggestion and replace its value by
              	- the current input string, as IE10+ and EDGE don't do substring, but only prefix matching
              	- followed by a unique string that should prevent any interferance
              	- and the original string, that is still necessary e.g. for sorting within the suggestions list
              As the value is being inserted on users selection, we'll replace that one within the upfollowing inputInputListIE function
              */


              option.value = isValidSuggestion(option, inputValue) ? inputValue + uniquePolyfillString + originalValue.toLowerCase() : originalValue;
            });
          }; // Check for the input and probably replace by correct options elements value


          var inputInputListIE = function inputInputListIE(event) {
            var input = event.target,
                datalist = input.list;

            if (!input.matches('input[list]') || !input.matches('.' + classNameInput) || !datalist) {
              return;
            } // Query for related option - and escaping the value as doublequotes wouldn't work


            var option = datalist.querySelector('option[value="' + getInputValue(input).replace(/\\([\s\S])|(")/g, '\\$1$2') + '"]'); // We're using .getAttribute instead of .dataset here for IE10

            if (option && option.getAttribute('data-originalvalue')) {
              setInputValue(input, option.getAttribute('data-originalvalue'));
            }
          }; // Check for whether this is a valid suggestion


          var isValidSuggestion = function isValidSuggestion(option, inputValue) {
            var optVal = option.value.toLowerCase(),
                inptVal = inputValue.toLowerCase(),
                label = option.getAttribute('label'),
                text = option.text.toLowerCase();
            /*
            "Each option element that is a descendant of the datalist element, that is not disabled, and whose value is a string that isn't the empty string, represents a suggestion. Each suggestion has a value and a label."
            "If appropriate, the user agent should use the suggestion's label and value to identify the suggestion to the user."
            */

            return Boolean(option.disabled === false && (optVal !== '' && optVal.indexOf(inptVal) !== -1 || label && label.toLowerCase().indexOf(inptVal) !== -1 || text !== '' && text.indexOf(inptVal) !== -1));
          }; // Focusin and -out events


          var changesInputList = function changesInputList(event) {
            // Check for correct element on this event delegation
            if (!event.target.matches('input[list]')) {
              return;
            }

            var input = event.target,
                datalist = input.list; // Check for whether the events target was an input and still check for an existing instance of the datalist

            if (input.tagName.toLowerCase() !== 'input' || datalist === null) {
              return;
            } // Test for whether this input has already been enhanced by the polyfill


            if (!input.matches('.' + classNameInput)) {
              prepareInput(input, event.type);
            } // #GH-49: Microsoft EDGE / datalist popups get "emptied" when receiving focus via tabbing


            if (isEDGE && event.type === 'focusin') {
              // Set the value of the first option to it's value - this actually triggers a redraw of the complete list
              var firstOption = input.list.options[0];
              firstOption.value = firstOption.value;
            } // Break here for IE10+ & EDGE


            if (isGteIE10 || isEDGE) {
              return;
            }

            var // Creating the select if there's no instance so far (e.g. because of that it hasn't been handled or it has been dynamically inserted)
            datalistSelect = datalist.getElementsByClassName(classNamePolyfillingSelect)[0] || setUpPolyfillingSelect(input, datalist),
                // Either have the select set to the state to get displayed in case of that it would have been focused or because it's the target on the inputs blur - and check for general existance of any option as suggestions
            visible = datalistSelect && datalistSelect.querySelector('option:not(:disabled)') && (event.type === 'focusin' && getInputValue(input) !== '' || event.relatedTarget && event.relatedTarget === datalistSelect); // Toggle the visibility of the datalist select according to previous checks

            toggleVisibility(visible, datalistSelect);
          }; // Prepare the input


          var prepareInput = function prepareInput(input, eventType) {
            // We'd like to prevent autocomplete on the input datalist field
            input.setAttribute('autocomplete', 'off'); // WAI ARIA attributes

            input.setAttribute('role', 'textbox');
            input.setAttribute('aria-haspopup', 'true');
            input.setAttribute('aria-autocomplete', 'list');
            input.setAttribute('aria-owns', input.getAttribute('list')); // Bind the keyup event on the related datalists input

            if (eventType === 'focusin') {
              input.addEventListener('keyup', inputInputList);
              input.addEventListener('focusout', changesInputList, true); // As only EDGE doesn't trigger the input event after selecting an item via mouse, we need to differentiate here

              if (isGteIE10 || isEDGE && input.type === 'text') {
                input.addEventListener('input', inputInputListIE);
              }
            } else if (eventType === 'blur') {
              input.removeEventListener('keyup', inputInputList);
              input.removeEventListener('focusout', changesInputList, true); // As only EDGE doesn't trigger the input event after selecting an item via mouse, we need to differentiate here

              if (isGteIE10 || isEDGE && input.type === 'text') {
                input.removeEventListener('input', inputInputListIE);
              }
            } // Add class for identifying that this input is even already being polyfilled


            input.className += ' ' + classNameInput;
          }; // Get the input value for dividing regular and mail types


          var getInputValue = function getInputValue(input) {
            // In case of type=email and multiple attribute, we would need to grab the last piece
            // Using .getAttribute here for IE9 purpose - elsewhere it wouldn't return the newer HTML5 values correctly
            return input.getAttribute('type') === 'email' && input.getAttribute('multiple') !== null ? input.value.substring(input.value.lastIndexOf(',') + 1) : input.value;
          }; // Set the input value for dividing regular and mail types


          var setInputValue = function setInputValue(input, datalistSelectValue) {
            var lastSeperator; // In case of type=email and multiple attribute, we need to set up the resulting inputs value differently

            input.value = // Using .getAttribute here for IE9 purpose - elsewhere it wouldn't return the newer HTML5 values correctly
            input.getAttribute('type') === 'email' && input.getAttribute('multiple') !== null && (lastSeperator = input.value.lastIndexOf(',')) > -1 ? input.value.slice(0, lastSeperator) + ',' + datalistSelectValue : datalistSelectValue;
          }; // Binding the focus event - matching the input[list]s happens in the function afterwards


          dcmnt.addEventListener('focusin', changesInputList, true); // Break here for IE10+ & EDGE

          if (isGteIE10 || isEDGE) {
            return;
          } // Function for preparing and sorting the options/suggestions


          var prepOptions = function prepOptions(datalist, input) {
            if (typeof obs !== 'undefined') {
              obs.disconnect();
            }

            var // Creating the select if there's no instance so far (e.g. because of that it hasn't been handled or it has been dynamically inserted)
            datalistSelect = datalist.getElementsByClassName(classNamePolyfillingSelect)[0] || setUpPolyfillingSelect(input, datalist),
                inputValue = getInputValue(input),
                newSelectValues = dcmnt.createDocumentFragment(),
                disabledValues = dcmnt.createDocumentFragment(); // Create an array out of the options list

            Array.prototype.slice.call(datalist.querySelectorAll('option:not(:disabled)')) // ... sort all entries and
            .sort(function (a, b) {
              var aValue = a.value,
                  bValue = b.value; // Using the knowledge that the values are URLs to allow the user to omit the scheme part and perform intelligent matching on the domain name

              if (input.getAttribute('type') === 'url') {
                aValue = aValue.replace(/(^\w+:|^)\/\//, '');
                bValue = bValue.replace(/(^\w+:|^)\/\//, '');
              }

              return aValue.localeCompare(bValue);
            }).forEach(function (opt) {
              var optionValue = opt.value,
                  label = opt.getAttribute('label'),
                  text = opt.text; // Put this option into the fragment that is meant to get inserted into the select. Additionally according to the specs ...
              // TODO: This might get slightly changed/optimized in a future release

              if (isValidSuggestion(opt, inputValue)) {
                var textOptionPart = text.substr(0, optionValue.length + textValueSeperator.length),
                    optionPart = optionValue + textValueSeperator; // The innertext should be 'value seperator text' in case they are different

                if (text && !label && text !== optionValue && textOptionPart !== optionPart) {
                  opt.innerText = optionValue + textValueSeperator + text;
                } else if (!opt.text) {
                  // Manipulating the option inner text, that would get displayed
                  opt.innerText = label || optionValue;
                }

                newSelectValues.appendChild(opt);
              } else {
                // ... or put this option that isn't relevant to the users into the fragment that is supposed to get inserted outside of the select
                disabledValues.appendChild(opt);
              }
            }); // Input the options fragment into the datalists select

            datalistSelect.appendChild(newSelectValues);
            var datalistSelectOptionsLength = datalistSelect.options.length;
            datalistSelect.size = datalistSelectOptionsLength > 10 ? 10 : datalistSelectOptionsLength;
            datalistSelect.multiple = !touched && datalistSelectOptionsLength < 2; // Input the unused options as siblings next to the select - and differentiate in between the regular, and the IE9 fix syntax upfront

            (datalist.getElementsByClassName('ie9_fix')[0] || datalist).appendChild(disabledValues);

            if (typeof obs !== 'undefined') {
              obs.observe(datalist, {
                childList: true
              });
            }

            return datalistSelect.options;
          }; // Define function for setting up the polyfilling select


          var setUpPolyfillingSelect = function setUpPolyfillingSelect(input, datalist) {
            // Check for whether it's of one of the supported input types defined at the beginning
            // Using .getAttribute here for IE9 purpose - elsewhere it wouldn't return the newer HTML5 values correctly
            // and still check for an existing instance
            if (input.getAttribute('type') && supportedTypes.indexOf(input.getAttribute('type')) === -1 || datalist === null) {
              return;
            }

            var rects = input.getClientRects(),
                // Measurements
            inputStyles = window.getComputedStyle(input),
                datalistSelect = dcmnt.createElement('select'); // Setting a class for easier identifying that select afterwards

            datalistSelect.setAttribute('class', classNamePolyfillingSelect); // Set general styling related definitions

            datalistSelect.style.position = 'absolute'; // Initially hiding the datalist select

            toggleVisibility(false, datalistSelect); // The select itself shouldn't be a possible target for tabbing

            datalistSelect.setAttribute('tabindex', '-1'); // WAI ARIA attributes

            datalistSelect.setAttribute('aria-live', 'polite');
            datalistSelect.setAttribute('role', 'listbox');

            if (!touched) {
              datalistSelect.setAttribute('aria-multiselectable', 'false');
            } // The select should get positioned underneath the input field ...


            if (inputStyles.getPropertyValue('display') === 'block') {
              datalistSelect.style.marginTop = '-' + inputStyles.getPropertyValue('margin-bottom');
            } else {
              var direction = inputStyles.getPropertyValue('direction') === 'rtl' ? 'right' : 'left';
              datalistSelect.style.setProperty('margin-' + direction, '-' + (rects[0].width + parseFloat(inputStyles.getPropertyValue('margin-' + direction))) + 'px');
              datalistSelect.style.marginTop = parseInt(rects[0].height + (input.offsetTop - datalist.offsetTop), 10) + 'px';
            } // Set the polyfilling selects border-radius equally to the one by the polyfilled input


            datalistSelect.style.borderRadius = inputStyles.getPropertyValue('border-radius');
            datalistSelect.style.minWidth = rects[0].width + 'px';

            if (touched) {
              var messageElement = dcmnt.createElement('option'); // ... and it's first entry should contain the localized message to select an entry

              messageElement.innerText = datalist.title; // ... and disable this option, as it shouldn't get selected by the user

              messageElement.disabled = true; // ... and assign a dividable class to it

              messageElement.setAttribute('class', 'message'); // ... and finally insert it into the select

              datalistSelect.appendChild(messageElement);
            } // Add select to datalist element ...


            datalist.appendChild(datalistSelect); // ... and our upfollowing functions to the related event

            if (touched) {
              datalistSelect.addEventListener('change', changeDataListSelect);
            } else {
              datalistSelect.addEventListener('click', changeDataListSelect);
            }

            datalistSelect.addEventListener('blur', changeDataListSelect);
            datalistSelect.addEventListener('keydown', changeDataListSelect);
            datalistSelect.addEventListener('keypress', datalistSelectKeyPress);
            return datalistSelect;
          }; // Functions regarding changes to the datalist polyfilling created selects keypress


          var datalistSelectKeyPress = function datalistSelectKeyPress(event) {
            var datalistSelect = event.target,
                datalist = datalistSelect.parentNode,
                input = dcmnt.querySelector('input[list="' + datalist.id + '"]'); // Check for whether the events target was a select or whether the input doesn't exist

            if (datalistSelect.tagName.toLowerCase() !== 'select' || input === null) {
              return;
            } // Determine a relevant key - either printable characters (that would have a length of 1) or controlling like Backspace


            if (event.key && (event.key === 'Backspace' || event.key.length === 1)) {
              input.focus();

              if (event.key === 'Backspace') {
                input.value = input.value.substr(0, input.value.length - 1); // Dispatch the input event on the related input[list]

                dispatchInputEvent(input);
              } else {
                input.value += event.key;
              }

              prepOptions(datalist, input);
            }
          }; // Change, Click, Blur, Keydown


          var changeDataListSelect = function changeDataListSelect(event) {
            var datalistSelect = event.currentTarget,
                datalist = datalistSelect.parentNode,
                input = dcmnt.querySelector('input[list="' + datalist.id + '"]'); // Check for whether the events target was a select or whether the input doesn't exist

            if (datalistSelect.tagName.toLowerCase() !== 'select' || input === null) {
              return;
            }

            var eventType = event.type,
                // ENTER and ESC
            visible = eventType === 'keydown' && event.keyCode !== keyENTER && event.keyCode !== keyESC; // On change, click or after pressing ENTER or TAB key, input the selects value into the input on a change within the list

            if ((eventType === 'change' || eventType === 'click' || eventType === 'keydown' && (event.keyCode === keyENTER || event.key === 'Tab')) && datalistSelect.value.length > 0 && datalistSelect.value !== datalist.title) {
              setInputValue(input, datalistSelect.value); // Dispatch the input event on the related input[list]

              dispatchInputEvent(input); // Finally focusing the input, as other browser do this as well

              if (event.key !== 'Tab') {
                input.focus();
              } // #GH-51 / Prevent the form to be submitted on selecting a value via ENTER key within the select


              if (event.keyCode === keyENTER) {
                event.preventDefault();
              } // Set the visibility to false afterwards, as we're done here


              visible = false;
            } else if (eventType === 'keydown' && event.keyCode === keyESC) {
              // In case of the ESC key being pressed, we still want to focus the input[list]
              input.focus();
            } // Toggle the visibility of the datalist select according to previous checks


            toggleVisibility(visible, datalistSelect);
          }; // Create and dispatch the input event; divided for IE9 usage


          var dispatchInputEvent = function dispatchInputEvent(input) {
            var evt;

            if (typeof Event === 'function') {
              evt = new Event('input', {
                bubbles: true
              });
            } else {
              evt = dcmnt.createEvent('Event');
              evt.initEvent('input', true, false);
            }

            input.dispatchEvent(evt);
          }; // Toggle the visibility of the datalist select


          var toggleVisibility = function toggleVisibility(visible, datalistSelect) {
            if (visible) {
              datalistSelect.removeAttribute('hidden');
            } else {
              datalistSelect.setAttributeNode(dcmnt.createAttribute('hidden'));
            }

            datalistSelect.setAttribute('aria-hidden', (!visible).toString());
          }; // Emulate the two properties regarding the datalist and input elements
          // list property / https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement


          (function (constructor) {
            if (constructor && constructor.prototype && constructor.prototype.list === undefined) {
              Object.defineProperty(constructor.prototype, 'list', {
                get: function get() {
                  /*
                  According to the specs ...
                  "The list IDL attribute must return the current suggestions source element, if any, or null otherwise."
                  "If there is no list attribute, or if there is no element with that ID, or if the first element with that ID is not a datalist element, then there is no suggestions source element."
                  */
                  var element = dcmnt.getElementById(this.getAttribute('list'));
                  return _typeof2(this) === 'object' && this instanceof constructor && element && element.matches('datalist') ? element : null;
                }
              });
            }
          })(window.HTMLInputElement); // Options property / https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement


          (function (constructor) {
            if (constructor && constructor.prototype && constructor.prototype.options === undefined) {
              Object.defineProperty(constructor.prototype, 'options', {
                get: function get() {
                  return _typeof2(this) === 'object' && this instanceof constructor ? this.getElementsByTagName('option') : null;
                }
              });
            }
          })(window.HTMLElement);
        })();

        ;
        browserify_shim__define__module__export__(typeof datalistPolyfill != "undefined" ? datalistPolyfill : window.datalistPolyfill);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {}],
  "datalistPolyfill": [function (require, module, exports) {
    module.exports = require('cSREod');
  }, {}],
  "easyAutoComplete": [function (require, module, exports) {
    module.exports = require('P2RbX6');
  }, {}],
  "P2RbX6": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        ;
        global.jquery = require("jquery");
        /*
         * easy-autocomplete
         * jQuery plugin for autocompletion
         * 
         * @author Łukasz Pawełczak (http://github.com/pawelczak)
         * @version 1.3.5
         * Copyright  License: 
         */

        var EasyAutocomplete = function (a) {
          return a.Configuration = function (a) {
            function b() {
              if ("xml" === a.dataType && (a.getValue || (a.getValue = function (a) {
                return $(a).text();
              }), a.list || (a.list = {}), a.list.sort || (a.list.sort = {}), a.list.sort.method = function (b, c) {
                return b = a.getValue(b), c = a.getValue(c), c > b ? -1 : b > c ? 1 : 0;
              }, a.list.match || (a.list.match = {}), a.list.match.method = function (a, b) {
                return a.search(b) > -1;
              }), void 0 !== a.categories && a.categories instanceof Array) {
                for (var b = [], c = 0, d = a.categories.length; d > c; c += 1) {
                  var e = a.categories[c];

                  for (var f in h.categories[0]) {
                    void 0 === e[f] && (e[f] = h.categories[0][f]);
                  }

                  b.push(e);
                }

                a.categories = b;
              }
            }

            function c() {
              function b(a, c) {
                var d = a || {};

                for (var e in a) {
                  void 0 !== c[e] && null !== c[e] && ("object" != _typeof2(c[e]) || c[e] instanceof Array ? d[e] = c[e] : b(a[e], c[e]));
                }

                return void 0 !== c.data && null !== c.data && "object" == _typeof2(c.data) && (d.data = c.data), d;
              }

              h = b(h, a);
            }

            function d() {
              if ("list-required" !== h.url && "function" != typeof h.url) {
                var b = h.url;

                h.url = function () {
                  return b;
                };
              }

              if (void 0 !== h.ajaxSettings.url && "function" != typeof h.ajaxSettings.url) {
                var b = h.ajaxSettings.url;

                h.ajaxSettings.url = function () {
                  return b;
                };
              }

              if ("string" == typeof h.listLocation) {
                var c = h.listLocation;
                "XML" === h.dataType.toUpperCase() ? h.listLocation = function (a) {
                  return $(a).find(c);
                } : h.listLocation = function (a) {
                  return a[c];
                };
              }

              if ("string" == typeof h.getValue) {
                var d = h.getValue;

                h.getValue = function (a) {
                  return a[d];
                };
              }

              void 0 !== a.categories && (h.categoriesAssigned = !0);
            }

            function e() {
              void 0 !== a.ajaxSettings && "object" == _typeof2(a.ajaxSettings) ? h.ajaxSettings = a.ajaxSettings : h.ajaxSettings = {};
            }

            function f(a) {
              return void 0 !== h[a] && null !== h[a];
            }

            function g(a, b) {
              function c(b, d) {
                for (var e in d) {
                  void 0 === b[e] && a.log("Property '" + e + "' does not exist in EasyAutocomplete options API."), "object" == _typeof2(b[e]) && -1 === $.inArray(e, i) && c(b[e], d[e]);
                }
              }

              c(h, b);
            }

            var h = {
              data: "list-required",
              url: "list-required",
              dataType: "json",
              listLocation: function listLocation(a) {
                return a;
              },
              xmlElementName: "",
              getValue: function getValue(a) {
                return a;
              },
              autocompleteOff: !0,
              placeholder: !1,
              ajaxCallback: function ajaxCallback() {},
              matchResponseProperty: !1,
              list: {
                sort: {
                  enabled: !1,
                  method: function method(a, b) {
                    return a = h.getValue(a), b = h.getValue(b), b > a ? -1 : a > b ? 1 : 0;
                  }
                },
                maxNumberOfElements: 6,
                hideOnEmptyPhrase: !0,
                match: {
                  enabled: !1,
                  caseSensitive: !1,
                  method: function method(a, b) {
                    return a.search(b) > -1;
                  }
                },
                showAnimation: {
                  type: "normal",
                  time: 400,
                  callback: function callback() {}
                },
                hideAnimation: {
                  type: "normal",
                  time: 400,
                  callback: function callback() {}
                },
                onClickEvent: function onClickEvent() {},
                onSelectItemEvent: function onSelectItemEvent() {},
                onLoadEvent: function onLoadEvent() {},
                onChooseEvent: function onChooseEvent() {},
                onKeyEnterEvent: function onKeyEnterEvent() {},
                onMouseOverEvent: function onMouseOverEvent() {},
                onMouseOutEvent: function onMouseOutEvent() {},
                onShowListEvent: function onShowListEvent() {},
                onHideListEvent: function onHideListEvent() {}
              },
              highlightPhrase: !0,
              theme: "",
              cssClasses: "",
              minCharNumber: 0,
              requestDelay: 0,
              adjustWidth: !0,
              ajaxSettings: {},
              preparePostData: function preparePostData(a, b) {
                return a;
              },
              loggerEnabled: !0,
              template: "",
              categoriesAssigned: !1,
              categories: [{
                maxNumberOfElements: 4
              }]
            },
                i = ["ajaxSettings", "template"];
            this.get = function (a) {
              return h[a];
            }, this.equals = function (a, b) {
              return !(!f(a) || h[a] !== b);
            }, this.checkDataUrlProperties = function () {
              return "list-required" !== h.url || "list-required" !== h.data;
            }, this.checkRequiredProperties = function () {
              for (var a in h) {
                if ("required" === h[a]) return logger.error("Option " + a + " must be defined"), !1;
              }

              return !0;
            }, this.printPropertiesThatDoesntExist = function (a, b) {
              g(a, b);
            }, b(), c(), h.loggerEnabled === !0 && g(console, a), e(), d();
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.Logger = function () {
            this.error = function (a) {
              console.log("ERROR: " + a);
            }, this.warning = function (a) {
              console.log("WARNING: " + a);
            };
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.Constans = function () {
            var a = {
              CONTAINER_CLASS: "easy-autocomplete-container",
              CONTAINER_ID: "eac-container-",
              WRAPPER_CSS_CLASS: "easy-autocomplete"
            };

            this.getValue = function (b) {
              return a[b];
            };
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.ListBuilderService = function (a, b) {
            function c(b, c) {
              function d() {
                var d,
                    e = {};
                return void 0 !== b.xmlElementName && (e.xmlElementName = b.xmlElementName), void 0 !== b.listLocation ? d = b.listLocation : void 0 !== a.get("listLocation") && (d = a.get("listLocation")), void 0 !== d ? "string" == typeof d ? e.data = $(c).find(d) : "function" == typeof d && (e.data = d(c)) : e.data = c, e;
              }

              function e() {
                var a = {};
                return void 0 !== b.listLocation ? "string" == typeof b.listLocation ? a.data = c[b.listLocation] : "function" == typeof b.listLocation && (a.data = b.listLocation(c)) : a.data = c, a;
              }

              var f = {};
              if (f = "XML" === a.get("dataType").toUpperCase() ? d() : e(), void 0 !== b.header && (f.header = b.header), void 0 !== b.maxNumberOfElements && (f.maxNumberOfElements = b.maxNumberOfElements), void 0 !== a.get("list").maxNumberOfElements && (f.maxListSize = a.get("list").maxNumberOfElements), void 0 !== b.getValue) {
                if ("string" == typeof b.getValue) {
                  var g = b.getValue;

                  f.getValue = function (a) {
                    return a[g];
                  };
                } else "function" == typeof b.getValue && (f.getValue = b.getValue);
              } else f.getValue = a.get("getValue");
              return f;
            }

            function d(b) {
              var c = [];
              return void 0 === b.xmlElementName && (b.xmlElementName = a.get("xmlElementName")), $(b.data).find(b.xmlElementName).each(function () {
                c.push(this);
              }), c;
            }

            this.init = function (b) {
              var c = [],
                  d = {};
              return d.data = a.get("listLocation")(b), d.getValue = a.get("getValue"), d.maxListSize = a.get("list").maxNumberOfElements, c.push(d), c;
            }, this.updateCategories = function (b, d) {
              if (a.get("categoriesAssigned")) {
                b = [];

                for (var e = 0; e < a.get("categories").length; e += 1) {
                  var f = c(a.get("categories")[e], d);
                  b.push(f);
                }
              }

              return b;
            }, this.convertXml = function (b) {
              if ("XML" === a.get("dataType").toUpperCase()) for (var c = 0; c < b.length; c += 1) {
                b[c].data = d(b[c]);
              }
              return b;
            }, this.processData = function (c, d) {
              for (var e = 0, f = c.length; f > e; e += 1) {
                c[e].data = b(a, c[e], d);
              }

              return c;
            }, this.checkIfDataExists = function (a) {
              for (var b = 0, c = a.length; c > b; b += 1) {
                if (void 0 !== a[b].data && a[b].data instanceof Array && a[b].data.length > 0) return !0;
              }

              return !1;
            };
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.proccess = function (b, c, d) {
            function e(a, c) {
              var d = [],
                  e = "";
              if (b.get("list").match.enabled) for (var g = 0, h = a.length; h > g; g += 1) {
                e = b.get("getValue")(a[g]), f(e, c) && d.push(a[g]);
              } else d = a;
              return d;
            }

            function f(a, c) {
              return b.get("list").match.caseSensitive || ("string" == typeof a && (a = a.toLowerCase()), c = c.toLowerCase()), !!b.get("list").match.method(a, c);
            }

            function g(a) {
              return void 0 !== c.maxNumberOfElements && a.length > c.maxNumberOfElements && (a = a.slice(0, c.maxNumberOfElements)), a;
            }

            function h(a) {
              return b.get("list").sort.enabled && a.sort(b.get("list").sort.method), a;
            }

            a.proccess.match = f;
            var i = c.data,
                j = d;
            return i = e(i, j), i = g(i), i = h(i);
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.Template = function (a) {
            var b = {
              basic: {
                type: "basic",
                method: function method(a) {
                  return a;
                },
                cssClass: ""
              },
              description: {
                type: "description",
                fields: {
                  description: "description"
                },
                method: function method(a) {
                  return a + " - description";
                },
                cssClass: "eac-description"
              },
              iconLeft: {
                type: "iconLeft",
                fields: {
                  icon: ""
                },
                method: function method(a) {
                  return a;
                },
                cssClass: "eac-icon-left"
              },
              iconRight: {
                type: "iconRight",
                fields: {
                  iconSrc: ""
                },
                method: function method(a) {
                  return a;
                },
                cssClass: "eac-icon-right"
              },
              links: {
                type: "links",
                fields: {
                  link: ""
                },
                method: function method(a) {
                  return a;
                },
                cssClass: ""
              },
              custom: {
                type: "custom",
                method: function method() {},
                cssClass: ""
              }
            },
                c = function c(a) {
              var c,
                  d = a.fields;
              return "description" === a.type ? (c = b.description.method, "string" == typeof d.description ? c = function c(a, b) {
                return a + " - <span>" + b[d.description] + "</span>";
              } : "function" == typeof d.description && (c = function c(a, b) {
                return a + " - <span>" + d.description(b) + "</span>";
              }), c) : "iconRight" === a.type ? ("string" == typeof d.iconSrc ? c = function c(a, b) {
                return a + "<img class='eac-icon' src='" + b[d.iconSrc] + "' />";
              } : "function" == typeof d.iconSrc && (c = function c(a, b) {
                return a + "<img class='eac-icon' src='" + d.iconSrc(b) + "' />";
              }), c) : "iconLeft" === a.type ? ("string" == typeof d.iconSrc ? c = function c(a, b) {
                return "<img class='eac-icon' src='" + b[d.iconSrc] + "' />" + a;
              } : "function" == typeof d.iconSrc && (c = function c(a, b) {
                return "<img class='eac-icon' src='" + d.iconSrc(b) + "' />" + a;
              }), c) : "links" === a.type ? ("string" == typeof d.link ? c = function c(a, b) {
                return "<a href='" + b[d.link] + "' >" + a + "</a>";
              } : "function" == typeof d.link && (c = function c(a, b) {
                return "<a href='" + d.link(b) + "' >" + a + "</a>";
              }), c) : "custom" === a.type ? a.method : b.basic.method;
            },
                d = function d(a) {
              return a && a.type && a.type && b[a.type] ? c(a) : b.basic.method;
            },
                e = function e(a) {
              var c = function c() {
                return "";
              };

              return a && a.type && a.type && b[a.type] ? function () {
                var c = b[a.type].cssClass;
                return function () {
                  return c;
                };
              }() : c;
            };

            this.getTemplateClass = e(a), this.build = d(a);
          }, a;
        }(EasyAutocomplete || {}),
            EasyAutocomplete = function (a) {
          return a.main = function (b, c) {
            function d() {
              return 0 === t.length ? void p.error("Input field doesn't exist.") : o.checkDataUrlProperties() ? o.checkRequiredProperties() ? (e(), void g()) : void p.error("Will not work without mentioned properties.") : void p.error("One of options variables 'data' or 'url' must be defined.");
            }

            function e() {
              function a() {
                var a = $("<div>"),
                    c = n.getValue("WRAPPER_CSS_CLASS");
                o.get("theme") && "" !== o.get("theme") && (c += " eac-" + o.get("theme")), o.get("cssClasses") && "" !== o.get("cssClasses") && (c += " " + o.get("cssClasses")), "" !== q.getTemplateClass() && (c += " " + q.getTemplateClass()), a.addClass(c), t.wrap(a), o.get("adjustWidth") === !0 && b();
              }

              function b() {
                var a = t.outerWidth();
                t.parent().css("width", a);
              }

              function c() {
                t.unwrap();
              }

              function d() {
                var a = $("<div>").addClass(n.getValue("CONTAINER_CLASS"));
                a.attr("id", f()).prepend($("<ul>")), function () {
                  a.on("show.eac", function () {
                    switch (o.get("list").showAnimation.type) {
                      case "slide":
                        var b = o.get("list").showAnimation.time,
                            c = o.get("list").showAnimation.callback;
                        a.find("ul").slideDown(b, c);
                        break;

                      case "fade":
                        var b = o.get("list").showAnimation.time,
                            c = o.get("list").showAnimation.callback;
                        a.find("ul").fadeIn(b), c;
                        break;

                      default:
                        a.find("ul").show();
                    }

                    o.get("list").onShowListEvent();
                  }).on("hide.eac", function () {
                    switch (o.get("list").hideAnimation.type) {
                      case "slide":
                        var b = o.get("list").hideAnimation.time,
                            c = o.get("list").hideAnimation.callback;
                        a.find("ul").slideUp(b, c);
                        break;

                      case "fade":
                        var b = o.get("list").hideAnimation.time,
                            c = o.get("list").hideAnimation.callback;
                        a.find("ul").fadeOut(b, c);
                        break;

                      default:
                        a.find("ul").hide();
                    }

                    o.get("list").onHideListEvent();
                  }).on("selectElement.eac", function () {
                    a.find("ul li").removeClass("selected"), a.find("ul li").eq(w).addClass("selected"), o.get("list").onSelectItemEvent();
                  }).on("loadElements.eac", function (b, c, d) {
                    var e = "",
                        f = a.find("ul");
                    f.empty().detach(), v = [];

                    for (var h = 0, i = 0, k = c.length; k > i; i += 1) {
                      var l = c[i].data;

                      if (0 !== l.length) {
                        void 0 !== c[i].header && c[i].header.length > 0 && f.append("<div class='eac-category' >" + c[i].header + "</div>");

                        for (var m = 0, n = l.length; n > m && h < c[i].maxListSize; m += 1) {
                          e = $("<li><div class='eac-item'></div></li>"), function () {
                            var a = m,
                                b = h,
                                f = c[i].getValue(l[a]);
                            e.find(" > div").on("click", function () {
                              t.val(f).trigger("change"), w = b, j(b), o.get("list").onClickEvent(), o.get("list").onChooseEvent();
                            }).mouseover(function () {
                              w = b, j(b), o.get("list").onMouseOverEvent();
                            }).mouseout(function () {
                              o.get("list").onMouseOutEvent();
                            }).html(q.build(g(f, d), l[a]));
                          }(), f.append(e), v.push(l[m]), h += 1;
                        }
                      }
                    }

                    a.append(f), o.get("list").onLoadEvent();
                  });
                }(), t.after(a);
              }

              function e() {
                t.next("." + n.getValue("CONTAINER_CLASS")).remove();
              }

              function g(a, b) {
                return o.get("highlightPhrase") && "" !== b ? i(a, b) : a;
              }

              function h(a) {
                return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
              }

              function i(a, b) {
                var c = h(b);
                return (a + "").replace(new RegExp("(" + c + ")", "gi"), "<b>$1</b>");
              }

              t.parent().hasClass(n.getValue("WRAPPER_CSS_CLASS")) && (e(), c()), a(), d(), u = $("#" + f()), o.get("placeholder") && t.attr("placeholder", o.get("placeholder"));
            }

            function f() {
              var a = t.attr("id");
              return a = n.getValue("CONTAINER_ID") + a;
            }

            function g() {
              function a() {
                s("autocompleteOff", !0) && n(), b(), c(), d(), e(), f(), g();
              }

              function b() {
                t.focusout(function () {
                  var a,
                      b = t.val();
                  o.get("list").match.caseSensitive || (b = b.toLowerCase());

                  for (var c = 0, d = v.length; d > c; c += 1) {
                    if (a = o.get("getValue")(v[c]), o.get("list").match.caseSensitive || (a = a.toLowerCase()), a === b) return w = c, void j(w);
                  }
                });
              }

              function c() {
                t.off("keyup").keyup(function (a) {
                  function b(a) {
                    function b() {
                      var a = {},
                          b = o.get("ajaxSettings") || {};

                      for (var c in b) {
                        a[c] = b[c];
                      }

                      return a;
                    }

                    function c(a, b) {
                      return o.get("matchResponseProperty") !== !1 ? "string" == typeof o.get("matchResponseProperty") ? b[o.get("matchResponseProperty")] === a : "function" == typeof o.get("matchResponseProperty") ? o.get("matchResponseProperty")(b) === a : !0 : !0;
                    }

                    if (!(a.length < o.get("minCharNumber"))) {
                      if ("list-required" !== o.get("data")) {
                        var d = o.get("data"),
                            e = r.init(d);
                        e = r.updateCategories(e, d), e = r.processData(e, a), k(e, a), t.parent().find("li").length > 0 ? h() : i();
                      }

                      var f = b();
                      void 0 !== f.url && "" !== f.url || (f.url = o.get("url")), void 0 !== f.dataType && "" !== f.dataType || (f.dataType = o.get("dataType")), void 0 !== f.url && "list-required" !== f.url && (f.url = f.url(a), f.data = o.get("preparePostData")(f.data, a), $.ajax(f).done(function (b) {
                        var d = r.init(b);
                        d = r.updateCategories(d, b), d = r.convertXml(d), c(a, b) && (d = r.processData(d, a), k(d, a)), r.checkIfDataExists(d) && t.parent().find("li").length > 0 ? h() : i(), o.get("ajaxCallback")();
                      }).fail(function () {
                        p.warning("Fail to load response data");
                      }).always(function () {}));
                    }
                  }

                  switch (a.keyCode) {
                    case 27:
                      i(), l();
                      break;

                    case 38:
                      a.preventDefault(), v.length > 0 && w > 0 && (w -= 1, t.val(o.get("getValue")(v[w])), j(w));
                      break;

                    case 40:
                      a.preventDefault(), v.length > 0 && w < v.length - 1 && (w += 1, t.val(o.get("getValue")(v[w])), j(w));
                      break;

                    default:
                      if (a.keyCode > 40 || 8 === a.keyCode) {
                        var c = t.val();
                        o.get("list").hideOnEmptyPhrase !== !0 || 8 !== a.keyCode || "" !== c ? o.get("requestDelay") > 0 ? (void 0 !== m && clearTimeout(m), m = setTimeout(function () {
                          b(c);
                        }, o.get("requestDelay"))) : b(c) : i();
                      }

                  }
                });
              }

              function d() {
                t.on("keydown", function (a) {
                  a = a || window.event;
                  var b = a.keyCode;
                  return 38 === b ? (suppressKeypress = !0, !1) : void 0;
                }).keydown(function (a) {
                  13 === a.keyCode && w > -1 && (t.val(o.get("getValue")(v[w])), o.get("list").onKeyEnterEvent(), o.get("list").onChooseEvent(), w = -1, i(), a.preventDefault());
                });
              }

              function e() {
                t.off("keypress");
              }

              function f() {
                t.focus(function () {
                  "" !== t.val() && v.length > 0 && (w = -1, h());
                });
              }

              function g() {
                t.blur(function () {
                  setTimeout(function () {
                    w = -1, i();
                  }, 250);
                });
              }

              function n() {
                t.attr("autocomplete", "off");
              }

              a();
            }

            function h() {
              u.trigger("show.eac");
            }

            function i() {
              u.trigger("hide.eac");
            }

            function j(a) {
              u.trigger("selectElement.eac", a);
            }

            function k(a, b) {
              u.trigger("loadElements.eac", [a, b]);
            }

            function l() {
              t.trigger("blur");
            }

            var m,
                n = new a.Constans(),
                o = new a.Configuration(c),
                p = new a.Logger(),
                q = new a.Template(c.template),
                r = new a.ListBuilderService(o, a.proccess),
                s = o.equals,
                t = b,
                u = "",
                v = [],
                w = -1;
            a.consts = n, this.getConstants = function () {
              return n;
            }, this.getConfiguration = function () {
              return o;
            }, this.getContainer = function () {
              return u;
            }, this.getSelectedItemIndex = function () {
              return w;
            }, this.getItems = function () {
              return v;
            }, this.getItemData = function (a) {
              return v.length < a || void 0 === v[a] ? -1 : v[a];
            }, this.getSelectedItemData = function () {
              return this.getItemData(w);
            }, this.build = function () {
              e();
            }, this.init = function () {
              d();
            };
          }, a.eacHandles = [], a.getHandle = function (b) {
            return a.eacHandles[b];
          }, a.inputHasId = function (a) {
            return void 0 !== $(a).attr("id") && $(a).attr("id").length > 0;
          }, a.assignRandomId = function (b) {
            var c = "";

            do {
              c = "eac-" + Math.floor(1e4 * Math.random());
            } while (0 !== $("#" + c).length);

            elementId = a.consts.getValue("CONTAINER_ID") + c, $(b).attr("id", c);
          }, a.setHandle = function (b, c) {
            a.eacHandles[c] = b;
          }, a;
        }(EasyAutocomplete || {});

        !function (a) {
          a.fn.easyAutocomplete = function (b) {
            return this.each(function () {
              var c = a(this),
                  d = new EasyAutocomplete.main(c, b);
              EasyAutocomplete.inputHasId(c) || EasyAutocomplete.assignRandomId(c), d.init(), EasyAutocomplete.setHandle(d, c.attr("id"));
            });
          }, a.fn.getSelectedItemIndex = function () {
            var b = a(this).attr("id");
            return void 0 !== b ? EasyAutocomplete.getHandle(b).getSelectedItemIndex() : -1;
          }, a.fn.getItems = function () {
            var b = a(this).attr("id");
            return void 0 !== b ? EasyAutocomplete.getHandle(b).getItems() : -1;
          }, a.fn.getItemData = function (b) {
            var c = a(this).attr("id");
            return void 0 !== c && b > -1 ? EasyAutocomplete.getHandle(c).getItemData(b) : -1;
          }, a.fn.getSelectedItemData = function () {
            var b = a(this).attr("id");
            return void 0 !== b ? EasyAutocomplete.getHandle(b).getSelectedItemData() : -1;
          };
        }(jQuery);
        ;
        browserify_shim__define__module__export__(typeof easyAutoComplete != "undefined" ? easyAutoComplete : window.easyAutoComplete);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "jquery": "Z0jGCa"
  }],
  "jqueryValidator": [function (require, module, exports) {
    module.exports = require('5ZD6oW');
  }, {}],
  "5ZD6oW": [function (require, module, exports) {
    (function (global) {
      (function browserifyShim(module, exports, define, browserify_shim__define__module__export__) {
        ;
        global.jquery = require("jquery");
        /*!
         * jQuery Validation Plugin v1.19.0
         *
         * https://jqueryvalidation.org/
         *
         * Copyright (c) 2018 Jörn Zaefferer
         * Released under the MIT license
         */

        (function (factory) {
          if (typeof define === "function" && define.amd) {
            define(["jquery"], factory);
          } else if (_typeof2(module) === "object" && module.exports) {
            module.exports = factory(require("jquery"));
          } else {
            factory(jQuery);
          }
        })(function ($) {
          $.extend($.fn, {
            // https://jqueryvalidation.org/validate/
            validate: function validate(options) {
              // If nothing is selected, return nothing; can't chain anyway
              if (!this.length) {
                if (options && options.debug && window.console) {
                  console.warn("Nothing selected, can't validate, returning nothing.");
                }

                return;
              } // Check if a validator for this form was already created


              var validator = $.data(this[0], "validator");

              if (validator) {
                return validator;
              } // Add novalidate tag if HTML5.


              this.attr("novalidate", "novalidate");
              validator = new $.validator(options, this[0]);
              $.data(this[0], "validator", validator);

              if (validator.settings.onsubmit) {
                this.on("click.validate", ":submit", function (event) {
                  // Track the used submit button to properly handle scripted
                  // submits later.
                  validator.submitButton = event.currentTarget; // Allow suppressing validation by adding a cancel class to the submit button

                  if ($(this).hasClass("cancel")) {
                    validator.cancelSubmit = true;
                  } // Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button


                  if ($(this).attr("formnovalidate") !== undefined) {
                    validator.cancelSubmit = true;
                  }
                }); // Validate the form on submit

                this.on("submit.validate", function (event) {
                  if (validator.settings.debug) {
                    // Prevent form submit to be able to see console output
                    event.preventDefault();
                  }

                  function handle() {
                    var hidden, result; // Insert a hidden input as a replacement for the missing submit button
                    // The hidden input is inserted in two cases:
                    //   - A user defined a `submitHandler`
                    //   - There was a pending request due to `remote` method and `stopRequest()`
                    //     was called to submit the form in case it's valid

                    if (validator.submitButton && (validator.settings.submitHandler || validator.formSubmitted)) {
                      hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm);
                    }

                    if (validator.settings.submitHandler && !validator.settings.debug) {
                      result = validator.settings.submitHandler.call(validator, validator.currentForm, event);

                      if (hidden) {
                        // And clean up afterwards; thanks to no-block-scope, hidden can be referenced
                        hidden.remove();
                      }

                      if (result !== undefined) {
                        return result;
                      }

                      return false;
                    }

                    return true;
                  } // Prevent submit for invalid forms or custom submit handlers


                  if (validator.cancelSubmit) {
                    validator.cancelSubmit = false;
                    return handle();
                  }

                  if (validator.form()) {
                    if (validator.pendingRequest) {
                      validator.formSubmitted = true;
                      return false;
                    }

                    return handle();
                  } else {
                    validator.focusInvalid();
                    return false;
                  }
                });
              }

              return validator;
            },
            // https://jqueryvalidation.org/valid/
            valid: function valid() {
              var valid, validator, errorList;

              if ($(this[0]).is("form")) {
                valid = this.validate().form();
              } else {
                errorList = [];
                valid = true;
                validator = $(this[0].form).validate();
                this.each(function () {
                  valid = validator.element(this) && valid;

                  if (!valid) {
                    errorList = errorList.concat(validator.errorList);
                  }
                });
                validator.errorList = errorList;
              }

              return valid;
            },
            // https://jqueryvalidation.org/rules/
            rules: function rules(command, argument) {
              var element = this[0],
                  isContentEditable = typeof this.attr("contenteditable") !== "undefined" && this.attr("contenteditable") !== "false",
                  settings,
                  staticRules,
                  existingRules,
                  data,
                  param,
                  filtered; // If nothing is selected, return empty object; can't chain anyway

              if (element == null) {
                return;
              }

              if (!element.form && isContentEditable) {
                element.form = this.closest("form")[0];
                element.name = this.attr("name");
              }

              if (element.form == null) {
                return;
              }

              if (command) {
                settings = $.data(element.form, "validator").settings;
                staticRules = settings.rules;
                existingRules = $.validator.staticRules(element);

                switch (command) {
                  case "add":
                    $.extend(existingRules, $.validator.normalizeRule(argument)); // Remove messages from rules, but allow them to be set separately

                    delete existingRules.messages;
                    staticRules[element.name] = existingRules;

                    if (argument.messages) {
                      settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                    }

                    break;

                  case "remove":
                    if (!argument) {
                      delete staticRules[element.name];
                      return existingRules;
                    }

                    filtered = {};
                    $.each(argument.split(/\s/), function (index, method) {
                      filtered[method] = existingRules[method];
                      delete existingRules[method];
                    });
                    return filtered;
                }
              }

              data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element); // Make sure required is at front

              if (data.required) {
                param = data.required;
                delete data.required;
                data = $.extend({
                  required: param
                }, data);
              } // Make sure remote is at back


              if (data.remote) {
                param = data.remote;
                delete data.remote;
                data = $.extend(data, {
                  remote: param
                });
              }

              return data;
            }
          }); // Custom selectors

          $.extend($.expr.pseudos || $.expr[":"], {
            // '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support
            // https://jqueryvalidation.org/blank-selector/
            blank: function blank(a) {
              return !$.trim("" + $(a).val());
            },
            // https://jqueryvalidation.org/filled-selector/
            filled: function filled(a) {
              var val = $(a).val();
              return val !== null && !!$.trim("" + val);
            },
            // https://jqueryvalidation.org/unchecked-selector/
            unchecked: function unchecked(a) {
              return !$(a).prop("checked");
            }
          }); // Constructor for validator

          $.validator = function (options, form) {
            this.settings = $.extend(true, {}, $.validator.defaults, options);
            this.currentForm = form;
            this.init();
          }; // https://jqueryvalidation.org/jQuery.validator.format/


          $.validator.format = function (source, params) {
            if (arguments.length === 1) {
              return function () {
                var args = $.makeArray(arguments);
                args.unshift(source);
                return $.validator.format.apply(this, args);
              };
            }

            if (params === undefined) {
              return source;
            }

            if (arguments.length > 2 && params.constructor !== Array) {
              params = $.makeArray(arguments).slice(1);
            }

            if (params.constructor !== Array) {
              params = [params];
            }

            $.each(params, function (i, n) {
              source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {
                return n;
              });
            });
            return source;
          };

          $.extend($.validator, {
            defaults: {
              messages: {},
              groups: {},
              rules: {},
              errorClass: "error",
              pendingClass: "pending",
              validClass: "valid",
              errorElement: "label",
              focusCleanup: false,
              focusInvalid: true,
              errorContainer: $([]),
              errorLabelContainer: $([]),
              onsubmit: true,
              ignore: ":hidden",
              ignoreTitle: false,
              onfocusin: function onfocusin(element) {
                this.lastActive = element; // Hide error label and remove error class on focus if enabled

                if (this.settings.focusCleanup) {
                  if (this.settings.unhighlight) {
                    this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                  }

                  this.hideThese(this.errorsFor(element));
                }
              },
              onfocusout: function onfocusout(element) {
                if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                  this.element(element);
                }
              },
              onkeyup: function onkeyup(element, event) {
                // Avoid revalidate the field when pressing one of the following keys
                // Shift       => 16
                // Ctrl        => 17
                // Alt         => 18
                // Caps lock   => 20
                // End         => 35
                // Home        => 36
                // Left arrow  => 37
                // Up arrow    => 38
                // Right arrow => 39
                // Down arrow  => 40
                // Insert      => 45
                // Num lock    => 144
                // AltGr key   => 225
                var excludedKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

                if (event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1) {
                  return;
                } else if (element.name in this.submitted || element.name in this.invalid) {
                  this.element(element);
                }
              },
              onclick: function onclick(element) {
                // Click on selects, radiobuttons and checkboxes
                if (element.name in this.submitted) {
                  this.element(element); // Or option elements, check parent select in that case
                } else if (element.parentNode.name in this.submitted) {
                  this.element(element.parentNode);
                }
              },
              highlight: function highlight(element, errorClass, validClass) {
                if (element.type === "radio") {
                  this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                } else {
                  $(element).addClass(errorClass).removeClass(validClass);
                }
              },
              unhighlight: function unhighlight(element, errorClass, validClass) {
                if (element.type === "radio") {
                  this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                  $(element).removeClass(errorClass).addClass(validClass);
                }
              }
            },
            // https://jqueryvalidation.org/jQuery.validator.setDefaults/
            setDefaults: function setDefaults(settings) {
              $.extend($.validator.defaults, settings);
            },
            messages: {
              required: "This field is required.",
              remote: "Please fix this field.",
              email: "Please enter a valid email address.",
              url: "Please enter a valid URL.",
              date: "Please enter a valid date.",
              dateISO: "Please enter a valid date (ISO).",
              number: "Please enter a valid number.",
              digits: "Please enter only digits.",
              equalTo: "Please enter the same value again.",
              maxlength: $.validator.format("Please enter no more than {0} characters."),
              minlength: $.validator.format("Please enter at least {0} characters."),
              rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
              range: $.validator.format("Please enter a value between {0} and {1}."),
              max: $.validator.format("Please enter a value less than or equal to {0}."),
              min: $.validator.format("Please enter a value greater than or equal to {0}."),
              step: $.validator.format("Please enter a multiple of {0}.")
            },
            autoCreateRanges: false,
            prototype: {
              init: function init() {
                this.labelContainer = $(this.settings.errorLabelContainer);
                this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                this.submitted = {};
                this.valueCache = {};
                this.pendingRequest = 0;
                this.pending = {};
                this.invalid = {};
                this.reset();
                var currentForm = this.currentForm,
                    groups = this.groups = {},
                    rules;
                $.each(this.settings.groups, function (key, value) {
                  if (typeof value === "string") {
                    value = value.split(/\s/);
                  }

                  $.each(value, function (index, name) {
                    groups[name] = key;
                  });
                });
                rules = this.settings.rules;
                $.each(rules, function (key, value) {
                  rules[key] = $.validator.normalizeRule(value);
                });

                function delegate(event) {
                  var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false"; // Set form expando on contenteditable

                  if (!this.form && isContentEditable) {
                    this.form = $(this).closest("form")[0];
                    this.name = $(this).attr("name");
                  } // Ignore the element if it belongs to another form. This will happen mainly
                  // when setting the `form` attribute of an input to the id of another form.


                  if (currentForm !== this.form) {
                    return;
                  }

                  var validator = $.data(this.form, "validator"),
                      eventType = "on" + event.type.replace(/^validate/, ""),
                      settings = validator.settings;

                  if (settings[eventType] && !$(this).is(settings.ignore)) {
                    settings[eventType].call(validator, this, event);
                  }
                }

                $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " + "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " + "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " + "[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate) // Support: Chrome, oldIE
                // "select" is provided as event.target when clicking a option
                .on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);

                if (this.settings.invalidHandler) {
                  $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
                }
              },
              // https://jqueryvalidation.org/Validator.form/
              form: function form() {
                this.checkForm();
                $.extend(this.submitted, this.errorMap);
                this.invalid = $.extend({}, this.errorMap);

                if (!this.valid()) {
                  $(this.currentForm).triggerHandler("invalid-form", [this]);
                }

                this.showErrors();
                return this.valid();
              },
              checkForm: function checkForm() {
                this.prepareForm();

                for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {
                  this.check(elements[i]);
                }

                return this.valid();
              },
              // https://jqueryvalidation.org/Validator.element/
              element: function element(_element) {
                var cleanElement = this.clean(_element),
                    checkElement = this.validationTargetFor(cleanElement),
                    v = this,
                    result = true,
                    rs,
                    group;

                if (checkElement === undefined) {
                  delete this.invalid[cleanElement.name];
                } else {
                  this.prepareElement(checkElement);
                  this.currentElements = $(checkElement); // If this element is grouped, then validate all group elements already
                  // containing a value

                  group = this.groups[checkElement.name];

                  if (group) {
                    $.each(this.groups, function (name, testgroup) {
                      if (testgroup === group && name !== checkElement.name) {
                        cleanElement = v.validationTargetFor(v.clean(v.findByName(name)));

                        if (cleanElement && cleanElement.name in v.invalid) {
                          v.currentElements.push(cleanElement);
                          result = v.check(cleanElement) && result;
                        }
                      }
                    });
                  }

                  rs = this.check(checkElement) !== false;
                  result = result && rs;

                  if (rs) {
                    this.invalid[checkElement.name] = false;
                  } else {
                    this.invalid[checkElement.name] = true;
                  }

                  if (!this.numberOfInvalids()) {
                    // Hide error containers on last error
                    this.toHide = this.toHide.add(this.containers);
                  }

                  this.showErrors(); // Add aria-invalid status for screen readers

                  $(_element).attr("aria-invalid", !rs);
                }

                return result;
              },
              // https://jqueryvalidation.org/Validator.showErrors/
              showErrors: function showErrors(errors) {
                if (errors) {
                  var validator = this; // Add items to error list and map

                  $.extend(this.errorMap, errors);
                  this.errorList = $.map(this.errorMap, function (message, name) {
                    return {
                      message: message,
                      element: validator.findByName(name)[0]
                    };
                  }); // Remove items from success list

                  this.successList = $.grep(this.successList, function (element) {
                    return !(element.name in errors);
                  });
                }

                if (this.settings.showErrors) {
                  this.settings.showErrors.call(this, this.errorMap, this.errorList);
                } else {
                  this.defaultShowErrors();
                }
              },
              // https://jqueryvalidation.org/Validator.resetForm/
              resetForm: function resetForm() {
                if ($.fn.resetForm) {
                  $(this.currentForm).resetForm();
                }

                this.invalid = {};
                this.submitted = {};
                this.prepareForm();
                this.hideErrors();
                var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");
                this.resetElements(elements);
              },
              resetElements: function resetElements(elements) {
                var i;

                if (this.settings.unhighlight) {
                  for (i = 0; elements[i]; i++) {
                    this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, "");
                    this.findByName(elements[i].name).removeClass(this.settings.validClass);
                  }
                } else {
                  elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
                }
              },
              numberOfInvalids: function numberOfInvalids() {
                return this.objectLength(this.invalid);
              },
              objectLength: function objectLength(obj) {
                /* jshint unused: false */
                var count = 0,
                    i;

                for (i in obj) {
                  // This check allows counting elements with empty error
                  // message as invalid elements
                  if (obj[i] !== undefined && obj[i] !== null && obj[i] !== false) {
                    count++;
                  }
                }

                return count;
              },
              hideErrors: function hideErrors() {
                this.hideThese(this.toHide);
              },
              hideThese: function hideThese(errors) {
                errors.not(this.containers).text("");
                this.addWrapper(errors).hide();
              },
              valid: function valid() {
                return this.size() === 0;
              },
              size: function size() {
                return this.errorList.length;
              },
              focusInvalid: function focusInvalid() {
                if (this.settings.focusInvalid) {
                  try {
                    $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus() // Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
                    .trigger("focusin");
                  } catch (e) {// Ignore IE throwing errors when focusing hidden elements
                  }
                }
              },
              findLastActive: function findLastActive() {
                var lastActive = this.lastActive;
                return lastActive && $.grep(this.errorList, function (n) {
                  return n.element.name === lastActive.name;
                }).length === 1 && lastActive;
              },
              elements: function elements() {
                var validator = this,
                    rulesCache = {}; // Select all valid inputs inside the form (no submit or reset buttons)

                return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () {
                  var name = this.name || $(this).attr("name"); // For contenteditable

                  var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

                  if (!name && validator.settings.debug && window.console) {
                    console.error("%o has no name assigned", this);
                  } // Set form expando on contenteditable


                  if (isContentEditable) {
                    this.form = $(this).closest("form")[0];
                    this.name = name;
                  } // Ignore elements that belong to other/nested forms


                  if (this.form !== validator.currentForm) {
                    return false;
                  } // Select only the first element for each name, and only those with rules specified


                  if (name in rulesCache || !validator.objectLength($(this).rules())) {
                    return false;
                  }

                  rulesCache[name] = true;
                  return true;
                });
              },
              clean: function clean(selector) {
                return $(selector)[0];
              },
              errors: function errors() {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
              },
              resetInternals: function resetInternals() {
                this.successList = [];
                this.errorList = [];
                this.errorMap = {};
                this.toShow = $([]);
                this.toHide = $([]);
              },
              reset: function reset() {
                this.resetInternals();
                this.currentElements = $([]);
              },
              prepareForm: function prepareForm() {
                this.reset();
                this.toHide = this.errors().add(this.containers);
              },
              prepareElement: function prepareElement(element) {
                this.reset();
                this.toHide = this.errorsFor(element);
              },
              elementValue: function elementValue(element) {
                var $element = $(element),
                    type = element.type,
                    isContentEditable = typeof $element.attr("contenteditable") !== "undefined" && $element.attr("contenteditable") !== "false",
                    val,
                    idx;

                if (type === "radio" || type === "checkbox") {
                  return this.findByName(element.name).filter(":checked").val();
                } else if (type === "number" && typeof element.validity !== "undefined") {
                  return element.validity.badInput ? "NaN" : $element.val();
                }

                if (isContentEditable) {
                  val = $element.text();
                } else {
                  val = $element.val();
                }

                if (type === "file") {
                  // Modern browser (chrome & safari)
                  if (val.substr(0, 12) === "C:\\fakepath\\") {
                    return val.substr(12);
                  } // Legacy browsers
                  // Unix-based path


                  idx = val.lastIndexOf("/");

                  if (idx >= 0) {
                    return val.substr(idx + 1);
                  } // Windows-based path


                  idx = val.lastIndexOf("\\");

                  if (idx >= 0) {
                    return val.substr(idx + 1);
                  } // Just the file name


                  return val;
                }

                if (typeof val === "string") {
                  return val.replace(/\r/g, "");
                }

                return val;
              },
              check: function check(element) {
                element = this.validationTargetFor(this.clean(element));
                var rules = $(element).rules(),
                    rulesCount = $.map(rules, function (n, i) {
                  return i;
                }).length,
                    dependencyMismatch = false,
                    val = this.elementValue(element),
                    result,
                    method,
                    rule,
                    normalizer; // Prioritize the local normalizer defined for this element over the global one
                // if the former exists, otherwise user the global one in case it exists.

                if (typeof rules.normalizer === "function") {
                  normalizer = rules.normalizer;
                } else if (typeof this.settings.normalizer === "function") {
                  normalizer = this.settings.normalizer;
                } // If normalizer is defined, then call it to retreive the changed value instead
                // of using the real one.
                // Note that `this` in the normalizer is `element`.


                if (normalizer) {
                  val = normalizer.call(element, val); // Delete the normalizer from rules to avoid treating it as a pre-defined method.

                  delete rules.normalizer;
                }

                for (method in rules) {
                  rule = {
                    method: method,
                    parameters: rules[method]
                  };

                  try {
                    result = $.validator.methods[method].call(this, val, element, rule.parameters); // If a method indicates that the field is optional and therefore valid,
                    // don't mark it as valid when there are no other rules

                    if (result === "dependency-mismatch" && rulesCount === 1) {
                      dependencyMismatch = true;
                      continue;
                    }

                    dependencyMismatch = false;

                    if (result === "pending") {
                      this.toHide = this.toHide.not(this.errorsFor(element));
                      return;
                    }

                    if (!result) {
                      this.formatAndAdd(element, rule);
                      return false;
                    }
                  } catch (e) {
                    if (this.settings.debug && window.console) {
                      console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
                    }

                    if (e instanceof TypeError) {
                      e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
                    }

                    throw e;
                  }
                }

                if (dependencyMismatch) {
                  return;
                }

                if (this.objectLength(rules)) {
                  this.successList.push(element);
                }

                return true;
              },
              // Return the custom message for the given element and validation method
              // specified in the element's HTML5 data attribute
              // return the generic message if present and no method specific message is present
              customDataMessage: function customDataMessage(element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
              },
              // Return the custom message for the given element name and validation method
              customMessage: function customMessage(name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
              },
              // Return the first defined argument, allowing empty strings
              findDefined: function findDefined() {
                for (var i = 0; i < arguments.length; i++) {
                  if (arguments[i] !== undefined) {
                    return arguments[i];
                  }
                }

                return undefined;
              },
              // The second parameter 'rule' used to be a string, and extended to an object literal
              // of the following form:
              // rule = {
              //     method: "method name",
              //     parameters: "the given method parameters"
              // }
              //
              // The old behavior still supported, kept to maintain backward compatibility with
              // old code, and will be removed in the next major release.
              defaultMessage: function defaultMessage(element, rule) {
                if (typeof rule === "string") {
                  rule = {
                    method: rule
                  };
                }

                var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method), // 'title' is never undefined, so handle empty string as undefined
                !this.settings.ignoreTitle && element.title || undefined, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"),
                    theregex = /\$?\{(\d+)\}/g;

                if (typeof message === "function") {
                  message = message.call(this, rule.parameters, element);
                } else if (theregex.test(message)) {
                  message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
                }

                return message;
              },
              formatAndAdd: function formatAndAdd(element, rule) {
                var message = this.defaultMessage(element, rule);
                this.errorList.push({
                  message: message,
                  element: element,
                  method: rule.method
                });
                this.errorMap[element.name] = message;
                this.submitted[element.name] = message;
              },
              addWrapper: function addWrapper(toToggle) {
                if (this.settings.wrapper) {
                  toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                }

                return toToggle;
              },
              defaultShowErrors: function defaultShowErrors() {
                var i, elements, error;

                for (i = 0; this.errorList[i]; i++) {
                  error = this.errorList[i];

                  if (this.settings.highlight) {
                    this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                  }

                  this.showLabel(error.element, error.message);
                }

                if (this.errorList.length) {
                  this.toShow = this.toShow.add(this.containers);
                }

                if (this.settings.success) {
                  for (i = 0; this.successList[i]; i++) {
                    this.showLabel(this.successList[i]);
                  }
                }

                if (this.settings.unhighlight) {
                  for (i = 0, elements = this.validElements(); elements[i]; i++) {
                    this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                  }
                }

                this.toHide = this.toHide.not(this.toShow);
                this.hideErrors();
                this.addWrapper(this.toShow).show();
              },
              validElements: function validElements() {
                return this.currentElements.not(this.invalidElements());
              },
              invalidElements: function invalidElements() {
                return $(this.errorList).map(function () {
                  return this.element;
                });
              },
              showLabel: function showLabel(element, message) {
                var place,
                    group,
                    errorID,
                    v,
                    error = this.errorsFor(element),
                    elementID = this.idOrName(element),
                    describedBy = $(element).attr("aria-describedby");

                if (error.length) {
                  // Refresh error/success class
                  error.removeClass(this.settings.validClass).addClass(this.settings.errorClass); // Replace message on existing label

                  error.html(message);
                } else {
                  // Create error element
                  error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || ""); // Maintain reference to the element to be placed into the DOM

                  place = error;

                  if (this.settings.wrapper) {
                    // Make sure the element is visible, even in IE
                    // actually showing the wrapped element is handled elsewhere
                    place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                  }

                  if (this.labelContainer.length) {
                    this.labelContainer.append(place);
                  } else if (this.settings.errorPlacement) {
                    this.settings.errorPlacement.call(this, place, $(element));
                  } else {
                    place.insertAfter(element);
                  } // Link error back to the element


                  if (error.is("label")) {
                    // If the error is a label, then associate using 'for'
                    error.attr("for", elementID); // If the element is not a child of an associated label, then it's necessary
                    // to explicitly apply aria-describedby
                  } else if (error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length === 0) {
                    errorID = error.attr("id"); // Respect existing non-error aria-describedby

                    if (!describedBy) {
                      describedBy = errorID;
                    } else if (!describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b"))) {
                      // Add to end of list if not already present
                      describedBy += " " + errorID;
                    }

                    $(element).attr("aria-describedby", describedBy); // If this element is grouped, then assign to all elements in the same group

                    group = this.groups[element.name];

                    if (group) {
                      v = this;
                      $.each(v.groups, function (name, testgroup) {
                        if (testgroup === group) {
                          $("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
                        }
                      });
                    }
                  }
                }

                if (!message && this.settings.success) {
                  error.text("");

                  if (typeof this.settings.success === "string") {
                    error.addClass(this.settings.success);
                  } else {
                    this.settings.success(error, element);
                  }
                }

                this.toShow = this.toShow.add(error);
              },
              errorsFor: function errorsFor(element) {
                var name = this.escapeCssMeta(this.idOrName(element)),
                    describer = $(element).attr("aria-describedby"),
                    selector = "label[for='" + name + "'], label[for='" + name + "'] *"; // 'aria-describedby' should directly reference the error element

                if (describer) {
                  selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #");
                }

                return this.errors().filter(selector);
              },
              // See https://api.jquery.com/category/selectors/, for CSS
              // meta-characters that should be escaped in order to be used with JQuery
              // as a literal part of a name/id or any selector.
              escapeCssMeta: function escapeCssMeta(string) {
                return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
              },
              idOrName: function idOrName(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
              },
              validationTargetFor: function validationTargetFor(element) {
                // If radio/checkbox, validate first element in group instead
                if (this.checkable(element)) {
                  element = this.findByName(element.name);
                } // Always apply ignore filter


                return $(element).not(this.settings.ignore)[0];
              },
              checkable: function checkable(element) {
                return /radio|checkbox/i.test(element.type);
              },
              findByName: function findByName(name) {
                return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
              },
              getLength: function getLength(value, element) {
                switch (element.nodeName.toLowerCase()) {
                  case "select":
                    return $("option:selected", element).length;

                  case "input":
                    if (this.checkable(element)) {
                      return this.findByName(element.name).filter(":checked").length;
                    }

                }

                return value.length;
              },
              depend: function depend(param, element) {
                return this.dependTypes[_typeof2(param)] ? this.dependTypes[_typeof2(param)](param, element) : true;
              },
              dependTypes: {
                "boolean": function boolean(param) {
                  return param;
                },
                "string": function string(param, element) {
                  return !!$(param, element.form).length;
                },
                "function": function _function(param, element) {
                  return param(element);
                }
              },
              optional: function optional(element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
              },
              startRequest: function startRequest(element) {
                if (!this.pending[element.name]) {
                  this.pendingRequest++;
                  $(element).addClass(this.settings.pendingClass);
                  this.pending[element.name] = true;
                }
              },
              stopRequest: function stopRequest(element, valid) {
                this.pendingRequest--; // Sometimes synchronization fails, make sure pendingRequest is never < 0

                if (this.pendingRequest < 0) {
                  this.pendingRequest = 0;
                }

                delete this.pending[element.name];
                $(element).removeClass(this.settings.pendingClass);

                if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
                  $(this.currentForm).submit(); // Remove the hidden input that was used as a replacement for the
                  // missing submit button. The hidden input is added by `handle()`
                  // to ensure that the value of the used submit button is passed on
                  // for scripted submits triggered by this method

                  if (this.submitButton) {
                    $("input:hidden[name='" + this.submitButton.name + "']", this.currentForm).remove();
                  }

                  this.formSubmitted = false;
                } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
                  $(this.currentForm).triggerHandler("invalid-form", [this]);
                  this.formSubmitted = false;
                }
              },
              previousValue: function previousValue(element, method) {
                method = typeof method === "string" && method || "remote";
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                  old: null,
                  valid: true,
                  message: this.defaultMessage(element, {
                    method: method
                  })
                });
              },
              // Cleans up all forms and elements, removes validator-specific events
              destroy: function destroy() {
                this.resetForm();
                $(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur");
              }
            },
            classRuleSettings: {
              required: {
                required: true
              },
              email: {
                email: true
              },
              url: {
                url: true
              },
              date: {
                date: true
              },
              dateISO: {
                dateISO: true
              },
              number: {
                number: true
              },
              digits: {
                digits: true
              },
              creditcard: {
                creditcard: true
              }
            },
            addClassRules: function addClassRules(className, rules) {
              if (className.constructor === String) {
                this.classRuleSettings[className] = rules;
              } else {
                $.extend(this.classRuleSettings, className);
              }
            },
            classRules: function classRules(element) {
              var rules = {},
                  classes = $(element).attr("class");

              if (classes) {
                $.each(classes.split(" "), function () {
                  if (this in $.validator.classRuleSettings) {
                    $.extend(rules, $.validator.classRuleSettings[this]);
                  }
                });
              }

              return rules;
            },
            normalizeAttributeRule: function normalizeAttributeRule(rules, type, method, value) {
              // Convert the value to a number for number inputs, and for text for backwards compability
              // allows type="date" and others to be compared as strings
              if (/min|max|step/.test(method) && (type === null || /number|range|text/.test(type))) {
                value = Number(value); // Support Opera Mini, which returns NaN for undefined minlength

                if (isNaN(value)) {
                  value = undefined;
                }
              }

              if (value || value === 0) {
                rules[method] = value;
              } else if (type === method && type !== "range") {
                // Exception: the jquery validate 'range' method
                // does not test for the html5 'range' type
                rules[method] = true;
              }
            },
            attributeRules: function attributeRules(element) {
              var rules = {},
                  $element = $(element),
                  type = element.getAttribute("type"),
                  method,
                  value;

              for (method in $.validator.methods) {
                // Support for <input required> in both html5 and older browsers
                if (method === "required") {
                  value = element.getAttribute(method); // Some browsers return an empty string for the required attribute
                  // and non-HTML5 browsers might have required="" markup

                  if (value === "") {
                    value = true;
                  } // Force non-HTML5 browsers to return bool


                  value = !!value;
                } else {
                  value = $element.attr(method);
                }

                this.normalizeAttributeRule(rules, type, method, value);
              } // 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs


              if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                delete rules.maxlength;
              }

              return rules;
            },
            dataRules: function dataRules(element) {
              var rules = {},
                  $element = $(element),
                  type = element.getAttribute("type"),
                  method,
                  value;

              for (method in $.validator.methods) {
                value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()); // Cast empty attributes like `data-rule-required` to `true`

                if (value === "") {
                  value = true;
                }

                this.normalizeAttributeRule(rules, type, method, value);
              }

              return rules;
            },
            staticRules: function staticRules(element) {
              var rules = {},
                  validator = $.data(element.form, "validator");

              if (validator.settings.rules) {
                rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
              }

              return rules;
            },
            normalizeRules: function normalizeRules(rules, element) {
              // Handle dependency check
              $.each(rules, function (prop, val) {
                // Ignore rule when param is explicitly false, eg. required:false
                if (val === false) {
                  delete rules[prop];
                  return;
                }

                if (val.param || val.depends) {
                  var keepRule = true;

                  switch (_typeof2(val.depends)) {
                    case "string":
                      keepRule = !!$(val.depends, element.form).length;
                      break;

                    case "function":
                      keepRule = val.depends.call(element, element);
                      break;
                  }

                  if (keepRule) {
                    rules[prop] = val.param !== undefined ? val.param : true;
                  } else {
                    $.data(element.form, "validator").resetElements($(element));
                    delete rules[prop];
                  }
                }
              }); // Evaluate parameters

              $.each(rules, function (rule, parameter) {
                rules[rule] = $.isFunction(parameter) && rule !== "normalizer" ? parameter(element) : parameter;
              }); // Clean number parameters

              $.each(["minlength", "maxlength"], function () {
                if (rules[this]) {
                  rules[this] = Number(rules[this]);
                }
              });
              $.each(["rangelength", "range"], function () {
                var parts;

                if (rules[this]) {
                  if ($.isArray(rules[this])) {
                    rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
                  } else if (typeof rules[this] === "string") {
                    parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
                    rules[this] = [Number(parts[0]), Number(parts[1])];
                  }
                }
              });

              if ($.validator.autoCreateRanges) {
                // Auto-create ranges
                if (rules.min != null && rules.max != null) {
                  rules.range = [rules.min, rules.max];
                  delete rules.min;
                  delete rules.max;
                }

                if (rules.minlength != null && rules.maxlength != null) {
                  rules.rangelength = [rules.minlength, rules.maxlength];
                  delete rules.minlength;
                  delete rules.maxlength;
                }
              }

              return rules;
            },
            // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
            normalizeRule: function normalizeRule(data) {
              if (typeof data === "string") {
                var transformed = {};
                $.each(data.split(/\s/), function () {
                  transformed[this] = true;
                });
                data = transformed;
              }

              return data;
            },
            // https://jqueryvalidation.org/jQuery.validator.addMethod/
            addMethod: function addMethod(name, method, message) {
              $.validator.methods[name] = method;
              $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];

              if (method.length < 3) {
                $.validator.addClassRules(name, $.validator.normalizeRule(name));
              }
            },
            // https://jqueryvalidation.org/jQuery.validator.methods/
            methods: {
              // https://jqueryvalidation.org/required-method/
              required: function required(value, element, param) {
                // Check if dependency is met
                if (!this.depend(param, element)) {
                  return "dependency-mismatch";
                }

                if (element.nodeName.toLowerCase() === "select") {
                  // Could be an array for select-multiple or a string, both are fine this way
                  var val = $(element).val();
                  return val && val.length > 0;
                }

                if (this.checkable(element)) {
                  return this.getLength(value, element) > 0;
                }

                return value !== undefined && value !== null && value.length > 0;
              },
              // https://jqueryvalidation.org/email-method/
              email: function email(value, element) {
                // From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
                // Retrieved 2014-01-14
                // If you have a problem with this implementation, report a bug against the above spec
                // Or use custom methods to implement your own email validation
                return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
              },
              // https://jqueryvalidation.org/url-method/
              url: function url(value, element) {
                // Copyright (c) 2010-2013 Diego Perini, MIT licensed
                // https://gist.github.com/dperini/729294
                // see also https://mathiasbynens.be/demo/url-regex
                // modified to allow protocol-relative URLs
                return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
              },
              // https://jqueryvalidation.org/date-method/
              date: function () {
                var called = false;
                return function (value, element) {
                  if (!called) {
                    called = true;

                    if (this.settings.debug && window.console) {
                      console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\n" + "Please don't use it, since it relies on the Date constructor, which\n" + "behaves very differently across browsers and locales. Use `dateISO`\n" + "instead or one of the locale specific methods in `localizations/`\n" + "and `additional-methods.js`.");
                    }
                  }

                  return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
                };
              }(),
              // https://jqueryvalidation.org/dateISO-method/
              dateISO: function dateISO(value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
              },
              // https://jqueryvalidation.org/number-method/
              number: function number(value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
              },
              // https://jqueryvalidation.org/digits-method/
              digits: function digits(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
              },
              // https://jqueryvalidation.org/minlength-method/
              minlength: function minlength(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
              },
              // https://jqueryvalidation.org/maxlength-method/
              maxlength: function maxlength(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length <= param;
              },
              // https://jqueryvalidation.org/rangelength-method/
              rangelength: function rangelength(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param[0] && length <= param[1];
              },
              // https://jqueryvalidation.org/min-method/
              min: function min(value, element, param) {
                return this.optional(element) || value >= param;
              },
              // https://jqueryvalidation.org/max-method/
              max: function max(value, element, param) {
                return this.optional(element) || value <= param;
              },
              // https://jqueryvalidation.org/range-method/
              range: function range(value, element, param) {
                return this.optional(element) || value >= param[0] && value <= param[1];
              },
              // https://jqueryvalidation.org/step-method/
              step: function step(value, element, param) {
                var type = $(element).attr("type"),
                    errorMessage = "Step attribute on input type " + type + " is not supported.",
                    supportedTypes = ["text", "number", "range"],
                    re = new RegExp("\\b" + type + "\\b"),
                    notSupported = type && !re.test(supportedTypes.join()),
                    decimalPlaces = function decimalPlaces(num) {
                  var match = ("" + num).match(/(?:\.(\d+))?$/);

                  if (!match) {
                    return 0;
                  } // Number of digits right of decimal point.


                  return match[1] ? match[1].length : 0;
                },
                    toInt = function toInt(num) {
                  return Math.round(num * Math.pow(10, decimals));
                },
                    valid = true,
                    decimals; // Works only for text, number and range input types
                // TODO find a way to support input types date, datetime, datetime-local, month, time and week


                if (notSupported) {
                  throw new Error(errorMessage);
                }

                decimals = decimalPlaces(param); // Value can't have too many decimals

                if (decimalPlaces(value) > decimals || toInt(value) % toInt(param) !== 0) {
                  valid = false;
                }

                return this.optional(element) || valid;
              },
              // https://jqueryvalidation.org/equalTo-method/
              equalTo: function equalTo(value, element, param) {
                // Bind to the blur event of the target in order to revalidate whenever the target field is updated
                var target = $(param);

                if (this.settings.onfocusout && target.not(".validate-equalTo-blur").length) {
                  target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {
                    $(element).valid();
                  });
                }

                return value === target.val();
              },
              // https://jqueryvalidation.org/remote-method/
              remote: function remote(value, element, param, method) {
                if (this.optional(element)) {
                  return "dependency-mismatch";
                }

                method = typeof method === "string" && method || "remote";
                var previous = this.previousValue(element, method),
                    validator,
                    data,
                    optionDataString;

                if (!this.settings.messages[element.name]) {
                  this.settings.messages[element.name] = {};
                }

                previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];
                this.settings.messages[element.name][method] = previous.message;
                param = typeof param === "string" && {
                  url: param
                } || param;
                optionDataString = $.param($.extend({
                  data: value
                }, param.data));

                if (previous.old === optionDataString) {
                  return previous.valid;
                }

                previous.old = optionDataString;
                validator = this;
                this.startRequest(element);
                data = {};
                data[element.name] = value;
                $.ajax($.extend(true, {
                  mode: "abort",
                  port: "validate" + element.name,
                  dataType: "json",
                  data: data,
                  context: validator.currentForm,
                  success: function success(response) {
                    var valid = response === true || response === "true",
                        errors,
                        message,
                        submitted;
                    validator.settings.messages[element.name][method] = previous.originalMessage;

                    if (valid) {
                      submitted = validator.formSubmitted;
                      validator.resetInternals();
                      validator.toHide = validator.errorsFor(element);
                      validator.formSubmitted = submitted;
                      validator.successList.push(element);
                      validator.invalid[element.name] = false;
                      validator.showErrors();
                    } else {
                      errors = {};
                      message = response || validator.defaultMessage(element, {
                        method: method,
                        parameters: value
                      });
                      errors[element.name] = previous.message = message;
                      validator.invalid[element.name] = true;
                      validator.showErrors(errors);
                    }

                    previous.valid = valid;
                    validator.stopRequest(element, valid);
                  }
                }, param));
                return "pending";
              }
            }
          }); // Ajax mode: abort
          // usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
          // if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

          var pendingRequests = {},
              ajax; // Use a prefilter if available (1.5+)

          if ($.ajaxPrefilter) {
            $.ajaxPrefilter(function (settings, _, xhr) {
              var port = settings.port;

              if (settings.mode === "abort") {
                if (pendingRequests[port]) {
                  pendingRequests[port].abort();
                }

                pendingRequests[port] = xhr;
              }
            });
          } else {
            // Proxy ajax
            ajax = $.ajax;

            $.ajax = function (settings) {
              var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,
                  port = ("port" in settings ? settings : $.ajaxSettings).port;

              if (mode === "abort") {
                if (pendingRequests[port]) {
                  pendingRequests[port].abort();
                }

                pendingRequests[port] = ajax.apply(this, arguments);
                return pendingRequests[port];
              }

              return ajax.apply(this, arguments);
            };
          }

          return $;
        });

        ;
        browserify_shim__define__module__export__(typeof jqueryValidate != "undefined" ? jqueryValidate : window.jqueryValidate);
      }).call(global, undefined, undefined, undefined, function defineExport(ex) {
        module.exports = ex;
      });
    }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
  }, {
    "jquery": "Z0jGCa"
  }],
  464: [function (require, module, exports) {
    //! moment.js
    ;

    (function (global, factory) {
      _typeof2(exports) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
    })(this, function () {
      'use strict';

      var hookCallback;

      function hooks() {
        return hookCallback.apply(null, arguments);
      } // This is done to register the method called with moment()
      // without creating circular dependencies.


      function setHookCallback(callback) {
        hookCallback = callback;
      }

      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;

          for (k in obj) {
            if (obj.hasOwnProperty(k)) {
              return false;
            }
          }

          return true;
        }
      }

      function isUndefined(input) {
        return input === void 0;
      }

      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
        var res = [],
            i;

        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }

        return res;
      }

      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }

        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }

        return a;
      }

      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }

      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }

        return m._pf;
      }

      var some;

      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function some(fun) {
          var t = Object(this);
          var len = t.length >>> 0;

          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }

          return false;
        };
      }

      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }

        return m._isValid;
      }

      function createInvalid(flags) {
        var m = createUTC(NaN);

        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }

        return m;
      } // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.


      var momentProperties = hooks.momentProperties = [];

      function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }

        if (!isUndefined(from._i)) {
          to._i = from._i;
        }

        if (!isUndefined(from._f)) {
          to._f = from._f;
        }

        if (!isUndefined(from._l)) {
          to._l = from._l;
        }

        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }

        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }

        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }

        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }

        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }

        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];

            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }

        return to;
      }

      var updateInProgress = false; // Moment prototype object

      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);

        if (!this.isValid()) {
          this._d = new Date(NaN);
        } // Prevent infinite loop in case updateOffset creates new moment
        // objects.


        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }

      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }

      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }

      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }

        return value;
      } // compare two arrays, return the number of differences


      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;

        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }

        return diffs + lengthDiff;
      }

      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }

      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }

          if (firstTime) {
            var args = [];
            var arg;

            for (var i = 0; i < arguments.length; i++) {
              arg = '';

              if (_typeof2(arguments[i]) === 'object') {
                arg += '\n[' + i + '] ';

                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', ';
                }

                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }

              args.push(arg);
            }

            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }

          return fn.apply(this, arguments);
        }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }

        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function set(config) {
        var prop, i;

        for (i in config) {
          prop = config[i];

          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this['_' + i] = prop;
          }
        }

        this._config = config; // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.

        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
      }

      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;

        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }

        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }

        return res;
      }

      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }

      var keys;

      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function keys(obj) {
          var i,
              res = [];

          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }

          return res;
        };
      }

      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };

      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
          return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
        });
        return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
        return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);

            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }

        return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
        var units = [];

        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          });
        }

        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }

      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {}; // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }

      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;

        if (typeof callback === 'string') {
          func = function func() {
            return this[callback]();
          };
        }

        if (token) {
          formatTokenFunctions[token] = func;
        }

        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }

        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }

      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }

        return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }

        return function (mom) {
          var output = '',
              i;

          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }

          return output;
        };
      } // format date using native date object


      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;

        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }

        return format;
      }

      var match1 = /\d/; //       0 - 9

      var match2 = /\d\d/; //      00 - 99

      var match3 = /\d{3}/; //     000 - 999

      var match4 = /\d{4}/; //    0000 - 9999

      var match6 = /[+-]?\d{6}/; // -999999 - 999999

      var match1to2 = /\d\d?/; //       0 - 99

      var match3to4 = /\d\d\d\d?/; //     999 - 9999

      var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

      var match1to3 = /\d{1,3}/; //       0 - 999

      var match1to4 = /\d{1,4}/; //       0 - 9999

      var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

      var matchUnsigned = /\d+/; //       0 - inf

      var matchSigned = /[+-]?\d+/; //    -inf - inf

      var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months

      var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
      var regexes = {};

      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }

      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
      } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }

      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
        var i,
            func = callback;

        if (typeof token === 'string') {
          token = [token];
        }

        if (isNumber(callback)) {
          func = function func(input, array) {
            array[callback] = toInt(input);
          };
        }

        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
        }
      }

      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }

      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8; // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

      addUnitAlias('year', 'y'); // PRIORITIES

      addUnitPriority('year', 1); // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      }); // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      } // HOOKS


      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      }; // MOMENTS


      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
        return isLeapYear(this.year());
      }

      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }

      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      } // MOMENTS


      function stringGet(units) {
        units = normalizeUnits(units);

        if (isFunction(this[units])) {
          return this[units]();
        }

        return this;
      }

      function stringSet(units, value) {
        if (_typeof2(units) === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);

          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);

          if (isFunction(this[units])) {
            return this[units](value);
          }
        }

        return this;
      }

      function mod(n, x) {
        return (n % x + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function indexOf(o) {
          // I know
          var i;

          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }

          return -1;
        };
      }

      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }

        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      } // FORMATTING


      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      }); // ALIASES

      addUnitAlias('month', 'M'); // PRIORITY

      addUnitPriority('month', 8); // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      }); // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }

        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }

        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();

        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];

          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        } // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse


        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);

          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }

          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      } // MOMENTS


      function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
          // No op
          return mom;
        }

        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

            if (!isNumber(value)) {
              return mom;
            }
          }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

        return mom;
      }

      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }

      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;

      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }

          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }

      var defaultMonthsRegex = matchWord;

      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }

          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }

          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }

      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;

        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        } // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.


        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }

        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date; // the date constructor remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);

          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
      }

      function createUTCDate(y) {
        var date; // the Date.UTC function remaps years 0-99 to 1900-1999

        if (y < 100 && y >= 0) {
          var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));

          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
      } // start-of-first-week - start-of-year


      function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }

        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }

      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }

        return {
          week: resWeek,
          year: resYear
        };
      }

      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      } // FORMATTING


      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W'); // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5); // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      }); // HELPERS
      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 6th is the first week of the year.

      };

      function localeFirstDayOfWeek() {
        return this._week.dow;
      }

      function localeFirstDayOfYear() {
        return this._week.doy;
      } // MOMENTS


      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      } // FORMATTING


      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E'); // PRIORITY

      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11); // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });
      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      }); // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }

        if (!isNaN(input)) {
          return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);

        if (typeof input === 'number') {
          return input;
        }

        return null;
      }

      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }

        return isNaN(input) ? null : input;
      } // LOCALES


      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._weekdaysParse, llc);

            if (ii !== -1) {
              return ii;
            }

            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);

          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }

          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          } // test the regex


          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      } // MOMENTS


      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }

      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        } // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.


        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }

      var defaultWeekdaysRegex = matchWord;

      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }

          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }

      var defaultWeekdaysShortRegex = matchWord;

      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }

          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }

      var defaultWeekdaysMinRegex = matchWord;

      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }

          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }

          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }

      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.


        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      } // FORMATTING


      function hFormat() {
        return this.hours() % 12 || 12;
      }

      function kFormat() {
        return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }

      meridiem('a', true);
      meridiem('A', false); // ALIASES

      addUnitAlias('hour', 'h'); // PRIORITY

      addUnitPriority('hour', 13); // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      }); // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      } // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.


      var getSetHour = makeGetSet('Hours', true);
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      }; // internal storage for locale config files

      var locales = {};
      var localeFamilies = {};
      var globalLocale;

      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      } // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


      function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;

          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));

            if (locale) {
              return locale;
            }

            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }

            j--;
          }

          i++;
        }

        return globalLocale;
      }

      function loadLocale(name) {
        var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = require;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {}
        }

        return locales[name];
      } // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.


      function getSetGlobalLocale(key, values) {
        var data;

        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }

          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }

        return globalLocale._abbr;
      }

      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
              parentConfig = baseConfig;
          config.abbr = name;

          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);

              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }

                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config
                });
                return null;
              }
            }
          }

          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          } // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.


          getSetGlobalLocale(name);
          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }

      function updateLocale(name, config) {
        if (config != null) {
          var locale,
              tmpLocale,
              parentConfig = baseConfig; // MERGE

          tmpLocale = loadLocale(name);

          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }

          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale; // backwards compat for now: also set the locale

          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }

        return locales[name];
      } // returns locale data


      function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }

        if (!key) {
          return globalLocale;
        }

        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);

          if (locale) {
            return locale;
          }

          key = [key];
        }

        return chooseLocale(key);
      }

      function listLocales() {
        return keys(locales);
      }

      function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }

          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }

          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
        }

        return m;
      } // Pick the first defined of two or three arguments.


      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }

        if (b != null) {
          return b;
        }

        return c;
      }

      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());

        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }

        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      } // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]


      function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
          return;
        }

        currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        } //if the day of the year is set, figure out what it is


        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        } // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything


        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        } // Zero out whatever was not defaulted, including time


        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        } // Check for 24:00:00.000


        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.

        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
          config._a[HOUR] = 24;
        } // check for mismatching day of week


        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }

      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;

        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).

          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);

          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;

            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;

            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }

        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      } // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

      var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

      function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }

          if (dateFormat == null) {
            config._isValid = false;
            return;
          }

          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }

            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }

          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }

          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }

          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


      var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }

        return result;
      }

      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);

        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }

        return year;
      }

      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }

        return true;
      }

      var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10);
          var m = hm % 100,
              h = (hm - m) / 100;
          return h * 60 + m;
        }
      } // date and time from ref 2822 format


      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));

        if (match) {
          var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);

          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      } // date from iso format or fallback


      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }

        configFromISO(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        configFromRFC2822(config);

        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        } // Final attempt, use Input Fallback


        hooks.createFromInputFallback(config);
      }

      hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }); // constant that refers to the ISO standard

      hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


      hooks.RFC_2822 = function () {}; // date from string and format string


      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }

        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }

        config._a = [];
        getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));

          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));

            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }

            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          } // don't parse if it's not a known token


          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }

            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        } // add remaining unparsed input length to the string


        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        } // clear _12h flag if hour is <= 12


        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
          // nothing to do
          return hour;
        }

        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);

          if (isPm && hour < 12) {
            hour += 12;
          }

          if (!isPm && hour === 12) {
            hour = 0;
          }

          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      } // date from string and array of format strings


      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }

        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);

          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }

          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (!isValid(tempConfig)) {
            continue;
          } // if there is any input that was not parsed add a penalty for that format


          currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;

          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }

        extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
        if (config._d) {
          return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }

      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));

        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }

        return res;
      }

      function prepareConfig(config) {
        var input = config._i,
            format = config._f;
        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
          return createInvalid({
            nullInput: true
          });
        }

        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }

        if (!isValid(config)) {
          config._d = null;
        }

        return config;
      }

      function configFromInput(config) {
        var input = config._i;

        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined;
        } // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423


        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);

        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }); // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.

      function pickBy(fn, moments) {
        var res, i;

        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }

        if (!moments.length) {
          return createLocal();
        }

        res = moments[0];

        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }

        return res;
      } // TODO: Use [].sort instead?


      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }

      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }

      var now = function now() {
        return Date.now ? Date.now() : +new Date();
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
        for (var key in m) {
          if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }

        var unitHasDecimal = false;

        for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }

            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }

        return true;
      }

      function isValid$1() {
        return this._isValid;
      }

      function createInvalid$1() {
        return createDuration(NaN);
      }

      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately

        this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.

        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();

        this._bubble();
      }

      function isDuration(obj) {
        return obj instanceof Duration;
      }

      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      } // FORMATTING


      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';

          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }

          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }

      offset('Z', ':');
      offset('ZZ', ''); // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      }); // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']

      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
          return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      } // Return a moment from input, that is local/utc/zone equivalent to model.


      function cloneWithOffset(input, model) {
        var res, diff;

        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

          res._d.setTime(res._d.valueOf() + diff);

          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }

      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      } // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.


      hooks.updateOffset = function () {}; // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.


      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;

        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);

            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }

          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }

          this._offset = input;
          this._isUTC = true;

          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }

          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }

          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }

      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }

          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }

      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }

        return this;
      }

      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);

          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }

        return this;
      }

      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }

        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }

      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }

        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }

        return this._isDSTShifted;
      }

      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      } // ASP.NET json date format regex


      var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day

      var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input)) {
          duration = {};

          if (key) {
            duration[key] = input;
          } else {
            duration.milliseconds = input;
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

          };
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (_typeof2(duration) === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }

        return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

        return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }

      function momentsDifference(base, other) {
        var res;

        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          };
        }

        other = cloneWithOffset(other, base);

        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }

        return res;
      } // TODO: remove 'name' arg after deprecation is removed


      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp; //invert the arguments, but complain about it

          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp;
          }

          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
          // No op
          return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }

        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }

        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }

        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }

      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');

      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      }

      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone() {
        return new Moment(this);
      }

      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }

      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }

      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);

        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }

        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }

      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;

        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }

        units = normalizeUnits(units) || 'millisecond';

        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }

      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
          return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
          return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);

        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;

          case 'month':
            output = monthDiff(this, that);
            break;

          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;

          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000

          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60

          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60

          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst

          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst

          default:
            output = this - that;
        }

        return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

          adjust = (b - anchor) / (anchor2 - anchor);
        } //check for negative zero, return zero if negative zero


        return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }

        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;

        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }

        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
        }

        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */


      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }

        var func = 'moment';
        var zone = '';

        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }

        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }

        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      } // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.


      function locale(key) {
        var newLocaleData;

        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);

          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }

          return this;
        }
      }

      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });

      function localeData() {
        return this._locale;
      }

      var MS_PER_SECOND = 1000;
      var MS_PER_MINUTE = 60 * MS_PER_SECOND;
      var MS_PER_HOUR = 60 * MS_PER_MINUTE;
      var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }

      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }

      function startOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;

          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;

          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;

          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;

          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function endOf(units) {
        var time;
        units = normalizeUnits(units);

        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;

          case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;

          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;

          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;

          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;

          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;

          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;

          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;

          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }

        this._d.setTime(time);

        hooks.updateOffset(this, true);
        return this;
      }

      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
        return new Date(this.valueOf());
      }

      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }

      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
        return isValid(this);
      }

      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
        return getParsingFlags(this).overflow;
      }

      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      } // FORMATTING


      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1); // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      }); // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }

      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;

        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;

        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);

          if (week > weeksTarget) {
            week = weeksTarget;
          }

          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      } // FORMATTING


      addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

      addUnitAlias('quarter', 'Q'); // PRIORITY

      addUnitPriority('quarter', 7); // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      }); // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      } // FORMATTING


      addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

      addUnitAlias('date', 'D'); // PRIORITY

      addUnitPriority('date', 9); // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      }); // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

      addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

      addUnitPriority('dayOfYear', 4); // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      }); // HELPERS
      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      } // FORMATTING


      addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

      addUnitAlias('minute', 'm'); // PRIORITY

      addUnitPriority('minute', 14); // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE); // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

      addUnitAlias('second', 's'); // PRIORITY

      addUnitPriority('second', 15); // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND); // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      }); // ALIASES

      addUnitAlias('millisecond', 'ms'); // PRIORITY

      addUnitPriority('millisecond', 16); // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;

      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      } // MOMENTS


      var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

      function createUnix(input) {
        return createLocal(input * 1000);
      }

      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
        return string;
      }

      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }

        format = format || '';

        if (index != null) {
          return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];

        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }

        return out;
      } // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)


      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];

        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }

        return out;
      }

      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
          var b = number % 10,
              output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        }
      }); // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;

      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }

      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      } // supports only 2.0-style add(1, 's') or add(duration)


      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      } // supports only 2.0-style subtract(1, 's') or subtract(duration)


      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }

      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166

        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        } // The following code bubbles up values, see the tests for
        // examples of what that means.


        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24); // convert days to months

        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
      }

      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
      }

      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
      }

      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }

        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);

          switch (units) {
            case 'month':
              return months;

            case 'quarter':
              return months / 3;

            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));

          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;

            case 'day':
              return days + milliseconds / 864e5;

            case 'hour':
              return days * 24 + milliseconds / 36e5;

            case 'minute':
              return days * 1440 + milliseconds / 6e4;

            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here

            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;

            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      } // TODO: Use this.as('ms')?


      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }

        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }

      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asQuarters = makeAs('Q');
      var asYears = makeAs('y');

      function clone$1() {
        return createDuration(this);
      }

      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');

      function weeks() {
        return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11 // months to year

      }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      } // This function allows you to set the rounding function for relative time strings


      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }

        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }

        return false;
      } // This function allows you to set a threshold for relative time strings


      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }

        if (limit === undefined) {
          return thresholds[threshold];
        }

        thresholds[threshold] = limit;

        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }

        return true;
      }

      function humanize(withSuffix) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60; // 12 months -> 1 year

        years = absFloor(months / 12);
        months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
      }

      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang; // Side effect imports
      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf'); // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      }); // Side effect imports

      hooks.version = '2.24.0';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />

      };
      return hooks;
    });
  }, {}],
  465: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict'; // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    module.exports = function (qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1000;

      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr,
            vstr,
            k,
            v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
  }, {}],
  466: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    'use strict';

    var stringifyPrimitive = function stringifyPrimitive(v) {
      switch (_typeof2(v)) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    };

    module.exports = function (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';

      if (obj === null) {
        obj = undefined;
      }

      if (_typeof2(obj) === 'object') {
        return map(objectKeys(obj), function (k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

          if (isArray(obj[k])) {
            return obj[k].map(function (v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };

    function map(xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];

      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }

      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }

      return res;
    };
  }, {}],
  467: [function (require, module, exports) {
    'use strict';

    exports.decode = exports.parse = require('./decode');
    exports.encode = exports.stringify = require('./encode');
  }, {
    "./decode": 465,
    "./encode": 466
  }],
  468: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    var punycode = require('punycode');

    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;

    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    } // Reference: RFC 3986, RFC 1808, RFC 2396
    // define these here so at least they only have to be
    // compiled once on the first module load.


    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
        // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
        // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
        // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
        hostEndingChars = ['/', '?', '#'],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
        // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
        // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
        querystring = require('querystring');

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && isObject(url) && url instanceof Url) return url;
      var u = new Url();
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
      if (!isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + _typeof2(url));
      }

      var rest = url; // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"

      rest = rest.trim();
      var proto = protocolPattern.exec(rest);

      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      } // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.


      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';

        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;

        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.


        var auth, atSign;

        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        } // Now we have a portion which is definitely the auth.
        // Pull that off.


        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        } // the host is the remaining to the left of the first non-host char


        hostEnd = -1;

        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        } // if we still have not hit it, then the entire thing is a host.


        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd); // pull out port.

        this.parseHost(); // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.

        this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.

        var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);

          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;

            if (!part.match(hostnamePartPattern)) {
              var newpart = '';

              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              } // we test again with ASCII char only


              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);

                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }

                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }

                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a puny coded representation of "domain".
          // It only converts the part of the domain name that
          // has non ASCII characters. I.e. it dosent matter if
          // you call it with a domain that already is in ASCII.
          var domainArray = this.hostname.split('.');
          var newOut = [];

          for (var i = 0; i < domainArray.length; ++i) {
            var s = domainArray[i];
            newOut.push(s.match(/[^A-Za-z0-9_-]/) ? 'xn--' + punycode.encode(s) : s);
          }

          this.hostname = newOut.join('.');
        }

        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host; // strip [ and ] from the hostname
        // the host field still retains them, though

        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);

          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      } // now rest is set to the post-host stuff.
      // chop off any delim chars.


      if (!unsafeProtocol[lowerProto]) {
        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          var esc = encodeURIComponent(ae);

          if (esc === ae) {
            esc = escape(ae);
          }

          rest = rest.split(ae).join(esc);
        }
      } // chop off from the tail first.


      var hash = rest.indexOf('#');

      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }

      var qm = rest.indexOf('?');

      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);

        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }

        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }

      if (rest) this.pathname = rest;

      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = '/';
      } //to support http.request


      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      } // finally, reconstruct the href based on what has been validated.


      this.href = this.format();
      return this;
    }; // format a parsed object into a url string


    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }

    Url.prototype.format = function () {
      var auth = this.auth || '';

      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = this.protocol || '',
          pathname = this.pathname || '',
          hash = this.hash || '',
          host = false,
          query = '';

      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

        if (this.port) {
          host += ':' + this.port;
        }
      }

      if (this.query && isObject(this.query) && Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }

      var search = this.search || query && '?' + query || '';
      if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.

      if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;
      pathname = pathname.replace(/[?#]/g, function (match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');
      return protocol + host + pathname + search + hash;
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function (relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function (relative) {
      if (isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      Object.keys(this).forEach(function (k) {
        result[k] = this[k];
      }, this); // hash is always overridden, no matter what.
      // even href="" will remove it.

      result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

      if (relative.href === '') {
        result.href = result.format();
        return result;
      } // hrefs like //foo/bar always cut to the protocol.


      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        Object.keys(relative).forEach(function (k) {
          if (k !== 'protocol') result[k] = relative[k];
        }); //urlParse appends trailing / to urls like http://www.example.com

        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }

      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          Object.keys(relative).forEach(function (k) {
            result[k] = relative[k];
          });
          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;

        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');

          while (relPath.length && !(relative.host = relPath.shift())) {
            ;
          }

          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }

        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port; // to support http.request

        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }

        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
          isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
          mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
          removeAllDots = mustEndAbs,
          srcPath = result.pathname && result.pathname.split('/') || [],
          relPath = relative.pathname && relative.pathname.split('/') || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.

      if (psychotic) {
        result.hostname = '';
        result.port = null;

        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
        }

        result.host = '';

        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;

          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
          }

          relative.host = null;
        }

        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }

      if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === '' ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath; // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
          //this especialy happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        result.search = relative.search;
        result.query = relative.query; //to support http.request

        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        }

        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null; //to support http.request

        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }

        result.href = result.format();
        return result;
      } // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.


      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0

      var up = 0;

      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];

        if (last == '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      } // if the path is allowed to go above the root, restore leading ..s


      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
        //this especialy happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || result.host && srcPath.length;

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      } //to support request.http


      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
      }

      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function () {
      var host = this.host;
      var port = portPattern.exec(host);

      if (port) {
        port = port[0];

        if (port !== ':') {
          this.port = port.substr(1);
        }

        host = host.substr(0, host.length - port.length);
      }

      if (host) this.hostname = host;
    };

    function isString(arg) {
      return typeof arg === "string";
    }

    function isObject(arg) {
      return _typeof2(arg) === 'object' && arg !== null;
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }
  }, {
    "punycode": 65,
    "querystring": 467
  }]
}, {}, [26]);